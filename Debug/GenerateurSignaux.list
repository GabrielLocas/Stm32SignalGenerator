
GenerateurSignaux.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007dbc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  08007f50  08007f50  00017f50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008290  08008290  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008290  08008290  00018290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008298  08008298  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008298  08008298  00018298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800829c  0800829c  0001829c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080082a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          0000086c  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008e4  200008e4  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012ffd  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026f6  00000000  00000000  000330a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001188  00000000  00000000  000357a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001088  00000000  00000000  00036928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022d3a  00000000  00000000  000379b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014b7b  00000000  00000000  0005a6ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0d68  00000000  00000000  0006f265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013ffcd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000582c  00000000  00000000  00140020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  0014584c  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  00145870  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007f34 	.word	0x08007f34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08007f34 	.word	0x08007f34

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b974 	b.w	8000eac <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9d08      	ldr	r5, [sp, #32]
 8000be2:	4604      	mov	r4, r0
 8000be4:	468e      	mov	lr, r1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d14d      	bne.n	8000c86 <__udivmoddi4+0xaa>
 8000bea:	428a      	cmp	r2, r1
 8000bec:	4694      	mov	ip, r2
 8000bee:	d969      	bls.n	8000cc4 <__udivmoddi4+0xe8>
 8000bf0:	fab2 f282 	clz	r2, r2
 8000bf4:	b152      	cbz	r2, 8000c0c <__udivmoddi4+0x30>
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	f1c2 0120 	rsb	r1, r2, #32
 8000bfe:	fa20 f101 	lsr.w	r1, r0, r1
 8000c02:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c06:	ea41 0e03 	orr.w	lr, r1, r3
 8000c0a:	4094      	lsls	r4, r2
 8000c0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c10:	0c21      	lsrs	r1, r4, #16
 8000c12:	fbbe f6f8 	udiv	r6, lr, r8
 8000c16:	fa1f f78c 	uxth.w	r7, ip
 8000c1a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c22:	fb06 f107 	mul.w	r1, r6, r7
 8000c26:	4299      	cmp	r1, r3
 8000c28:	d90a      	bls.n	8000c40 <__udivmoddi4+0x64>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c32:	f080 811f 	bcs.w	8000e74 <__udivmoddi4+0x298>
 8000c36:	4299      	cmp	r1, r3
 8000c38:	f240 811c 	bls.w	8000e74 <__udivmoddi4+0x298>
 8000c3c:	3e02      	subs	r6, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1a5b      	subs	r3, r3, r1
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c48:	fb08 3310 	mls	r3, r8, r0, r3
 8000c4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c50:	fb00 f707 	mul.w	r7, r0, r7
 8000c54:	42a7      	cmp	r7, r4
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x92>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c60:	f080 810a 	bcs.w	8000e78 <__udivmoddi4+0x29c>
 8000c64:	42a7      	cmp	r7, r4
 8000c66:	f240 8107 	bls.w	8000e78 <__udivmoddi4+0x29c>
 8000c6a:	4464      	add	r4, ip
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c72:	1be4      	subs	r4, r4, r7
 8000c74:	2600      	movs	r6, #0
 8000c76:	b11d      	cbz	r5, 8000c80 <__udivmoddi4+0xa4>
 8000c78:	40d4      	lsrs	r4, r2
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c80:	4631      	mov	r1, r6
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d909      	bls.n	8000c9e <__udivmoddi4+0xc2>
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	f000 80ef 	beq.w	8000e6e <__udivmoddi4+0x292>
 8000c90:	2600      	movs	r6, #0
 8000c92:	e9c5 0100 	strd	r0, r1, [r5]
 8000c96:	4630      	mov	r0, r6
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	fab3 f683 	clz	r6, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d14a      	bne.n	8000d3c <__udivmoddi4+0x160>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xd4>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 80f9 	bhi.w	8000ea2 <__udivmoddi4+0x2c6>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	469e      	mov	lr, r3
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e0      	beq.n	8000c80 <__udivmoddi4+0xa4>
 8000cbe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cc2:	e7dd      	b.n	8000c80 <__udivmoddi4+0xa4>
 8000cc4:	b902      	cbnz	r2, 8000cc8 <__udivmoddi4+0xec>
 8000cc6:	deff      	udf	#255	; 0xff
 8000cc8:	fab2 f282 	clz	r2, r2
 8000ccc:	2a00      	cmp	r2, #0
 8000cce:	f040 8092 	bne.w	8000df6 <__udivmoddi4+0x21a>
 8000cd2:	eba1 010c 	sub.w	r1, r1, ip
 8000cd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cda:	fa1f fe8c 	uxth.w	lr, ip
 8000cde:	2601      	movs	r6, #1
 8000ce0:	0c20      	lsrs	r0, r4, #16
 8000ce2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cee:	fb0e f003 	mul.w	r0, lr, r3
 8000cf2:	4288      	cmp	r0, r1
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x12c>
 8000cf6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cfa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x12a>
 8000d00:	4288      	cmp	r0, r1
 8000d02:	f200 80cb 	bhi.w	8000e9c <__udivmoddi4+0x2c0>
 8000d06:	4643      	mov	r3, r8
 8000d08:	1a09      	subs	r1, r1, r0
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d10:	fb07 1110 	mls	r1, r7, r0, r1
 8000d14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d18:	fb0e fe00 	mul.w	lr, lr, r0
 8000d1c:	45a6      	cmp	lr, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x156>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d28:	d202      	bcs.n	8000d30 <__udivmoddi4+0x154>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f200 80bb 	bhi.w	8000ea6 <__udivmoddi4+0x2ca>
 8000d30:	4608      	mov	r0, r1
 8000d32:	eba4 040e 	sub.w	r4, r4, lr
 8000d36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d3a:	e79c      	b.n	8000c76 <__udivmoddi4+0x9a>
 8000d3c:	f1c6 0720 	rsb	r7, r6, #32
 8000d40:	40b3      	lsls	r3, r6
 8000d42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d52:	431c      	orrs	r4, r3
 8000d54:	40f9      	lsrs	r1, r7
 8000d56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d62:	0c20      	lsrs	r0, r4, #16
 8000d64:	fa1f fe8c 	uxth.w	lr, ip
 8000d68:	fb09 1118 	mls	r1, r9, r8, r1
 8000d6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d70:	fb08 f00e 	mul.w	r0, r8, lr
 8000d74:	4288      	cmp	r0, r1
 8000d76:	fa02 f206 	lsl.w	r2, r2, r6
 8000d7a:	d90b      	bls.n	8000d94 <__udivmoddi4+0x1b8>
 8000d7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d84:	f080 8088 	bcs.w	8000e98 <__udivmoddi4+0x2bc>
 8000d88:	4288      	cmp	r0, r1
 8000d8a:	f240 8085 	bls.w	8000e98 <__udivmoddi4+0x2bc>
 8000d8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d92:	4461      	add	r1, ip
 8000d94:	1a09      	subs	r1, r1, r0
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000da0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	458e      	cmp	lr, r1
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x1e2>
 8000dac:	eb1c 0101 	adds.w	r1, ip, r1
 8000db0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db4:	d26c      	bcs.n	8000e90 <__udivmoddi4+0x2b4>
 8000db6:	458e      	cmp	lr, r1
 8000db8:	d96a      	bls.n	8000e90 <__udivmoddi4+0x2b4>
 8000dba:	3802      	subs	r0, #2
 8000dbc:	4461      	add	r1, ip
 8000dbe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dc2:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc6:	eba1 010e 	sub.w	r1, r1, lr
 8000dca:	42a1      	cmp	r1, r4
 8000dcc:	46c8      	mov	r8, r9
 8000dce:	46a6      	mov	lr, r4
 8000dd0:	d356      	bcc.n	8000e80 <__udivmoddi4+0x2a4>
 8000dd2:	d053      	beq.n	8000e7c <__udivmoddi4+0x2a0>
 8000dd4:	b15d      	cbz	r5, 8000dee <__udivmoddi4+0x212>
 8000dd6:	ebb3 0208 	subs.w	r2, r3, r8
 8000dda:	eb61 010e 	sbc.w	r1, r1, lr
 8000dde:	fa01 f707 	lsl.w	r7, r1, r7
 8000de2:	fa22 f306 	lsr.w	r3, r2, r6
 8000de6:	40f1      	lsrs	r1, r6
 8000de8:	431f      	orrs	r7, r3
 8000dea:	e9c5 7100 	strd	r7, r1, [r5]
 8000dee:	2600      	movs	r6, #0
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	f1c2 0320 	rsb	r3, r2, #32
 8000dfa:	40d8      	lsrs	r0, r3
 8000dfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e00:	fa21 f303 	lsr.w	r3, r1, r3
 8000e04:	4091      	lsls	r1, r2
 8000e06:	4301      	orrs	r1, r0
 8000e08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e0c:	fa1f fe8c 	uxth.w	lr, ip
 8000e10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e14:	fb07 3610 	mls	r6, r7, r0, r3
 8000e18:	0c0b      	lsrs	r3, r1, #16
 8000e1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e22:	429e      	cmp	r6, r3
 8000e24:	fa04 f402 	lsl.w	r4, r4, r2
 8000e28:	d908      	bls.n	8000e3c <__udivmoddi4+0x260>
 8000e2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e32:	d22f      	bcs.n	8000e94 <__udivmoddi4+0x2b8>
 8000e34:	429e      	cmp	r6, r3
 8000e36:	d92d      	bls.n	8000e94 <__udivmoddi4+0x2b8>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1b9b      	subs	r3, r3, r6
 8000e3e:	b289      	uxth	r1, r1
 8000e40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e44:	fb07 3316 	mls	r3, r7, r6, r3
 8000e48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e50:	428b      	cmp	r3, r1
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x28a>
 8000e54:	eb1c 0101 	adds.w	r1, ip, r1
 8000e58:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e5c:	d216      	bcs.n	8000e8c <__udivmoddi4+0x2b0>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d914      	bls.n	8000e8c <__udivmoddi4+0x2b0>
 8000e62:	3e02      	subs	r6, #2
 8000e64:	4461      	add	r1, ip
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e6c:	e738      	b.n	8000ce0 <__udivmoddi4+0x104>
 8000e6e:	462e      	mov	r6, r5
 8000e70:	4628      	mov	r0, r5
 8000e72:	e705      	b.n	8000c80 <__udivmoddi4+0xa4>
 8000e74:	4606      	mov	r6, r0
 8000e76:	e6e3      	b.n	8000c40 <__udivmoddi4+0x64>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6f8      	b.n	8000c6e <__udivmoddi4+0x92>
 8000e7c:	454b      	cmp	r3, r9
 8000e7e:	d2a9      	bcs.n	8000dd4 <__udivmoddi4+0x1f8>
 8000e80:	ebb9 0802 	subs.w	r8, r9, r2
 8000e84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e88:	3801      	subs	r0, #1
 8000e8a:	e7a3      	b.n	8000dd4 <__udivmoddi4+0x1f8>
 8000e8c:	4646      	mov	r6, r8
 8000e8e:	e7ea      	b.n	8000e66 <__udivmoddi4+0x28a>
 8000e90:	4620      	mov	r0, r4
 8000e92:	e794      	b.n	8000dbe <__udivmoddi4+0x1e2>
 8000e94:	4640      	mov	r0, r8
 8000e96:	e7d1      	b.n	8000e3c <__udivmoddi4+0x260>
 8000e98:	46d0      	mov	r8, sl
 8000e9a:	e77b      	b.n	8000d94 <__udivmoddi4+0x1b8>
 8000e9c:	3b02      	subs	r3, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	e732      	b.n	8000d08 <__udivmoddi4+0x12c>
 8000ea2:	4630      	mov	r0, r6
 8000ea4:	e709      	b.n	8000cba <__udivmoddi4+0xde>
 8000ea6:	4464      	add	r4, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e742      	b.n	8000d32 <__udivmoddi4+0x156>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Callback for UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT (&huart2, Rx_data, PACKET_SIZE);
 8000eb8:	2208      	movs	r2, #8
 8000eba:	4904      	ldr	r1, [pc, #16]	; (8000ecc <HAL_UART_RxCpltCallback+0x1c>)
 8000ebc:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <HAL_UART_RxCpltCallback+0x20>)
 8000ebe:	f003 fff8 	bl	8004eb2 <HAL_UART_Receive_IT>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000280 	.word	0x20000280
 8000ed0:	20000234 	.word	0x20000234

08000ed4 <HAL_GPIO_EXTI_Callback>:

//Callback for external interruption
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af02      	add	r7, sp, #8
 8000eda:	4603      	mov	r3, r0
 8000edc:	80fb      	strh	r3, [r7, #6]
	// Turn off timer for DAC
	HAL_TIM_Base_Stop(&htim2);
 8000ede:	483e      	ldr	r0, [pc, #248]	; (8000fd8 <HAL_GPIO_EXTI_Callback+0x104>)
 8000ee0:	f003 f93c 	bl	800415c <HAL_TIM_Base_Stop>

	// Choose wave form for sound
    if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1)){
 8000ee4:	2102      	movs	r1, #2
 8000ee6:	483d      	ldr	r0, [pc, #244]	; (8000fdc <HAL_GPIO_EXTI_Callback+0x108>)
 8000ee8:	f002 fa80 	bl	80033ec <HAL_GPIO_ReadPin>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d066      	beq.n	8000fc0 <HAL_GPIO_EXTI_Callback+0xec>
        switch (wave_type){
 8000ef2:	4b3b      	ldr	r3, [pc, #236]	; (8000fe0 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	d82e      	bhi.n	8000f58 <HAL_GPIO_EXTI_Callback+0x84>
 8000efa:	a201      	add	r2, pc, #4	; (adr r2, 8000f00 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f00:	08000f11 	.word	0x08000f11
 8000f04:	08000f23 	.word	0x08000f23
 8000f08:	08000f35 	.word	0x08000f35
 8000f0c:	08000f47 	.word	0x08000f47
            case 0:
                HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, (uint32_t*)sine_val, N_SAMPLES, DAC_ALIGN_12B_R);
 8000f10:	2300      	movs	r3, #0
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	2364      	movs	r3, #100	; 0x64
 8000f16:	4a33      	ldr	r2, [pc, #204]	; (8000fe4 <HAL_GPIO_EXTI_Callback+0x110>)
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4833      	ldr	r0, [pc, #204]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x114>)
 8000f1c:	f001 faba 	bl	8002494 <HAL_DAC_Start_DMA>
                break;
 8000f20:	e01b      	b.n	8000f5a <HAL_GPIO_EXTI_Callback+0x86>
            case 1:
                HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, (uint32_t*)tri_val, N_SAMPLES, DAC_ALIGN_12B_R);
 8000f22:	2300      	movs	r3, #0
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2364      	movs	r3, #100	; 0x64
 8000f28:	4a30      	ldr	r2, [pc, #192]	; (8000fec <HAL_GPIO_EXTI_Callback+0x118>)
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	482e      	ldr	r0, [pc, #184]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x114>)
 8000f2e:	f001 fab1 	bl	8002494 <HAL_DAC_Start_DMA>
                break;
 8000f32:	e012      	b.n	8000f5a <HAL_GPIO_EXTI_Callback+0x86>
            case 2:
                HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, (uint32_t*)square_val, N_SAMPLES, DAC_ALIGN_12B_R);
 8000f34:	2300      	movs	r3, #0
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	2364      	movs	r3, #100	; 0x64
 8000f3a:	4a2d      	ldr	r2, [pc, #180]	; (8000ff0 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	482a      	ldr	r0, [pc, #168]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x114>)
 8000f40:	f001 faa8 	bl	8002494 <HAL_DAC_Start_DMA>
                break;
 8000f44:	e009      	b.n	8000f5a <HAL_GPIO_EXTI_Callback+0x86>
            case 3:
                HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, (uint32_t*)saw_val, N_SAMPLES, DAC_ALIGN_12B_R);
 8000f46:	2300      	movs	r3, #0
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	2364      	movs	r3, #100	; 0x64
 8000f4c:	4a29      	ldr	r2, [pc, #164]	; (8000ff4 <HAL_GPIO_EXTI_Callback+0x120>)
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4825      	ldr	r0, [pc, #148]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x114>)
 8000f52:	f001 fa9f 	bl	8002494 <HAL_DAC_Start_DMA>
                break;
 8000f56:	e000      	b.n	8000f5a <HAL_GPIO_EXTI_Callback+0x86>
            default:
                //Nothing
                break;
 8000f58:	bf00      	nop
        }
        // Random duty cycle for stimulation
        if(randomOn){
 8000f5a:	4b27      	ldr	r3, [pc, #156]	; (8000ff8 <HAL_GPIO_EXTI_Callback+0x124>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d019      	beq.n	8000f96 <HAL_GPIO_EXTI_Callback+0xc2>
			r = rand() % 256;
 8000f62:	f004 ff31 	bl	8005dc8 <rand>
 8000f66:	4603      	mov	r3, r0
 8000f68:	425a      	negs	r2, r3
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	bf58      	it	pl
 8000f70:	4253      	negpl	r3, r2
 8000f72:	4a22      	ldr	r2, [pc, #136]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x128>)
 8000f74:	6013      	str	r3, [r2, #0]
			htim3.Instance->CCR1 = (TIMER_PRESCALER*r)/INT_MAX;
 8000f76:	4b21      	ldr	r3, [pc, #132]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x128>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000f7e:	fb02 f303 	mul.w	r3, r2, r3
 8000f82:	4a1f      	ldr	r2, [pc, #124]	; (8001000 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000f84:	fb82 1203 	smull	r1, r2, r2, r3
 8000f88:	441a      	add	r2, r3
 8000f8a:	11d2      	asrs	r2, r2, #7
 8000f8c:	17db      	asrs	r3, r3, #31
 8000f8e:	1ad2      	subs	r2, r2, r3
 8000f90:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <HAL_GPIO_EXTI_Callback+0x130>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	635a      	str	r2, [r3, #52]	; 0x34
        }

        // Change PWM duty cycle for light intensity
        htim4.Instance->CCR1 = (TIMER_PRESCALER*light_intensity)/INT_MAX;
 8000f96:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <HAL_GPIO_EXTI_Callback+0x134>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8000fa0:	fb02 f303 	mul.w	r3, r2, r3
 8000fa4:	4a16      	ldr	r2, [pc, #88]	; (8001000 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000fa6:	fb82 1203 	smull	r1, r2, r2, r3
 8000faa:	441a      	add	r2, r3
 8000fac:	11d2      	asrs	r2, r2, #7
 8000fae:	17db      	asrs	r3, r3, #31
 8000fb0:	1ad2      	subs	r2, r2, r3
 8000fb2:	4b16      	ldr	r3, [pc, #88]	; (800100c <HAL_GPIO_EXTI_Callback+0x138>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	635a      	str	r2, [r3, #52]	; 0x34

        //Activate timer for DAC
        HAL_TIM_Base_Start(&htim2);
 8000fb8:	4807      	ldr	r0, [pc, #28]	; (8000fd8 <HAL_GPIO_EXTI_Callback+0x104>)
 8000fba:	f003 f867 	bl	800408c <HAL_TIM_Base_Start>
        HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);

        // Set PWM to 0 to turn off light
        htim4.Instance->CCR1 = 0;
    }
}
 8000fbe:	e007      	b.n	8000fd0 <HAL_GPIO_EXTI_Callback+0xfc>
        HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4809      	ldr	r0, [pc, #36]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x114>)
 8000fc4:	f001 fb34 	bl	8002630 <HAL_DAC_Stop_DMA>
        htim4.Instance->CCR1 = 0;
 8000fc8:	4b10      	ldr	r3, [pc, #64]	; (800100c <HAL_GPIO_EXTI_Callback+0x138>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	2000015c 	.word	0x2000015c
 8000fdc:	40020400 	.word	0x40020400
 8000fe0:	20000289 	.word	0x20000289
 8000fe4:	20000290 	.word	0x20000290
 8000fe8:	20000094 	.word	0x20000094
 8000fec:	200005b0 	.word	0x200005b0
 8000ff0:	20000740 	.word	0x20000740
 8000ff4:	20000420 	.word	0x20000420
 8000ff8:	2000028a 	.word	0x2000028a
 8000ffc:	20000278 	.word	0x20000278
 8001000:	80808081 	.word	0x80808081
 8001004:	200001a4 	.word	0x200001a4
 8001008:	2000028c 	.word	0x2000028c
 800100c:	200001ec 	.word	0x200001ec

08001010 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001014:	f001 f874 	bl	8002100 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001018:	f000 f842 	bl	80010a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101c:	f000 faae 	bl	800157c <MX_GPIO_Init>
  MX_DMA_Init();
 8001020:	f000 fa8c 	bl	800153c <MX_DMA_Init>
  MX_DAC_Init();
 8001024:	f000 f8a4 	bl	8001170 <MX_DAC_Init>
  MX_USART2_UART_Init();
 8001028:	f000 fa5e 	bl	80014e8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800102c:	f000 f8f8 	bl	8001220 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001030:	f000 f94a 	bl	80012c8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001034:	f000 f9d8 	bl	80013e8 <MX_TIM4_Init>
  MX_I2C2_Init();
 8001038:	f000 f8c4 	bl	80011c4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  //Activate timer for signal generator (pitch)
  HAL_TIM_Base_Start(&htim2);
 800103c:	4812      	ldr	r0, [pc, #72]	; (8001088 <main+0x78>)
 800103e:	f003 f825 	bl	800408c <HAL_TIM_Base_Start>

  //Activate PWM for duty cycle of light stimulation
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001042:	2100      	movs	r1, #0
 8001044:	4811      	ldr	r0, [pc, #68]	; (800108c <main+0x7c>)
 8001046:	f003 f909 	bl	800425c <HAL_TIM_PWM_Start>

  //Activate PWM for light intensity
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800104a:	2100      	movs	r1, #0
 800104c:	4810      	ldr	r0, [pc, #64]	; (8001090 <main+0x80>)
 800104e:	f003 f905 	bl	800425c <HAL_TIM_PWM_Start>

  //Calculate waveforms
  init_waves(INT_MAX); //255 is max amplitude
 8001052:	20ff      	movs	r0, #255	; 0xff
 8001054:	f000 fec4 	bl	8001de0 <init_waves>

  //Activate UART RX
  HAL_UART_Receive_IT (&huart2, Rx_data, PACKET_SIZE);
 8001058:	2208      	movs	r2, #8
 800105a:	490e      	ldr	r1, [pc, #56]	; (8001094 <main+0x84>)
 800105c:	480e      	ldr	r0, [pc, #56]	; (8001098 <main+0x88>)
 800105e:	f003 ff28 	bl	8004eb2 <HAL_UART_Receive_IT>

  //Initialize random
  srand(time(NULL));
 8001062:	2000      	movs	r0, #0
 8001064:	f004 feee 	bl	8005e44 <time>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4613      	mov	r3, r2
 800106e:	4618      	mov	r0, r3
 8001070:	f004 fe7c 	bl	8005d6c <srand>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(1000);
 8001074:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001078:	f001 f8b4 	bl	80021e4 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15); //Control LED
 800107c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001080:	4806      	ldr	r0, [pc, #24]	; (800109c <main+0x8c>)
 8001082:	f002 f9e4 	bl	800344e <HAL_GPIO_TogglePin>
    HAL_Delay(1000);
 8001086:	e7f5      	b.n	8001074 <main+0x64>
 8001088:	2000015c 	.word	0x2000015c
 800108c:	200001a4 	.word	0x200001a4
 8001090:	200001ec 	.word	0x200001ec
 8001094:	20000280 	.word	0x20000280
 8001098:	20000234 	.word	0x20000234
 800109c:	40020c00 	.word	0x40020c00

080010a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b094      	sub	sp, #80	; 0x50
 80010a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a6:	f107 0320 	add.w	r3, r7, #32
 80010aa:	2230      	movs	r2, #48	; 0x30
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f004 fe54 	bl	8005d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c4:	2300      	movs	r3, #0
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	4b27      	ldr	r3, [pc, #156]	; (8001168 <SystemClock_Config+0xc8>)
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	4a26      	ldr	r2, [pc, #152]	; (8001168 <SystemClock_Config+0xc8>)
 80010ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d2:	6413      	str	r3, [r2, #64]	; 0x40
 80010d4:	4b24      	ldr	r3, [pc, #144]	; (8001168 <SystemClock_Config+0xc8>)
 80010d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e0:	2300      	movs	r3, #0
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	4b21      	ldr	r3, [pc, #132]	; (800116c <SystemClock_Config+0xcc>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a20      	ldr	r2, [pc, #128]	; (800116c <SystemClock_Config+0xcc>)
 80010ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ee:	6013      	str	r3, [r2, #0]
 80010f0:	4b1e      	ldr	r3, [pc, #120]	; (800116c <SystemClock_Config+0xcc>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010fc:	2302      	movs	r3, #2
 80010fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001100:	2301      	movs	r3, #1
 8001102:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001104:	2310      	movs	r3, #16
 8001106:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001108:	2302      	movs	r3, #2
 800110a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800110c:	2300      	movs	r3, #0
 800110e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001110:	2308      	movs	r3, #8
 8001112:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001114:	2354      	movs	r3, #84	; 0x54
 8001116:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001118:	2302      	movs	r3, #2
 800111a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800111c:	2304      	movs	r3, #4
 800111e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001120:	f107 0320 	add.w	r3, r7, #32
 8001124:	4618      	mov	r0, r3
 8001126:	f002 fb09 	bl	800373c <HAL_RCC_OscConfig>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001130:	f000 fa9c 	bl	800166c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001134:	230f      	movs	r3, #15
 8001136:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001138:	2302      	movs	r3, #2
 800113a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001140:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001144:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800114a:	f107 030c 	add.w	r3, r7, #12
 800114e:	2102      	movs	r1, #2
 8001150:	4618      	mov	r0, r3
 8001152:	f002 fd6b 	bl	8003c2c <HAL_RCC_ClockConfig>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800115c:	f000 fa86 	bl	800166c <Error_Handler>
  }
}
 8001160:	bf00      	nop
 8001162:	3750      	adds	r7, #80	; 0x50
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40023800 	.word	0x40023800
 800116c:	40007000 	.word	0x40007000

08001170 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001176:	463b      	mov	r3, r7
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <MX_DAC_Init+0x4c>)
 8001180:	4a0f      	ldr	r2, [pc, #60]	; (80011c0 <MX_DAC_Init+0x50>)
 8001182:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001184:	480d      	ldr	r0, [pc, #52]	; (80011bc <MX_DAC_Init+0x4c>)
 8001186:	f001 f962 	bl	800244e <HAL_DAC_Init>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001190:	f000 fa6c 	bl	800166c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001194:	2324      	movs	r3, #36	; 0x24
 8001196:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001198:	2300      	movs	r3, #0
 800119a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800119c:	463b      	mov	r3, r7
 800119e:	2200      	movs	r2, #0
 80011a0:	4619      	mov	r1, r3
 80011a2:	4806      	ldr	r0, [pc, #24]	; (80011bc <MX_DAC_Init+0x4c>)
 80011a4:	f001 faaa 	bl	80026fc <HAL_DAC_ConfigChannel>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011ae:	f000 fa5d 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000094 	.word	0x20000094
 80011c0:	40007400 	.word	0x40007400

080011c4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <MX_I2C2_Init+0x50>)
 80011ca:	4a13      	ldr	r2, [pc, #76]	; (8001218 <MX_I2C2_Init+0x54>)
 80011cc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_I2C2_Init+0x50>)
 80011d0:	4a12      	ldr	r2, [pc, #72]	; (800121c <MX_I2C2_Init+0x58>)
 80011d2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <MX_I2C2_Init+0x50>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MX_I2C2_Init+0x50>)
 80011dc:	2200      	movs	r2, #0
 80011de:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <MX_I2C2_Init+0x50>)
 80011e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011e6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e8:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <MX_I2C2_Init+0x50>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <MX_I2C2_Init+0x50>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011f4:	4b07      	ldr	r3, [pc, #28]	; (8001214 <MX_I2C2_Init+0x50>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <MX_I2C2_Init+0x50>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001200:	4804      	ldr	r0, [pc, #16]	; (8001214 <MX_I2C2_Init+0x50>)
 8001202:	f002 f957 	bl	80034b4 <HAL_I2C_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800120c:	f000 fa2e 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000108 	.word	0x20000108
 8001218:	40005800 	.word	0x40005800
 800121c:	000186a0 	.word	0x000186a0

08001220 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001226:	f107 0308 	add.w	r3, r7, #8
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001234:	463b      	mov	r3, r7
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800123c:	4b1f      	ldr	r3, [pc, #124]	; (80012bc <MX_TIM2_Init+0x9c>)
 800123e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001242:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = (42000000/N_SAMPLES) / pitch;
 8001244:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <MX_TIM2_Init+0xa0>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a1e      	ldr	r2, [pc, #120]	; (80012c4 <MX_TIM2_Init+0xa4>)
 800124a:	fbb2 f3f3 	udiv	r3, r2, r3
 800124e:	4a1b      	ldr	r2, [pc, #108]	; (80012bc <MX_TIM2_Init+0x9c>)
 8001250:	6053      	str	r3, [r2, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001252:	4b1a      	ldr	r3, [pc, #104]	; (80012bc <MX_TIM2_Init+0x9c>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8001258:	4b18      	ldr	r3, [pc, #96]	; (80012bc <MX_TIM2_Init+0x9c>)
 800125a:	2201      	movs	r2, #1
 800125c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125e:	4b17      	ldr	r3, [pc, #92]	; (80012bc <MX_TIM2_Init+0x9c>)
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001264:	4b15      	ldr	r3, [pc, #84]	; (80012bc <MX_TIM2_Init+0x9c>)
 8001266:	2200      	movs	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800126a:	4814      	ldr	r0, [pc, #80]	; (80012bc <MX_TIM2_Init+0x9c>)
 800126c:	f002 febe 	bl	8003fec <HAL_TIM_Base_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001276:	f000 f9f9 	bl	800166c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800127a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001280:	f107 0308 	add.w	r3, r7, #8
 8001284:	4619      	mov	r1, r3
 8001286:	480d      	ldr	r0, [pc, #52]	; (80012bc <MX_TIM2_Init+0x9c>)
 8001288:	f003 f972 	bl	8004570 <HAL_TIM_ConfigClockSource>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001292:	f000 f9eb 	bl	800166c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001296:	2320      	movs	r3, #32
 8001298:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800129a:	2300      	movs	r3, #0
 800129c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800129e:	463b      	mov	r3, r7
 80012a0:	4619      	mov	r1, r3
 80012a2:	4806      	ldr	r0, [pc, #24]	; (80012bc <MX_TIM2_Init+0x9c>)
 80012a4:	f003 fd3c 	bl	8004d20 <HAL_TIMEx_MasterConfigSynchronization>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80012ae:	f000 f9dd 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012b2:	bf00      	nop
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	2000015c 	.word	0x2000015c
 80012c0:	20000008 	.word	0x20000008
 80012c4:	000668a0 	.word	0x000668a0

080012c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b08e      	sub	sp, #56	; 0x38
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012dc:	f107 0320 	add.w	r3, r7, #32
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012e6:	1d3b      	adds	r3, r7, #4
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]
 80012f4:	615a      	str	r2, [r3, #20]
 80012f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80012f8:	4b36      	ldr	r3, [pc, #216]	; (80013d4 <MX_TIM3_Init+0x10c>)
 80012fa:	4a37      	ldr	r2, [pc, #220]	; (80013d8 <MX_TIM3_Init+0x110>)
 80012fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 21000/stim_freq;
 80012fe:	4b37      	ldr	r3, [pc, #220]	; (80013dc <MX_TIM3_Init+0x114>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	461a      	mov	r2, r3
 8001304:	f245 2308 	movw	r3, #21000	; 0x5208
 8001308:	fb93 f3f2 	sdiv	r3, r3, r2
 800130c:	461a      	mov	r2, r3
 800130e:	4b31      	ldr	r3, [pc, #196]	; (80013d4 <MX_TIM3_Init+0x10c>)
 8001310:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001312:	4b30      	ldr	r3, [pc, #192]	; (80013d4 <MX_TIM3_Init+0x10c>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIMER_PRESCALER-1;
 8001318:	4b2e      	ldr	r3, [pc, #184]	; (80013d4 <MX_TIM3_Init+0x10c>)
 800131a:	f640 729f 	movw	r2, #3999	; 0xf9f
 800131e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001320:	4b2c      	ldr	r3, [pc, #176]	; (80013d4 <MX_TIM3_Init+0x10c>)
 8001322:	2200      	movs	r2, #0
 8001324:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001326:	4b2b      	ldr	r3, [pc, #172]	; (80013d4 <MX_TIM3_Init+0x10c>)
 8001328:	2200      	movs	r2, #0
 800132a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800132c:	4829      	ldr	r0, [pc, #164]	; (80013d4 <MX_TIM3_Init+0x10c>)
 800132e:	f002 fe5d 	bl	8003fec <HAL_TIM_Base_Init>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8001338:	f000 f998 	bl	800166c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800133c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001340:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001342:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001346:	4619      	mov	r1, r3
 8001348:	4822      	ldr	r0, [pc, #136]	; (80013d4 <MX_TIM3_Init+0x10c>)
 800134a:	f003 f911 	bl	8004570 <HAL_TIM_ConfigClockSource>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001354:	f000 f98a 	bl	800166c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001358:	481e      	ldr	r0, [pc, #120]	; (80013d4 <MX_TIM3_Init+0x10c>)
 800135a:	f002 ff26 	bl	80041aa <HAL_TIM_PWM_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001364:	f000 f982 	bl	800166c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001368:	2300      	movs	r3, #0
 800136a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136c:	2300      	movs	r3, #0
 800136e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001370:	f107 0320 	add.w	r3, r7, #32
 8001374:	4619      	mov	r1, r3
 8001376:	4817      	ldr	r0, [pc, #92]	; (80013d4 <MX_TIM3_Init+0x10c>)
 8001378:	f003 fcd2 	bl	8004d20 <HAL_TIMEx_MasterConfigSynchronization>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_TIM3_Init+0xbe>
  {
    Error_Handler();
 8001382:	f000 f973 	bl	800166c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001386:	2360      	movs	r3, #96	; 0x60
 8001388:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = (TIMER_PRESCALER*duty_cycle)/INT_MAX;
 800138a:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <MX_TIM3_Init+0x118>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	461a      	mov	r2, r3
 8001390:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001394:	fb02 f303 	mul.w	r3, r2, r3
 8001398:	4a12      	ldr	r2, [pc, #72]	; (80013e4 <MX_TIM3_Init+0x11c>)
 800139a:	fb82 1203 	smull	r1, r2, r2, r3
 800139e:	441a      	add	r2, r3
 80013a0:	11d2      	asrs	r2, r2, #7
 80013a2:	17db      	asrs	r3, r3, #31
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	2200      	movs	r2, #0
 80013b4:	4619      	mov	r1, r3
 80013b6:	4807      	ldr	r0, [pc, #28]	; (80013d4 <MX_TIM3_Init+0x10c>)
 80013b8:	f003 f818 	bl	80043ec <HAL_TIM_PWM_ConfigChannel>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM3_Init+0xfe>
  {
    Error_Handler();
 80013c2:	f000 f953 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013c6:	4803      	ldr	r0, [pc, #12]	; (80013d4 <MX_TIM3_Init+0x10c>)
 80013c8:	f000 fab0 	bl	800192c <HAL_TIM_MspPostInit>

}
 80013cc:	bf00      	nop
 80013ce:	3738      	adds	r7, #56	; 0x38
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	200001a4 	.word	0x200001a4
 80013d8:	40000400 	.word	0x40000400
 80013dc:	20000004 	.word	0x20000004
 80013e0:	20000288 	.word	0x20000288
 80013e4:	80808081 	.word	0x80808081

080013e8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08e      	sub	sp, #56	; 0x38
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013fc:	f107 0320 	add.w	r3, r7, #32
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
 8001414:	615a      	str	r2, [r3, #20]
 8001416:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001418:	4b2f      	ldr	r3, [pc, #188]	; (80014d8 <MX_TIM4_Init+0xf0>)
 800141a:	4a30      	ldr	r2, [pc, #192]	; (80014dc <MX_TIM4_Init+0xf4>)
 800141c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = htim3.Init.Prescaler/LIGHT_INTENSITY_PWM_MULTIPLIER;
 800141e:	4b30      	ldr	r3, [pc, #192]	; (80014e0 <MX_TIM4_Init+0xf8>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	4a30      	ldr	r2, [pc, #192]	; (80014e4 <MX_TIM4_Init+0xfc>)
 8001424:	fba2 2303 	umull	r2, r3, r2, r3
 8001428:	095b      	lsrs	r3, r3, #5
 800142a:	4a2b      	ldr	r2, [pc, #172]	; (80014d8 <MX_TIM4_Init+0xf0>)
 800142c:	6053      	str	r3, [r2, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142e:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <MX_TIM4_Init+0xf0>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = TIMER_PRESCALER-1;;
 8001434:	4b28      	ldr	r3, [pc, #160]	; (80014d8 <MX_TIM4_Init+0xf0>)
 8001436:	f640 729f 	movw	r2, #3999	; 0xf9f
 800143a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143c:	4b26      	ldr	r3, [pc, #152]	; (80014d8 <MX_TIM4_Init+0xf0>)
 800143e:	2200      	movs	r2, #0
 8001440:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001442:	4b25      	ldr	r3, [pc, #148]	; (80014d8 <MX_TIM4_Init+0xf0>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001448:	4823      	ldr	r0, [pc, #140]	; (80014d8 <MX_TIM4_Init+0xf0>)
 800144a:	f002 fdcf 	bl	8003fec <HAL_TIM_Base_Init>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001454:	f000 f90a 	bl	800166c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001458:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800145c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800145e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001462:	4619      	mov	r1, r3
 8001464:	481c      	ldr	r0, [pc, #112]	; (80014d8 <MX_TIM4_Init+0xf0>)
 8001466:	f003 f883 	bl	8004570 <HAL_TIM_ConfigClockSource>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001470:	f000 f8fc 	bl	800166c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001474:	4818      	ldr	r0, [pc, #96]	; (80014d8 <MX_TIM4_Init+0xf0>)
 8001476:	f002 fe98 	bl	80041aa <HAL_TIM_PWM_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001480:	f000 f8f4 	bl	800166c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001484:	2300      	movs	r3, #0
 8001486:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001488:	2300      	movs	r3, #0
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800148c:	f107 0320 	add.w	r3, r7, #32
 8001490:	4619      	mov	r1, r3
 8001492:	4811      	ldr	r0, [pc, #68]	; (80014d8 <MX_TIM4_Init+0xf0>)
 8001494:	f003 fc44 	bl	8004d20 <HAL_TIMEx_MasterConfigSynchronization>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM4_Init+0xba>
  {
    Error_Handler();
 800149e:	f000 f8e5 	bl	800166c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014a2:	2360      	movs	r3, #96	; 0x60
 80014a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	2200      	movs	r2, #0
 80014b6:	4619      	mov	r1, r3
 80014b8:	4807      	ldr	r0, [pc, #28]	; (80014d8 <MX_TIM4_Init+0xf0>)
 80014ba:	f002 ff97 	bl	80043ec <HAL_TIM_PWM_ConfigChannel>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 80014c4:	f000 f8d2 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80014c8:	4803      	ldr	r0, [pc, #12]	; (80014d8 <MX_TIM4_Init+0xf0>)
 80014ca:	f000 fa2f 	bl	800192c <HAL_TIM_MspPostInit>

}
 80014ce:	bf00      	nop
 80014d0:	3738      	adds	r7, #56	; 0x38
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	200001ec 	.word	0x200001ec
 80014dc:	40000800 	.word	0x40000800
 80014e0:	200001a4 	.word	0x200001a4
 80014e4:	51eb851f 	.word	0x51eb851f

080014e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014ec:	4b11      	ldr	r3, [pc, #68]	; (8001534 <MX_USART2_UART_Init+0x4c>)
 80014ee:	4a12      	ldr	r2, [pc, #72]	; (8001538 <MX_USART2_UART_Init+0x50>)
 80014f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014f2:	4b10      	ldr	r3, [pc, #64]	; (8001534 <MX_USART2_UART_Init+0x4c>)
 80014f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <MX_USART2_UART_Init+0x4c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <MX_USART2_UART_Init+0x4c>)
 8001502:	2200      	movs	r2, #0
 8001504:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <MX_USART2_UART_Init+0x4c>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <MX_USART2_UART_Init+0x4c>)
 800150e:	220c      	movs	r2, #12
 8001510:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <MX_USART2_UART_Init+0x4c>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <MX_USART2_UART_Init+0x4c>)
 800151a:	2200      	movs	r2, #0
 800151c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800151e:	4805      	ldr	r0, [pc, #20]	; (8001534 <MX_USART2_UART_Init+0x4c>)
 8001520:	f003 fc7a 	bl	8004e18 <HAL_UART_Init>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800152a:	f000 f89f 	bl	800166c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000234 	.word	0x20000234
 8001538:	40004400 	.word	0x40004400

0800153c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	607b      	str	r3, [r7, #4]
 8001546:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <MX_DMA_Init+0x3c>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a0b      	ldr	r2, [pc, #44]	; (8001578 <MX_DMA_Init+0x3c>)
 800154c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <MX_DMA_Init+0x3c>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800155e:	2200      	movs	r2, #0
 8001560:	2100      	movs	r1, #0
 8001562:	2010      	movs	r0, #16
 8001564:	f000 ff3d 	bl	80023e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001568:	2010      	movs	r0, #16
 800156a:	f000 ff56 	bl	800241a <HAL_NVIC_EnableIRQ>

}
 800156e:	bf00      	nop
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800

0800157c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	; 0x28
 8001580:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
 8001590:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	4b32      	ldr	r3, [pc, #200]	; (8001660 <MX_GPIO_Init+0xe4>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	4a31      	ldr	r2, [pc, #196]	; (8001660 <MX_GPIO_Init+0xe4>)
 800159c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015a0:	6313      	str	r3, [r2, #48]	; 0x30
 80015a2:	4b2f      	ldr	r3, [pc, #188]	; (8001660 <MX_GPIO_Init+0xe4>)
 80015a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	4b2b      	ldr	r3, [pc, #172]	; (8001660 <MX_GPIO_Init+0xe4>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a2a      	ldr	r2, [pc, #168]	; (8001660 <MX_GPIO_Init+0xe4>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b28      	ldr	r3, [pc, #160]	; (8001660 <MX_GPIO_Init+0xe4>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	4b24      	ldr	r3, [pc, #144]	; (8001660 <MX_GPIO_Init+0xe4>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a23      	ldr	r2, [pc, #140]	; (8001660 <MX_GPIO_Init+0xe4>)
 80015d4:	f043 0302 	orr.w	r3, r3, #2
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b21      	ldr	r3, [pc, #132]	; (8001660 <MX_GPIO_Init+0xe4>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	607b      	str	r3, [r7, #4]
 80015ea:	4b1d      	ldr	r3, [pc, #116]	; (8001660 <MX_GPIO_Init+0xe4>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a1c      	ldr	r2, [pc, #112]	; (8001660 <MX_GPIO_Init+0xe4>)
 80015f0:	f043 0308 	orr.w	r3, r3, #8
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b1a      	ldr	r3, [pc, #104]	; (8001660 <MX_GPIO_Init+0xe4>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0308 	and.w	r3, r3, #8
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_ROUGE_Pin|LED_BLEU_Pin, GPIO_PIN_RESET);
 8001602:	2200      	movs	r2, #0
 8001604:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001608:	4816      	ldr	r0, [pc, #88]	; (8001664 <MX_GPIO_Init+0xe8>)
 800160a:	f001 ff07 	bl	800341c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800160e:	2302      	movs	r3, #2
 8001610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001612:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	4619      	mov	r1, r3
 8001622:	4811      	ldr	r0, [pc, #68]	; (8001668 <MX_GPIO_Init+0xec>)
 8001624:	f001 fd46 	bl	80030b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ROUGE_Pin LED_BLEU_Pin */
  GPIO_InitStruct.Pin = LED_ROUGE_Pin|LED_BLEU_Pin;
 8001628:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800162c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162e:	2301      	movs	r3, #1
 8001630:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001632:	2300      	movs	r3, #0
 8001634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001636:	2300      	movs	r3, #0
 8001638:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4619      	mov	r1, r3
 8001640:	4808      	ldr	r0, [pc, #32]	; (8001664 <MX_GPIO_Init+0xe8>)
 8001642:	f001 fd37 	bl	80030b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 1);
 8001646:	2201      	movs	r2, #1
 8001648:	2101      	movs	r1, #1
 800164a:	2007      	movs	r0, #7
 800164c:	f000 fec9 	bl	80023e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001650:	2007      	movs	r0, #7
 8001652:	f000 fee2 	bl	800241a <HAL_NVIC_EnableIRQ>

}
 8001656:	bf00      	nop
 8001658:	3728      	adds	r7, #40	; 0x28
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40023800 	.word	0x40023800
 8001664:	40020c00 	.word	0x40020c00
 8001668:	40020400 	.word	0x40020400

0800166c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001670:	b672      	cpsid	i
}
 8001672:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001674:	e7fe      	b.n	8001674 <Error_Handler+0x8>
	...

08001678 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <HAL_MspInit+0x58>)
 8001684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001686:	4a12      	ldr	r2, [pc, #72]	; (80016d0 <HAL_MspInit+0x58>)
 8001688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800168c:	6453      	str	r3, [r2, #68]	; 0x44
 800168e:	4b10      	ldr	r3, [pc, #64]	; (80016d0 <HAL_MspInit+0x58>)
 8001690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001696:	607b      	str	r3, [r7, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	603b      	str	r3, [r7, #0]
 800169e:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <HAL_MspInit+0x58>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	4a0b      	ldr	r2, [pc, #44]	; (80016d0 <HAL_MspInit+0x58>)
 80016a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a8:	6413      	str	r3, [r2, #64]	; 0x40
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <HAL_MspInit+0x58>)
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b2:	603b      	str	r3, [r7, #0]
 80016b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80016b6:	2200      	movs	r2, #0
 80016b8:	2100      	movs	r1, #0
 80016ba:	2005      	movs	r0, #5
 80016bc:	f000 fe91 	bl	80023e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80016c0:	2005      	movs	r0, #5
 80016c2:	f000 feaa 	bl	800241a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40023800 	.word	0x40023800

080016d4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08a      	sub	sp, #40	; 0x28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a34      	ldr	r2, [pc, #208]	; (80017c4 <HAL_DAC_MspInit+0xf0>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d161      	bne.n	80017ba <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	613b      	str	r3, [r7, #16]
 80016fa:	4b33      	ldr	r3, [pc, #204]	; (80017c8 <HAL_DAC_MspInit+0xf4>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	4a32      	ldr	r2, [pc, #200]	; (80017c8 <HAL_DAC_MspInit+0xf4>)
 8001700:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001704:	6413      	str	r3, [r2, #64]	; 0x40
 8001706:	4b30      	ldr	r3, [pc, #192]	; (80017c8 <HAL_DAC_MspInit+0xf4>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]
 8001716:	4b2c      	ldr	r3, [pc, #176]	; (80017c8 <HAL_DAC_MspInit+0xf4>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a2b      	ldr	r2, [pc, #172]	; (80017c8 <HAL_DAC_MspInit+0xf4>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b29      	ldr	r3, [pc, #164]	; (80017c8 <HAL_DAC_MspInit+0xf4>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800172e:	2310      	movs	r3, #16
 8001730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001732:	2303      	movs	r3, #3
 8001734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173a:	f107 0314 	add.w	r3, r7, #20
 800173e:	4619      	mov	r1, r3
 8001740:	4822      	ldr	r0, [pc, #136]	; (80017cc <HAL_DAC_MspInit+0xf8>)
 8001742:	f001 fcb7 	bl	80030b4 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001746:	4b22      	ldr	r3, [pc, #136]	; (80017d0 <HAL_DAC_MspInit+0xfc>)
 8001748:	4a22      	ldr	r2, [pc, #136]	; (80017d4 <HAL_DAC_MspInit+0x100>)
 800174a:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 800174c:	4b20      	ldr	r3, [pc, #128]	; (80017d0 <HAL_DAC_MspInit+0xfc>)
 800174e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001752:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001754:	4b1e      	ldr	r3, [pc, #120]	; (80017d0 <HAL_DAC_MspInit+0xfc>)
 8001756:	2240      	movs	r2, #64	; 0x40
 8001758:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800175a:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <HAL_DAC_MspInit+0xfc>)
 800175c:	2200      	movs	r2, #0
 800175e:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001760:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <HAL_DAC_MspInit+0xfc>)
 8001762:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001766:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001768:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <HAL_DAC_MspInit+0xfc>)
 800176a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800176e:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001770:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <HAL_DAC_MspInit+0xfc>)
 8001772:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001776:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001778:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <HAL_DAC_MspInit+0xfc>)
 800177a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800177e:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 8001780:	4b13      	ldr	r3, [pc, #76]	; (80017d0 <HAL_DAC_MspInit+0xfc>)
 8001782:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001786:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001788:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <HAL_DAC_MspInit+0xfc>)
 800178a:	2200      	movs	r2, #0
 800178c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 800178e:	4810      	ldr	r0, [pc, #64]	; (80017d0 <HAL_DAC_MspInit+0xfc>)
 8001790:	f001 f88e 	bl	80028b0 <HAL_DMA_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800179a:	f7ff ff67 	bl	800166c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a0b      	ldr	r2, [pc, #44]	; (80017d0 <HAL_DAC_MspInit+0xfc>)
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	4a0a      	ldr	r2, [pc, #40]	; (80017d0 <HAL_DAC_MspInit+0xfc>)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2100      	movs	r1, #0
 80017ae:	2036      	movs	r0, #54	; 0x36
 80017b0:	f000 fe17 	bl	80023e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017b4:	2036      	movs	r0, #54	; 0x36
 80017b6:	f000 fe30 	bl	800241a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80017ba:	bf00      	nop
 80017bc:	3728      	adds	r7, #40	; 0x28
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40007400 	.word	0x40007400
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40020000 	.word	0x40020000
 80017d0:	200000a8 	.word	0x200000a8
 80017d4:	40026088 	.word	0x40026088

080017d8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08a      	sub	sp, #40	; 0x28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a19      	ldr	r2, [pc, #100]	; (800185c <HAL_I2C_MspInit+0x84>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d12c      	bne.n	8001854 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	613b      	str	r3, [r7, #16]
 80017fe:	4b18      	ldr	r3, [pc, #96]	; (8001860 <HAL_I2C_MspInit+0x88>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	4a17      	ldr	r2, [pc, #92]	; (8001860 <HAL_I2C_MspInit+0x88>)
 8001804:	f043 0302 	orr.w	r3, r3, #2
 8001808:	6313      	str	r3, [r2, #48]	; 0x30
 800180a:	4b15      	ldr	r3, [pc, #84]	; (8001860 <HAL_I2C_MspInit+0x88>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001816:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800181a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800181c:	2312      	movs	r3, #18
 800181e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001824:	2303      	movs	r3, #3
 8001826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001828:	2304      	movs	r3, #4
 800182a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182c:	f107 0314 	add.w	r3, r7, #20
 8001830:	4619      	mov	r1, r3
 8001832:	480c      	ldr	r0, [pc, #48]	; (8001864 <HAL_I2C_MspInit+0x8c>)
 8001834:	f001 fc3e 	bl	80030b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001838:	2300      	movs	r3, #0
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	4b08      	ldr	r3, [pc, #32]	; (8001860 <HAL_I2C_MspInit+0x88>)
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	4a07      	ldr	r2, [pc, #28]	; (8001860 <HAL_I2C_MspInit+0x88>)
 8001842:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001846:	6413      	str	r3, [r2, #64]	; 0x40
 8001848:	4b05      	ldr	r3, [pc, #20]	; (8001860 <HAL_I2C_MspInit+0x88>)
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001854:	bf00      	nop
 8001856:	3728      	adds	r7, #40	; 0x28
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40005800 	.word	0x40005800
 8001860:	40023800 	.word	0x40023800
 8001864:	40020400 	.word	0x40020400

08001868 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001878:	d116      	bne.n	80018a8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	4b28      	ldr	r3, [pc, #160]	; (8001920 <HAL_TIM_Base_MspInit+0xb8>)
 8001880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001882:	4a27      	ldr	r2, [pc, #156]	; (8001920 <HAL_TIM_Base_MspInit+0xb8>)
 8001884:	f043 0301 	orr.w	r3, r3, #1
 8001888:	6413      	str	r3, [r2, #64]	; 0x40
 800188a:	4b25      	ldr	r3, [pc, #148]	; (8001920 <HAL_TIM_Base_MspInit+0xb8>)
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001896:	2200      	movs	r2, #0
 8001898:	2100      	movs	r1, #0
 800189a:	201c      	movs	r0, #28
 800189c:	f000 fda1 	bl	80023e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018a0:	201c      	movs	r0, #28
 80018a2:	f000 fdba 	bl	800241a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80018a6:	e036      	b.n	8001916 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a1d      	ldr	r2, [pc, #116]	; (8001924 <HAL_TIM_Base_MspInit+0xbc>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d116      	bne.n	80018e0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <HAL_TIM_Base_MspInit+0xb8>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	4a19      	ldr	r2, [pc, #100]	; (8001920 <HAL_TIM_Base_MspInit+0xb8>)
 80018bc:	f043 0302 	orr.w	r3, r3, #2
 80018c0:	6413      	str	r3, [r2, #64]	; 0x40
 80018c2:	4b17      	ldr	r3, [pc, #92]	; (8001920 <HAL_TIM_Base_MspInit+0xb8>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	613b      	str	r3, [r7, #16]
 80018cc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2100      	movs	r1, #0
 80018d2:	201d      	movs	r0, #29
 80018d4:	f000 fd85 	bl	80023e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018d8:	201d      	movs	r0, #29
 80018da:	f000 fd9e 	bl	800241a <HAL_NVIC_EnableIRQ>
}
 80018de:	e01a      	b.n	8001916 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a10      	ldr	r2, [pc, #64]	; (8001928 <HAL_TIM_Base_MspInit+0xc0>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d115      	bne.n	8001916 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <HAL_TIM_Base_MspInit+0xb8>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	4a0b      	ldr	r2, [pc, #44]	; (8001920 <HAL_TIM_Base_MspInit+0xb8>)
 80018f4:	f043 0304 	orr.w	r3, r3, #4
 80018f8:	6413      	str	r3, [r2, #64]	; 0x40
 80018fa:	4b09      	ldr	r3, [pc, #36]	; (8001920 <HAL_TIM_Base_MspInit+0xb8>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f003 0304 	and.w	r3, r3, #4
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001906:	2200      	movs	r2, #0
 8001908:	2100      	movs	r1, #0
 800190a:	201e      	movs	r0, #30
 800190c:	f000 fd69 	bl	80023e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001910:	201e      	movs	r0, #30
 8001912:	f000 fd82 	bl	800241a <HAL_NVIC_EnableIRQ>
}
 8001916:	bf00      	nop
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800
 8001924:	40000400 	.word	0x40000400
 8001928:	40000800 	.word	0x40000800

0800192c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08a      	sub	sp, #40	; 0x28
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a24      	ldr	r2, [pc, #144]	; (80019dc <HAL_TIM_MspPostInit+0xb0>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d11e      	bne.n	800198c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	4b23      	ldr	r3, [pc, #140]	; (80019e0 <HAL_TIM_MspPostInit+0xb4>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a22      	ldr	r2, [pc, #136]	; (80019e0 <HAL_TIM_MspPostInit+0xb4>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b20      	ldr	r3, [pc, #128]	; (80019e0 <HAL_TIM_MspPostInit+0xb4>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	613b      	str	r3, [r7, #16]
 8001968:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800196a:	2340      	movs	r3, #64	; 0x40
 800196c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196e:	2302      	movs	r3, #2
 8001970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001976:	2300      	movs	r3, #0
 8001978:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800197a:	2302      	movs	r3, #2
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197e:	f107 0314 	add.w	r3, r7, #20
 8001982:	4619      	mov	r1, r3
 8001984:	4817      	ldr	r0, [pc, #92]	; (80019e4 <HAL_TIM_MspPostInit+0xb8>)
 8001986:	f001 fb95 	bl	80030b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800198a:	e023      	b.n	80019d4 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a15      	ldr	r2, [pc, #84]	; (80019e8 <HAL_TIM_MspPostInit+0xbc>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d11e      	bne.n	80019d4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
 800199a:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <HAL_TIM_MspPostInit+0xb4>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4a10      	ldr	r2, [pc, #64]	; (80019e0 <HAL_TIM_MspPostInit+0xb4>)
 80019a0:	f043 0308 	orr.w	r3, r3, #8
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <HAL_TIM_MspPostInit+0xb4>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f003 0308 	and.w	r3, r3, #8
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80019b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b8:	2302      	movs	r3, #2
 80019ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c0:	2300      	movs	r3, #0
 80019c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80019c4:	2302      	movs	r3, #2
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019c8:	f107 0314 	add.w	r3, r7, #20
 80019cc:	4619      	mov	r1, r3
 80019ce:	4807      	ldr	r0, [pc, #28]	; (80019ec <HAL_TIM_MspPostInit+0xc0>)
 80019d0:	f001 fb70 	bl	80030b4 <HAL_GPIO_Init>
}
 80019d4:	bf00      	nop
 80019d6:	3728      	adds	r7, #40	; 0x28
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40000400 	.word	0x40000400
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40020000 	.word	0x40020000
 80019e8:	40000800 	.word	0x40000800
 80019ec:	40020c00 	.word	0x40020c00

080019f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08a      	sub	sp, #40	; 0x28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a1d      	ldr	r2, [pc, #116]	; (8001a84 <HAL_UART_MspInit+0x94>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d133      	bne.n	8001a7a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <HAL_UART_MspInit+0x98>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	4a1b      	ldr	r2, [pc, #108]	; (8001a88 <HAL_UART_MspInit+0x98>)
 8001a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a20:	6413      	str	r3, [r2, #64]	; 0x40
 8001a22:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <HAL_UART_MspInit+0x98>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <HAL_UART_MspInit+0x98>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	4a14      	ldr	r2, [pc, #80]	; (8001a88 <HAL_UART_MspInit+0x98>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_UART_MspInit+0x98>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a4a:	230c      	movs	r3, #12
 8001a4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a56:	2303      	movs	r3, #3
 8001a58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a5a:	2307      	movs	r3, #7
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5e:	f107 0314 	add.w	r3, r7, #20
 8001a62:	4619      	mov	r1, r3
 8001a64:	4809      	ldr	r0, [pc, #36]	; (8001a8c <HAL_UART_MspInit+0x9c>)
 8001a66:	f001 fb25 	bl	80030b4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	2026      	movs	r0, #38	; 0x26
 8001a70:	f000 fcb7 	bl	80023e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a74:	2026      	movs	r0, #38	; 0x26
 8001a76:	f000 fcd0 	bl	800241a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a7a:	bf00      	nop
 8001a7c:	3728      	adds	r7, #40	; 0x28
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40004400 	.word	0x40004400
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40020000 	.word	0x40020000

08001a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <NMI_Handler+0x4>

08001a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a9a:	e7fe      	b.n	8001a9a <HardFault_Handler+0x4>

08001a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa0:	e7fe      	b.n	8001aa0 <MemManage_Handler+0x4>

08001aa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aa6:	e7fe      	b.n	8001aa6 <BusFault_Handler+0x4>

08001aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aac:	e7fe      	b.n	8001aac <UsageFault_Handler+0x4>

08001aae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001adc:	f000 fb62 	bl	80021a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001af6:	2002      	movs	r0, #2
 8001af8:	f001 fcc4 	bl	8003484 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001afc:	bf00      	nop
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001b04:	4802      	ldr	r0, [pc, #8]	; (8001b10 <DMA1_Stream5_IRQHandler+0x10>)
 8001b06:	f001 f86b 	bl	8002be0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	200000a8 	.word	0x200000a8

08001b14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b18:	4803      	ldr	r0, [pc, #12]	; (8001b28 <USART2_IRQHandler+0x14>)
 8001b1a:	f003 f9fb 	bl	8004f14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  receiveUARTpacket();
 8001b1e:	f000 f8dd 	bl	8001cdc <receiveUARTpacket>

  /* USER CODE END USART2_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000234 	.word	0x20000234

08001b2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return 1;
 8001b30:	2301      	movs	r3, #1
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <_kill>:

int _kill(int pid, int sig)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b46:	f004 f8df 	bl	8005d08 <__errno>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2216      	movs	r2, #22
 8001b4e:	601a      	str	r2, [r3, #0]
  return -1;
 8001b50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <_exit>:

void _exit (int status)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b64:	f04f 31ff 	mov.w	r1, #4294967295
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f7ff ffe7 	bl	8001b3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b6e:	e7fe      	b.n	8001b6e <_exit+0x12>

08001b70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	e00a      	b.n	8001b98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b82:	f3af 8000 	nop.w
 8001b86:	4601      	mov	r1, r0
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	1c5a      	adds	r2, r3, #1
 8001b8c:	60ba      	str	r2, [r7, #8]
 8001b8e:	b2ca      	uxtb	r2, r1
 8001b90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	3301      	adds	r3, #1
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	dbf0      	blt.n	8001b82 <_read+0x12>
  }

  return len;
 8001ba0:	687b      	ldr	r3, [r7, #4]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b086      	sub	sp, #24
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	60f8      	str	r0, [r7, #12]
 8001bb2:	60b9      	str	r1, [r7, #8]
 8001bb4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	e009      	b.n	8001bd0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	1c5a      	adds	r2, r3, #1
 8001bc0:	60ba      	str	r2, [r7, #8]
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	dbf1      	blt.n	8001bbc <_write+0x12>
  }
  return len;
 8001bd8:	687b      	ldr	r3, [r7, #4]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <_close>:

int _close(int file)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001bea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
 8001c02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c0a:	605a      	str	r2, [r3, #4]
  return 0;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <_isatty>:

int _isatty(int file)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c22:	2301      	movs	r3, #1
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b085      	sub	sp, #20
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
	...

08001c4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c54:	4a14      	ldr	r2, [pc, #80]	; (8001ca8 <_sbrk+0x5c>)
 8001c56:	4b15      	ldr	r3, [pc, #84]	; (8001cac <_sbrk+0x60>)
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c60:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <_sbrk+0x64>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d102      	bne.n	8001c6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c68:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <_sbrk+0x64>)
 8001c6a:	4a12      	ldr	r2, [pc, #72]	; (8001cb4 <_sbrk+0x68>)
 8001c6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <_sbrk+0x64>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	693a      	ldr	r2, [r7, #16]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d207      	bcs.n	8001c8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c7c:	f004 f844 	bl	8005d08 <__errno>
 8001c80:	4603      	mov	r3, r0
 8001c82:	220c      	movs	r2, #12
 8001c84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c86:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8a:	e009      	b.n	8001ca0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c8c:	4b08      	ldr	r3, [pc, #32]	; (8001cb0 <_sbrk+0x64>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c92:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <_sbrk+0x64>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	4a05      	ldr	r2, [pc, #20]	; (8001cb0 <_sbrk+0x64>)
 8001c9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	20020000 	.word	0x20020000
 8001cac:	00000400 	.word	0x00000400
 8001cb0:	2000027c 	.word	0x2000027c
 8001cb4:	200008e8 	.word	0x200008e8

08001cb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cbc:	4b06      	ldr	r3, [pc, #24]	; (8001cd8 <SystemInit+0x20>)
 8001cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cc2:	4a05      	ldr	r2, [pc, #20]	; (8001cd8 <SystemInit+0x20>)
 8001cc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ccc:	bf00      	nop
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	e000ed00 	.word	0xe000ed00

08001cdc <receiveUARTpacket>:
unsigned int pitch = 440; 		// 0 - 65535 Hz
uint8_t randomOn = 0; 			// 0 (off), anything else is random
uint8_t sound_intensity = 0; 	// 0 - 255 (INT_MAX)
uint8_t light_intensity = 0; 	// 0 - 255 (INT_MAX) where 255 is max intensity

void receiveUARTpacket(){
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
	// Stop DAC
	  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	4830      	ldr	r0, [pc, #192]	; (8001da4 <receiveUARTpacket+0xc8>)
 8001ce4:	f000 fca4 	bl	8002630 <HAL_DAC_Stop_DMA>
	  HAL_TIM_Base_Stop(&htim2);
 8001ce8:	482f      	ldr	r0, [pc, #188]	; (8001da8 <receiveUARTpacket+0xcc>)
 8001cea:	f002 fa37 	bl	800415c <HAL_TIM_Base_Stop>

	  //Get values from Rx buffer
	  wave_type = Rx_data[0];
 8001cee:	4b2f      	ldr	r3, [pc, #188]	; (8001dac <receiveUARTpacket+0xd0>)
 8001cf0:	781a      	ldrb	r2, [r3, #0]
 8001cf2:	4b2f      	ldr	r3, [pc, #188]	; (8001db0 <receiveUARTpacket+0xd4>)
 8001cf4:	701a      	strb	r2, [r3, #0]
	  pitch = Rx_data[1] << 8 | Rx_data[2];
 8001cf6:	4b2d      	ldr	r3, [pc, #180]	; (8001dac <receiveUARTpacket+0xd0>)
 8001cf8:	785b      	ldrb	r3, [r3, #1]
 8001cfa:	021b      	lsls	r3, r3, #8
 8001cfc:	4a2b      	ldr	r2, [pc, #172]	; (8001dac <receiveUARTpacket+0xd0>)
 8001cfe:	7892      	ldrb	r2, [r2, #2]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	461a      	mov	r2, r3
 8001d04:	4b2b      	ldr	r3, [pc, #172]	; (8001db4 <receiveUARTpacket+0xd8>)
 8001d06:	601a      	str	r2, [r3, #0]
	  stim_freq = Rx_data[3];
 8001d08:	4b28      	ldr	r3, [pc, #160]	; (8001dac <receiveUARTpacket+0xd0>)
 8001d0a:	78da      	ldrb	r2, [r3, #3]
 8001d0c:	4b2a      	ldr	r3, [pc, #168]	; (8001db8 <receiveUARTpacket+0xdc>)
 8001d0e:	701a      	strb	r2, [r3, #0]
	  duty_cycle = Rx_data[4];
 8001d10:	4b26      	ldr	r3, [pc, #152]	; (8001dac <receiveUARTpacket+0xd0>)
 8001d12:	791a      	ldrb	r2, [r3, #4]
 8001d14:	4b29      	ldr	r3, [pc, #164]	; (8001dbc <receiveUARTpacket+0xe0>)
 8001d16:	701a      	strb	r2, [r3, #0]
	  randomOn = Rx_data[5];
 8001d18:	4b24      	ldr	r3, [pc, #144]	; (8001dac <receiveUARTpacket+0xd0>)
 8001d1a:	795a      	ldrb	r2, [r3, #5]
 8001d1c:	4b28      	ldr	r3, [pc, #160]	; (8001dc0 <receiveUARTpacket+0xe4>)
 8001d1e:	701a      	strb	r2, [r3, #0]
	  sound_intensity = Rx_data[6];
 8001d20:	4b22      	ldr	r3, [pc, #136]	; (8001dac <receiveUARTpacket+0xd0>)
 8001d22:	799a      	ldrb	r2, [r3, #6]
 8001d24:	4b27      	ldr	r3, [pc, #156]	; (8001dc4 <receiveUARTpacket+0xe8>)
 8001d26:	701a      	strb	r2, [r3, #0]
	  light_intensity = Rx_data[7];
 8001d28:	4b20      	ldr	r3, [pc, #128]	; (8001dac <receiveUARTpacket+0xd0>)
 8001d2a:	79da      	ldrb	r2, [r3, #7]
 8001d2c:	4b26      	ldr	r3, [pc, #152]	; (8001dc8 <receiveUARTpacket+0xec>)
 8001d2e:	701a      	strb	r2, [r3, #0]

	  //Set pitch
	  if (pitch){
 8001d30:	4b20      	ldr	r3, [pc, #128]	; (8001db4 <receiveUARTpacket+0xd8>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d007      	beq.n	8001d48 <receiveUARTpacket+0x6c>
		htim2.Instance->PSC = (42000000/N_SAMPLES) / pitch;
 8001d38:	4b1e      	ldr	r3, [pc, #120]	; (8001db4 <receiveUARTpacket+0xd8>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <receiveUARTpacket+0xcc>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4922      	ldr	r1, [pc, #136]	; (8001dcc <receiveUARTpacket+0xf0>)
 8001d42:	fbb1 f2f2 	udiv	r2, r1, r2
 8001d46:	629a      	str	r2, [r3, #40]	; 0x28
	  }

	  //Set stimulation frequency
	  if (stim_freq){
 8001d48:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <receiveUARTpacket+0xdc>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d009      	beq.n	8001d64 <receiveUARTpacket+0x88>
		  htim3.Instance->PSC = 21000/stim_freq;
 8001d50:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <receiveUARTpacket+0xdc>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	461a      	mov	r2, r3
 8001d56:	f245 2308 	movw	r3, #21000	; 0x5208
 8001d5a:	fb93 f2f2 	sdiv	r2, r3, r2
 8001d5e:	4b1c      	ldr	r3, [pc, #112]	; (8001dd0 <receiveUARTpacket+0xf4>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	629a      	str	r2, [r3, #40]	; 0x28
	  }

	  //Set duty cycle for light frequency
	  htim3.Instance->CCR1 = (TIMER_PRESCALER*duty_cycle)/INT_MAX;
 8001d64:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <receiveUARTpacket+0xe0>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001d6e:	fb02 f303 	mul.w	r3, r2, r3
 8001d72:	4a18      	ldr	r2, [pc, #96]	; (8001dd4 <receiveUARTpacket+0xf8>)
 8001d74:	fb82 1203 	smull	r1, r2, r2, r3
 8001d78:	441a      	add	r2, r3
 8001d7a:	11d2      	asrs	r2, r2, #7
 8001d7c:	17db      	asrs	r3, r3, #31
 8001d7e:	1ad2      	subs	r2, r2, r3
 8001d80:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <receiveUARTpacket+0xf4>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	635a      	str	r2, [r3, #52]	; 0x34
	  //Set intensity for MAX9744 with I2C
	  //uint8_t tmp[] = {sound_intensity};
	  //HAL_I2C_Master_Transmit(&hi2c2, 0b10010010, tmp, 1, 1);

	  //Set frequency for PWM controlling light intensity
	  htim4.Instance->PSC = (htim3.Instance->PSC)/LIGHT_INTENSITY_PWM_MULTIPLIER;
 8001d86:	4b12      	ldr	r3, [pc, #72]	; (8001dd0 <receiveUARTpacket+0xf4>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d8c:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <receiveUARTpacket+0xfc>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4912      	ldr	r1, [pc, #72]	; (8001ddc <receiveUARTpacket+0x100>)
 8001d92:	fba1 1202 	umull	r1, r2, r1, r2
 8001d96:	0952      	lsrs	r2, r2, #5
 8001d98:	629a      	str	r2, [r3, #40]	; 0x28

	  // Start DAC timer
	  HAL_TIM_Base_Start(&htim2);
 8001d9a:	4803      	ldr	r0, [pc, #12]	; (8001da8 <receiveUARTpacket+0xcc>)
 8001d9c:	f002 f976 	bl	800408c <HAL_TIM_Base_Start>
}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000094 	.word	0x20000094
 8001da8:	2000015c 	.word	0x2000015c
 8001dac:	20000280 	.word	0x20000280
 8001db0:	20000289 	.word	0x20000289
 8001db4:	20000008 	.word	0x20000008
 8001db8:	20000004 	.word	0x20000004
 8001dbc:	20000288 	.word	0x20000288
 8001dc0:	2000028a 	.word	0x2000028a
 8001dc4:	2000028b 	.word	0x2000028b
 8001dc8:	2000028c 	.word	0x2000028c
 8001dcc:	000668a0 	.word	0x000668a0
 8001dd0:	200001a4 	.word	0x200001a4
 8001dd4:	80808081 	.word	0x80808081
 8001dd8:	200001ec 	.word	0x200001ec
 8001ddc:	51eb851f 	.word	0x51eb851f

08001de0 <init_waves>:
//

#include "../../Inc/init.h"
#include "../../Inc/waves.h"

void init_waves(unsigned int amplitude){
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
    calcsin(amplitude);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 f80d 	bl	8001e08 <calcsin>
    calcsaw(amplitude);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f878 	bl	8001ee4 <calcsaw>
    calctri(amplitude);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f8b1 	bl	8001f5c <calctri>
    calcsquare(amplitude);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f918 	bl	8002030 <calcsquare>
}
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <calcsin>:
unsigned int square_val[N_SAMPLES];
unsigned int empty[N_SAMPLES] = {0};


void calcsin (unsigned int amplitude)
{
 8001e08:	b5b0      	push	{r4, r5, r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
    for (int i=0; i<N_SAMPLES; i++)
 8001e10:	2300      	movs	r3, #0
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	e04f      	b.n	8001eb6 <calcsin+0xae>
    {
        sine_val[i] = ((float)amplitude/255)*((sin(i*2*PI/N_SAMPLES) + 1)*(4096/2));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	ee07 3a90 	vmov	s15, r3
 8001e1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e20:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001ed0 <calcsin+0xc8>
 8001e24:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001e28:	ee16 0a90 	vmov	r0, s13
 8001e2c:	f7fe fb84 	bl	8000538 <__aeabi_f2d>
 8001e30:	4604      	mov	r4, r0
 8001e32:	460d      	mov	r5, r1
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe fb6b 	bl	8000514 <__aeabi_i2d>
 8001e3e:	a322      	add	r3, pc, #136	; (adr r3, 8001ec8 <calcsin+0xc0>)
 8001e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e44:	f7fe fbd0 	bl	80005e8 <__aeabi_dmul>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4610      	mov	r0, r2
 8001e4e:	4619      	mov	r1, r3
 8001e50:	f04f 0200 	mov.w	r2, #0
 8001e54:	4b1f      	ldr	r3, [pc, #124]	; (8001ed4 <calcsin+0xcc>)
 8001e56:	f7fe fcf1 	bl	800083c <__aeabi_ddiv>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	ec43 2b17 	vmov	d7, r2, r3
 8001e62:	eeb0 0a47 	vmov.f32	s0, s14
 8001e66:	eef0 0a67 	vmov.f32	s1, s15
 8001e6a:	f005 f811 	bl	8006e90 <sin>
 8001e6e:	ec51 0b10 	vmov	r0, r1, d0
 8001e72:	f04f 0200 	mov.w	r2, #0
 8001e76:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <calcsin+0xd0>)
 8001e78:	f7fe fa00 	bl	800027c <__adddf3>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	460b      	mov	r3, r1
 8001e80:	4610      	mov	r0, r2
 8001e82:	4619      	mov	r1, r3
 8001e84:	f04f 0200 	mov.w	r2, #0
 8001e88:	4b14      	ldr	r3, [pc, #80]	; (8001edc <calcsin+0xd4>)
 8001e8a:	f7fe fbad 	bl	80005e8 <__aeabi_dmul>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	460b      	mov	r3, r1
 8001e92:	4620      	mov	r0, r4
 8001e94:	4629      	mov	r1, r5
 8001e96:	f7fe fba7 	bl	80005e8 <__aeabi_dmul>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	4610      	mov	r0, r2
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f7fe fe63 	bl	8000b6c <__aeabi_d2uiz>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	490d      	ldr	r1, [pc, #52]	; (8001ee0 <calcsin+0xd8>)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i=0; i<N_SAMPLES; i++)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2b63      	cmp	r3, #99	; 0x63
 8001eba:	ddac      	ble.n	8001e16 <calcsin+0xe>
    }
}
 8001ebc:	bf00      	nop
 8001ebe:	bf00      	nop
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	4d12d84a 	.word	0x4d12d84a
 8001ecc:	400921fb 	.word	0x400921fb
 8001ed0:	437f0000 	.word	0x437f0000
 8001ed4:	40590000 	.word	0x40590000
 8001ed8:	3ff00000 	.word	0x3ff00000
 8001edc:	40a00000 	.word	0x40a00000
 8001ee0:	20000290 	.word	0x20000290

08001ee4 <calcsaw>:

void calcsaw (unsigned int amplitude)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
    for (int j=0; j<N_SAMPLES; j++)
 8001eec:	2300      	movs	r3, #0
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	e022      	b.n	8001f38 <calcsaw+0x54>
    {
        saw_val[j] = ((float)amplitude/255)*((float)j/N_SAMPLES)*(4096);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	ee07 3a90 	vmov	s15, r3
 8001ef8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001efc:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001f4c <calcsaw+0x68>
 8001f00:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	ee07 3a90 	vmov	s15, r3
 8001f0a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f0e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8001f50 <calcsaw+0x6c>
 8001f12:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f1a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001f54 <calcsaw+0x70>
 8001f1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f26:	ee17 1a90 	vmov	r1, s15
 8001f2a:	4a0b      	ldr	r2, [pc, #44]	; (8001f58 <calcsaw+0x74>)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int j=0; j<N_SAMPLES; j++)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	3301      	adds	r3, #1
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2b63      	cmp	r3, #99	; 0x63
 8001f3c:	ddd9      	ble.n	8001ef2 <calcsaw+0xe>
    }
}
 8001f3e:	bf00      	nop
 8001f40:	bf00      	nop
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	437f0000 	.word	0x437f0000
 8001f50:	42c80000 	.word	0x42c80000
 8001f54:	45800000 	.word	0x45800000
 8001f58:	20000420 	.word	0x20000420

08001f5c <calctri>:

void calctri (unsigned int amplitude)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
    for (int k=0; k<N_SAMPLES/2; k++)
 8001f64:	2300      	movs	r3, #0
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	e022      	b.n	8001fb0 <calctri+0x54>
    {
        tri_val[k] = ((float)amplitude/255)*((float)k/(N_SAMPLES/2))*(4095);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	ee07 3a90 	vmov	s15, r3
 8001f70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f74:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8002020 <calctri+0xc4>
 8001f78:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	ee07 3a90 	vmov	s15, r3
 8001f82:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f86:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8002024 <calctri+0xc8>
 8001f8a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f92:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002028 <calctri+0xcc>
 8001f96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f9e:	ee17 1a90 	vmov	r1, s15
 8001fa2:	4a22      	ldr	r2, [pc, #136]	; (800202c <calctri+0xd0>)
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int k=0; k<N_SAMPLES/2; k++)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	3301      	adds	r3, #1
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2b31      	cmp	r3, #49	; 0x31
 8001fb4:	ddd9      	ble.n	8001f6a <calctri+0xe>
    }
    for (int k=N_SAMPLES/2; k<N_SAMPLES; k++)
 8001fb6:	2332      	movs	r3, #50	; 0x32
 8001fb8:	60bb      	str	r3, [r7, #8]
 8001fba:	e027      	b.n	800200c <calctri+0xb0>
    {
        tri_val[k] = ((float)amplitude/255)*(1-((float)(k-(N_SAMPLES/2)))/(N_SAMPLES/2))*(4095);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	ee07 3a90 	vmov	s15, r3
 8001fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fc6:	eddf 6a16 	vldr	s13, [pc, #88]	; 8002020 <calctri+0xc4>
 8001fca:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	3b32      	subs	r3, #50	; 0x32
 8001fd2:	ee07 3a90 	vmov	s15, r3
 8001fd6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001fda:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8002024 <calctri+0xc8>
 8001fde:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001fe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001fe6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001fea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fee:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002028 <calctri+0xcc>
 8001ff2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ff6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ffa:	ee17 1a90 	vmov	r1, s15
 8001ffe:	4a0b      	ldr	r2, [pc, #44]	; (800202c <calctri+0xd0>)
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int k=N_SAMPLES/2; k<N_SAMPLES; k++)
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	3301      	adds	r3, #1
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	2b63      	cmp	r3, #99	; 0x63
 8002010:	ddd4      	ble.n	8001fbc <calctri+0x60>
    }
}
 8002012:	bf00      	nop
 8002014:	bf00      	nop
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	437f0000 	.word	0x437f0000
 8002024:	42480000 	.word	0x42480000
 8002028:	457ff000 	.word	0x457ff000
 800202c:	200005b0 	.word	0x200005b0

08002030 <calcsquare>:

void calcsquare (unsigned int amplitude)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
    for (int h=0; h<N_SAMPLES/2; h++)
 8002038:	2300      	movs	r3, #0
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	e017      	b.n	800206e <calcsquare+0x3e>
    {
        square_val[h] = ((float)amplitude/255)*4095;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	ee07 3a90 	vmov	s15, r3
 8002044:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002048:	eddf 6a15 	vldr	s13, [pc, #84]	; 80020a0 <calcsquare+0x70>
 800204c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002050:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80020a4 <calcsquare+0x74>
 8002054:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002058:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800205c:	ee17 1a90 	vmov	r1, s15
 8002060:	4a11      	ldr	r2, [pc, #68]	; (80020a8 <calcsquare+0x78>)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int h=0; h<N_SAMPLES/2; h++)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	3301      	adds	r3, #1
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2b31      	cmp	r3, #49	; 0x31
 8002072:	dde4      	ble.n	800203e <calcsquare+0xe>
    }
    for (int h=N_SAMPLES/2; h<N_SAMPLES; h++)
 8002074:	2332      	movs	r3, #50	; 0x32
 8002076:	60bb      	str	r3, [r7, #8]
 8002078:	e007      	b.n	800208a <calcsquare+0x5a>
    {
        square_val[h] = 0;
 800207a:	4a0b      	ldr	r2, [pc, #44]	; (80020a8 <calcsquare+0x78>)
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	2100      	movs	r1, #0
 8002080:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int h=N_SAMPLES/2; h<N_SAMPLES; h++)
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	3301      	adds	r3, #1
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	2b63      	cmp	r3, #99	; 0x63
 800208e:	ddf4      	ble.n	800207a <calcsquare+0x4a>
    }
}
 8002090:	bf00      	nop
 8002092:	bf00      	nop
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	437f0000 	.word	0x437f0000
 80020a4:	457ff000 	.word	0x457ff000
 80020a8:	20000740 	.word	0x20000740

080020ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020b0:	480d      	ldr	r0, [pc, #52]	; (80020e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020b2:	490e      	ldr	r1, [pc, #56]	; (80020ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020b4:	4a0e      	ldr	r2, [pc, #56]	; (80020f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020b8:	e002      	b.n	80020c0 <LoopCopyDataInit>

080020ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020be:	3304      	adds	r3, #4

080020c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020c4:	d3f9      	bcc.n	80020ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020c6:	4a0b      	ldr	r2, [pc, #44]	; (80020f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020c8:	4c0b      	ldr	r4, [pc, #44]	; (80020f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020cc:	e001      	b.n	80020d2 <LoopFillZerobss>

080020ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020d0:	3204      	adds	r2, #4

080020d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020d4:	d3fb      	bcc.n	80020ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020d6:	f7ff fdef 	bl	8001cb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020da:	f003 fe1b 	bl	8005d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020de:	f7fe ff97 	bl	8001010 <main>
  bx  lr    
 80020e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020ec:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80020f0:	080082a0 	.word	0x080082a0
  ldr r2, =_sbss
 80020f4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80020f8:	200008e4 	.word	0x200008e4

080020fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020fc:	e7fe      	b.n	80020fc <ADC_IRQHandler>
	...

08002100 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002104:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <HAL_Init+0x40>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a0d      	ldr	r2, [pc, #52]	; (8002140 <HAL_Init+0x40>)
 800210a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800210e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <HAL_Init+0x40>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a0a      	ldr	r2, [pc, #40]	; (8002140 <HAL_Init+0x40>)
 8002116:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800211a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800211c:	4b08      	ldr	r3, [pc, #32]	; (8002140 <HAL_Init+0x40>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a07      	ldr	r2, [pc, #28]	; (8002140 <HAL_Init+0x40>)
 8002122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002126:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002128:	2003      	movs	r0, #3
 800212a:	f000 f94f 	bl	80023cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800212e:	200f      	movs	r0, #15
 8002130:	f000 f808 	bl	8002144 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002134:	f7ff faa0 	bl	8001678 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40023c00 	.word	0x40023c00

08002144 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800214c:	4b12      	ldr	r3, [pc, #72]	; (8002198 <HAL_InitTick+0x54>)
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4b12      	ldr	r3, [pc, #72]	; (800219c <HAL_InitTick+0x58>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	4619      	mov	r1, r3
 8002156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800215a:	fbb3 f3f1 	udiv	r3, r3, r1
 800215e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002162:	4618      	mov	r0, r3
 8002164:	f000 f967 	bl	8002436 <HAL_SYSTICK_Config>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e00e      	b.n	8002190 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b0f      	cmp	r3, #15
 8002176:	d80a      	bhi.n	800218e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002178:	2200      	movs	r2, #0
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	f04f 30ff 	mov.w	r0, #4294967295
 8002180:	f000 f92f 	bl	80023e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002184:	4a06      	ldr	r2, [pc, #24]	; (80021a0 <HAL_InitTick+0x5c>)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800218a:	2300      	movs	r3, #0
 800218c:	e000      	b.n	8002190 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
}
 8002190:	4618      	mov	r0, r3
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20000000 	.word	0x20000000
 800219c:	20000010 	.word	0x20000010
 80021a0:	2000000c 	.word	0x2000000c

080021a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021a8:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <HAL_IncTick+0x20>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	461a      	mov	r2, r3
 80021ae:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <HAL_IncTick+0x24>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4413      	add	r3, r2
 80021b4:	4a04      	ldr	r2, [pc, #16]	; (80021c8 <HAL_IncTick+0x24>)
 80021b6:	6013      	str	r3, [r2, #0]
}
 80021b8:	bf00      	nop
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	20000010 	.word	0x20000010
 80021c8:	200008d0 	.word	0x200008d0

080021cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return uwTick;
 80021d0:	4b03      	ldr	r3, [pc, #12]	; (80021e0 <HAL_GetTick+0x14>)
 80021d2:	681b      	ldr	r3, [r3, #0]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	200008d0 	.word	0x200008d0

080021e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021ec:	f7ff ffee 	bl	80021cc <HAL_GetTick>
 80021f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021fc:	d005      	beq.n	800220a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021fe:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <HAL_Delay+0x44>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	461a      	mov	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4413      	add	r3, r2
 8002208:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800220a:	bf00      	nop
 800220c:	f7ff ffde 	bl	80021cc <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	429a      	cmp	r2, r3
 800221a:	d8f7      	bhi.n	800220c <HAL_Delay+0x28>
  {
  }
}
 800221c:	bf00      	nop
 800221e:	bf00      	nop
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20000010 	.word	0x20000010

0800222c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800223c:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <__NVIC_SetPriorityGrouping+0x44>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002248:	4013      	ands	r3, r2
 800224a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002254:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800225c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800225e:	4a04      	ldr	r2, [pc, #16]	; (8002270 <__NVIC_SetPriorityGrouping+0x44>)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	60d3      	str	r3, [r2, #12]
}
 8002264:	bf00      	nop
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002278:	4b04      	ldr	r3, [pc, #16]	; (800228c <__NVIC_GetPriorityGrouping+0x18>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	0a1b      	lsrs	r3, r3, #8
 800227e:	f003 0307 	and.w	r3, r3, #7
}
 8002282:	4618      	mov	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	db0b      	blt.n	80022ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	f003 021f 	and.w	r2, r3, #31
 80022a8:	4907      	ldr	r1, [pc, #28]	; (80022c8 <__NVIC_EnableIRQ+0x38>)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	095b      	lsrs	r3, r3, #5
 80022b0:	2001      	movs	r0, #1
 80022b2:	fa00 f202 	lsl.w	r2, r0, r2
 80022b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	e000e100 	.word	0xe000e100

080022cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	6039      	str	r1, [r7, #0]
 80022d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	db0a      	blt.n	80022f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	490c      	ldr	r1, [pc, #48]	; (8002318 <__NVIC_SetPriority+0x4c>)
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	0112      	lsls	r2, r2, #4
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	440b      	add	r3, r1
 80022f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022f4:	e00a      	b.n	800230c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	4908      	ldr	r1, [pc, #32]	; (800231c <__NVIC_SetPriority+0x50>)
 80022fc:	79fb      	ldrb	r3, [r7, #7]
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	3b04      	subs	r3, #4
 8002304:	0112      	lsls	r2, r2, #4
 8002306:	b2d2      	uxtb	r2, r2
 8002308:	440b      	add	r3, r1
 800230a:	761a      	strb	r2, [r3, #24]
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	e000e100 	.word	0xe000e100
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002320:	b480      	push	{r7}
 8002322:	b089      	sub	sp, #36	; 0x24
 8002324:	af00      	add	r7, sp, #0
 8002326:	60f8      	str	r0, [r7, #12]
 8002328:	60b9      	str	r1, [r7, #8]
 800232a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	f1c3 0307 	rsb	r3, r3, #7
 800233a:	2b04      	cmp	r3, #4
 800233c:	bf28      	it	cs
 800233e:	2304      	movcs	r3, #4
 8002340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	3304      	adds	r3, #4
 8002346:	2b06      	cmp	r3, #6
 8002348:	d902      	bls.n	8002350 <NVIC_EncodePriority+0x30>
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	3b03      	subs	r3, #3
 800234e:	e000      	b.n	8002352 <NVIC_EncodePriority+0x32>
 8002350:	2300      	movs	r3, #0
 8002352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002354:	f04f 32ff 	mov.w	r2, #4294967295
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43da      	mvns	r2, r3
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	401a      	ands	r2, r3
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002368:	f04f 31ff 	mov.w	r1, #4294967295
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	fa01 f303 	lsl.w	r3, r1, r3
 8002372:	43d9      	mvns	r1, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002378:	4313      	orrs	r3, r2
         );
}
 800237a:	4618      	mov	r0, r3
 800237c:	3724      	adds	r7, #36	; 0x24
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
	...

08002388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3b01      	subs	r3, #1
 8002394:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002398:	d301      	bcc.n	800239e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800239a:	2301      	movs	r3, #1
 800239c:	e00f      	b.n	80023be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800239e:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <SysTick_Config+0x40>)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3b01      	subs	r3, #1
 80023a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023a6:	210f      	movs	r1, #15
 80023a8:	f04f 30ff 	mov.w	r0, #4294967295
 80023ac:	f7ff ff8e 	bl	80022cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023b0:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <SysTick_Config+0x40>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023b6:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <SysTick_Config+0x40>)
 80023b8:	2207      	movs	r2, #7
 80023ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	e000e010 	.word	0xe000e010

080023cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7ff ff29 	bl	800222c <__NVIC_SetPriorityGrouping>
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b086      	sub	sp, #24
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	4603      	mov	r3, r0
 80023ea:	60b9      	str	r1, [r7, #8]
 80023ec:	607a      	str	r2, [r7, #4]
 80023ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023f4:	f7ff ff3e 	bl	8002274 <__NVIC_GetPriorityGrouping>
 80023f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	68b9      	ldr	r1, [r7, #8]
 80023fe:	6978      	ldr	r0, [r7, #20]
 8002400:	f7ff ff8e 	bl	8002320 <NVIC_EncodePriority>
 8002404:	4602      	mov	r2, r0
 8002406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800240a:	4611      	mov	r1, r2
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ff5d 	bl	80022cc <__NVIC_SetPriority>
}
 8002412:	bf00      	nop
 8002414:	3718      	adds	r7, #24
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	4603      	mov	r3, r0
 8002422:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff ff31 	bl	8002290 <__NVIC_EnableIRQ>
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7ff ffa2 	bl	8002388 <SysTick_Config>
 8002444:	4603      	mov	r3, r0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b082      	sub	sp, #8
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d101      	bne.n	8002460 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e014      	b.n	800248a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	791b      	ldrb	r3, [r3, #4]
 8002464:	b2db      	uxtb	r3, r3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d105      	bne.n	8002476 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7ff f92f 	bl	80016d4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2202      	movs	r2, #2
 800247a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
	...

08002494 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
 80024a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024a2:	2300      	movs	r3, #0
 80024a4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	795b      	ldrb	r3, [r3, #5]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d101      	bne.n	80024b6 <HAL_DAC_Start_DMA+0x22>
 80024b2:	2302      	movs	r3, #2
 80024b4:	e0ab      	b.n	800260e <HAL_DAC_Start_DMA+0x17a>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2201      	movs	r2, #1
 80024ba:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2202      	movs	r2, #2
 80024c0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d12f      	bne.n	8002528 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	4a52      	ldr	r2, [pc, #328]	; (8002618 <HAL_DAC_Start_DMA+0x184>)
 80024ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	4a51      	ldr	r2, [pc, #324]	; (800261c <HAL_DAC_Start_DMA+0x188>)
 80024d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	4a50      	ldr	r2, [pc, #320]	; (8002620 <HAL_DAC_Start_DMA+0x18c>)
 80024de:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80024ee:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80024f0:	6a3b      	ldr	r3, [r7, #32]
 80024f2:	2b08      	cmp	r3, #8
 80024f4:	d013      	beq.n	800251e <HAL_DAC_Start_DMA+0x8a>
 80024f6:	6a3b      	ldr	r3, [r7, #32]
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d845      	bhi.n	8002588 <HAL_DAC_Start_DMA+0xf4>
 80024fc:	6a3b      	ldr	r3, [r7, #32]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_DAC_Start_DMA+0x76>
 8002502:	6a3b      	ldr	r3, [r7, #32]
 8002504:	2b04      	cmp	r3, #4
 8002506:	d005      	beq.n	8002514 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002508:	e03e      	b.n	8002588 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	3308      	adds	r3, #8
 8002510:	613b      	str	r3, [r7, #16]
        break;
 8002512:	e03c      	b.n	800258e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	330c      	adds	r3, #12
 800251a:	613b      	str	r3, [r7, #16]
        break;
 800251c:	e037      	b.n	800258e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	3310      	adds	r3, #16
 8002524:	613b      	str	r3, [r7, #16]
        break;
 8002526:	e032      	b.n	800258e <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	4a3d      	ldr	r2, [pc, #244]	; (8002624 <HAL_DAC_Start_DMA+0x190>)
 800252e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	4a3c      	ldr	r2, [pc, #240]	; (8002628 <HAL_DAC_Start_DMA+0x194>)
 8002536:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	4a3b      	ldr	r2, [pc, #236]	; (800262c <HAL_DAC_Start_DMA+0x198>)
 800253e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800254e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002550:	6a3b      	ldr	r3, [r7, #32]
 8002552:	2b08      	cmp	r3, #8
 8002554:	d013      	beq.n	800257e <HAL_DAC_Start_DMA+0xea>
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	2b08      	cmp	r3, #8
 800255a:	d817      	bhi.n	800258c <HAL_DAC_Start_DMA+0xf8>
 800255c:	6a3b      	ldr	r3, [r7, #32]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_DAC_Start_DMA+0xd6>
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	2b04      	cmp	r3, #4
 8002566:	d005      	beq.n	8002574 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002568:	e010      	b.n	800258c <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	3314      	adds	r3, #20
 8002570:	613b      	str	r3, [r7, #16]
        break;
 8002572:	e00c      	b.n	800258e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	3318      	adds	r3, #24
 800257a:	613b      	str	r3, [r7, #16]
        break;
 800257c:	e007      	b.n	800258e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	331c      	adds	r3, #28
 8002584:	613b      	str	r3, [r7, #16]
        break;
 8002586:	e002      	b.n	800258e <HAL_DAC_Start_DMA+0xfa>
        break;
 8002588:	bf00      	nop
 800258a:	e000      	b.n	800258e <HAL_DAC_Start_DMA+0xfa>
        break;
 800258c:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d111      	bne.n	80025b8 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025a2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	6898      	ldr	r0, [r3, #8]
 80025a8:	6879      	ldr	r1, [r7, #4]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	f000 fa2d 	bl	8002a0c <HAL_DMA_Start_IT>
 80025b2:	4603      	mov	r3, r0
 80025b4:	75fb      	strb	r3, [r7, #23]
 80025b6:	e010      	b.n	80025da <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80025c6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	68d8      	ldr	r0, [r3, #12]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	f000 fa1b 	bl	8002a0c <HAL_DMA_Start_IT>
 80025d6:	4603      	mov	r3, r0
 80025d8:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80025e0:	7dfb      	ldrb	r3, [r7, #23]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10c      	bne.n	8002600 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6819      	ldr	r1, [r3, #0]
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	f003 0310 	and.w	r3, r3, #16
 80025f2:	2201      	movs	r2, #1
 80025f4:	409a      	lsls	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	e005      	b.n	800260c <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	f043 0204 	orr.w	r2, r3, #4
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800260c:	7dfb      	ldrb	r3, [r7, #23]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	0800279b 	.word	0x0800279b
 800261c:	080027bd 	.word	0x080027bd
 8002620:	080027d9 	.word	0x080027d9
 8002624:	08002843 	.word	0x08002843
 8002628:	08002865 	.word	0x08002865
 800262c:	08002881 	.word	0x08002881

08002630 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6819      	ldr	r1, [r3, #0]
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	f003 0310 	and.w	r3, r3, #16
 8002646:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43da      	mvns	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	400a      	ands	r2, r1
 8002656:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6819      	ldr	r1, [r3, #0]
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	f003 0310 	and.w	r3, r3, #16
 8002664:	2201      	movs	r2, #1
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43da      	mvns	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	400a      	ands	r2, r1
 8002672:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10d      	bne.n	8002696 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	4618      	mov	r0, r3
 8002680:	f000 fa1c 	bl	8002abc <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	e00c      	b.n	80026b0 <HAL_DAC_Stop_DMA+0x80>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	4618      	mov	r0, r3
 800269c:	f000 fa0e 	bl	8002abc <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80026ae:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b087      	sub	sp, #28
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	795b      	ldrb	r3, [r3, #5]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d101      	bne.n	8002714 <HAL_DAC_ConfigChannel+0x18>
 8002710:	2302      	movs	r3, #2
 8002712:	e03c      	b.n	800278e <HAL_DAC_ConfigChannel+0x92>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2201      	movs	r2, #1
 8002718:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2202      	movs	r2, #2
 800271e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f003 0310 	and.w	r3, r3, #16
 800272e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	4013      	ands	r3, r2
 800273c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	4313      	orrs	r3, r2
 8002748:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f003 0310 	and.w	r3, r3, #16
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	fa02 f303 	lsl.w	r3, r2, r3
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	4313      	orrs	r3, r2
 800275a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6819      	ldr	r1, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f003 0310 	and.w	r3, r3, #16
 8002770:	22c0      	movs	r2, #192	; 0xc0
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43da      	mvns	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	400a      	ands	r2, r1
 800277e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2201      	movs	r2, #1
 8002784:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	371c      	adds	r7, #28
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b084      	sub	sp, #16
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80027a8:	68f8      	ldr	r0, [r7, #12]
 80027aa:	f7ff ff89 	bl	80026c0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2201      	movs	r2, #1
 80027b2:	711a      	strb	r2, [r3, #4]
}
 80027b4:	bf00      	nop
 80027b6:	3710      	adds	r7, #16
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f7ff ff82 	bl	80026d4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80027d0:	bf00      	nop
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e4:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	f043 0204 	orr.w	r2, r3, #4
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80027f2:	68f8      	ldr	r0, [r7, #12]
 80027f4:	f7ff ff78 	bl	80026e8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2201      	movs	r2, #1
 80027fc:	711a      	strb	r2, [r3, #4]
}
 80027fe:	bf00      	nop
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800280e:	bf00      	nop
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800282e:	b480      	push	{r7}
 8002830:	b083      	sub	sp, #12
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr

08002842 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b084      	sub	sp, #16
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f7ff ffd8 	bl	8002806 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2201      	movs	r2, #1
 800285a:	711a      	strb	r2, [r3, #4]
}
 800285c:	bf00      	nop
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002870:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	f7ff ffd1 	bl	800281a <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002878:	bf00      	nop
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	f043 0204 	orr.w	r2, r3, #4
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f7ff ffc7 	bl	800282e <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2201      	movs	r2, #1
 80028a4:	711a      	strb	r2, [r3, #4]
}
 80028a6:	bf00      	nop
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
	...

080028b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028b8:	2300      	movs	r3, #0
 80028ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028bc:	f7ff fc86 	bl	80021cc <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d101      	bne.n	80028cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e099      	b.n	8002a00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2202      	movs	r2, #2
 80028d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0201 	bic.w	r2, r2, #1
 80028ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028ec:	e00f      	b.n	800290e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028ee:	f7ff fc6d 	bl	80021cc <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b05      	cmp	r3, #5
 80028fa:	d908      	bls.n	800290e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2220      	movs	r2, #32
 8002900:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2203      	movs	r2, #3
 8002906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e078      	b.n	8002a00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1e8      	bne.n	80028ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002924:	697a      	ldr	r2, [r7, #20]
 8002926:	4b38      	ldr	r3, [pc, #224]	; (8002a08 <HAL_DMA_Init+0x158>)
 8002928:	4013      	ands	r3, r2
 800292a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800293a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002946:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002952:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6a1b      	ldr	r3, [r3, #32]
 8002958:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	4313      	orrs	r3, r2
 800295e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002964:	2b04      	cmp	r3, #4
 8002966:	d107      	bne.n	8002978 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002970:	4313      	orrs	r3, r2
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	4313      	orrs	r3, r2
 8002976:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	697a      	ldr	r2, [r7, #20]
 800297e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	f023 0307 	bic.w	r3, r3, #7
 800298e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	4313      	orrs	r3, r2
 8002998:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299e:	2b04      	cmp	r3, #4
 80029a0:	d117      	bne.n	80029d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d00e      	beq.n	80029d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 fb01 	bl	8002fbc <DMA_CheckFifoParam>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d008      	beq.n	80029d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2240      	movs	r2, #64	; 0x40
 80029c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80029ce:	2301      	movs	r3, #1
 80029d0:	e016      	b.n	8002a00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 fab8 	bl	8002f50 <DMA_CalcBaseAndBitshift>
 80029e0:	4603      	mov	r3, r0
 80029e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e8:	223f      	movs	r2, #63	; 0x3f
 80029ea:	409a      	lsls	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	f010803f 	.word	0xf010803f

08002a0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
 8002a18:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a22:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d101      	bne.n	8002a32 <HAL_DMA_Start_IT+0x26>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	e040      	b.n	8002ab4 <HAL_DMA_Start_IT+0xa8>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d12f      	bne.n	8002aa6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2202      	movs	r2, #2
 8002a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	68b9      	ldr	r1, [r7, #8]
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 fa4a 	bl	8002ef4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a64:	223f      	movs	r2, #63	; 0x3f
 8002a66:	409a      	lsls	r2, r3
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0216 	orr.w	r2, r2, #22
 8002a7a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d007      	beq.n	8002a94 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0208 	orr.w	r2, r2, #8
 8002a92:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 0201 	orr.w	r2, r2, #1
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	e005      	b.n	8002ab2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002aca:	f7ff fb7f 	bl	80021cc <HAL_GetTick>
 8002ace:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d008      	beq.n	8002aee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2280      	movs	r2, #128	; 0x80
 8002ae0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e052      	b.n	8002b94 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 0216 	bic.w	r2, r2, #22
 8002afc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695a      	ldr	r2, [r3, #20]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b0c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d103      	bne.n	8002b1e <HAL_DMA_Abort+0x62>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d007      	beq.n	8002b2e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0208 	bic.w	r2, r2, #8
 8002b2c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0201 	bic.w	r2, r2, #1
 8002b3c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b3e:	e013      	b.n	8002b68 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b40:	f7ff fb44 	bl	80021cc <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b05      	cmp	r3, #5
 8002b4c:	d90c      	bls.n	8002b68 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2220      	movs	r2, #32
 8002b52:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2203      	movs	r2, #3
 8002b58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e015      	b.n	8002b94 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1e4      	bne.n	8002b40 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7a:	223f      	movs	r2, #63	; 0x3f
 8002b7c:	409a      	lsls	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d004      	beq.n	8002bba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2280      	movs	r2, #128	; 0x80
 8002bb4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e00c      	b.n	8002bd4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2205      	movs	r2, #5
 8002bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0201 	bic.w	r2, r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002be8:	2300      	movs	r3, #0
 8002bea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002bec:	4b8e      	ldr	r3, [pc, #568]	; (8002e28 <HAL_DMA_IRQHandler+0x248>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a8e      	ldr	r2, [pc, #568]	; (8002e2c <HAL_DMA_IRQHandler+0x24c>)
 8002bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf6:	0a9b      	lsrs	r3, r3, #10
 8002bf8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bfe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0a:	2208      	movs	r2, #8
 8002c0c:	409a      	lsls	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	4013      	ands	r3, r2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d01a      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d013      	beq.n	8002c4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0204 	bic.w	r2, r2, #4
 8002c32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c38:	2208      	movs	r2, #8
 8002c3a:	409a      	lsls	r2, r3
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c44:	f043 0201 	orr.w	r2, r3, #1
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c50:	2201      	movs	r2, #1
 8002c52:	409a      	lsls	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4013      	ands	r3, r2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d012      	beq.n	8002c82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d00b      	beq.n	8002c82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6e:	2201      	movs	r2, #1
 8002c70:	409a      	lsls	r2, r3
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c7a:	f043 0202 	orr.w	r2, r3, #2
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c86:	2204      	movs	r2, #4
 8002c88:	409a      	lsls	r2, r3
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d012      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00b      	beq.n	8002cb8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca4:	2204      	movs	r2, #4
 8002ca6:	409a      	lsls	r2, r3
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cb0:	f043 0204 	orr.w	r2, r3, #4
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cbc:	2210      	movs	r2, #16
 8002cbe:	409a      	lsls	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d043      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d03c      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cda:	2210      	movs	r2, #16
 8002cdc:	409a      	lsls	r2, r3
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d018      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d108      	bne.n	8002d10 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d024      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	4798      	blx	r3
 8002d0e:	e01f      	b.n	8002d50 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d01b      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	4798      	blx	r3
 8002d20:	e016      	b.n	8002d50 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d107      	bne.n	8002d40 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0208 	bic.w	r2, r2, #8
 8002d3e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d54:	2220      	movs	r2, #32
 8002d56:	409a      	lsls	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 808f 	beq.w	8002e80 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0310 	and.w	r3, r3, #16
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 8087 	beq.w	8002e80 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d76:	2220      	movs	r2, #32
 8002d78:	409a      	lsls	r2, r3
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b05      	cmp	r3, #5
 8002d88:	d136      	bne.n	8002df8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 0216 	bic.w	r2, r2, #22
 8002d98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	695a      	ldr	r2, [r3, #20]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002da8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d103      	bne.n	8002dba <HAL_DMA_IRQHandler+0x1da>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d007      	beq.n	8002dca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0208 	bic.w	r2, r2, #8
 8002dc8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dce:	223f      	movs	r2, #63	; 0x3f
 8002dd0:	409a      	lsls	r2, r3
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d07e      	beq.n	8002eec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	4798      	blx	r3
        }
        return;
 8002df6:	e079      	b.n	8002eec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d01d      	beq.n	8002e42 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d10d      	bne.n	8002e30 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d031      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	4798      	blx	r3
 8002e24:	e02c      	b.n	8002e80 <HAL_DMA_IRQHandler+0x2a0>
 8002e26:	bf00      	nop
 8002e28:	20000000 	.word	0x20000000
 8002e2c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d023      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	4798      	blx	r3
 8002e40:	e01e      	b.n	8002e80 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10f      	bne.n	8002e70 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0210 	bic.w	r2, r2, #16
 8002e5e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d003      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d032      	beq.n	8002eee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d022      	beq.n	8002eda <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2205      	movs	r2, #5
 8002e98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0201 	bic.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	60bb      	str	r3, [r7, #8]
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d307      	bcc.n	8002ec8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1f2      	bne.n	8002eac <HAL_DMA_IRQHandler+0x2cc>
 8002ec6:	e000      	b.n	8002eca <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ec8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d005      	beq.n	8002eee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	4798      	blx	r3
 8002eea:	e000      	b.n	8002eee <HAL_DMA_IRQHandler+0x30e>
        return;
 8002eec:	bf00      	nop
    }
  }
}
 8002eee:	3718      	adds	r7, #24
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	607a      	str	r2, [r7, #4]
 8002f00:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f10:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	2b40      	cmp	r3, #64	; 0x40
 8002f20:	d108      	bne.n	8002f34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f32:	e007      	b.n	8002f44 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	60da      	str	r2, [r3, #12]
}
 8002f44:	bf00      	nop
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	3b10      	subs	r3, #16
 8002f60:	4a14      	ldr	r2, [pc, #80]	; (8002fb4 <DMA_CalcBaseAndBitshift+0x64>)
 8002f62:	fba2 2303 	umull	r2, r3, r2, r3
 8002f66:	091b      	lsrs	r3, r3, #4
 8002f68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f6a:	4a13      	ldr	r2, [pc, #76]	; (8002fb8 <DMA_CalcBaseAndBitshift+0x68>)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	4413      	add	r3, r2
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	461a      	mov	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2b03      	cmp	r3, #3
 8002f7c:	d909      	bls.n	8002f92 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f86:	f023 0303 	bic.w	r3, r3, #3
 8002f8a:	1d1a      	adds	r2, r3, #4
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	659a      	str	r2, [r3, #88]	; 0x58
 8002f90:	e007      	b.n	8002fa2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002f9a:	f023 0303 	bic.w	r3, r3, #3
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3714      	adds	r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	aaaaaaab 	.word	0xaaaaaaab
 8002fb8:	08007f68 	.word	0x08007f68

08002fbc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fcc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d11f      	bne.n	8003016 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d856      	bhi.n	800308a <DMA_CheckFifoParam+0xce>
 8002fdc:	a201      	add	r2, pc, #4	; (adr r2, 8002fe4 <DMA_CheckFifoParam+0x28>)
 8002fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe2:	bf00      	nop
 8002fe4:	08002ff5 	.word	0x08002ff5
 8002fe8:	08003007 	.word	0x08003007
 8002fec:	08002ff5 	.word	0x08002ff5
 8002ff0:	0800308b 	.word	0x0800308b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d046      	beq.n	800308e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003004:	e043      	b.n	800308e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800300e:	d140      	bne.n	8003092 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003014:	e03d      	b.n	8003092 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800301e:	d121      	bne.n	8003064 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	2b03      	cmp	r3, #3
 8003024:	d837      	bhi.n	8003096 <DMA_CheckFifoParam+0xda>
 8003026:	a201      	add	r2, pc, #4	; (adr r2, 800302c <DMA_CheckFifoParam+0x70>)
 8003028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800302c:	0800303d 	.word	0x0800303d
 8003030:	08003043 	.word	0x08003043
 8003034:	0800303d 	.word	0x0800303d
 8003038:	08003055 	.word	0x08003055
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	73fb      	strb	r3, [r7, #15]
      break;
 8003040:	e030      	b.n	80030a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003046:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d025      	beq.n	800309a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003052:	e022      	b.n	800309a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003058:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800305c:	d11f      	bne.n	800309e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003062:	e01c      	b.n	800309e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	2b02      	cmp	r3, #2
 8003068:	d903      	bls.n	8003072 <DMA_CheckFifoParam+0xb6>
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	2b03      	cmp	r3, #3
 800306e:	d003      	beq.n	8003078 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003070:	e018      	b.n	80030a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	73fb      	strb	r3, [r7, #15]
      break;
 8003076:	e015      	b.n	80030a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00e      	beq.n	80030a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	73fb      	strb	r3, [r7, #15]
      break;
 8003088:	e00b      	b.n	80030a2 <DMA_CheckFifoParam+0xe6>
      break;
 800308a:	bf00      	nop
 800308c:	e00a      	b.n	80030a4 <DMA_CheckFifoParam+0xe8>
      break;
 800308e:	bf00      	nop
 8003090:	e008      	b.n	80030a4 <DMA_CheckFifoParam+0xe8>
      break;
 8003092:	bf00      	nop
 8003094:	e006      	b.n	80030a4 <DMA_CheckFifoParam+0xe8>
      break;
 8003096:	bf00      	nop
 8003098:	e004      	b.n	80030a4 <DMA_CheckFifoParam+0xe8>
      break;
 800309a:	bf00      	nop
 800309c:	e002      	b.n	80030a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800309e:	bf00      	nop
 80030a0:	e000      	b.n	80030a4 <DMA_CheckFifoParam+0xe8>
      break;
 80030a2:	bf00      	nop
    }
  } 
  
  return status; 
 80030a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop

080030b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b089      	sub	sp, #36	; 0x24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030be:	2300      	movs	r3, #0
 80030c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ca:	2300      	movs	r3, #0
 80030cc:	61fb      	str	r3, [r7, #28]
 80030ce:	e16b      	b.n	80033a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030d0:	2201      	movs	r2, #1
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	4013      	ands	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	f040 815a 	bne.w	80033a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d005      	beq.n	8003106 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003102:	2b02      	cmp	r3, #2
 8003104:	d130      	bne.n	8003168 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	2203      	movs	r2, #3
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43db      	mvns	r3, r3
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4013      	ands	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	4313      	orrs	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800313c:	2201      	movs	r2, #1
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	43db      	mvns	r3, r3
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4013      	ands	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	091b      	lsrs	r3, r3, #4
 8003152:	f003 0201 	and.w	r2, r3, #1
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	4313      	orrs	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f003 0303 	and.w	r3, r3, #3
 8003170:	2b03      	cmp	r3, #3
 8003172:	d017      	beq.n	80031a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	2203      	movs	r2, #3
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	43db      	mvns	r3, r3
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	4013      	ands	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4313      	orrs	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f003 0303 	and.w	r3, r3, #3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d123      	bne.n	80031f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	08da      	lsrs	r2, r3, #3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3208      	adds	r2, #8
 80031b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	220f      	movs	r2, #15
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	43db      	mvns	r3, r3
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	4013      	ands	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	08da      	lsrs	r2, r3, #3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	3208      	adds	r2, #8
 80031f2:	69b9      	ldr	r1, [r7, #24]
 80031f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	2203      	movs	r2, #3
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	43db      	mvns	r3, r3
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	4013      	ands	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f003 0203 	and.w	r2, r3, #3
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4313      	orrs	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 80b4 	beq.w	80033a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	4b60      	ldr	r3, [pc, #384]	; (80033c0 <HAL_GPIO_Init+0x30c>)
 8003240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003242:	4a5f      	ldr	r2, [pc, #380]	; (80033c0 <HAL_GPIO_Init+0x30c>)
 8003244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003248:	6453      	str	r3, [r2, #68]	; 0x44
 800324a:	4b5d      	ldr	r3, [pc, #372]	; (80033c0 <HAL_GPIO_Init+0x30c>)
 800324c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003256:	4a5b      	ldr	r2, [pc, #364]	; (80033c4 <HAL_GPIO_Init+0x310>)
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	089b      	lsrs	r3, r3, #2
 800325c:	3302      	adds	r3, #2
 800325e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003262:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	f003 0303 	and.w	r3, r3, #3
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	220f      	movs	r2, #15
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	43db      	mvns	r3, r3
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	4013      	ands	r3, r2
 8003278:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a52      	ldr	r2, [pc, #328]	; (80033c8 <HAL_GPIO_Init+0x314>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d02b      	beq.n	80032da <HAL_GPIO_Init+0x226>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a51      	ldr	r2, [pc, #324]	; (80033cc <HAL_GPIO_Init+0x318>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d025      	beq.n	80032d6 <HAL_GPIO_Init+0x222>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a50      	ldr	r2, [pc, #320]	; (80033d0 <HAL_GPIO_Init+0x31c>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d01f      	beq.n	80032d2 <HAL_GPIO_Init+0x21e>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a4f      	ldr	r2, [pc, #316]	; (80033d4 <HAL_GPIO_Init+0x320>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d019      	beq.n	80032ce <HAL_GPIO_Init+0x21a>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a4e      	ldr	r2, [pc, #312]	; (80033d8 <HAL_GPIO_Init+0x324>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d013      	beq.n	80032ca <HAL_GPIO_Init+0x216>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a4d      	ldr	r2, [pc, #308]	; (80033dc <HAL_GPIO_Init+0x328>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d00d      	beq.n	80032c6 <HAL_GPIO_Init+0x212>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a4c      	ldr	r2, [pc, #304]	; (80033e0 <HAL_GPIO_Init+0x32c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d007      	beq.n	80032c2 <HAL_GPIO_Init+0x20e>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a4b      	ldr	r2, [pc, #300]	; (80033e4 <HAL_GPIO_Init+0x330>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d101      	bne.n	80032be <HAL_GPIO_Init+0x20a>
 80032ba:	2307      	movs	r3, #7
 80032bc:	e00e      	b.n	80032dc <HAL_GPIO_Init+0x228>
 80032be:	2308      	movs	r3, #8
 80032c0:	e00c      	b.n	80032dc <HAL_GPIO_Init+0x228>
 80032c2:	2306      	movs	r3, #6
 80032c4:	e00a      	b.n	80032dc <HAL_GPIO_Init+0x228>
 80032c6:	2305      	movs	r3, #5
 80032c8:	e008      	b.n	80032dc <HAL_GPIO_Init+0x228>
 80032ca:	2304      	movs	r3, #4
 80032cc:	e006      	b.n	80032dc <HAL_GPIO_Init+0x228>
 80032ce:	2303      	movs	r3, #3
 80032d0:	e004      	b.n	80032dc <HAL_GPIO_Init+0x228>
 80032d2:	2302      	movs	r3, #2
 80032d4:	e002      	b.n	80032dc <HAL_GPIO_Init+0x228>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <HAL_GPIO_Init+0x228>
 80032da:	2300      	movs	r3, #0
 80032dc:	69fa      	ldr	r2, [r7, #28]
 80032de:	f002 0203 	and.w	r2, r2, #3
 80032e2:	0092      	lsls	r2, r2, #2
 80032e4:	4093      	lsls	r3, r2
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032ec:	4935      	ldr	r1, [pc, #212]	; (80033c4 <HAL_GPIO_Init+0x310>)
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	089b      	lsrs	r3, r3, #2
 80032f2:	3302      	adds	r3, #2
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032fa:	4b3b      	ldr	r3, [pc, #236]	; (80033e8 <HAL_GPIO_Init+0x334>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	43db      	mvns	r3, r3
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	4013      	ands	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	4313      	orrs	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800331e:	4a32      	ldr	r2, [pc, #200]	; (80033e8 <HAL_GPIO_Init+0x334>)
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003324:	4b30      	ldr	r3, [pc, #192]	; (80033e8 <HAL_GPIO_Init+0x334>)
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	43db      	mvns	r3, r3
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	4013      	ands	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800333c:	2b00      	cmp	r3, #0
 800333e:	d003      	beq.n	8003348 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003340:	69ba      	ldr	r2, [r7, #24]
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003348:	4a27      	ldr	r2, [pc, #156]	; (80033e8 <HAL_GPIO_Init+0x334>)
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800334e:	4b26      	ldr	r3, [pc, #152]	; (80033e8 <HAL_GPIO_Init+0x334>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	43db      	mvns	r3, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4013      	ands	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800336a:	69ba      	ldr	r2, [r7, #24]
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	4313      	orrs	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003372:	4a1d      	ldr	r2, [pc, #116]	; (80033e8 <HAL_GPIO_Init+0x334>)
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003378:	4b1b      	ldr	r3, [pc, #108]	; (80033e8 <HAL_GPIO_Init+0x334>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	43db      	mvns	r3, r3
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	4013      	ands	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d003      	beq.n	800339c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	4313      	orrs	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800339c:	4a12      	ldr	r2, [pc, #72]	; (80033e8 <HAL_GPIO_Init+0x334>)
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	3301      	adds	r3, #1
 80033a6:	61fb      	str	r3, [r7, #28]
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	2b0f      	cmp	r3, #15
 80033ac:	f67f ae90 	bls.w	80030d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033b0:	bf00      	nop
 80033b2:	bf00      	nop
 80033b4:	3724      	adds	r7, #36	; 0x24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40023800 	.word	0x40023800
 80033c4:	40013800 	.word	0x40013800
 80033c8:	40020000 	.word	0x40020000
 80033cc:	40020400 	.word	0x40020400
 80033d0:	40020800 	.word	0x40020800
 80033d4:	40020c00 	.word	0x40020c00
 80033d8:	40021000 	.word	0x40021000
 80033dc:	40021400 	.word	0x40021400
 80033e0:	40021800 	.word	0x40021800
 80033e4:	40021c00 	.word	0x40021c00
 80033e8:	40013c00 	.word	0x40013c00

080033ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	887b      	ldrh	r3, [r7, #2]
 80033fe:	4013      	ands	r3, r2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003404:	2301      	movs	r3, #1
 8003406:	73fb      	strb	r3, [r7, #15]
 8003408:	e001      	b.n	800340e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800340a:	2300      	movs	r3, #0
 800340c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800340e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	807b      	strh	r3, [r7, #2]
 8003428:	4613      	mov	r3, r2
 800342a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800342c:	787b      	ldrb	r3, [r7, #1]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003432:	887a      	ldrh	r2, [r7, #2]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003438:	e003      	b.n	8003442 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800343a:	887b      	ldrh	r3, [r7, #2]
 800343c:	041a      	lsls	r2, r3, #16
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	619a      	str	r2, [r3, #24]
}
 8003442:	bf00      	nop
 8003444:	370c      	adds	r7, #12
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr

0800344e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800344e:	b480      	push	{r7}
 8003450:	b085      	sub	sp, #20
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
 8003456:	460b      	mov	r3, r1
 8003458:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003460:	887a      	ldrh	r2, [r7, #2]
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4013      	ands	r3, r2
 8003466:	041a      	lsls	r2, r3, #16
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	43d9      	mvns	r1, r3
 800346c:	887b      	ldrh	r3, [r7, #2]
 800346e:	400b      	ands	r3, r1
 8003470:	431a      	orrs	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	619a      	str	r2, [r3, #24]
}
 8003476:	bf00      	nop
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
	...

08003484 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800348e:	4b08      	ldr	r3, [pc, #32]	; (80034b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003490:	695a      	ldr	r2, [r3, #20]
 8003492:	88fb      	ldrh	r3, [r7, #6]
 8003494:	4013      	ands	r3, r2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d006      	beq.n	80034a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800349a:	4a05      	ldr	r2, [pc, #20]	; (80034b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800349c:	88fb      	ldrh	r3, [r7, #6]
 800349e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034a0:	88fb      	ldrh	r3, [r7, #6]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fd fd16 	bl	8000ed4 <HAL_GPIO_EXTI_Callback>
  }
}
 80034a8:	bf00      	nop
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}
 80034b0:	40013c00 	.word	0x40013c00

080034b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e12b      	b.n	800371e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d106      	bne.n	80034e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7fe f97c 	bl	80017d8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2224      	movs	r2, #36	; 0x24
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f022 0201 	bic.w	r2, r2, #1
 80034f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003506:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003516:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003518:	f000 fd40 	bl	8003f9c <HAL_RCC_GetPCLK1Freq>
 800351c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	4a81      	ldr	r2, [pc, #516]	; (8003728 <HAL_I2C_Init+0x274>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d807      	bhi.n	8003538 <HAL_I2C_Init+0x84>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	4a80      	ldr	r2, [pc, #512]	; (800372c <HAL_I2C_Init+0x278>)
 800352c:	4293      	cmp	r3, r2
 800352e:	bf94      	ite	ls
 8003530:	2301      	movls	r3, #1
 8003532:	2300      	movhi	r3, #0
 8003534:	b2db      	uxtb	r3, r3
 8003536:	e006      	b.n	8003546 <HAL_I2C_Init+0x92>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	4a7d      	ldr	r2, [pc, #500]	; (8003730 <HAL_I2C_Init+0x27c>)
 800353c:	4293      	cmp	r3, r2
 800353e:	bf94      	ite	ls
 8003540:	2301      	movls	r3, #1
 8003542:	2300      	movhi	r3, #0
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e0e7      	b.n	800371e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	4a78      	ldr	r2, [pc, #480]	; (8003734 <HAL_I2C_Init+0x280>)
 8003552:	fba2 2303 	umull	r2, r3, r2, r3
 8003556:	0c9b      	lsrs	r3, r3, #18
 8003558:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	430a      	orrs	r2, r1
 800356c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	4a6a      	ldr	r2, [pc, #424]	; (8003728 <HAL_I2C_Init+0x274>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d802      	bhi.n	8003588 <HAL_I2C_Init+0xd4>
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	3301      	adds	r3, #1
 8003586:	e009      	b.n	800359c <HAL_I2C_Init+0xe8>
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800358e:	fb02 f303 	mul.w	r3, r2, r3
 8003592:	4a69      	ldr	r2, [pc, #420]	; (8003738 <HAL_I2C_Init+0x284>)
 8003594:	fba2 2303 	umull	r2, r3, r2, r3
 8003598:	099b      	lsrs	r3, r3, #6
 800359a:	3301      	adds	r3, #1
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	6812      	ldr	r2, [r2, #0]
 80035a0:	430b      	orrs	r3, r1
 80035a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	69db      	ldr	r3, [r3, #28]
 80035aa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80035ae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	495c      	ldr	r1, [pc, #368]	; (8003728 <HAL_I2C_Init+0x274>)
 80035b8:	428b      	cmp	r3, r1
 80035ba:	d819      	bhi.n	80035f0 <HAL_I2C_Init+0x13c>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	1e59      	subs	r1, r3, #1
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80035ca:	1c59      	adds	r1, r3, #1
 80035cc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80035d0:	400b      	ands	r3, r1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00a      	beq.n	80035ec <HAL_I2C_Init+0x138>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	1e59      	subs	r1, r3, #1
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80035e4:	3301      	adds	r3, #1
 80035e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ea:	e051      	b.n	8003690 <HAL_I2C_Init+0x1dc>
 80035ec:	2304      	movs	r3, #4
 80035ee:	e04f      	b.n	8003690 <HAL_I2C_Init+0x1dc>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d111      	bne.n	800361c <HAL_I2C_Init+0x168>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	1e58      	subs	r0, r3, #1
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6859      	ldr	r1, [r3, #4]
 8003600:	460b      	mov	r3, r1
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	440b      	add	r3, r1
 8003606:	fbb0 f3f3 	udiv	r3, r0, r3
 800360a:	3301      	adds	r3, #1
 800360c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003610:	2b00      	cmp	r3, #0
 8003612:	bf0c      	ite	eq
 8003614:	2301      	moveq	r3, #1
 8003616:	2300      	movne	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	e012      	b.n	8003642 <HAL_I2C_Init+0x18e>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	1e58      	subs	r0, r3, #1
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6859      	ldr	r1, [r3, #4]
 8003624:	460b      	mov	r3, r1
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	0099      	lsls	r1, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003632:	3301      	adds	r3, #1
 8003634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003638:	2b00      	cmp	r3, #0
 800363a:	bf0c      	ite	eq
 800363c:	2301      	moveq	r3, #1
 800363e:	2300      	movne	r3, #0
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <HAL_I2C_Init+0x196>
 8003646:	2301      	movs	r3, #1
 8003648:	e022      	b.n	8003690 <HAL_I2C_Init+0x1dc>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10e      	bne.n	8003670 <HAL_I2C_Init+0x1bc>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	1e58      	subs	r0, r3, #1
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6859      	ldr	r1, [r3, #4]
 800365a:	460b      	mov	r3, r1
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	440b      	add	r3, r1
 8003660:	fbb0 f3f3 	udiv	r3, r0, r3
 8003664:	3301      	adds	r3, #1
 8003666:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800366a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800366e:	e00f      	b.n	8003690 <HAL_I2C_Init+0x1dc>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	1e58      	subs	r0, r3, #1
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6859      	ldr	r1, [r3, #4]
 8003678:	460b      	mov	r3, r1
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	0099      	lsls	r1, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	fbb0 f3f3 	udiv	r3, r0, r3
 8003686:	3301      	adds	r3, #1
 8003688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800368c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003690:	6879      	ldr	r1, [r7, #4]
 8003692:	6809      	ldr	r1, [r1, #0]
 8003694:	4313      	orrs	r3, r2
 8003696:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69da      	ldr	r2, [r3, #28]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	430a      	orrs	r2, r1
 80036b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80036be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6911      	ldr	r1, [r2, #16]
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	68d2      	ldr	r2, [r2, #12]
 80036ca:	4311      	orrs	r1, r2
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	6812      	ldr	r2, [r2, #0]
 80036d0:	430b      	orrs	r3, r1
 80036d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68db      	ldr	r3, [r3, #12]
 80036da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	695a      	ldr	r2, [r3, #20]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	431a      	orrs	r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f042 0201 	orr.w	r2, r2, #1
 80036fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2220      	movs	r2, #32
 800370a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	000186a0 	.word	0x000186a0
 800372c:	001e847f 	.word	0x001e847f
 8003730:	003d08ff 	.word	0x003d08ff
 8003734:	431bde83 	.word	0x431bde83
 8003738:	10624dd3 	.word	0x10624dd3

0800373c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b086      	sub	sp, #24
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e267      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d075      	beq.n	8003846 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800375a:	4b88      	ldr	r3, [pc, #544]	; (800397c <HAL_RCC_OscConfig+0x240>)
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f003 030c 	and.w	r3, r3, #12
 8003762:	2b04      	cmp	r3, #4
 8003764:	d00c      	beq.n	8003780 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003766:	4b85      	ldr	r3, [pc, #532]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800376e:	2b08      	cmp	r3, #8
 8003770:	d112      	bne.n	8003798 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003772:	4b82      	ldr	r3, [pc, #520]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800377a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800377e:	d10b      	bne.n	8003798 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003780:	4b7e      	ldr	r3, [pc, #504]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d05b      	beq.n	8003844 <HAL_RCC_OscConfig+0x108>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d157      	bne.n	8003844 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	e242      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a0:	d106      	bne.n	80037b0 <HAL_RCC_OscConfig+0x74>
 80037a2:	4b76      	ldr	r3, [pc, #472]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a75      	ldr	r2, [pc, #468]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80037a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	e01d      	b.n	80037ec <HAL_RCC_OscConfig+0xb0>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80037b8:	d10c      	bne.n	80037d4 <HAL_RCC_OscConfig+0x98>
 80037ba:	4b70      	ldr	r3, [pc, #448]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a6f      	ldr	r2, [pc, #444]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80037c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037c4:	6013      	str	r3, [r2, #0]
 80037c6:	4b6d      	ldr	r3, [pc, #436]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a6c      	ldr	r2, [pc, #432]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80037cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	e00b      	b.n	80037ec <HAL_RCC_OscConfig+0xb0>
 80037d4:	4b69      	ldr	r3, [pc, #420]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a68      	ldr	r2, [pc, #416]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80037da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037de:	6013      	str	r3, [r2, #0]
 80037e0:	4b66      	ldr	r3, [pc, #408]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a65      	ldr	r2, [pc, #404]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80037e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d013      	beq.n	800381c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037f4:	f7fe fcea 	bl	80021cc <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037fc:	f7fe fce6 	bl	80021cc <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b64      	cmp	r3, #100	; 0x64
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e207      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800380e:	4b5b      	ldr	r3, [pc, #364]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003816:	2b00      	cmp	r3, #0
 8003818:	d0f0      	beq.n	80037fc <HAL_RCC_OscConfig+0xc0>
 800381a:	e014      	b.n	8003846 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381c:	f7fe fcd6 	bl	80021cc <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003824:	f7fe fcd2 	bl	80021cc <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b64      	cmp	r3, #100	; 0x64
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e1f3      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003836:	4b51      	ldr	r3, [pc, #324]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1f0      	bne.n	8003824 <HAL_RCC_OscConfig+0xe8>
 8003842:	e000      	b.n	8003846 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003844:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d063      	beq.n	800391a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003852:	4b4a      	ldr	r3, [pc, #296]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f003 030c 	and.w	r3, r3, #12
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00b      	beq.n	8003876 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800385e:	4b47      	ldr	r3, [pc, #284]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003866:	2b08      	cmp	r3, #8
 8003868:	d11c      	bne.n	80038a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800386a:	4b44      	ldr	r3, [pc, #272]	; (800397c <HAL_RCC_OscConfig+0x240>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d116      	bne.n	80038a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003876:	4b41      	ldr	r3, [pc, #260]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d005      	beq.n	800388e <HAL_RCC_OscConfig+0x152>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d001      	beq.n	800388e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e1c7      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800388e:	4b3b      	ldr	r3, [pc, #236]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	4937      	ldr	r1, [pc, #220]	; (800397c <HAL_RCC_OscConfig+0x240>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038a2:	e03a      	b.n	800391a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d020      	beq.n	80038ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80038ac:	4b34      	ldr	r3, [pc, #208]	; (8003980 <HAL_RCC_OscConfig+0x244>)
 80038ae:	2201      	movs	r2, #1
 80038b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b2:	f7fe fc8b 	bl	80021cc <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b8:	e008      	b.n	80038cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038ba:	f7fe fc87 	bl	80021cc <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d901      	bls.n	80038cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e1a8      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038cc:	4b2b      	ldr	r3, [pc, #172]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0f0      	beq.n	80038ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038d8:	4b28      	ldr	r3, [pc, #160]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	4925      	ldr	r1, [pc, #148]	; (800397c <HAL_RCC_OscConfig+0x240>)
 80038e8:	4313      	orrs	r3, r2
 80038ea:	600b      	str	r3, [r1, #0]
 80038ec:	e015      	b.n	800391a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ee:	4b24      	ldr	r3, [pc, #144]	; (8003980 <HAL_RCC_OscConfig+0x244>)
 80038f0:	2200      	movs	r2, #0
 80038f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f4:	f7fe fc6a 	bl	80021cc <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038fc:	f7fe fc66 	bl	80021cc <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e187      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800390e:	4b1b      	ldr	r3, [pc, #108]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1f0      	bne.n	80038fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0308 	and.w	r3, r3, #8
 8003922:	2b00      	cmp	r3, #0
 8003924:	d036      	beq.n	8003994 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d016      	beq.n	800395c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800392e:	4b15      	ldr	r3, [pc, #84]	; (8003984 <HAL_RCC_OscConfig+0x248>)
 8003930:	2201      	movs	r2, #1
 8003932:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003934:	f7fe fc4a 	bl	80021cc <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800393c:	f7fe fc46 	bl	80021cc <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e167      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800394e:	4b0b      	ldr	r3, [pc, #44]	; (800397c <HAL_RCC_OscConfig+0x240>)
 8003950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d0f0      	beq.n	800393c <HAL_RCC_OscConfig+0x200>
 800395a:	e01b      	b.n	8003994 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800395c:	4b09      	ldr	r3, [pc, #36]	; (8003984 <HAL_RCC_OscConfig+0x248>)
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003962:	f7fe fc33 	bl	80021cc <HAL_GetTick>
 8003966:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003968:	e00e      	b.n	8003988 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800396a:	f7fe fc2f 	bl	80021cc <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	2b02      	cmp	r3, #2
 8003976:	d907      	bls.n	8003988 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	e150      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
 800397c:	40023800 	.word	0x40023800
 8003980:	42470000 	.word	0x42470000
 8003984:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003988:	4b88      	ldr	r3, [pc, #544]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 800398a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1ea      	bne.n	800396a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 8097 	beq.w	8003ad0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039a2:	2300      	movs	r3, #0
 80039a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039a6:	4b81      	ldr	r3, [pc, #516]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10f      	bne.n	80039d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039b2:	2300      	movs	r3, #0
 80039b4:	60bb      	str	r3, [r7, #8]
 80039b6:	4b7d      	ldr	r3, [pc, #500]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 80039b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ba:	4a7c      	ldr	r2, [pc, #496]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 80039bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039c0:	6413      	str	r3, [r2, #64]	; 0x40
 80039c2:	4b7a      	ldr	r3, [pc, #488]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 80039c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ca:	60bb      	str	r3, [r7, #8]
 80039cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039ce:	2301      	movs	r3, #1
 80039d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d2:	4b77      	ldr	r3, [pc, #476]	; (8003bb0 <HAL_RCC_OscConfig+0x474>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d118      	bne.n	8003a10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039de:	4b74      	ldr	r3, [pc, #464]	; (8003bb0 <HAL_RCC_OscConfig+0x474>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a73      	ldr	r2, [pc, #460]	; (8003bb0 <HAL_RCC_OscConfig+0x474>)
 80039e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ea:	f7fe fbef 	bl	80021cc <HAL_GetTick>
 80039ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f0:	e008      	b.n	8003a04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039f2:	f7fe fbeb 	bl	80021cc <HAL_GetTick>
 80039f6:	4602      	mov	r2, r0
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	2b02      	cmp	r3, #2
 80039fe:	d901      	bls.n	8003a04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a00:	2303      	movs	r3, #3
 8003a02:	e10c      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a04:	4b6a      	ldr	r3, [pc, #424]	; (8003bb0 <HAL_RCC_OscConfig+0x474>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d0f0      	beq.n	80039f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d106      	bne.n	8003a26 <HAL_RCC_OscConfig+0x2ea>
 8003a18:	4b64      	ldr	r3, [pc, #400]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1c:	4a63      	ldr	r2, [pc, #396]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a1e:	f043 0301 	orr.w	r3, r3, #1
 8003a22:	6713      	str	r3, [r2, #112]	; 0x70
 8003a24:	e01c      	b.n	8003a60 <HAL_RCC_OscConfig+0x324>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	2b05      	cmp	r3, #5
 8003a2c:	d10c      	bne.n	8003a48 <HAL_RCC_OscConfig+0x30c>
 8003a2e:	4b5f      	ldr	r3, [pc, #380]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a32:	4a5e      	ldr	r2, [pc, #376]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a34:	f043 0304 	orr.w	r3, r3, #4
 8003a38:	6713      	str	r3, [r2, #112]	; 0x70
 8003a3a:	4b5c      	ldr	r3, [pc, #368]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3e:	4a5b      	ldr	r2, [pc, #364]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a40:	f043 0301 	orr.w	r3, r3, #1
 8003a44:	6713      	str	r3, [r2, #112]	; 0x70
 8003a46:	e00b      	b.n	8003a60 <HAL_RCC_OscConfig+0x324>
 8003a48:	4b58      	ldr	r3, [pc, #352]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4c:	4a57      	ldr	r2, [pc, #348]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a4e:	f023 0301 	bic.w	r3, r3, #1
 8003a52:	6713      	str	r3, [r2, #112]	; 0x70
 8003a54:	4b55      	ldr	r3, [pc, #340]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a58:	4a54      	ldr	r2, [pc, #336]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a5a:	f023 0304 	bic.w	r3, r3, #4
 8003a5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d015      	beq.n	8003a94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a68:	f7fe fbb0 	bl	80021cc <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a6e:	e00a      	b.n	8003a86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a70:	f7fe fbac 	bl	80021cc <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e0cb      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a86:	4b49      	ldr	r3, [pc, #292]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0ee      	beq.n	8003a70 <HAL_RCC_OscConfig+0x334>
 8003a92:	e014      	b.n	8003abe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a94:	f7fe fb9a 	bl	80021cc <HAL_GetTick>
 8003a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a9a:	e00a      	b.n	8003ab2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a9c:	f7fe fb96 	bl	80021cc <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e0b5      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ab2:	4b3e      	ldr	r3, [pc, #248]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1ee      	bne.n	8003a9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003abe:	7dfb      	ldrb	r3, [r7, #23]
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d105      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ac4:	4b39      	ldr	r3, [pc, #228]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	4a38      	ldr	r2, [pc, #224]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003aca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ace:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 80a1 	beq.w	8003c1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ada:	4b34      	ldr	r3, [pc, #208]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 030c 	and.w	r3, r3, #12
 8003ae2:	2b08      	cmp	r3, #8
 8003ae4:	d05c      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	2b02      	cmp	r3, #2
 8003aec:	d141      	bne.n	8003b72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aee:	4b31      	ldr	r3, [pc, #196]	; (8003bb4 <HAL_RCC_OscConfig+0x478>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af4:	f7fe fb6a 	bl	80021cc <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003afc:	f7fe fb66 	bl	80021cc <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e087      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b0e:	4b27      	ldr	r3, [pc, #156]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1f0      	bne.n	8003afc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	69da      	ldr	r2, [r3, #28]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	431a      	orrs	r2, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b28:	019b      	lsls	r3, r3, #6
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b30:	085b      	lsrs	r3, r3, #1
 8003b32:	3b01      	subs	r3, #1
 8003b34:	041b      	lsls	r3, r3, #16
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	061b      	lsls	r3, r3, #24
 8003b3e:	491b      	ldr	r1, [pc, #108]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b44:	4b1b      	ldr	r3, [pc, #108]	; (8003bb4 <HAL_RCC_OscConfig+0x478>)
 8003b46:	2201      	movs	r2, #1
 8003b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b4a:	f7fe fb3f 	bl	80021cc <HAL_GetTick>
 8003b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b50:	e008      	b.n	8003b64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b52:	f7fe fb3b 	bl	80021cc <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e05c      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b64:	4b11      	ldr	r3, [pc, #68]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d0f0      	beq.n	8003b52 <HAL_RCC_OscConfig+0x416>
 8003b70:	e054      	b.n	8003c1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b72:	4b10      	ldr	r3, [pc, #64]	; (8003bb4 <HAL_RCC_OscConfig+0x478>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b78:	f7fe fb28 	bl	80021cc <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b80:	f7fe fb24 	bl	80021cc <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b02      	cmp	r3, #2
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e045      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b92:	4b06      	ldr	r3, [pc, #24]	; (8003bac <HAL_RCC_OscConfig+0x470>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f0      	bne.n	8003b80 <HAL_RCC_OscConfig+0x444>
 8003b9e:	e03d      	b.n	8003c1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d107      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e038      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
 8003bac:	40023800 	.word	0x40023800
 8003bb0:	40007000 	.word	0x40007000
 8003bb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003bb8:	4b1b      	ldr	r3, [pc, #108]	; (8003c28 <HAL_RCC_OscConfig+0x4ec>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d028      	beq.n	8003c18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d121      	bne.n	8003c18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d11a      	bne.n	8003c18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003be8:	4013      	ands	r3, r2
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d111      	bne.n	8003c18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bfe:	085b      	lsrs	r3, r3, #1
 8003c00:	3b01      	subs	r3, #1
 8003c02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d107      	bne.n	8003c18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d001      	beq.n	8003c1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e000      	b.n	8003c1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3718      	adds	r7, #24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	40023800 	.word	0x40023800

08003c2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e0cc      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c40:	4b68      	ldr	r3, [pc, #416]	; (8003de4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d90c      	bls.n	8003c68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c4e:	4b65      	ldr	r3, [pc, #404]	; (8003de4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c50:	683a      	ldr	r2, [r7, #0]
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c56:	4b63      	ldr	r3, [pc, #396]	; (8003de4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d001      	beq.n	8003c68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e0b8      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d020      	beq.n	8003cb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d005      	beq.n	8003c8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c80:	4b59      	ldr	r3, [pc, #356]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	4a58      	ldr	r2, [pc, #352]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0308 	and.w	r3, r3, #8
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d005      	beq.n	8003ca4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c98:	4b53      	ldr	r3, [pc, #332]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	4a52      	ldr	r2, [pc, #328]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ca2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ca4:	4b50      	ldr	r3, [pc, #320]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	494d      	ldr	r1, [pc, #308]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 0301 	and.w	r3, r3, #1
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d044      	beq.n	8003d4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d107      	bne.n	8003cda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cca:	4b47      	ldr	r3, [pc, #284]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d119      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e07f      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d003      	beq.n	8003cea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ce6:	2b03      	cmp	r3, #3
 8003ce8:	d107      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cea:	4b3f      	ldr	r3, [pc, #252]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d109      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e06f      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cfa:	4b3b      	ldr	r3, [pc, #236]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e067      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d0a:	4b37      	ldr	r3, [pc, #220]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f023 0203 	bic.w	r2, r3, #3
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	4934      	ldr	r1, [pc, #208]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d1c:	f7fe fa56 	bl	80021cc <HAL_GetTick>
 8003d20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d22:	e00a      	b.n	8003d3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d24:	f7fe fa52 	bl	80021cc <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d901      	bls.n	8003d3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d36:	2303      	movs	r3, #3
 8003d38:	e04f      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d3a:	4b2b      	ldr	r3, [pc, #172]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 020c 	and.w	r2, r3, #12
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d1eb      	bne.n	8003d24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d4c:	4b25      	ldr	r3, [pc, #148]	; (8003de4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d20c      	bcs.n	8003d74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d5a:	4b22      	ldr	r3, [pc, #136]	; (8003de4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	b2d2      	uxtb	r2, r2
 8003d60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d62:	4b20      	ldr	r3, [pc, #128]	; (8003de4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0307 	and.w	r3, r3, #7
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d001      	beq.n	8003d74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e032      	b.n	8003dda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d008      	beq.n	8003d92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d80:	4b19      	ldr	r3, [pc, #100]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	4916      	ldr	r1, [pc, #88]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d009      	beq.n	8003db2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d9e:	4b12      	ldr	r3, [pc, #72]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	490e      	ldr	r1, [pc, #56]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dae:	4313      	orrs	r3, r2
 8003db0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003db2:	f000 f821 	bl	8003df8 <HAL_RCC_GetSysClockFreq>
 8003db6:	4602      	mov	r2, r0
 8003db8:	4b0b      	ldr	r3, [pc, #44]	; (8003de8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	091b      	lsrs	r3, r3, #4
 8003dbe:	f003 030f 	and.w	r3, r3, #15
 8003dc2:	490a      	ldr	r1, [pc, #40]	; (8003dec <HAL_RCC_ClockConfig+0x1c0>)
 8003dc4:	5ccb      	ldrb	r3, [r1, r3]
 8003dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dca:	4a09      	ldr	r2, [pc, #36]	; (8003df0 <HAL_RCC_ClockConfig+0x1c4>)
 8003dcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003dce:	4b09      	ldr	r3, [pc, #36]	; (8003df4 <HAL_RCC_ClockConfig+0x1c8>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fe f9b6 	bl	8002144 <HAL_InitTick>

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	40023c00 	.word	0x40023c00
 8003de8:	40023800 	.word	0x40023800
 8003dec:	08007f50 	.word	0x08007f50
 8003df0:	20000000 	.word	0x20000000
 8003df4:	2000000c 	.word	0x2000000c

08003df8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003df8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dfc:	b090      	sub	sp, #64	; 0x40
 8003dfe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	637b      	str	r3, [r7, #52]	; 0x34
 8003e04:	2300      	movs	r3, #0
 8003e06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e08:	2300      	movs	r3, #0
 8003e0a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e10:	4b59      	ldr	r3, [pc, #356]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f003 030c 	and.w	r3, r3, #12
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d00d      	beq.n	8003e38 <HAL_RCC_GetSysClockFreq+0x40>
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	f200 80a1 	bhi.w	8003f64 <HAL_RCC_GetSysClockFreq+0x16c>
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d002      	beq.n	8003e2c <HAL_RCC_GetSysClockFreq+0x34>
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	d003      	beq.n	8003e32 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e2a:	e09b      	b.n	8003f64 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e2c:	4b53      	ldr	r3, [pc, #332]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x184>)
 8003e2e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003e30:	e09b      	b.n	8003f6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e32:	4b53      	ldr	r3, [pc, #332]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e34:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003e36:	e098      	b.n	8003f6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e38:	4b4f      	ldr	r3, [pc, #316]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e40:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e42:	4b4d      	ldr	r3, [pc, #308]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d028      	beq.n	8003ea0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e4e:	4b4a      	ldr	r3, [pc, #296]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	099b      	lsrs	r3, r3, #6
 8003e54:	2200      	movs	r2, #0
 8003e56:	623b      	str	r3, [r7, #32]
 8003e58:	627a      	str	r2, [r7, #36]	; 0x24
 8003e5a:	6a3b      	ldr	r3, [r7, #32]
 8003e5c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e60:	2100      	movs	r1, #0
 8003e62:	4b47      	ldr	r3, [pc, #284]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e64:	fb03 f201 	mul.w	r2, r3, r1
 8003e68:	2300      	movs	r3, #0
 8003e6a:	fb00 f303 	mul.w	r3, r0, r3
 8003e6e:	4413      	add	r3, r2
 8003e70:	4a43      	ldr	r2, [pc, #268]	; (8003f80 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e72:	fba0 1202 	umull	r1, r2, r0, r2
 8003e76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e78:	460a      	mov	r2, r1
 8003e7a:	62ba      	str	r2, [r7, #40]	; 0x28
 8003e7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e7e:	4413      	add	r3, r2
 8003e80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e84:	2200      	movs	r2, #0
 8003e86:	61bb      	str	r3, [r7, #24]
 8003e88:	61fa      	str	r2, [r7, #28]
 8003e8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e8e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003e92:	f7fc fe8b 	bl	8000bac <__aeabi_uldivmod>
 8003e96:	4602      	mov	r2, r0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e9e:	e053      	b.n	8003f48 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ea0:	4b35      	ldr	r3, [pc, #212]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	099b      	lsrs	r3, r3, #6
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	613b      	str	r3, [r7, #16]
 8003eaa:	617a      	str	r2, [r7, #20]
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003eb2:	f04f 0b00 	mov.w	fp, #0
 8003eb6:	4652      	mov	r2, sl
 8003eb8:	465b      	mov	r3, fp
 8003eba:	f04f 0000 	mov.w	r0, #0
 8003ebe:	f04f 0100 	mov.w	r1, #0
 8003ec2:	0159      	lsls	r1, r3, #5
 8003ec4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ec8:	0150      	lsls	r0, r2, #5
 8003eca:	4602      	mov	r2, r0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	ebb2 080a 	subs.w	r8, r2, sl
 8003ed2:	eb63 090b 	sbc.w	r9, r3, fp
 8003ed6:	f04f 0200 	mov.w	r2, #0
 8003eda:	f04f 0300 	mov.w	r3, #0
 8003ede:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003ee2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003ee6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003eea:	ebb2 0408 	subs.w	r4, r2, r8
 8003eee:	eb63 0509 	sbc.w	r5, r3, r9
 8003ef2:	f04f 0200 	mov.w	r2, #0
 8003ef6:	f04f 0300 	mov.w	r3, #0
 8003efa:	00eb      	lsls	r3, r5, #3
 8003efc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f00:	00e2      	lsls	r2, r4, #3
 8003f02:	4614      	mov	r4, r2
 8003f04:	461d      	mov	r5, r3
 8003f06:	eb14 030a 	adds.w	r3, r4, sl
 8003f0a:	603b      	str	r3, [r7, #0]
 8003f0c:	eb45 030b 	adc.w	r3, r5, fp
 8003f10:	607b      	str	r3, [r7, #4]
 8003f12:	f04f 0200 	mov.w	r2, #0
 8003f16:	f04f 0300 	mov.w	r3, #0
 8003f1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f1e:	4629      	mov	r1, r5
 8003f20:	028b      	lsls	r3, r1, #10
 8003f22:	4621      	mov	r1, r4
 8003f24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f28:	4621      	mov	r1, r4
 8003f2a:	028a      	lsls	r2, r1, #10
 8003f2c:	4610      	mov	r0, r2
 8003f2e:	4619      	mov	r1, r3
 8003f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f32:	2200      	movs	r2, #0
 8003f34:	60bb      	str	r3, [r7, #8]
 8003f36:	60fa      	str	r2, [r7, #12]
 8003f38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f3c:	f7fc fe36 	bl	8000bac <__aeabi_uldivmod>
 8003f40:	4602      	mov	r2, r0
 8003f42:	460b      	mov	r3, r1
 8003f44:	4613      	mov	r3, r2
 8003f46:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f48:	4b0b      	ldr	r3, [pc, #44]	; (8003f78 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	0c1b      	lsrs	r3, r3, #16
 8003f4e:	f003 0303 	and.w	r3, r3, #3
 8003f52:	3301      	adds	r3, #1
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003f58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f60:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f62:	e002      	b.n	8003f6a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f64:	4b05      	ldr	r3, [pc, #20]	; (8003f7c <HAL_RCC_GetSysClockFreq+0x184>)
 8003f66:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3740      	adds	r7, #64	; 0x40
 8003f70:	46bd      	mov	sp, r7
 8003f72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f76:	bf00      	nop
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	00f42400 	.word	0x00f42400
 8003f80:	017d7840 	.word	0x017d7840

08003f84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f84:	b480      	push	{r7}
 8003f86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f88:	4b03      	ldr	r3, [pc, #12]	; (8003f98 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	20000000 	.word	0x20000000

08003f9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fa0:	f7ff fff0 	bl	8003f84 <HAL_RCC_GetHCLKFreq>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	4b05      	ldr	r3, [pc, #20]	; (8003fbc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	0a9b      	lsrs	r3, r3, #10
 8003fac:	f003 0307 	and.w	r3, r3, #7
 8003fb0:	4903      	ldr	r1, [pc, #12]	; (8003fc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fb2:	5ccb      	ldrb	r3, [r1, r3]
 8003fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	40023800 	.word	0x40023800
 8003fc0:	08007f60 	.word	0x08007f60

08003fc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003fc8:	f7ff ffdc 	bl	8003f84 <HAL_RCC_GetHCLKFreq>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	4b05      	ldr	r3, [pc, #20]	; (8003fe4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	0b5b      	lsrs	r3, r3, #13
 8003fd4:	f003 0307 	and.w	r3, r3, #7
 8003fd8:	4903      	ldr	r1, [pc, #12]	; (8003fe8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fda:	5ccb      	ldrb	r3, [r1, r3]
 8003fdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	08007f60 	.word	0x08007f60

08003fec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e041      	b.n	8004082 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d106      	bne.n	8004018 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7fd fc28 	bl	8001868 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2202      	movs	r2, #2
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	3304      	adds	r3, #4
 8004028:	4619      	mov	r1, r3
 800402a:	4610      	mov	r0, r2
 800402c:	f000 fb68 	bl	8004700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
	...

0800408c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800408c:	b480      	push	{r7}
 800408e:	b085      	sub	sp, #20
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b01      	cmp	r3, #1
 800409e:	d001      	beq.n	80040a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	e046      	b.n	8004132 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a23      	ldr	r2, [pc, #140]	; (8004140 <HAL_TIM_Base_Start+0xb4>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d022      	beq.n	80040fc <HAL_TIM_Base_Start+0x70>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040be:	d01d      	beq.n	80040fc <HAL_TIM_Base_Start+0x70>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a1f      	ldr	r2, [pc, #124]	; (8004144 <HAL_TIM_Base_Start+0xb8>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d018      	beq.n	80040fc <HAL_TIM_Base_Start+0x70>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a1e      	ldr	r2, [pc, #120]	; (8004148 <HAL_TIM_Base_Start+0xbc>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d013      	beq.n	80040fc <HAL_TIM_Base_Start+0x70>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a1c      	ldr	r2, [pc, #112]	; (800414c <HAL_TIM_Base_Start+0xc0>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d00e      	beq.n	80040fc <HAL_TIM_Base_Start+0x70>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a1b      	ldr	r2, [pc, #108]	; (8004150 <HAL_TIM_Base_Start+0xc4>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d009      	beq.n	80040fc <HAL_TIM_Base_Start+0x70>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a19      	ldr	r2, [pc, #100]	; (8004154 <HAL_TIM_Base_Start+0xc8>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d004      	beq.n	80040fc <HAL_TIM_Base_Start+0x70>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a18      	ldr	r2, [pc, #96]	; (8004158 <HAL_TIM_Base_Start+0xcc>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d111      	bne.n	8004120 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	689b      	ldr	r3, [r3, #8]
 8004102:	f003 0307 	and.w	r3, r3, #7
 8004106:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2b06      	cmp	r3, #6
 800410c:	d010      	beq.n	8004130 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f042 0201 	orr.w	r2, r2, #1
 800411c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800411e:	e007      	b.n	8004130 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0201 	orr.w	r2, r2, #1
 800412e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3714      	adds	r7, #20
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	40010000 	.word	0x40010000
 8004144:	40000400 	.word	0x40000400
 8004148:	40000800 	.word	0x40000800
 800414c:	40000c00 	.word	0x40000c00
 8004150:	40010400 	.word	0x40010400
 8004154:	40014000 	.word	0x40014000
 8004158:	40001800 	.word	0x40001800

0800415c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6a1a      	ldr	r2, [r3, #32]
 800416a:	f241 1311 	movw	r3, #4369	; 0x1111
 800416e:	4013      	ands	r3, r2
 8004170:	2b00      	cmp	r3, #0
 8004172:	d10f      	bne.n	8004194 <HAL_TIM_Base_Stop+0x38>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	6a1a      	ldr	r2, [r3, #32]
 800417a:	f240 4344 	movw	r3, #1092	; 0x444
 800417e:	4013      	ands	r3, r2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d107      	bne.n	8004194 <HAL_TIM_Base_Stop+0x38>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f022 0201 	bic.w	r2, r2, #1
 8004192:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	370c      	adds	r7, #12
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b082      	sub	sp, #8
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d101      	bne.n	80041bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e041      	b.n	8004240 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d106      	bne.n	80041d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f839 	bl	8004248 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2202      	movs	r2, #2
 80041da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	3304      	adds	r3, #4
 80041e6:	4619      	mov	r1, r3
 80041e8:	4610      	mov	r0, r2
 80041ea:	f000 fa89 	bl	8004700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3708      	adds	r7, #8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d109      	bne.n	8004280 <HAL_TIM_PWM_Start+0x24>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b01      	cmp	r3, #1
 8004276:	bf14      	ite	ne
 8004278:	2301      	movne	r3, #1
 800427a:	2300      	moveq	r3, #0
 800427c:	b2db      	uxtb	r3, r3
 800427e:	e022      	b.n	80042c6 <HAL_TIM_PWM_Start+0x6a>
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	2b04      	cmp	r3, #4
 8004284:	d109      	bne.n	800429a <HAL_TIM_PWM_Start+0x3e>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b01      	cmp	r3, #1
 8004290:	bf14      	ite	ne
 8004292:	2301      	movne	r3, #1
 8004294:	2300      	moveq	r3, #0
 8004296:	b2db      	uxtb	r3, r3
 8004298:	e015      	b.n	80042c6 <HAL_TIM_PWM_Start+0x6a>
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b08      	cmp	r3, #8
 800429e:	d109      	bne.n	80042b4 <HAL_TIM_PWM_Start+0x58>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	bf14      	ite	ne
 80042ac:	2301      	movne	r3, #1
 80042ae:	2300      	moveq	r3, #0
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	e008      	b.n	80042c6 <HAL_TIM_PWM_Start+0x6a>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	2b01      	cmp	r3, #1
 80042be:	bf14      	ite	ne
 80042c0:	2301      	movne	r3, #1
 80042c2:	2300      	moveq	r3, #0
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e07c      	b.n	80043c8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d104      	bne.n	80042de <HAL_TIM_PWM_Start+0x82>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042dc:	e013      	b.n	8004306 <HAL_TIM_PWM_Start+0xaa>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b04      	cmp	r3, #4
 80042e2:	d104      	bne.n	80042ee <HAL_TIM_PWM_Start+0x92>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2202      	movs	r2, #2
 80042e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042ec:	e00b      	b.n	8004306 <HAL_TIM_PWM_Start+0xaa>
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b08      	cmp	r3, #8
 80042f2:	d104      	bne.n	80042fe <HAL_TIM_PWM_Start+0xa2>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042fc:	e003      	b.n	8004306 <HAL_TIM_PWM_Start+0xaa>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2202      	movs	r2, #2
 8004302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2201      	movs	r2, #1
 800430c:	6839      	ldr	r1, [r7, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f000 fce0 	bl	8004cd4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a2d      	ldr	r2, [pc, #180]	; (80043d0 <HAL_TIM_PWM_Start+0x174>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d004      	beq.n	8004328 <HAL_TIM_PWM_Start+0xcc>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a2c      	ldr	r2, [pc, #176]	; (80043d4 <HAL_TIM_PWM_Start+0x178>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d101      	bne.n	800432c <HAL_TIM_PWM_Start+0xd0>
 8004328:	2301      	movs	r3, #1
 800432a:	e000      	b.n	800432e <HAL_TIM_PWM_Start+0xd2>
 800432c:	2300      	movs	r3, #0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d007      	beq.n	8004342 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004340:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a22      	ldr	r2, [pc, #136]	; (80043d0 <HAL_TIM_PWM_Start+0x174>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d022      	beq.n	8004392 <HAL_TIM_PWM_Start+0x136>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004354:	d01d      	beq.n	8004392 <HAL_TIM_PWM_Start+0x136>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a1f      	ldr	r2, [pc, #124]	; (80043d8 <HAL_TIM_PWM_Start+0x17c>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d018      	beq.n	8004392 <HAL_TIM_PWM_Start+0x136>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a1d      	ldr	r2, [pc, #116]	; (80043dc <HAL_TIM_PWM_Start+0x180>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d013      	beq.n	8004392 <HAL_TIM_PWM_Start+0x136>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a1c      	ldr	r2, [pc, #112]	; (80043e0 <HAL_TIM_PWM_Start+0x184>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d00e      	beq.n	8004392 <HAL_TIM_PWM_Start+0x136>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a16      	ldr	r2, [pc, #88]	; (80043d4 <HAL_TIM_PWM_Start+0x178>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d009      	beq.n	8004392 <HAL_TIM_PWM_Start+0x136>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a18      	ldr	r2, [pc, #96]	; (80043e4 <HAL_TIM_PWM_Start+0x188>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d004      	beq.n	8004392 <HAL_TIM_PWM_Start+0x136>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a16      	ldr	r2, [pc, #88]	; (80043e8 <HAL_TIM_PWM_Start+0x18c>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d111      	bne.n	80043b6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 0307 	and.w	r3, r3, #7
 800439c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2b06      	cmp	r3, #6
 80043a2:	d010      	beq.n	80043c6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 0201 	orr.w	r2, r2, #1
 80043b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043b4:	e007      	b.n	80043c6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f042 0201 	orr.w	r2, r2, #1
 80043c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	40010000 	.word	0x40010000
 80043d4:	40010400 	.word	0x40010400
 80043d8:	40000400 	.word	0x40000400
 80043dc:	40000800 	.word	0x40000800
 80043e0:	40000c00 	.word	0x40000c00
 80043e4:	40014000 	.word	0x40014000
 80043e8:	40001800 	.word	0x40001800

080043ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043f8:	2300      	movs	r3, #0
 80043fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004402:	2b01      	cmp	r3, #1
 8004404:	d101      	bne.n	800440a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004406:	2302      	movs	r3, #2
 8004408:	e0ae      	b.n	8004568 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b0c      	cmp	r3, #12
 8004416:	f200 809f 	bhi.w	8004558 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800441a:	a201      	add	r2, pc, #4	; (adr r2, 8004420 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800441c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004420:	08004455 	.word	0x08004455
 8004424:	08004559 	.word	0x08004559
 8004428:	08004559 	.word	0x08004559
 800442c:	08004559 	.word	0x08004559
 8004430:	08004495 	.word	0x08004495
 8004434:	08004559 	.word	0x08004559
 8004438:	08004559 	.word	0x08004559
 800443c:	08004559 	.word	0x08004559
 8004440:	080044d7 	.word	0x080044d7
 8004444:	08004559 	.word	0x08004559
 8004448:	08004559 	.word	0x08004559
 800444c:	08004559 	.word	0x08004559
 8004450:	08004517 	.word	0x08004517
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68b9      	ldr	r1, [r7, #8]
 800445a:	4618      	mov	r0, r3
 800445c:	f000 f9f0 	bl	8004840 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	699a      	ldr	r2, [r3, #24]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f042 0208 	orr.w	r2, r2, #8
 800446e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	699a      	ldr	r2, [r3, #24]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0204 	bic.w	r2, r2, #4
 800447e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6999      	ldr	r1, [r3, #24]
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	691a      	ldr	r2, [r3, #16]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	430a      	orrs	r2, r1
 8004490:	619a      	str	r2, [r3, #24]
      break;
 8004492:	e064      	b.n	800455e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68b9      	ldr	r1, [r7, #8]
 800449a:	4618      	mov	r0, r3
 800449c:	f000 fa40 	bl	8004920 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	699a      	ldr	r2, [r3, #24]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	699a      	ldr	r2, [r3, #24]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	6999      	ldr	r1, [r3, #24]
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	021a      	lsls	r2, r3, #8
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	430a      	orrs	r2, r1
 80044d2:	619a      	str	r2, [r3, #24]
      break;
 80044d4:	e043      	b.n	800455e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68b9      	ldr	r1, [r7, #8]
 80044dc:	4618      	mov	r0, r3
 80044de:	f000 fa95 	bl	8004a0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	69da      	ldr	r2, [r3, #28]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f042 0208 	orr.w	r2, r2, #8
 80044f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	69da      	ldr	r2, [r3, #28]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 0204 	bic.w	r2, r2, #4
 8004500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	69d9      	ldr	r1, [r3, #28]
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	691a      	ldr	r2, [r3, #16]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	430a      	orrs	r2, r1
 8004512:	61da      	str	r2, [r3, #28]
      break;
 8004514:	e023      	b.n	800455e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68b9      	ldr	r1, [r7, #8]
 800451c:	4618      	mov	r0, r3
 800451e:	f000 fae9 	bl	8004af4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	69da      	ldr	r2, [r3, #28]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004530:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	69da      	ldr	r2, [r3, #28]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004540:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	69d9      	ldr	r1, [r3, #28]
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	021a      	lsls	r2, r3, #8
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	430a      	orrs	r2, r1
 8004554:	61da      	str	r2, [r3, #28]
      break;
 8004556:	e002      	b.n	800455e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	75fb      	strb	r3, [r7, #23]
      break;
 800455c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004566:	7dfb      	ldrb	r3, [r7, #23]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3718      	adds	r7, #24
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800457a:	2300      	movs	r3, #0
 800457c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004584:	2b01      	cmp	r3, #1
 8004586:	d101      	bne.n	800458c <HAL_TIM_ConfigClockSource+0x1c>
 8004588:	2302      	movs	r3, #2
 800458a:	e0b4      	b.n	80046f6 <HAL_TIM_ConfigClockSource+0x186>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2202      	movs	r2, #2
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80045aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68ba      	ldr	r2, [r7, #8]
 80045ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045c4:	d03e      	beq.n	8004644 <HAL_TIM_ConfigClockSource+0xd4>
 80045c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ca:	f200 8087 	bhi.w	80046dc <HAL_TIM_ConfigClockSource+0x16c>
 80045ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045d2:	f000 8086 	beq.w	80046e2 <HAL_TIM_ConfigClockSource+0x172>
 80045d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045da:	d87f      	bhi.n	80046dc <HAL_TIM_ConfigClockSource+0x16c>
 80045dc:	2b70      	cmp	r3, #112	; 0x70
 80045de:	d01a      	beq.n	8004616 <HAL_TIM_ConfigClockSource+0xa6>
 80045e0:	2b70      	cmp	r3, #112	; 0x70
 80045e2:	d87b      	bhi.n	80046dc <HAL_TIM_ConfigClockSource+0x16c>
 80045e4:	2b60      	cmp	r3, #96	; 0x60
 80045e6:	d050      	beq.n	800468a <HAL_TIM_ConfigClockSource+0x11a>
 80045e8:	2b60      	cmp	r3, #96	; 0x60
 80045ea:	d877      	bhi.n	80046dc <HAL_TIM_ConfigClockSource+0x16c>
 80045ec:	2b50      	cmp	r3, #80	; 0x50
 80045ee:	d03c      	beq.n	800466a <HAL_TIM_ConfigClockSource+0xfa>
 80045f0:	2b50      	cmp	r3, #80	; 0x50
 80045f2:	d873      	bhi.n	80046dc <HAL_TIM_ConfigClockSource+0x16c>
 80045f4:	2b40      	cmp	r3, #64	; 0x40
 80045f6:	d058      	beq.n	80046aa <HAL_TIM_ConfigClockSource+0x13a>
 80045f8:	2b40      	cmp	r3, #64	; 0x40
 80045fa:	d86f      	bhi.n	80046dc <HAL_TIM_ConfigClockSource+0x16c>
 80045fc:	2b30      	cmp	r3, #48	; 0x30
 80045fe:	d064      	beq.n	80046ca <HAL_TIM_ConfigClockSource+0x15a>
 8004600:	2b30      	cmp	r3, #48	; 0x30
 8004602:	d86b      	bhi.n	80046dc <HAL_TIM_ConfigClockSource+0x16c>
 8004604:	2b20      	cmp	r3, #32
 8004606:	d060      	beq.n	80046ca <HAL_TIM_ConfigClockSource+0x15a>
 8004608:	2b20      	cmp	r3, #32
 800460a:	d867      	bhi.n	80046dc <HAL_TIM_ConfigClockSource+0x16c>
 800460c:	2b00      	cmp	r3, #0
 800460e:	d05c      	beq.n	80046ca <HAL_TIM_ConfigClockSource+0x15a>
 8004610:	2b10      	cmp	r3, #16
 8004612:	d05a      	beq.n	80046ca <HAL_TIM_ConfigClockSource+0x15a>
 8004614:	e062      	b.n	80046dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6818      	ldr	r0, [r3, #0]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	6899      	ldr	r1, [r3, #8]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685a      	ldr	r2, [r3, #4]
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	f000 fb35 	bl	8004c94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004638:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68ba      	ldr	r2, [r7, #8]
 8004640:	609a      	str	r2, [r3, #8]
      break;
 8004642:	e04f      	b.n	80046e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6818      	ldr	r0, [r3, #0]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	6899      	ldr	r1, [r3, #8]
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	685a      	ldr	r2, [r3, #4]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	f000 fb1e 	bl	8004c94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689a      	ldr	r2, [r3, #8]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004666:	609a      	str	r2, [r3, #8]
      break;
 8004668:	e03c      	b.n	80046e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6818      	ldr	r0, [r3, #0]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	6859      	ldr	r1, [r3, #4]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	461a      	mov	r2, r3
 8004678:	f000 fa92 	bl	8004ba0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2150      	movs	r1, #80	; 0x50
 8004682:	4618      	mov	r0, r3
 8004684:	f000 faeb 	bl	8004c5e <TIM_ITRx_SetConfig>
      break;
 8004688:	e02c      	b.n	80046e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6818      	ldr	r0, [r3, #0]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	6859      	ldr	r1, [r3, #4]
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	461a      	mov	r2, r3
 8004698:	f000 fab1 	bl	8004bfe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2160      	movs	r1, #96	; 0x60
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 fadb 	bl	8004c5e <TIM_ITRx_SetConfig>
      break;
 80046a8:	e01c      	b.n	80046e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6818      	ldr	r0, [r3, #0]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	6859      	ldr	r1, [r3, #4]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	461a      	mov	r2, r3
 80046b8:	f000 fa72 	bl	8004ba0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2140      	movs	r1, #64	; 0x40
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 facb 	bl	8004c5e <TIM_ITRx_SetConfig>
      break;
 80046c8:	e00c      	b.n	80046e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4619      	mov	r1, r3
 80046d4:	4610      	mov	r0, r2
 80046d6:	f000 fac2 	bl	8004c5e <TIM_ITRx_SetConfig>
      break;
 80046da:	e003      	b.n	80046e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	73fb      	strb	r3, [r7, #15]
      break;
 80046e0:	e000      	b.n	80046e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
	...

08004700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a40      	ldr	r2, [pc, #256]	; (8004814 <TIM_Base_SetConfig+0x114>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d013      	beq.n	8004740 <TIM_Base_SetConfig+0x40>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800471e:	d00f      	beq.n	8004740 <TIM_Base_SetConfig+0x40>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a3d      	ldr	r2, [pc, #244]	; (8004818 <TIM_Base_SetConfig+0x118>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d00b      	beq.n	8004740 <TIM_Base_SetConfig+0x40>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a3c      	ldr	r2, [pc, #240]	; (800481c <TIM_Base_SetConfig+0x11c>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d007      	beq.n	8004740 <TIM_Base_SetConfig+0x40>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a3b      	ldr	r2, [pc, #236]	; (8004820 <TIM_Base_SetConfig+0x120>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d003      	beq.n	8004740 <TIM_Base_SetConfig+0x40>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	4a3a      	ldr	r2, [pc, #232]	; (8004824 <TIM_Base_SetConfig+0x124>)
 800473c:	4293      	cmp	r3, r2
 800473e:	d108      	bne.n	8004752 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004746:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	68fa      	ldr	r2, [r7, #12]
 800474e:	4313      	orrs	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a2f      	ldr	r2, [pc, #188]	; (8004814 <TIM_Base_SetConfig+0x114>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d02b      	beq.n	80047b2 <TIM_Base_SetConfig+0xb2>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004760:	d027      	beq.n	80047b2 <TIM_Base_SetConfig+0xb2>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a2c      	ldr	r2, [pc, #176]	; (8004818 <TIM_Base_SetConfig+0x118>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d023      	beq.n	80047b2 <TIM_Base_SetConfig+0xb2>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a2b      	ldr	r2, [pc, #172]	; (800481c <TIM_Base_SetConfig+0x11c>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d01f      	beq.n	80047b2 <TIM_Base_SetConfig+0xb2>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	4a2a      	ldr	r2, [pc, #168]	; (8004820 <TIM_Base_SetConfig+0x120>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d01b      	beq.n	80047b2 <TIM_Base_SetConfig+0xb2>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4a29      	ldr	r2, [pc, #164]	; (8004824 <TIM_Base_SetConfig+0x124>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d017      	beq.n	80047b2 <TIM_Base_SetConfig+0xb2>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	4a28      	ldr	r2, [pc, #160]	; (8004828 <TIM_Base_SetConfig+0x128>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d013      	beq.n	80047b2 <TIM_Base_SetConfig+0xb2>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a27      	ldr	r2, [pc, #156]	; (800482c <TIM_Base_SetConfig+0x12c>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d00f      	beq.n	80047b2 <TIM_Base_SetConfig+0xb2>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a26      	ldr	r2, [pc, #152]	; (8004830 <TIM_Base_SetConfig+0x130>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d00b      	beq.n	80047b2 <TIM_Base_SetConfig+0xb2>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a25      	ldr	r2, [pc, #148]	; (8004834 <TIM_Base_SetConfig+0x134>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d007      	beq.n	80047b2 <TIM_Base_SetConfig+0xb2>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a24      	ldr	r2, [pc, #144]	; (8004838 <TIM_Base_SetConfig+0x138>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d003      	beq.n	80047b2 <TIM_Base_SetConfig+0xb2>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a23      	ldr	r2, [pc, #140]	; (800483c <TIM_Base_SetConfig+0x13c>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d108      	bne.n	80047c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	4313      	orrs	r3, r2
 80047d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a0a      	ldr	r2, [pc, #40]	; (8004814 <TIM_Base_SetConfig+0x114>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d003      	beq.n	80047f8 <TIM_Base_SetConfig+0xf8>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a0c      	ldr	r2, [pc, #48]	; (8004824 <TIM_Base_SetConfig+0x124>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d103      	bne.n	8004800 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	691a      	ldr	r2, [r3, #16]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	615a      	str	r2, [r3, #20]
}
 8004806:	bf00      	nop
 8004808:	3714      	adds	r7, #20
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	40010000 	.word	0x40010000
 8004818:	40000400 	.word	0x40000400
 800481c:	40000800 	.word	0x40000800
 8004820:	40000c00 	.word	0x40000c00
 8004824:	40010400 	.word	0x40010400
 8004828:	40014000 	.word	0x40014000
 800482c:	40014400 	.word	0x40014400
 8004830:	40014800 	.word	0x40014800
 8004834:	40001800 	.word	0x40001800
 8004838:	40001c00 	.word	0x40001c00
 800483c:	40002000 	.word	0x40002000

08004840 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004840:	b480      	push	{r7}
 8004842:	b087      	sub	sp, #28
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a1b      	ldr	r3, [r3, #32]
 800484e:	f023 0201 	bic.w	r2, r3, #1
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800486e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f023 0303 	bic.w	r3, r3, #3
 8004876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	4313      	orrs	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f023 0302 	bic.w	r3, r3, #2
 8004888:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	4313      	orrs	r3, r2
 8004892:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a20      	ldr	r2, [pc, #128]	; (8004918 <TIM_OC1_SetConfig+0xd8>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d003      	beq.n	80048a4 <TIM_OC1_SetConfig+0x64>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a1f      	ldr	r2, [pc, #124]	; (800491c <TIM_OC1_SetConfig+0xdc>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d10c      	bne.n	80048be <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f023 0308 	bic.w	r3, r3, #8
 80048aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f023 0304 	bic.w	r3, r3, #4
 80048bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a15      	ldr	r2, [pc, #84]	; (8004918 <TIM_OC1_SetConfig+0xd8>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d003      	beq.n	80048ce <TIM_OC1_SetConfig+0x8e>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a14      	ldr	r2, [pc, #80]	; (800491c <TIM_OC1_SetConfig+0xdc>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d111      	bne.n	80048f2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	621a      	str	r2, [r3, #32]
}
 800490c:	bf00      	nop
 800490e:	371c      	adds	r7, #28
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	40010000 	.word	0x40010000
 800491c:	40010400 	.word	0x40010400

08004920 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004920:	b480      	push	{r7}
 8004922:	b087      	sub	sp, #28
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	f023 0210 	bic.w	r2, r3, #16
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800494e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004956:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	021b      	lsls	r3, r3, #8
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	4313      	orrs	r3, r2
 8004962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	f023 0320 	bic.w	r3, r3, #32
 800496a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	011b      	lsls	r3, r3, #4
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	4313      	orrs	r3, r2
 8004976:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a22      	ldr	r2, [pc, #136]	; (8004a04 <TIM_OC2_SetConfig+0xe4>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d003      	beq.n	8004988 <TIM_OC2_SetConfig+0x68>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a21      	ldr	r2, [pc, #132]	; (8004a08 <TIM_OC2_SetConfig+0xe8>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d10d      	bne.n	80049a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800498e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	011b      	lsls	r3, r3, #4
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	4313      	orrs	r3, r2
 800499a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a17      	ldr	r2, [pc, #92]	; (8004a04 <TIM_OC2_SetConfig+0xe4>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d003      	beq.n	80049b4 <TIM_OC2_SetConfig+0x94>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a16      	ldr	r2, [pc, #88]	; (8004a08 <TIM_OC2_SetConfig+0xe8>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d113      	bne.n	80049dc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80049ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80049c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	695b      	ldr	r3, [r3, #20]
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	693a      	ldr	r2, [r7, #16]
 80049d8:	4313      	orrs	r3, r2
 80049da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	693a      	ldr	r2, [r7, #16]
 80049e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	621a      	str	r2, [r3, #32]
}
 80049f6:	bf00      	nop
 80049f8:	371c      	adds	r7, #28
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	40010000 	.word	0x40010000
 8004a08:	40010400 	.word	0x40010400

08004a0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	69db      	ldr	r3, [r3, #28]
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f023 0303 	bic.w	r3, r3, #3
 8004a42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68fa      	ldr	r2, [r7, #12]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	021b      	lsls	r3, r3, #8
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	4a21      	ldr	r2, [pc, #132]	; (8004aec <TIM_OC3_SetConfig+0xe0>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d003      	beq.n	8004a72 <TIM_OC3_SetConfig+0x66>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a20      	ldr	r2, [pc, #128]	; (8004af0 <TIM_OC3_SetConfig+0xe4>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d10d      	bne.n	8004a8e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	021b      	lsls	r3, r3, #8
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a16      	ldr	r2, [pc, #88]	; (8004aec <TIM_OC3_SetConfig+0xe0>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d003      	beq.n	8004a9e <TIM_OC3_SetConfig+0x92>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a15      	ldr	r2, [pc, #84]	; (8004af0 <TIM_OC3_SetConfig+0xe4>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d113      	bne.n	8004ac6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004aa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004aac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	011b      	lsls	r3, r3, #4
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	011b      	lsls	r3, r3, #4
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68fa      	ldr	r2, [r7, #12]
 8004ad0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	685a      	ldr	r2, [r3, #4]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	621a      	str	r2, [r3, #32]
}
 8004ae0:	bf00      	nop
 8004ae2:	371c      	adds	r7, #28
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr
 8004aec:	40010000 	.word	0x40010000
 8004af0:	40010400 	.word	0x40010400

08004af4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b087      	sub	sp, #28
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	69db      	ldr	r3, [r3, #28]
 8004b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	021b      	lsls	r3, r3, #8
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	031b      	lsls	r3, r3, #12
 8004b46:	693a      	ldr	r2, [r7, #16]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a12      	ldr	r2, [pc, #72]	; (8004b98 <TIM_OC4_SetConfig+0xa4>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d003      	beq.n	8004b5c <TIM_OC4_SetConfig+0x68>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a11      	ldr	r2, [pc, #68]	; (8004b9c <TIM_OC4_SetConfig+0xa8>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d109      	bne.n	8004b70 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b62:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	695b      	ldr	r3, [r3, #20]
 8004b68:	019b      	lsls	r3, r3, #6
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	693a      	ldr	r2, [r7, #16]
 8004b88:	621a      	str	r2, [r3, #32]
}
 8004b8a:	bf00      	nop
 8004b8c:	371c      	adds	r7, #28
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	40010000 	.word	0x40010000
 8004b9c:	40010400 	.word	0x40010400

08004ba0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b087      	sub	sp, #28
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6a1b      	ldr	r3, [r3, #32]
 8004bb0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	f023 0201 	bic.w	r2, r3, #1
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	699b      	ldr	r3, [r3, #24]
 8004bc2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	011b      	lsls	r3, r3, #4
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	f023 030a 	bic.w	r3, r3, #10
 8004bdc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	621a      	str	r2, [r3, #32]
}
 8004bf2:	bf00      	nop
 8004bf4:	371c      	adds	r7, #28
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b087      	sub	sp, #28
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	60f8      	str	r0, [r7, #12]
 8004c06:	60b9      	str	r1, [r7, #8]
 8004c08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	f023 0210 	bic.w	r2, r3, #16
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6a1b      	ldr	r3, [r3, #32]
 8004c20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	031b      	lsls	r3, r3, #12
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004c3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	011b      	lsls	r3, r3, #4
 8004c40:	693a      	ldr	r2, [r7, #16]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	697a      	ldr	r2, [r7, #20]
 8004c4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	621a      	str	r2, [r3, #32]
}
 8004c52:	bf00      	nop
 8004c54:	371c      	adds	r7, #28
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b085      	sub	sp, #20
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
 8004c66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c76:	683a      	ldr	r2, [r7, #0]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	f043 0307 	orr.w	r3, r3, #7
 8004c80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	609a      	str	r2, [r3, #8]
}
 8004c88:	bf00      	nop
 8004c8a:	3714      	adds	r7, #20
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b087      	sub	sp, #28
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
 8004ca0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	021a      	lsls	r2, r3, #8
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	609a      	str	r2, [r3, #8]
}
 8004cc8:	bf00      	nop
 8004cca:	371c      	adds	r7, #28
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b087      	sub	sp, #28
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	f003 031f 	and.w	r3, r3, #31
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6a1a      	ldr	r2, [r3, #32]
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	43db      	mvns	r3, r3
 8004cf6:	401a      	ands	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6a1a      	ldr	r2, [r3, #32]
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	f003 031f 	and.w	r3, r3, #31
 8004d06:	6879      	ldr	r1, [r7, #4]
 8004d08:	fa01 f303 	lsl.w	r3, r1, r3
 8004d0c:	431a      	orrs	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	621a      	str	r2, [r3, #32]
}
 8004d12:	bf00      	nop
 8004d14:	371c      	adds	r7, #28
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
	...

08004d20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d101      	bne.n	8004d38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d34:	2302      	movs	r3, #2
 8004d36:	e05a      	b.n	8004dee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2202      	movs	r2, #2
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a21      	ldr	r2, [pc, #132]	; (8004dfc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d022      	beq.n	8004dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d84:	d01d      	beq.n	8004dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a1d      	ldr	r2, [pc, #116]	; (8004e00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d018      	beq.n	8004dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a1b      	ldr	r2, [pc, #108]	; (8004e04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d013      	beq.n	8004dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a1a      	ldr	r2, [pc, #104]	; (8004e08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d00e      	beq.n	8004dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a18      	ldr	r2, [pc, #96]	; (8004e0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d009      	beq.n	8004dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a17      	ldr	r2, [pc, #92]	; (8004e10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d004      	beq.n	8004dc2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a15      	ldr	r2, [pc, #84]	; (8004e14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d10c      	bne.n	8004ddc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004dc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3714      	adds	r7, #20
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	40010000 	.word	0x40010000
 8004e00:	40000400 	.word	0x40000400
 8004e04:	40000800 	.word	0x40000800
 8004e08:	40000c00 	.word	0x40000c00
 8004e0c:	40010400 	.word	0x40010400
 8004e10:	40014000 	.word	0x40014000
 8004e14:	40001800 	.word	0x40001800

08004e18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d101      	bne.n	8004e2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e03f      	b.n	8004eaa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d106      	bne.n	8004e44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f7fc fdd6 	bl	80019f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2224      	movs	r2, #36	; 0x24
 8004e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	68da      	ldr	r2, [r3, #12]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 fcdf 	bl	8005820 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	691a      	ldr	r2, [r3, #16]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	695a      	ldr	r2, [r3, #20]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68da      	ldr	r2, [r3, #12]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3708      	adds	r7, #8
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b084      	sub	sp, #16
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	60f8      	str	r0, [r7, #12]
 8004eba:	60b9      	str	r1, [r7, #8]
 8004ebc:	4613      	mov	r3, r2
 8004ebe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b20      	cmp	r3, #32
 8004eca:	d11d      	bne.n	8004f08 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d002      	beq.n	8004ed8 <HAL_UART_Receive_IT+0x26>
 8004ed2:	88fb      	ldrh	r3, [r7, #6]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e016      	b.n	8004f0a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d101      	bne.n	8004eea <HAL_UART_Receive_IT+0x38>
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	e00f      	b.n	8004f0a <HAL_UART_Receive_IT+0x58>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004ef8:	88fb      	ldrh	r3, [r7, #6]
 8004efa:	461a      	mov	r2, r3
 8004efc:	68b9      	ldr	r1, [r7, #8]
 8004efe:	68f8      	ldr	r0, [r7, #12]
 8004f00:	f000 fab6 	bl	8005470 <UART_Start_Receive_IT>
 8004f04:	4603      	mov	r3, r0
 8004f06:	e000      	b.n	8004f0a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004f08:	2302      	movs	r3, #2
  }
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
	...

08004f14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b0ba      	sub	sp, #232	; 0xe8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004f40:	2300      	movs	r3, #0
 8004f42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f4a:	f003 030f 	and.w	r3, r3, #15
 8004f4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004f52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10f      	bne.n	8004f7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f5e:	f003 0320 	and.w	r3, r3, #32
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d009      	beq.n	8004f7a <HAL_UART_IRQHandler+0x66>
 8004f66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f6a:	f003 0320 	and.w	r3, r3, #32
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 fb99 	bl	80056aa <UART_Receive_IT>
      return;
 8004f78:	e256      	b.n	8005428 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004f7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 80de 	beq.w	8005140 <HAL_UART_IRQHandler+0x22c>
 8004f84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f88:	f003 0301 	and.w	r3, r3, #1
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d106      	bne.n	8004f9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f94:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 80d1 	beq.w	8005140 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00b      	beq.n	8004fc2 <HAL_UART_IRQHandler+0xae>
 8004faa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d005      	beq.n	8004fc2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fba:	f043 0201 	orr.w	r2, r3, #1
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fc6:	f003 0304 	and.w	r3, r3, #4
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00b      	beq.n	8004fe6 <HAL_UART_IRQHandler+0xd2>
 8004fce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d005      	beq.n	8004fe6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fde:	f043 0202 	orr.w	r2, r3, #2
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00b      	beq.n	800500a <HAL_UART_IRQHandler+0xf6>
 8004ff2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d005      	beq.n	800500a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005002:	f043 0204 	orr.w	r2, r3, #4
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800500a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800500e:	f003 0308 	and.w	r3, r3, #8
 8005012:	2b00      	cmp	r3, #0
 8005014:	d011      	beq.n	800503a <HAL_UART_IRQHandler+0x126>
 8005016:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800501a:	f003 0320 	and.w	r3, r3, #32
 800501e:	2b00      	cmp	r3, #0
 8005020:	d105      	bne.n	800502e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005022:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005026:	f003 0301 	and.w	r3, r3, #1
 800502a:	2b00      	cmp	r3, #0
 800502c:	d005      	beq.n	800503a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005032:	f043 0208 	orr.w	r2, r3, #8
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503e:	2b00      	cmp	r3, #0
 8005040:	f000 81ed 	beq.w	800541e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005048:	f003 0320 	and.w	r3, r3, #32
 800504c:	2b00      	cmp	r3, #0
 800504e:	d008      	beq.n	8005062 <HAL_UART_IRQHandler+0x14e>
 8005050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005054:	f003 0320 	and.w	r3, r3, #32
 8005058:	2b00      	cmp	r3, #0
 800505a:	d002      	beq.n	8005062 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 fb24 	bl	80056aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506c:	2b40      	cmp	r3, #64	; 0x40
 800506e:	bf0c      	ite	eq
 8005070:	2301      	moveq	r3, #1
 8005072:	2300      	movne	r3, #0
 8005074:	b2db      	uxtb	r3, r3
 8005076:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507e:	f003 0308 	and.w	r3, r3, #8
 8005082:	2b00      	cmp	r3, #0
 8005084:	d103      	bne.n	800508e <HAL_UART_IRQHandler+0x17a>
 8005086:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800508a:	2b00      	cmp	r3, #0
 800508c:	d04f      	beq.n	800512e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 fa2c 	bl	80054ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509e:	2b40      	cmp	r3, #64	; 0x40
 80050a0:	d141      	bne.n	8005126 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	3314      	adds	r3, #20
 80050a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050b0:	e853 3f00 	ldrex	r3, [r3]
 80050b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80050b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	3314      	adds	r3, #20
 80050ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80050ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80050d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80050da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80050de:	e841 2300 	strex	r3, r2, [r1]
 80050e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80050e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1d9      	bne.n	80050a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d013      	beq.n	800511e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050fa:	4a7d      	ldr	r2, [pc, #500]	; (80052f0 <HAL_UART_IRQHandler+0x3dc>)
 80050fc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005102:	4618      	mov	r0, r3
 8005104:	f7fd fd4a 	bl	8002b9c <HAL_DMA_Abort_IT>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d016      	beq.n	800513c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005118:	4610      	mov	r0, r2
 800511a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800511c:	e00e      	b.n	800513c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f990 	bl	8005444 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005124:	e00a      	b.n	800513c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f98c 	bl	8005444 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800512c:	e006      	b.n	800513c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f988 	bl	8005444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800513a:	e170      	b.n	800541e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800513c:	bf00      	nop
    return;
 800513e:	e16e      	b.n	800541e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005144:	2b01      	cmp	r3, #1
 8005146:	f040 814a 	bne.w	80053de <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800514a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800514e:	f003 0310 	and.w	r3, r3, #16
 8005152:	2b00      	cmp	r3, #0
 8005154:	f000 8143 	beq.w	80053de <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800515c:	f003 0310 	and.w	r3, r3, #16
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 813c 	beq.w	80053de <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005166:	2300      	movs	r3, #0
 8005168:	60bb      	str	r3, [r7, #8]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	60bb      	str	r3, [r7, #8]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	60bb      	str	r3, [r7, #8]
 800517a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005186:	2b40      	cmp	r3, #64	; 0x40
 8005188:	f040 80b4 	bne.w	80052f4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005198:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800519c:	2b00      	cmp	r3, #0
 800519e:	f000 8140 	beq.w	8005422 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051aa:	429a      	cmp	r2, r3
 80051ac:	f080 8139 	bcs.w	8005422 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051b6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051c2:	f000 8088 	beq.w	80052d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	330c      	adds	r3, #12
 80051cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051d4:	e853 3f00 	ldrex	r3, [r3]
 80051d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80051dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	330c      	adds	r3, #12
 80051ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80051f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80051f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80051fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005202:	e841 2300 	strex	r3, r2, [r1]
 8005206:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800520a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1d9      	bne.n	80051c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	3314      	adds	r3, #20
 8005218:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800521c:	e853 3f00 	ldrex	r3, [r3]
 8005220:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005222:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005224:	f023 0301 	bic.w	r3, r3, #1
 8005228:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	3314      	adds	r3, #20
 8005232:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005236:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800523a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800523e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005242:	e841 2300 	strex	r3, r2, [r1]
 8005246:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005248:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1e1      	bne.n	8005212 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	3314      	adds	r3, #20
 8005254:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005256:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005258:	e853 3f00 	ldrex	r3, [r3]
 800525c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800525e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005260:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005264:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	3314      	adds	r3, #20
 800526e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005272:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005274:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005276:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005278:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800527a:	e841 2300 	strex	r3, r2, [r1]
 800527e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005280:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1e3      	bne.n	800524e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2220      	movs	r2, #32
 800528a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	330c      	adds	r3, #12
 800529a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800529e:	e853 3f00 	ldrex	r3, [r3]
 80052a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80052a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052a6:	f023 0310 	bic.w	r3, r3, #16
 80052aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	330c      	adds	r3, #12
 80052b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80052b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80052ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80052be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052c0:	e841 2300 	strex	r3, r2, [r1]
 80052c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80052c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1e3      	bne.n	8005294 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d0:	4618      	mov	r0, r3
 80052d2:	f7fd fbf3 	bl	8002abc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052de:	b29b      	uxth	r3, r3
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	4619      	mov	r1, r3
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f8b6 	bl	8005458 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80052ec:	e099      	b.n	8005422 <HAL_UART_IRQHandler+0x50e>
 80052ee:	bf00      	nop
 80052f0:	080055b3 	.word	0x080055b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005308:	b29b      	uxth	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	f000 808b 	beq.w	8005426 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005310:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005314:	2b00      	cmp	r3, #0
 8005316:	f000 8086 	beq.w	8005426 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	330c      	adds	r3, #12
 8005320:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005324:	e853 3f00 	ldrex	r3, [r3]
 8005328:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800532a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800532c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005330:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	330c      	adds	r3, #12
 800533a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800533e:	647a      	str	r2, [r7, #68]	; 0x44
 8005340:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005342:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005344:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005346:	e841 2300 	strex	r3, r2, [r1]
 800534a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800534c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1e3      	bne.n	800531a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	3314      	adds	r3, #20
 8005358:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	e853 3f00 	ldrex	r3, [r3]
 8005360:	623b      	str	r3, [r7, #32]
   return(result);
 8005362:	6a3b      	ldr	r3, [r7, #32]
 8005364:	f023 0301 	bic.w	r3, r3, #1
 8005368:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	3314      	adds	r3, #20
 8005372:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005376:	633a      	str	r2, [r7, #48]	; 0x30
 8005378:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800537c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800537e:	e841 2300 	strex	r3, r2, [r1]
 8005382:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1e3      	bne.n	8005352 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2220      	movs	r2, #32
 800538e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	330c      	adds	r3, #12
 800539e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	e853 3f00 	ldrex	r3, [r3]
 80053a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f023 0310 	bic.w	r3, r3, #16
 80053ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	330c      	adds	r3, #12
 80053b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80053bc:	61fa      	str	r2, [r7, #28]
 80053be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c0:	69b9      	ldr	r1, [r7, #24]
 80053c2:	69fa      	ldr	r2, [r7, #28]
 80053c4:	e841 2300 	strex	r3, r2, [r1]
 80053c8:	617b      	str	r3, [r7, #20]
   return(result);
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1e3      	bne.n	8005398 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80053d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80053d4:	4619      	mov	r1, r3
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f83e 	bl	8005458 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80053dc:	e023      	b.n	8005426 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80053de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d009      	beq.n	80053fe <HAL_UART_IRQHandler+0x4ea>
 80053ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f8ef 	bl	80055da <UART_Transmit_IT>
    return;
 80053fc:	e014      	b.n	8005428 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80053fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00e      	beq.n	8005428 <HAL_UART_IRQHandler+0x514>
 800540a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800540e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005412:	2b00      	cmp	r3, #0
 8005414:	d008      	beq.n	8005428 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f92f 	bl	800567a <UART_EndTransmit_IT>
    return;
 800541c:	e004      	b.n	8005428 <HAL_UART_IRQHandler+0x514>
    return;
 800541e:	bf00      	nop
 8005420:	e002      	b.n	8005428 <HAL_UART_IRQHandler+0x514>
      return;
 8005422:	bf00      	nop
 8005424:	e000      	b.n	8005428 <HAL_UART_IRQHandler+0x514>
      return;
 8005426:	bf00      	nop
  }
}
 8005428:	37e8      	adds	r7, #232	; 0xe8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop

08005430 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005438:	bf00      	nop
 800543a:	370c      	adds	r7, #12
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800544c:	bf00      	nop
 800544e:	370c      	adds	r7, #12
 8005450:	46bd      	mov	sp, r7
 8005452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005456:	4770      	bx	lr

08005458 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	460b      	mov	r3, r1
 8005462:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	4613      	mov	r3, r2
 800547c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	88fa      	ldrh	r2, [r7, #6]
 8005488:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	88fa      	ldrh	r2, [r7, #6]
 800548e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2222      	movs	r2, #34	; 0x22
 800549a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d007      	beq.n	80054be <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68da      	ldr	r2, [r3, #12]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054bc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	695a      	ldr	r2, [r3, #20]
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f042 0201 	orr.w	r2, r2, #1
 80054cc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68da      	ldr	r2, [r3, #12]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f042 0220 	orr.w	r2, r2, #32
 80054dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3714      	adds	r7, #20
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b095      	sub	sp, #84	; 0x54
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	330c      	adds	r3, #12
 80054fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054fe:	e853 3f00 	ldrex	r3, [r3]
 8005502:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005506:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800550a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	330c      	adds	r3, #12
 8005512:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005514:	643a      	str	r2, [r7, #64]	; 0x40
 8005516:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005518:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800551a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800551c:	e841 2300 	strex	r3, r2, [r1]
 8005520:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005524:	2b00      	cmp	r3, #0
 8005526:	d1e5      	bne.n	80054f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	3314      	adds	r3, #20
 800552e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005530:	6a3b      	ldr	r3, [r7, #32]
 8005532:	e853 3f00 	ldrex	r3, [r3]
 8005536:	61fb      	str	r3, [r7, #28]
   return(result);
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	f023 0301 	bic.w	r3, r3, #1
 800553e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	3314      	adds	r3, #20
 8005546:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005548:	62fa      	str	r2, [r7, #44]	; 0x2c
 800554a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800554e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005550:	e841 2300 	strex	r3, r2, [r1]
 8005554:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	2b00      	cmp	r3, #0
 800555a:	d1e5      	bne.n	8005528 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005560:	2b01      	cmp	r3, #1
 8005562:	d119      	bne.n	8005598 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	330c      	adds	r3, #12
 800556a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	e853 3f00 	ldrex	r3, [r3]
 8005572:	60bb      	str	r3, [r7, #8]
   return(result);
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	f023 0310 	bic.w	r3, r3, #16
 800557a:	647b      	str	r3, [r7, #68]	; 0x44
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	330c      	adds	r3, #12
 8005582:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005584:	61ba      	str	r2, [r7, #24]
 8005586:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005588:	6979      	ldr	r1, [r7, #20]
 800558a:	69ba      	ldr	r2, [r7, #24]
 800558c:	e841 2300 	strex	r3, r2, [r1]
 8005590:	613b      	str	r3, [r7, #16]
   return(result);
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1e5      	bne.n	8005564 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2220      	movs	r2, #32
 800559c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80055a6:	bf00      	nop
 80055a8:	3754      	adds	r7, #84	; 0x54
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr

080055b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055b2:	b580      	push	{r7, lr}
 80055b4:	b084      	sub	sp, #16
 80055b6:	af00      	add	r7, sp, #0
 80055b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055cc:	68f8      	ldr	r0, [r7, #12]
 80055ce:	f7ff ff39 	bl	8005444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055d2:	bf00      	nop
 80055d4:	3710      	adds	r7, #16
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80055da:	b480      	push	{r7}
 80055dc:	b085      	sub	sp, #20
 80055de:	af00      	add	r7, sp, #0
 80055e0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	2b21      	cmp	r3, #33	; 0x21
 80055ec:	d13e      	bne.n	800566c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055f6:	d114      	bne.n	8005622 <UART_Transmit_IT+0x48>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d110      	bne.n	8005622 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	881b      	ldrh	r3, [r3, #0]
 800560a:	461a      	mov	r2, r3
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005614:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	1c9a      	adds	r2, r3, #2
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	621a      	str	r2, [r3, #32]
 8005620:	e008      	b.n	8005634 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a1b      	ldr	r3, [r3, #32]
 8005626:	1c59      	adds	r1, r3, #1
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	6211      	str	r1, [r2, #32]
 800562c:	781a      	ldrb	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005638:	b29b      	uxth	r3, r3
 800563a:	3b01      	subs	r3, #1
 800563c:	b29b      	uxth	r3, r3
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	4619      	mov	r1, r3
 8005642:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005644:	2b00      	cmp	r3, #0
 8005646:	d10f      	bne.n	8005668 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68da      	ldr	r2, [r3, #12]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005656:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68da      	ldr	r2, [r3, #12]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005666:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005668:	2300      	movs	r3, #0
 800566a:	e000      	b.n	800566e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800566c:	2302      	movs	r3, #2
  }
}
 800566e:	4618      	mov	r0, r3
 8005670:	3714      	adds	r7, #20
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b082      	sub	sp, #8
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68da      	ldr	r2, [r3, #12]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005690:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2220      	movs	r2, #32
 8005696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f7ff fec8 	bl	8005430 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3708      	adds	r7, #8
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <UART_Receive_IT>:
  * @retval HAL status
  */
//int buffer_counter = 0;

static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b08c      	sub	sp, #48	; 0x30
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b22      	cmp	r3, #34	; 0x22
 80056bc:	f040 80ab 	bne.w	8005816 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056c8:	d117      	bne.n	80056fa <UART_Receive_IT+0x50>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d113      	bne.n	80056fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80056d2:	2300      	movs	r3, #0
 80056d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056da:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f2:	1c9a      	adds	r2, r3, #2
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	629a      	str	r2, [r3, #40]	; 0x28
 80056f8:	e026      	b.n	8005748 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005700:	2300      	movs	r3, #0
 8005702:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800570c:	d007      	beq.n	800571e <UART_Receive_IT+0x74>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d10a      	bne.n	800572c <UART_Receive_IT+0x82>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	691b      	ldr	r3, [r3, #16]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d106      	bne.n	800572c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	b2da      	uxtb	r2, r3
 8005726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005728:	701a      	strb	r2, [r3, #0]
 800572a:	e008      	b.n	800573e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	b2db      	uxtb	r3, r3
 8005734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005738:	b2da      	uxtb	r2, r3
 800573a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005742:	1c5a      	adds	r2, r3, #1
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	629a      	str	r2, [r3, #40]	; 0x28
//    	  huart->pRxBuffPtr -= buffer_counter;
//    	  buffer_counter = 0;
//      }
    }

    if (--huart->RxXferCount == 0U)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800574c:	b29b      	uxth	r3, r3
 800574e:	3b01      	subs	r3, #1
 8005750:	b29b      	uxth	r3, r3
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	4619      	mov	r1, r3
 8005756:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005758:	2b00      	cmp	r3, #0
 800575a:	d15a      	bne.n	8005812 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68da      	ldr	r2, [r3, #12]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f022 0220 	bic.w	r2, r2, #32
 800576a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68da      	ldr	r2, [r3, #12]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800577a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	695a      	ldr	r2, [r3, #20]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f022 0201 	bic.w	r2, r2, #1
 800578a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2220      	movs	r2, #32
 8005790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005798:	2b01      	cmp	r3, #1
 800579a:	d135      	bne.n	8005808 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	330c      	adds	r3, #12
 80057a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	e853 3f00 	ldrex	r3, [r3]
 80057b0:	613b      	str	r3, [r7, #16]
   return(result);
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	f023 0310 	bic.w	r3, r3, #16
 80057b8:	627b      	str	r3, [r7, #36]	; 0x24
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	330c      	adds	r3, #12
 80057c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c2:	623a      	str	r2, [r7, #32]
 80057c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c6:	69f9      	ldr	r1, [r7, #28]
 80057c8:	6a3a      	ldr	r2, [r7, #32]
 80057ca:	e841 2300 	strex	r3, r2, [r1]
 80057ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1e5      	bne.n	80057a2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 0310 	and.w	r3, r3, #16
 80057e0:	2b10      	cmp	r3, #16
 80057e2:	d10a      	bne.n	80057fa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057e4:	2300      	movs	r3, #0
 80057e6:	60fb      	str	r3, [r7, #12]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	60fb      	str	r3, [r7, #12]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	60fb      	str	r3, [r7, #12]
 80057f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057fe:	4619      	mov	r1, r3
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f7ff fe29 	bl	8005458 <HAL_UARTEx_RxEventCallback>
 8005806:	e002      	b.n	800580e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f7fb fb51 	bl	8000eb0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800580e:	2300      	movs	r3, #0
 8005810:	e002      	b.n	8005818 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005812:	2300      	movs	r3, #0
 8005814:	e000      	b.n	8005818 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005816:	2302      	movs	r3, #2
  }
}
 8005818:	4618      	mov	r0, r3
 800581a:	3730      	adds	r7, #48	; 0x30
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005824:	b0c0      	sub	sp, #256	; 0x100
 8005826:	af00      	add	r7, sp, #0
 8005828:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800582c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800583c:	68d9      	ldr	r1, [r3, #12]
 800583e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	ea40 0301 	orr.w	r3, r0, r1
 8005848:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800584a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800584e:	689a      	ldr	r2, [r3, #8]
 8005850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	431a      	orrs	r2, r3
 8005858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800585c:	695b      	ldr	r3, [r3, #20]
 800585e:	431a      	orrs	r2, r3
 8005860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	4313      	orrs	r3, r2
 8005868:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800586c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68db      	ldr	r3, [r3, #12]
 8005874:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005878:	f021 010c 	bic.w	r1, r1, #12
 800587c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005886:	430b      	orrs	r3, r1
 8005888:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800588a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800589a:	6999      	ldr	r1, [r3, #24]
 800589c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	ea40 0301 	orr.w	r3, r0, r1
 80058a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	4b8f      	ldr	r3, [pc, #572]	; (8005aec <UART_SetConfig+0x2cc>)
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d005      	beq.n	80058c0 <UART_SetConfig+0xa0>
 80058b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	4b8d      	ldr	r3, [pc, #564]	; (8005af0 <UART_SetConfig+0x2d0>)
 80058bc:	429a      	cmp	r2, r3
 80058be:	d104      	bne.n	80058ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058c0:	f7fe fb80 	bl	8003fc4 <HAL_RCC_GetPCLK2Freq>
 80058c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80058c8:	e003      	b.n	80058d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058ca:	f7fe fb67 	bl	8003f9c <HAL_RCC_GetPCLK1Freq>
 80058ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d6:	69db      	ldr	r3, [r3, #28]
 80058d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058dc:	f040 810c 	bne.w	8005af8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058e4:	2200      	movs	r2, #0
 80058e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80058ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80058ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80058f2:	4622      	mov	r2, r4
 80058f4:	462b      	mov	r3, r5
 80058f6:	1891      	adds	r1, r2, r2
 80058f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80058fa:	415b      	adcs	r3, r3
 80058fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005902:	4621      	mov	r1, r4
 8005904:	eb12 0801 	adds.w	r8, r2, r1
 8005908:	4629      	mov	r1, r5
 800590a:	eb43 0901 	adc.w	r9, r3, r1
 800590e:	f04f 0200 	mov.w	r2, #0
 8005912:	f04f 0300 	mov.w	r3, #0
 8005916:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800591a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800591e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005922:	4690      	mov	r8, r2
 8005924:	4699      	mov	r9, r3
 8005926:	4623      	mov	r3, r4
 8005928:	eb18 0303 	adds.w	r3, r8, r3
 800592c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005930:	462b      	mov	r3, r5
 8005932:	eb49 0303 	adc.w	r3, r9, r3
 8005936:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800593a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005946:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800594a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800594e:	460b      	mov	r3, r1
 8005950:	18db      	adds	r3, r3, r3
 8005952:	653b      	str	r3, [r7, #80]	; 0x50
 8005954:	4613      	mov	r3, r2
 8005956:	eb42 0303 	adc.w	r3, r2, r3
 800595a:	657b      	str	r3, [r7, #84]	; 0x54
 800595c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005960:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005964:	f7fb f922 	bl	8000bac <__aeabi_uldivmod>
 8005968:	4602      	mov	r2, r0
 800596a:	460b      	mov	r3, r1
 800596c:	4b61      	ldr	r3, [pc, #388]	; (8005af4 <UART_SetConfig+0x2d4>)
 800596e:	fba3 2302 	umull	r2, r3, r3, r2
 8005972:	095b      	lsrs	r3, r3, #5
 8005974:	011c      	lsls	r4, r3, #4
 8005976:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800597a:	2200      	movs	r2, #0
 800597c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005980:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005984:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005988:	4642      	mov	r2, r8
 800598a:	464b      	mov	r3, r9
 800598c:	1891      	adds	r1, r2, r2
 800598e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005990:	415b      	adcs	r3, r3
 8005992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005994:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005998:	4641      	mov	r1, r8
 800599a:	eb12 0a01 	adds.w	sl, r2, r1
 800599e:	4649      	mov	r1, r9
 80059a0:	eb43 0b01 	adc.w	fp, r3, r1
 80059a4:	f04f 0200 	mov.w	r2, #0
 80059a8:	f04f 0300 	mov.w	r3, #0
 80059ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059b8:	4692      	mov	sl, r2
 80059ba:	469b      	mov	fp, r3
 80059bc:	4643      	mov	r3, r8
 80059be:	eb1a 0303 	adds.w	r3, sl, r3
 80059c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059c6:	464b      	mov	r3, r9
 80059c8:	eb4b 0303 	adc.w	r3, fp, r3
 80059cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80059d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80059e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80059e4:	460b      	mov	r3, r1
 80059e6:	18db      	adds	r3, r3, r3
 80059e8:	643b      	str	r3, [r7, #64]	; 0x40
 80059ea:	4613      	mov	r3, r2
 80059ec:	eb42 0303 	adc.w	r3, r2, r3
 80059f0:	647b      	str	r3, [r7, #68]	; 0x44
 80059f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80059f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80059fa:	f7fb f8d7 	bl	8000bac <__aeabi_uldivmod>
 80059fe:	4602      	mov	r2, r0
 8005a00:	460b      	mov	r3, r1
 8005a02:	4611      	mov	r1, r2
 8005a04:	4b3b      	ldr	r3, [pc, #236]	; (8005af4 <UART_SetConfig+0x2d4>)
 8005a06:	fba3 2301 	umull	r2, r3, r3, r1
 8005a0a:	095b      	lsrs	r3, r3, #5
 8005a0c:	2264      	movs	r2, #100	; 0x64
 8005a0e:	fb02 f303 	mul.w	r3, r2, r3
 8005a12:	1acb      	subs	r3, r1, r3
 8005a14:	00db      	lsls	r3, r3, #3
 8005a16:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005a1a:	4b36      	ldr	r3, [pc, #216]	; (8005af4 <UART_SetConfig+0x2d4>)
 8005a1c:	fba3 2302 	umull	r2, r3, r3, r2
 8005a20:	095b      	lsrs	r3, r3, #5
 8005a22:	005b      	lsls	r3, r3, #1
 8005a24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a28:	441c      	add	r4, r3
 8005a2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a34:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005a38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005a3c:	4642      	mov	r2, r8
 8005a3e:	464b      	mov	r3, r9
 8005a40:	1891      	adds	r1, r2, r2
 8005a42:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a44:	415b      	adcs	r3, r3
 8005a46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a4c:	4641      	mov	r1, r8
 8005a4e:	1851      	adds	r1, r2, r1
 8005a50:	6339      	str	r1, [r7, #48]	; 0x30
 8005a52:	4649      	mov	r1, r9
 8005a54:	414b      	adcs	r3, r1
 8005a56:	637b      	str	r3, [r7, #52]	; 0x34
 8005a58:	f04f 0200 	mov.w	r2, #0
 8005a5c:	f04f 0300 	mov.w	r3, #0
 8005a60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005a64:	4659      	mov	r1, fp
 8005a66:	00cb      	lsls	r3, r1, #3
 8005a68:	4651      	mov	r1, sl
 8005a6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a6e:	4651      	mov	r1, sl
 8005a70:	00ca      	lsls	r2, r1, #3
 8005a72:	4610      	mov	r0, r2
 8005a74:	4619      	mov	r1, r3
 8005a76:	4603      	mov	r3, r0
 8005a78:	4642      	mov	r2, r8
 8005a7a:	189b      	adds	r3, r3, r2
 8005a7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a80:	464b      	mov	r3, r9
 8005a82:	460a      	mov	r2, r1
 8005a84:	eb42 0303 	adc.w	r3, r2, r3
 8005a88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a98:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005a9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	18db      	adds	r3, r3, r3
 8005aa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	eb42 0303 	adc.w	r3, r2, r3
 8005aac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005aae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ab2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005ab6:	f7fb f879 	bl	8000bac <__aeabi_uldivmod>
 8005aba:	4602      	mov	r2, r0
 8005abc:	460b      	mov	r3, r1
 8005abe:	4b0d      	ldr	r3, [pc, #52]	; (8005af4 <UART_SetConfig+0x2d4>)
 8005ac0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ac4:	095b      	lsrs	r3, r3, #5
 8005ac6:	2164      	movs	r1, #100	; 0x64
 8005ac8:	fb01 f303 	mul.w	r3, r1, r3
 8005acc:	1ad3      	subs	r3, r2, r3
 8005ace:	00db      	lsls	r3, r3, #3
 8005ad0:	3332      	adds	r3, #50	; 0x32
 8005ad2:	4a08      	ldr	r2, [pc, #32]	; (8005af4 <UART_SetConfig+0x2d4>)
 8005ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad8:	095b      	lsrs	r3, r3, #5
 8005ada:	f003 0207 	and.w	r2, r3, #7
 8005ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4422      	add	r2, r4
 8005ae6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ae8:	e105      	b.n	8005cf6 <UART_SetConfig+0x4d6>
 8005aea:	bf00      	nop
 8005aec:	40011000 	.word	0x40011000
 8005af0:	40011400 	.word	0x40011400
 8005af4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005af8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005afc:	2200      	movs	r2, #0
 8005afe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b02:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005b06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005b0a:	4642      	mov	r2, r8
 8005b0c:	464b      	mov	r3, r9
 8005b0e:	1891      	adds	r1, r2, r2
 8005b10:	6239      	str	r1, [r7, #32]
 8005b12:	415b      	adcs	r3, r3
 8005b14:	627b      	str	r3, [r7, #36]	; 0x24
 8005b16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b1a:	4641      	mov	r1, r8
 8005b1c:	1854      	adds	r4, r2, r1
 8005b1e:	4649      	mov	r1, r9
 8005b20:	eb43 0501 	adc.w	r5, r3, r1
 8005b24:	f04f 0200 	mov.w	r2, #0
 8005b28:	f04f 0300 	mov.w	r3, #0
 8005b2c:	00eb      	lsls	r3, r5, #3
 8005b2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b32:	00e2      	lsls	r2, r4, #3
 8005b34:	4614      	mov	r4, r2
 8005b36:	461d      	mov	r5, r3
 8005b38:	4643      	mov	r3, r8
 8005b3a:	18e3      	adds	r3, r4, r3
 8005b3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b40:	464b      	mov	r3, r9
 8005b42:	eb45 0303 	adc.w	r3, r5, r3
 8005b46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b5a:	f04f 0200 	mov.w	r2, #0
 8005b5e:	f04f 0300 	mov.w	r3, #0
 8005b62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005b66:	4629      	mov	r1, r5
 8005b68:	008b      	lsls	r3, r1, #2
 8005b6a:	4621      	mov	r1, r4
 8005b6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b70:	4621      	mov	r1, r4
 8005b72:	008a      	lsls	r2, r1, #2
 8005b74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005b78:	f7fb f818 	bl	8000bac <__aeabi_uldivmod>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	460b      	mov	r3, r1
 8005b80:	4b60      	ldr	r3, [pc, #384]	; (8005d04 <UART_SetConfig+0x4e4>)
 8005b82:	fba3 2302 	umull	r2, r3, r3, r2
 8005b86:	095b      	lsrs	r3, r3, #5
 8005b88:	011c      	lsls	r4, r3, #4
 8005b8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b94:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005b98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005b9c:	4642      	mov	r2, r8
 8005b9e:	464b      	mov	r3, r9
 8005ba0:	1891      	adds	r1, r2, r2
 8005ba2:	61b9      	str	r1, [r7, #24]
 8005ba4:	415b      	adcs	r3, r3
 8005ba6:	61fb      	str	r3, [r7, #28]
 8005ba8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bac:	4641      	mov	r1, r8
 8005bae:	1851      	adds	r1, r2, r1
 8005bb0:	6139      	str	r1, [r7, #16]
 8005bb2:	4649      	mov	r1, r9
 8005bb4:	414b      	adcs	r3, r1
 8005bb6:	617b      	str	r3, [r7, #20]
 8005bb8:	f04f 0200 	mov.w	r2, #0
 8005bbc:	f04f 0300 	mov.w	r3, #0
 8005bc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bc4:	4659      	mov	r1, fp
 8005bc6:	00cb      	lsls	r3, r1, #3
 8005bc8:	4651      	mov	r1, sl
 8005bca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bce:	4651      	mov	r1, sl
 8005bd0:	00ca      	lsls	r2, r1, #3
 8005bd2:	4610      	mov	r0, r2
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	4642      	mov	r2, r8
 8005bda:	189b      	adds	r3, r3, r2
 8005bdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005be0:	464b      	mov	r3, r9
 8005be2:	460a      	mov	r2, r1
 8005be4:	eb42 0303 	adc.w	r3, r2, r3
 8005be8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005bf6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005bf8:	f04f 0200 	mov.w	r2, #0
 8005bfc:	f04f 0300 	mov.w	r3, #0
 8005c00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005c04:	4649      	mov	r1, r9
 8005c06:	008b      	lsls	r3, r1, #2
 8005c08:	4641      	mov	r1, r8
 8005c0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c0e:	4641      	mov	r1, r8
 8005c10:	008a      	lsls	r2, r1, #2
 8005c12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005c16:	f7fa ffc9 	bl	8000bac <__aeabi_uldivmod>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	4b39      	ldr	r3, [pc, #228]	; (8005d04 <UART_SetConfig+0x4e4>)
 8005c20:	fba3 1302 	umull	r1, r3, r3, r2
 8005c24:	095b      	lsrs	r3, r3, #5
 8005c26:	2164      	movs	r1, #100	; 0x64
 8005c28:	fb01 f303 	mul.w	r3, r1, r3
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	011b      	lsls	r3, r3, #4
 8005c30:	3332      	adds	r3, #50	; 0x32
 8005c32:	4a34      	ldr	r2, [pc, #208]	; (8005d04 <UART_SetConfig+0x4e4>)
 8005c34:	fba2 2303 	umull	r2, r3, r2, r3
 8005c38:	095b      	lsrs	r3, r3, #5
 8005c3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c3e:	441c      	add	r4, r3
 8005c40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c44:	2200      	movs	r2, #0
 8005c46:	673b      	str	r3, [r7, #112]	; 0x70
 8005c48:	677a      	str	r2, [r7, #116]	; 0x74
 8005c4a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005c4e:	4642      	mov	r2, r8
 8005c50:	464b      	mov	r3, r9
 8005c52:	1891      	adds	r1, r2, r2
 8005c54:	60b9      	str	r1, [r7, #8]
 8005c56:	415b      	adcs	r3, r3
 8005c58:	60fb      	str	r3, [r7, #12]
 8005c5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c5e:	4641      	mov	r1, r8
 8005c60:	1851      	adds	r1, r2, r1
 8005c62:	6039      	str	r1, [r7, #0]
 8005c64:	4649      	mov	r1, r9
 8005c66:	414b      	adcs	r3, r1
 8005c68:	607b      	str	r3, [r7, #4]
 8005c6a:	f04f 0200 	mov.w	r2, #0
 8005c6e:	f04f 0300 	mov.w	r3, #0
 8005c72:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c76:	4659      	mov	r1, fp
 8005c78:	00cb      	lsls	r3, r1, #3
 8005c7a:	4651      	mov	r1, sl
 8005c7c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c80:	4651      	mov	r1, sl
 8005c82:	00ca      	lsls	r2, r1, #3
 8005c84:	4610      	mov	r0, r2
 8005c86:	4619      	mov	r1, r3
 8005c88:	4603      	mov	r3, r0
 8005c8a:	4642      	mov	r2, r8
 8005c8c:	189b      	adds	r3, r3, r2
 8005c8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c90:	464b      	mov	r3, r9
 8005c92:	460a      	mov	r2, r1
 8005c94:	eb42 0303 	adc.w	r3, r2, r3
 8005c98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	663b      	str	r3, [r7, #96]	; 0x60
 8005ca4:	667a      	str	r2, [r7, #100]	; 0x64
 8005ca6:	f04f 0200 	mov.w	r2, #0
 8005caa:	f04f 0300 	mov.w	r3, #0
 8005cae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005cb2:	4649      	mov	r1, r9
 8005cb4:	008b      	lsls	r3, r1, #2
 8005cb6:	4641      	mov	r1, r8
 8005cb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cbc:	4641      	mov	r1, r8
 8005cbe:	008a      	lsls	r2, r1, #2
 8005cc0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005cc4:	f7fa ff72 	bl	8000bac <__aeabi_uldivmod>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	460b      	mov	r3, r1
 8005ccc:	4b0d      	ldr	r3, [pc, #52]	; (8005d04 <UART_SetConfig+0x4e4>)
 8005cce:	fba3 1302 	umull	r1, r3, r3, r2
 8005cd2:	095b      	lsrs	r3, r3, #5
 8005cd4:	2164      	movs	r1, #100	; 0x64
 8005cd6:	fb01 f303 	mul.w	r3, r1, r3
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	011b      	lsls	r3, r3, #4
 8005cde:	3332      	adds	r3, #50	; 0x32
 8005ce0:	4a08      	ldr	r2, [pc, #32]	; (8005d04 <UART_SetConfig+0x4e4>)
 8005ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce6:	095b      	lsrs	r3, r3, #5
 8005ce8:	f003 020f 	and.w	r2, r3, #15
 8005cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4422      	add	r2, r4
 8005cf4:	609a      	str	r2, [r3, #8]
}
 8005cf6:	bf00      	nop
 8005cf8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d02:	bf00      	nop
 8005d04:	51eb851f 	.word	0x51eb851f

08005d08 <__errno>:
 8005d08:	4b01      	ldr	r3, [pc, #4]	; (8005d10 <__errno+0x8>)
 8005d0a:	6818      	ldr	r0, [r3, #0]
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	20000014 	.word	0x20000014

08005d14 <__libc_init_array>:
 8005d14:	b570      	push	{r4, r5, r6, lr}
 8005d16:	4d0d      	ldr	r5, [pc, #52]	; (8005d4c <__libc_init_array+0x38>)
 8005d18:	4c0d      	ldr	r4, [pc, #52]	; (8005d50 <__libc_init_array+0x3c>)
 8005d1a:	1b64      	subs	r4, r4, r5
 8005d1c:	10a4      	asrs	r4, r4, #2
 8005d1e:	2600      	movs	r6, #0
 8005d20:	42a6      	cmp	r6, r4
 8005d22:	d109      	bne.n	8005d38 <__libc_init_array+0x24>
 8005d24:	4d0b      	ldr	r5, [pc, #44]	; (8005d54 <__libc_init_array+0x40>)
 8005d26:	4c0c      	ldr	r4, [pc, #48]	; (8005d58 <__libc_init_array+0x44>)
 8005d28:	f002 f904 	bl	8007f34 <_init>
 8005d2c:	1b64      	subs	r4, r4, r5
 8005d2e:	10a4      	asrs	r4, r4, #2
 8005d30:	2600      	movs	r6, #0
 8005d32:	42a6      	cmp	r6, r4
 8005d34:	d105      	bne.n	8005d42 <__libc_init_array+0x2e>
 8005d36:	bd70      	pop	{r4, r5, r6, pc}
 8005d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d3c:	4798      	blx	r3
 8005d3e:	3601      	adds	r6, #1
 8005d40:	e7ee      	b.n	8005d20 <__libc_init_array+0xc>
 8005d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d46:	4798      	blx	r3
 8005d48:	3601      	adds	r6, #1
 8005d4a:	e7f2      	b.n	8005d32 <__libc_init_array+0x1e>
 8005d4c:	08008298 	.word	0x08008298
 8005d50:	08008298 	.word	0x08008298
 8005d54:	08008298 	.word	0x08008298
 8005d58:	0800829c 	.word	0x0800829c

08005d5c <memset>:
 8005d5c:	4402      	add	r2, r0
 8005d5e:	4603      	mov	r3, r0
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d100      	bne.n	8005d66 <memset+0xa>
 8005d64:	4770      	bx	lr
 8005d66:	f803 1b01 	strb.w	r1, [r3], #1
 8005d6a:	e7f9      	b.n	8005d60 <memset+0x4>

08005d6c <srand>:
 8005d6c:	b538      	push	{r3, r4, r5, lr}
 8005d6e:	4b10      	ldr	r3, [pc, #64]	; (8005db0 <srand+0x44>)
 8005d70:	681d      	ldr	r5, [r3, #0]
 8005d72:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005d74:	4604      	mov	r4, r0
 8005d76:	b9b3      	cbnz	r3, 8005da6 <srand+0x3a>
 8005d78:	2018      	movs	r0, #24
 8005d7a:	f000 f8bf 	bl	8005efc <malloc>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	63a8      	str	r0, [r5, #56]	; 0x38
 8005d82:	b920      	cbnz	r0, 8005d8e <srand+0x22>
 8005d84:	4b0b      	ldr	r3, [pc, #44]	; (8005db4 <srand+0x48>)
 8005d86:	480c      	ldr	r0, [pc, #48]	; (8005db8 <srand+0x4c>)
 8005d88:	2142      	movs	r1, #66	; 0x42
 8005d8a:	f000 f875 	bl	8005e78 <__assert_func>
 8005d8e:	490b      	ldr	r1, [pc, #44]	; (8005dbc <srand+0x50>)
 8005d90:	4b0b      	ldr	r3, [pc, #44]	; (8005dc0 <srand+0x54>)
 8005d92:	e9c0 1300 	strd	r1, r3, [r0]
 8005d96:	4b0b      	ldr	r3, [pc, #44]	; (8005dc4 <srand+0x58>)
 8005d98:	6083      	str	r3, [r0, #8]
 8005d9a:	230b      	movs	r3, #11
 8005d9c:	8183      	strh	r3, [r0, #12]
 8005d9e:	2100      	movs	r1, #0
 8005da0:	2001      	movs	r0, #1
 8005da2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005da6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005da8:	2200      	movs	r2, #0
 8005daa:	611c      	str	r4, [r3, #16]
 8005dac:	615a      	str	r2, [r3, #20]
 8005dae:	bd38      	pop	{r3, r4, r5, pc}
 8005db0:	20000014 	.word	0x20000014
 8005db4:	08007f74 	.word	0x08007f74
 8005db8:	08007f8b 	.word	0x08007f8b
 8005dbc:	abcd330e 	.word	0xabcd330e
 8005dc0:	e66d1234 	.word	0xe66d1234
 8005dc4:	0005deec 	.word	0x0005deec

08005dc8 <rand>:
 8005dc8:	4b16      	ldr	r3, [pc, #88]	; (8005e24 <rand+0x5c>)
 8005dca:	b510      	push	{r4, lr}
 8005dcc:	681c      	ldr	r4, [r3, #0]
 8005dce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005dd0:	b9b3      	cbnz	r3, 8005e00 <rand+0x38>
 8005dd2:	2018      	movs	r0, #24
 8005dd4:	f000 f892 	bl	8005efc <malloc>
 8005dd8:	63a0      	str	r0, [r4, #56]	; 0x38
 8005dda:	b928      	cbnz	r0, 8005de8 <rand+0x20>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	4b12      	ldr	r3, [pc, #72]	; (8005e28 <rand+0x60>)
 8005de0:	4812      	ldr	r0, [pc, #72]	; (8005e2c <rand+0x64>)
 8005de2:	214e      	movs	r1, #78	; 0x4e
 8005de4:	f000 f848 	bl	8005e78 <__assert_func>
 8005de8:	4a11      	ldr	r2, [pc, #68]	; (8005e30 <rand+0x68>)
 8005dea:	4b12      	ldr	r3, [pc, #72]	; (8005e34 <rand+0x6c>)
 8005dec:	e9c0 2300 	strd	r2, r3, [r0]
 8005df0:	4b11      	ldr	r3, [pc, #68]	; (8005e38 <rand+0x70>)
 8005df2:	6083      	str	r3, [r0, #8]
 8005df4:	230b      	movs	r3, #11
 8005df6:	8183      	strh	r3, [r0, #12]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005e00:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8005e02:	4a0e      	ldr	r2, [pc, #56]	; (8005e3c <rand+0x74>)
 8005e04:	6920      	ldr	r0, [r4, #16]
 8005e06:	6963      	ldr	r3, [r4, #20]
 8005e08:	490d      	ldr	r1, [pc, #52]	; (8005e40 <rand+0x78>)
 8005e0a:	4342      	muls	r2, r0
 8005e0c:	fb01 2203 	mla	r2, r1, r3, r2
 8005e10:	fba0 0101 	umull	r0, r1, r0, r1
 8005e14:	1c43      	adds	r3, r0, #1
 8005e16:	eb42 0001 	adc.w	r0, r2, r1
 8005e1a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8005e1e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005e22:	bd10      	pop	{r4, pc}
 8005e24:	20000014 	.word	0x20000014
 8005e28:	08007f74 	.word	0x08007f74
 8005e2c:	08007f8b 	.word	0x08007f8b
 8005e30:	abcd330e 	.word	0xabcd330e
 8005e34:	e66d1234 	.word	0xe66d1234
 8005e38:	0005deec 	.word	0x0005deec
 8005e3c:	5851f42d 	.word	0x5851f42d
 8005e40:	4c957f2d 	.word	0x4c957f2d

08005e44 <time>:
 8005e44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005e46:	4b0b      	ldr	r3, [pc, #44]	; (8005e74 <time+0x30>)
 8005e48:	2200      	movs	r2, #0
 8005e4a:	4669      	mov	r1, sp
 8005e4c:	4604      	mov	r4, r0
 8005e4e:	6818      	ldr	r0, [r3, #0]
 8005e50:	f000 f842 	bl	8005ed8 <_gettimeofday_r>
 8005e54:	2800      	cmp	r0, #0
 8005e56:	bfbe      	ittt	lt
 8005e58:	f04f 32ff 	movlt.w	r2, #4294967295
 8005e5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e60:	e9cd 2300 	strdlt	r2, r3, [sp]
 8005e64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e68:	b10c      	cbz	r4, 8005e6e <time+0x2a>
 8005e6a:	e9c4 0100 	strd	r0, r1, [r4]
 8005e6e:	b004      	add	sp, #16
 8005e70:	bd10      	pop	{r4, pc}
 8005e72:	bf00      	nop
 8005e74:	20000014 	.word	0x20000014

08005e78 <__assert_func>:
 8005e78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005e7a:	4614      	mov	r4, r2
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	4b09      	ldr	r3, [pc, #36]	; (8005ea4 <__assert_func+0x2c>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4605      	mov	r5, r0
 8005e84:	68d8      	ldr	r0, [r3, #12]
 8005e86:	b14c      	cbz	r4, 8005e9c <__assert_func+0x24>
 8005e88:	4b07      	ldr	r3, [pc, #28]	; (8005ea8 <__assert_func+0x30>)
 8005e8a:	9100      	str	r1, [sp, #0]
 8005e8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005e90:	4906      	ldr	r1, [pc, #24]	; (8005eac <__assert_func+0x34>)
 8005e92:	462b      	mov	r3, r5
 8005e94:	f000 f80e 	bl	8005eb4 <fiprintf>
 8005e98:	f000 fcd6 	bl	8006848 <abort>
 8005e9c:	4b04      	ldr	r3, [pc, #16]	; (8005eb0 <__assert_func+0x38>)
 8005e9e:	461c      	mov	r4, r3
 8005ea0:	e7f3      	b.n	8005e8a <__assert_func+0x12>
 8005ea2:	bf00      	nop
 8005ea4:	20000014 	.word	0x20000014
 8005ea8:	08007fe6 	.word	0x08007fe6
 8005eac:	08007ff3 	.word	0x08007ff3
 8005eb0:	08008021 	.word	0x08008021

08005eb4 <fiprintf>:
 8005eb4:	b40e      	push	{r1, r2, r3}
 8005eb6:	b503      	push	{r0, r1, lr}
 8005eb8:	4601      	mov	r1, r0
 8005eba:	ab03      	add	r3, sp, #12
 8005ebc:	4805      	ldr	r0, [pc, #20]	; (8005ed4 <fiprintf+0x20>)
 8005ebe:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ec2:	6800      	ldr	r0, [r0, #0]
 8005ec4:	9301      	str	r3, [sp, #4]
 8005ec6:	f000 f92b 	bl	8006120 <_vfiprintf_r>
 8005eca:	b002      	add	sp, #8
 8005ecc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ed0:	b003      	add	sp, #12
 8005ed2:	4770      	bx	lr
 8005ed4:	20000014 	.word	0x20000014

08005ed8 <_gettimeofday_r>:
 8005ed8:	b538      	push	{r3, r4, r5, lr}
 8005eda:	4d07      	ldr	r5, [pc, #28]	; (8005ef8 <_gettimeofday_r+0x20>)
 8005edc:	2300      	movs	r3, #0
 8005ede:	4604      	mov	r4, r0
 8005ee0:	4608      	mov	r0, r1
 8005ee2:	4611      	mov	r1, r2
 8005ee4:	602b      	str	r3, [r5, #0]
 8005ee6:	f002 f81d 	bl	8007f24 <_gettimeofday>
 8005eea:	1c43      	adds	r3, r0, #1
 8005eec:	d102      	bne.n	8005ef4 <_gettimeofday_r+0x1c>
 8005eee:	682b      	ldr	r3, [r5, #0]
 8005ef0:	b103      	cbz	r3, 8005ef4 <_gettimeofday_r+0x1c>
 8005ef2:	6023      	str	r3, [r4, #0]
 8005ef4:	bd38      	pop	{r3, r4, r5, pc}
 8005ef6:	bf00      	nop
 8005ef8:	200008dc 	.word	0x200008dc

08005efc <malloc>:
 8005efc:	4b02      	ldr	r3, [pc, #8]	; (8005f08 <malloc+0xc>)
 8005efe:	4601      	mov	r1, r0
 8005f00:	6818      	ldr	r0, [r3, #0]
 8005f02:	f000 b86f 	b.w	8005fe4 <_malloc_r>
 8005f06:	bf00      	nop
 8005f08:	20000014 	.word	0x20000014

08005f0c <_free_r>:
 8005f0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005f0e:	2900      	cmp	r1, #0
 8005f10:	d044      	beq.n	8005f9c <_free_r+0x90>
 8005f12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f16:	9001      	str	r0, [sp, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	f1a1 0404 	sub.w	r4, r1, #4
 8005f1e:	bfb8      	it	lt
 8005f20:	18e4      	addlt	r4, r4, r3
 8005f22:	f000 feb9 	bl	8006c98 <__malloc_lock>
 8005f26:	4a1e      	ldr	r2, [pc, #120]	; (8005fa0 <_free_r+0x94>)
 8005f28:	9801      	ldr	r0, [sp, #4]
 8005f2a:	6813      	ldr	r3, [r2, #0]
 8005f2c:	b933      	cbnz	r3, 8005f3c <_free_r+0x30>
 8005f2e:	6063      	str	r3, [r4, #4]
 8005f30:	6014      	str	r4, [r2, #0]
 8005f32:	b003      	add	sp, #12
 8005f34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005f38:	f000 beb4 	b.w	8006ca4 <__malloc_unlock>
 8005f3c:	42a3      	cmp	r3, r4
 8005f3e:	d908      	bls.n	8005f52 <_free_r+0x46>
 8005f40:	6825      	ldr	r5, [r4, #0]
 8005f42:	1961      	adds	r1, r4, r5
 8005f44:	428b      	cmp	r3, r1
 8005f46:	bf01      	itttt	eq
 8005f48:	6819      	ldreq	r1, [r3, #0]
 8005f4a:	685b      	ldreq	r3, [r3, #4]
 8005f4c:	1949      	addeq	r1, r1, r5
 8005f4e:	6021      	streq	r1, [r4, #0]
 8005f50:	e7ed      	b.n	8005f2e <_free_r+0x22>
 8005f52:	461a      	mov	r2, r3
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	b10b      	cbz	r3, 8005f5c <_free_r+0x50>
 8005f58:	42a3      	cmp	r3, r4
 8005f5a:	d9fa      	bls.n	8005f52 <_free_r+0x46>
 8005f5c:	6811      	ldr	r1, [r2, #0]
 8005f5e:	1855      	adds	r5, r2, r1
 8005f60:	42a5      	cmp	r5, r4
 8005f62:	d10b      	bne.n	8005f7c <_free_r+0x70>
 8005f64:	6824      	ldr	r4, [r4, #0]
 8005f66:	4421      	add	r1, r4
 8005f68:	1854      	adds	r4, r2, r1
 8005f6a:	42a3      	cmp	r3, r4
 8005f6c:	6011      	str	r1, [r2, #0]
 8005f6e:	d1e0      	bne.n	8005f32 <_free_r+0x26>
 8005f70:	681c      	ldr	r4, [r3, #0]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	6053      	str	r3, [r2, #4]
 8005f76:	4421      	add	r1, r4
 8005f78:	6011      	str	r1, [r2, #0]
 8005f7a:	e7da      	b.n	8005f32 <_free_r+0x26>
 8005f7c:	d902      	bls.n	8005f84 <_free_r+0x78>
 8005f7e:	230c      	movs	r3, #12
 8005f80:	6003      	str	r3, [r0, #0]
 8005f82:	e7d6      	b.n	8005f32 <_free_r+0x26>
 8005f84:	6825      	ldr	r5, [r4, #0]
 8005f86:	1961      	adds	r1, r4, r5
 8005f88:	428b      	cmp	r3, r1
 8005f8a:	bf04      	itt	eq
 8005f8c:	6819      	ldreq	r1, [r3, #0]
 8005f8e:	685b      	ldreq	r3, [r3, #4]
 8005f90:	6063      	str	r3, [r4, #4]
 8005f92:	bf04      	itt	eq
 8005f94:	1949      	addeq	r1, r1, r5
 8005f96:	6021      	streq	r1, [r4, #0]
 8005f98:	6054      	str	r4, [r2, #4]
 8005f9a:	e7ca      	b.n	8005f32 <_free_r+0x26>
 8005f9c:	b003      	add	sp, #12
 8005f9e:	bd30      	pop	{r4, r5, pc}
 8005fa0:	200008d4 	.word	0x200008d4

08005fa4 <sbrk_aligned>:
 8005fa4:	b570      	push	{r4, r5, r6, lr}
 8005fa6:	4e0e      	ldr	r6, [pc, #56]	; (8005fe0 <sbrk_aligned+0x3c>)
 8005fa8:	460c      	mov	r4, r1
 8005faa:	6831      	ldr	r1, [r6, #0]
 8005fac:	4605      	mov	r5, r0
 8005fae:	b911      	cbnz	r1, 8005fb6 <sbrk_aligned+0x12>
 8005fb0:	f000 fb7a 	bl	80066a8 <_sbrk_r>
 8005fb4:	6030      	str	r0, [r6, #0]
 8005fb6:	4621      	mov	r1, r4
 8005fb8:	4628      	mov	r0, r5
 8005fba:	f000 fb75 	bl	80066a8 <_sbrk_r>
 8005fbe:	1c43      	adds	r3, r0, #1
 8005fc0:	d00a      	beq.n	8005fd8 <sbrk_aligned+0x34>
 8005fc2:	1cc4      	adds	r4, r0, #3
 8005fc4:	f024 0403 	bic.w	r4, r4, #3
 8005fc8:	42a0      	cmp	r0, r4
 8005fca:	d007      	beq.n	8005fdc <sbrk_aligned+0x38>
 8005fcc:	1a21      	subs	r1, r4, r0
 8005fce:	4628      	mov	r0, r5
 8005fd0:	f000 fb6a 	bl	80066a8 <_sbrk_r>
 8005fd4:	3001      	adds	r0, #1
 8005fd6:	d101      	bne.n	8005fdc <sbrk_aligned+0x38>
 8005fd8:	f04f 34ff 	mov.w	r4, #4294967295
 8005fdc:	4620      	mov	r0, r4
 8005fde:	bd70      	pop	{r4, r5, r6, pc}
 8005fe0:	200008d8 	.word	0x200008d8

08005fe4 <_malloc_r>:
 8005fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fe8:	1ccd      	adds	r5, r1, #3
 8005fea:	f025 0503 	bic.w	r5, r5, #3
 8005fee:	3508      	adds	r5, #8
 8005ff0:	2d0c      	cmp	r5, #12
 8005ff2:	bf38      	it	cc
 8005ff4:	250c      	movcc	r5, #12
 8005ff6:	2d00      	cmp	r5, #0
 8005ff8:	4607      	mov	r7, r0
 8005ffa:	db01      	blt.n	8006000 <_malloc_r+0x1c>
 8005ffc:	42a9      	cmp	r1, r5
 8005ffe:	d905      	bls.n	800600c <_malloc_r+0x28>
 8006000:	230c      	movs	r3, #12
 8006002:	603b      	str	r3, [r7, #0]
 8006004:	2600      	movs	r6, #0
 8006006:	4630      	mov	r0, r6
 8006008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800600c:	4e2e      	ldr	r6, [pc, #184]	; (80060c8 <_malloc_r+0xe4>)
 800600e:	f000 fe43 	bl	8006c98 <__malloc_lock>
 8006012:	6833      	ldr	r3, [r6, #0]
 8006014:	461c      	mov	r4, r3
 8006016:	bb34      	cbnz	r4, 8006066 <_malloc_r+0x82>
 8006018:	4629      	mov	r1, r5
 800601a:	4638      	mov	r0, r7
 800601c:	f7ff ffc2 	bl	8005fa4 <sbrk_aligned>
 8006020:	1c43      	adds	r3, r0, #1
 8006022:	4604      	mov	r4, r0
 8006024:	d14d      	bne.n	80060c2 <_malloc_r+0xde>
 8006026:	6834      	ldr	r4, [r6, #0]
 8006028:	4626      	mov	r6, r4
 800602a:	2e00      	cmp	r6, #0
 800602c:	d140      	bne.n	80060b0 <_malloc_r+0xcc>
 800602e:	6823      	ldr	r3, [r4, #0]
 8006030:	4631      	mov	r1, r6
 8006032:	4638      	mov	r0, r7
 8006034:	eb04 0803 	add.w	r8, r4, r3
 8006038:	f000 fb36 	bl	80066a8 <_sbrk_r>
 800603c:	4580      	cmp	r8, r0
 800603e:	d13a      	bne.n	80060b6 <_malloc_r+0xd2>
 8006040:	6821      	ldr	r1, [r4, #0]
 8006042:	3503      	adds	r5, #3
 8006044:	1a6d      	subs	r5, r5, r1
 8006046:	f025 0503 	bic.w	r5, r5, #3
 800604a:	3508      	adds	r5, #8
 800604c:	2d0c      	cmp	r5, #12
 800604e:	bf38      	it	cc
 8006050:	250c      	movcc	r5, #12
 8006052:	4629      	mov	r1, r5
 8006054:	4638      	mov	r0, r7
 8006056:	f7ff ffa5 	bl	8005fa4 <sbrk_aligned>
 800605a:	3001      	adds	r0, #1
 800605c:	d02b      	beq.n	80060b6 <_malloc_r+0xd2>
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	442b      	add	r3, r5
 8006062:	6023      	str	r3, [r4, #0]
 8006064:	e00e      	b.n	8006084 <_malloc_r+0xa0>
 8006066:	6822      	ldr	r2, [r4, #0]
 8006068:	1b52      	subs	r2, r2, r5
 800606a:	d41e      	bmi.n	80060aa <_malloc_r+0xc6>
 800606c:	2a0b      	cmp	r2, #11
 800606e:	d916      	bls.n	800609e <_malloc_r+0xba>
 8006070:	1961      	adds	r1, r4, r5
 8006072:	42a3      	cmp	r3, r4
 8006074:	6025      	str	r5, [r4, #0]
 8006076:	bf18      	it	ne
 8006078:	6059      	strne	r1, [r3, #4]
 800607a:	6863      	ldr	r3, [r4, #4]
 800607c:	bf08      	it	eq
 800607e:	6031      	streq	r1, [r6, #0]
 8006080:	5162      	str	r2, [r4, r5]
 8006082:	604b      	str	r3, [r1, #4]
 8006084:	4638      	mov	r0, r7
 8006086:	f104 060b 	add.w	r6, r4, #11
 800608a:	f000 fe0b 	bl	8006ca4 <__malloc_unlock>
 800608e:	f026 0607 	bic.w	r6, r6, #7
 8006092:	1d23      	adds	r3, r4, #4
 8006094:	1af2      	subs	r2, r6, r3
 8006096:	d0b6      	beq.n	8006006 <_malloc_r+0x22>
 8006098:	1b9b      	subs	r3, r3, r6
 800609a:	50a3      	str	r3, [r4, r2]
 800609c:	e7b3      	b.n	8006006 <_malloc_r+0x22>
 800609e:	6862      	ldr	r2, [r4, #4]
 80060a0:	42a3      	cmp	r3, r4
 80060a2:	bf0c      	ite	eq
 80060a4:	6032      	streq	r2, [r6, #0]
 80060a6:	605a      	strne	r2, [r3, #4]
 80060a8:	e7ec      	b.n	8006084 <_malloc_r+0xa0>
 80060aa:	4623      	mov	r3, r4
 80060ac:	6864      	ldr	r4, [r4, #4]
 80060ae:	e7b2      	b.n	8006016 <_malloc_r+0x32>
 80060b0:	4634      	mov	r4, r6
 80060b2:	6876      	ldr	r6, [r6, #4]
 80060b4:	e7b9      	b.n	800602a <_malloc_r+0x46>
 80060b6:	230c      	movs	r3, #12
 80060b8:	603b      	str	r3, [r7, #0]
 80060ba:	4638      	mov	r0, r7
 80060bc:	f000 fdf2 	bl	8006ca4 <__malloc_unlock>
 80060c0:	e7a1      	b.n	8006006 <_malloc_r+0x22>
 80060c2:	6025      	str	r5, [r4, #0]
 80060c4:	e7de      	b.n	8006084 <_malloc_r+0xa0>
 80060c6:	bf00      	nop
 80060c8:	200008d4 	.word	0x200008d4

080060cc <__sfputc_r>:
 80060cc:	6893      	ldr	r3, [r2, #8]
 80060ce:	3b01      	subs	r3, #1
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	b410      	push	{r4}
 80060d4:	6093      	str	r3, [r2, #8]
 80060d6:	da08      	bge.n	80060ea <__sfputc_r+0x1e>
 80060d8:	6994      	ldr	r4, [r2, #24]
 80060da:	42a3      	cmp	r3, r4
 80060dc:	db01      	blt.n	80060e2 <__sfputc_r+0x16>
 80060de:	290a      	cmp	r1, #10
 80060e0:	d103      	bne.n	80060ea <__sfputc_r+0x1e>
 80060e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060e6:	f000 baef 	b.w	80066c8 <__swbuf_r>
 80060ea:	6813      	ldr	r3, [r2, #0]
 80060ec:	1c58      	adds	r0, r3, #1
 80060ee:	6010      	str	r0, [r2, #0]
 80060f0:	7019      	strb	r1, [r3, #0]
 80060f2:	4608      	mov	r0, r1
 80060f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060f8:	4770      	bx	lr

080060fa <__sfputs_r>:
 80060fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fc:	4606      	mov	r6, r0
 80060fe:	460f      	mov	r7, r1
 8006100:	4614      	mov	r4, r2
 8006102:	18d5      	adds	r5, r2, r3
 8006104:	42ac      	cmp	r4, r5
 8006106:	d101      	bne.n	800610c <__sfputs_r+0x12>
 8006108:	2000      	movs	r0, #0
 800610a:	e007      	b.n	800611c <__sfputs_r+0x22>
 800610c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006110:	463a      	mov	r2, r7
 8006112:	4630      	mov	r0, r6
 8006114:	f7ff ffda 	bl	80060cc <__sfputc_r>
 8006118:	1c43      	adds	r3, r0, #1
 800611a:	d1f3      	bne.n	8006104 <__sfputs_r+0xa>
 800611c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006120 <_vfiprintf_r>:
 8006120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006124:	460d      	mov	r5, r1
 8006126:	b09d      	sub	sp, #116	; 0x74
 8006128:	4614      	mov	r4, r2
 800612a:	4698      	mov	r8, r3
 800612c:	4606      	mov	r6, r0
 800612e:	b118      	cbz	r0, 8006138 <_vfiprintf_r+0x18>
 8006130:	6983      	ldr	r3, [r0, #24]
 8006132:	b90b      	cbnz	r3, 8006138 <_vfiprintf_r+0x18>
 8006134:	f000 fcaa 	bl	8006a8c <__sinit>
 8006138:	4b89      	ldr	r3, [pc, #548]	; (8006360 <_vfiprintf_r+0x240>)
 800613a:	429d      	cmp	r5, r3
 800613c:	d11b      	bne.n	8006176 <_vfiprintf_r+0x56>
 800613e:	6875      	ldr	r5, [r6, #4]
 8006140:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006142:	07d9      	lsls	r1, r3, #31
 8006144:	d405      	bmi.n	8006152 <_vfiprintf_r+0x32>
 8006146:	89ab      	ldrh	r3, [r5, #12]
 8006148:	059a      	lsls	r2, r3, #22
 800614a:	d402      	bmi.n	8006152 <_vfiprintf_r+0x32>
 800614c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800614e:	f000 fd3b 	bl	8006bc8 <__retarget_lock_acquire_recursive>
 8006152:	89ab      	ldrh	r3, [r5, #12]
 8006154:	071b      	lsls	r3, r3, #28
 8006156:	d501      	bpl.n	800615c <_vfiprintf_r+0x3c>
 8006158:	692b      	ldr	r3, [r5, #16]
 800615a:	b9eb      	cbnz	r3, 8006198 <_vfiprintf_r+0x78>
 800615c:	4629      	mov	r1, r5
 800615e:	4630      	mov	r0, r6
 8006160:	f000 fb04 	bl	800676c <__swsetup_r>
 8006164:	b1c0      	cbz	r0, 8006198 <_vfiprintf_r+0x78>
 8006166:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006168:	07dc      	lsls	r4, r3, #31
 800616a:	d50e      	bpl.n	800618a <_vfiprintf_r+0x6a>
 800616c:	f04f 30ff 	mov.w	r0, #4294967295
 8006170:	b01d      	add	sp, #116	; 0x74
 8006172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006176:	4b7b      	ldr	r3, [pc, #492]	; (8006364 <_vfiprintf_r+0x244>)
 8006178:	429d      	cmp	r5, r3
 800617a:	d101      	bne.n	8006180 <_vfiprintf_r+0x60>
 800617c:	68b5      	ldr	r5, [r6, #8]
 800617e:	e7df      	b.n	8006140 <_vfiprintf_r+0x20>
 8006180:	4b79      	ldr	r3, [pc, #484]	; (8006368 <_vfiprintf_r+0x248>)
 8006182:	429d      	cmp	r5, r3
 8006184:	bf08      	it	eq
 8006186:	68f5      	ldreq	r5, [r6, #12]
 8006188:	e7da      	b.n	8006140 <_vfiprintf_r+0x20>
 800618a:	89ab      	ldrh	r3, [r5, #12]
 800618c:	0598      	lsls	r0, r3, #22
 800618e:	d4ed      	bmi.n	800616c <_vfiprintf_r+0x4c>
 8006190:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006192:	f000 fd1a 	bl	8006bca <__retarget_lock_release_recursive>
 8006196:	e7e9      	b.n	800616c <_vfiprintf_r+0x4c>
 8006198:	2300      	movs	r3, #0
 800619a:	9309      	str	r3, [sp, #36]	; 0x24
 800619c:	2320      	movs	r3, #32
 800619e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80061a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80061a6:	2330      	movs	r3, #48	; 0x30
 80061a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800636c <_vfiprintf_r+0x24c>
 80061ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80061b0:	f04f 0901 	mov.w	r9, #1
 80061b4:	4623      	mov	r3, r4
 80061b6:	469a      	mov	sl, r3
 80061b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80061bc:	b10a      	cbz	r2, 80061c2 <_vfiprintf_r+0xa2>
 80061be:	2a25      	cmp	r2, #37	; 0x25
 80061c0:	d1f9      	bne.n	80061b6 <_vfiprintf_r+0x96>
 80061c2:	ebba 0b04 	subs.w	fp, sl, r4
 80061c6:	d00b      	beq.n	80061e0 <_vfiprintf_r+0xc0>
 80061c8:	465b      	mov	r3, fp
 80061ca:	4622      	mov	r2, r4
 80061cc:	4629      	mov	r1, r5
 80061ce:	4630      	mov	r0, r6
 80061d0:	f7ff ff93 	bl	80060fa <__sfputs_r>
 80061d4:	3001      	adds	r0, #1
 80061d6:	f000 80aa 	beq.w	800632e <_vfiprintf_r+0x20e>
 80061da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80061dc:	445a      	add	r2, fp
 80061de:	9209      	str	r2, [sp, #36]	; 0x24
 80061e0:	f89a 3000 	ldrb.w	r3, [sl]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f000 80a2 	beq.w	800632e <_vfiprintf_r+0x20e>
 80061ea:	2300      	movs	r3, #0
 80061ec:	f04f 32ff 	mov.w	r2, #4294967295
 80061f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061f4:	f10a 0a01 	add.w	sl, sl, #1
 80061f8:	9304      	str	r3, [sp, #16]
 80061fa:	9307      	str	r3, [sp, #28]
 80061fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006200:	931a      	str	r3, [sp, #104]	; 0x68
 8006202:	4654      	mov	r4, sl
 8006204:	2205      	movs	r2, #5
 8006206:	f814 1b01 	ldrb.w	r1, [r4], #1
 800620a:	4858      	ldr	r0, [pc, #352]	; (800636c <_vfiprintf_r+0x24c>)
 800620c:	f7f9 ffe0 	bl	80001d0 <memchr>
 8006210:	9a04      	ldr	r2, [sp, #16]
 8006212:	b9d8      	cbnz	r0, 800624c <_vfiprintf_r+0x12c>
 8006214:	06d1      	lsls	r1, r2, #27
 8006216:	bf44      	itt	mi
 8006218:	2320      	movmi	r3, #32
 800621a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800621e:	0713      	lsls	r3, r2, #28
 8006220:	bf44      	itt	mi
 8006222:	232b      	movmi	r3, #43	; 0x2b
 8006224:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006228:	f89a 3000 	ldrb.w	r3, [sl]
 800622c:	2b2a      	cmp	r3, #42	; 0x2a
 800622e:	d015      	beq.n	800625c <_vfiprintf_r+0x13c>
 8006230:	9a07      	ldr	r2, [sp, #28]
 8006232:	4654      	mov	r4, sl
 8006234:	2000      	movs	r0, #0
 8006236:	f04f 0c0a 	mov.w	ip, #10
 800623a:	4621      	mov	r1, r4
 800623c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006240:	3b30      	subs	r3, #48	; 0x30
 8006242:	2b09      	cmp	r3, #9
 8006244:	d94e      	bls.n	80062e4 <_vfiprintf_r+0x1c4>
 8006246:	b1b0      	cbz	r0, 8006276 <_vfiprintf_r+0x156>
 8006248:	9207      	str	r2, [sp, #28]
 800624a:	e014      	b.n	8006276 <_vfiprintf_r+0x156>
 800624c:	eba0 0308 	sub.w	r3, r0, r8
 8006250:	fa09 f303 	lsl.w	r3, r9, r3
 8006254:	4313      	orrs	r3, r2
 8006256:	9304      	str	r3, [sp, #16]
 8006258:	46a2      	mov	sl, r4
 800625a:	e7d2      	b.n	8006202 <_vfiprintf_r+0xe2>
 800625c:	9b03      	ldr	r3, [sp, #12]
 800625e:	1d19      	adds	r1, r3, #4
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	9103      	str	r1, [sp, #12]
 8006264:	2b00      	cmp	r3, #0
 8006266:	bfbb      	ittet	lt
 8006268:	425b      	neglt	r3, r3
 800626a:	f042 0202 	orrlt.w	r2, r2, #2
 800626e:	9307      	strge	r3, [sp, #28]
 8006270:	9307      	strlt	r3, [sp, #28]
 8006272:	bfb8      	it	lt
 8006274:	9204      	strlt	r2, [sp, #16]
 8006276:	7823      	ldrb	r3, [r4, #0]
 8006278:	2b2e      	cmp	r3, #46	; 0x2e
 800627a:	d10c      	bne.n	8006296 <_vfiprintf_r+0x176>
 800627c:	7863      	ldrb	r3, [r4, #1]
 800627e:	2b2a      	cmp	r3, #42	; 0x2a
 8006280:	d135      	bne.n	80062ee <_vfiprintf_r+0x1ce>
 8006282:	9b03      	ldr	r3, [sp, #12]
 8006284:	1d1a      	adds	r2, r3, #4
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	9203      	str	r2, [sp, #12]
 800628a:	2b00      	cmp	r3, #0
 800628c:	bfb8      	it	lt
 800628e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006292:	3402      	adds	r4, #2
 8006294:	9305      	str	r3, [sp, #20]
 8006296:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800637c <_vfiprintf_r+0x25c>
 800629a:	7821      	ldrb	r1, [r4, #0]
 800629c:	2203      	movs	r2, #3
 800629e:	4650      	mov	r0, sl
 80062a0:	f7f9 ff96 	bl	80001d0 <memchr>
 80062a4:	b140      	cbz	r0, 80062b8 <_vfiprintf_r+0x198>
 80062a6:	2340      	movs	r3, #64	; 0x40
 80062a8:	eba0 000a 	sub.w	r0, r0, sl
 80062ac:	fa03 f000 	lsl.w	r0, r3, r0
 80062b0:	9b04      	ldr	r3, [sp, #16]
 80062b2:	4303      	orrs	r3, r0
 80062b4:	3401      	adds	r4, #1
 80062b6:	9304      	str	r3, [sp, #16]
 80062b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062bc:	482c      	ldr	r0, [pc, #176]	; (8006370 <_vfiprintf_r+0x250>)
 80062be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80062c2:	2206      	movs	r2, #6
 80062c4:	f7f9 ff84 	bl	80001d0 <memchr>
 80062c8:	2800      	cmp	r0, #0
 80062ca:	d03f      	beq.n	800634c <_vfiprintf_r+0x22c>
 80062cc:	4b29      	ldr	r3, [pc, #164]	; (8006374 <_vfiprintf_r+0x254>)
 80062ce:	bb1b      	cbnz	r3, 8006318 <_vfiprintf_r+0x1f8>
 80062d0:	9b03      	ldr	r3, [sp, #12]
 80062d2:	3307      	adds	r3, #7
 80062d4:	f023 0307 	bic.w	r3, r3, #7
 80062d8:	3308      	adds	r3, #8
 80062da:	9303      	str	r3, [sp, #12]
 80062dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062de:	443b      	add	r3, r7
 80062e0:	9309      	str	r3, [sp, #36]	; 0x24
 80062e2:	e767      	b.n	80061b4 <_vfiprintf_r+0x94>
 80062e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80062e8:	460c      	mov	r4, r1
 80062ea:	2001      	movs	r0, #1
 80062ec:	e7a5      	b.n	800623a <_vfiprintf_r+0x11a>
 80062ee:	2300      	movs	r3, #0
 80062f0:	3401      	adds	r4, #1
 80062f2:	9305      	str	r3, [sp, #20]
 80062f4:	4619      	mov	r1, r3
 80062f6:	f04f 0c0a 	mov.w	ip, #10
 80062fa:	4620      	mov	r0, r4
 80062fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006300:	3a30      	subs	r2, #48	; 0x30
 8006302:	2a09      	cmp	r2, #9
 8006304:	d903      	bls.n	800630e <_vfiprintf_r+0x1ee>
 8006306:	2b00      	cmp	r3, #0
 8006308:	d0c5      	beq.n	8006296 <_vfiprintf_r+0x176>
 800630a:	9105      	str	r1, [sp, #20]
 800630c:	e7c3      	b.n	8006296 <_vfiprintf_r+0x176>
 800630e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006312:	4604      	mov	r4, r0
 8006314:	2301      	movs	r3, #1
 8006316:	e7f0      	b.n	80062fa <_vfiprintf_r+0x1da>
 8006318:	ab03      	add	r3, sp, #12
 800631a:	9300      	str	r3, [sp, #0]
 800631c:	462a      	mov	r2, r5
 800631e:	4b16      	ldr	r3, [pc, #88]	; (8006378 <_vfiprintf_r+0x258>)
 8006320:	a904      	add	r1, sp, #16
 8006322:	4630      	mov	r0, r6
 8006324:	f3af 8000 	nop.w
 8006328:	4607      	mov	r7, r0
 800632a:	1c78      	adds	r0, r7, #1
 800632c:	d1d6      	bne.n	80062dc <_vfiprintf_r+0x1bc>
 800632e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006330:	07d9      	lsls	r1, r3, #31
 8006332:	d405      	bmi.n	8006340 <_vfiprintf_r+0x220>
 8006334:	89ab      	ldrh	r3, [r5, #12]
 8006336:	059a      	lsls	r2, r3, #22
 8006338:	d402      	bmi.n	8006340 <_vfiprintf_r+0x220>
 800633a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800633c:	f000 fc45 	bl	8006bca <__retarget_lock_release_recursive>
 8006340:	89ab      	ldrh	r3, [r5, #12]
 8006342:	065b      	lsls	r3, r3, #25
 8006344:	f53f af12 	bmi.w	800616c <_vfiprintf_r+0x4c>
 8006348:	9809      	ldr	r0, [sp, #36]	; 0x24
 800634a:	e711      	b.n	8006170 <_vfiprintf_r+0x50>
 800634c:	ab03      	add	r3, sp, #12
 800634e:	9300      	str	r3, [sp, #0]
 8006350:	462a      	mov	r2, r5
 8006352:	4b09      	ldr	r3, [pc, #36]	; (8006378 <_vfiprintf_r+0x258>)
 8006354:	a904      	add	r1, sp, #16
 8006356:	4630      	mov	r0, r6
 8006358:	f000 f880 	bl	800645c <_printf_i>
 800635c:	e7e4      	b.n	8006328 <_vfiprintf_r+0x208>
 800635e:	bf00      	nop
 8006360:	08008078 	.word	0x08008078
 8006364:	08008098 	.word	0x08008098
 8006368:	08008058 	.word	0x08008058
 800636c:	08008022 	.word	0x08008022
 8006370:	0800802c 	.word	0x0800802c
 8006374:	00000000 	.word	0x00000000
 8006378:	080060fb 	.word	0x080060fb
 800637c:	08008028 	.word	0x08008028

08006380 <_printf_common>:
 8006380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006384:	4616      	mov	r6, r2
 8006386:	4699      	mov	r9, r3
 8006388:	688a      	ldr	r2, [r1, #8]
 800638a:	690b      	ldr	r3, [r1, #16]
 800638c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006390:	4293      	cmp	r3, r2
 8006392:	bfb8      	it	lt
 8006394:	4613      	movlt	r3, r2
 8006396:	6033      	str	r3, [r6, #0]
 8006398:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800639c:	4607      	mov	r7, r0
 800639e:	460c      	mov	r4, r1
 80063a0:	b10a      	cbz	r2, 80063a6 <_printf_common+0x26>
 80063a2:	3301      	adds	r3, #1
 80063a4:	6033      	str	r3, [r6, #0]
 80063a6:	6823      	ldr	r3, [r4, #0]
 80063a8:	0699      	lsls	r1, r3, #26
 80063aa:	bf42      	ittt	mi
 80063ac:	6833      	ldrmi	r3, [r6, #0]
 80063ae:	3302      	addmi	r3, #2
 80063b0:	6033      	strmi	r3, [r6, #0]
 80063b2:	6825      	ldr	r5, [r4, #0]
 80063b4:	f015 0506 	ands.w	r5, r5, #6
 80063b8:	d106      	bne.n	80063c8 <_printf_common+0x48>
 80063ba:	f104 0a19 	add.w	sl, r4, #25
 80063be:	68e3      	ldr	r3, [r4, #12]
 80063c0:	6832      	ldr	r2, [r6, #0]
 80063c2:	1a9b      	subs	r3, r3, r2
 80063c4:	42ab      	cmp	r3, r5
 80063c6:	dc26      	bgt.n	8006416 <_printf_common+0x96>
 80063c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80063cc:	1e13      	subs	r3, r2, #0
 80063ce:	6822      	ldr	r2, [r4, #0]
 80063d0:	bf18      	it	ne
 80063d2:	2301      	movne	r3, #1
 80063d4:	0692      	lsls	r2, r2, #26
 80063d6:	d42b      	bmi.n	8006430 <_printf_common+0xb0>
 80063d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063dc:	4649      	mov	r1, r9
 80063de:	4638      	mov	r0, r7
 80063e0:	47c0      	blx	r8
 80063e2:	3001      	adds	r0, #1
 80063e4:	d01e      	beq.n	8006424 <_printf_common+0xa4>
 80063e6:	6823      	ldr	r3, [r4, #0]
 80063e8:	68e5      	ldr	r5, [r4, #12]
 80063ea:	6832      	ldr	r2, [r6, #0]
 80063ec:	f003 0306 	and.w	r3, r3, #6
 80063f0:	2b04      	cmp	r3, #4
 80063f2:	bf08      	it	eq
 80063f4:	1aad      	subeq	r5, r5, r2
 80063f6:	68a3      	ldr	r3, [r4, #8]
 80063f8:	6922      	ldr	r2, [r4, #16]
 80063fa:	bf0c      	ite	eq
 80063fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006400:	2500      	movne	r5, #0
 8006402:	4293      	cmp	r3, r2
 8006404:	bfc4      	itt	gt
 8006406:	1a9b      	subgt	r3, r3, r2
 8006408:	18ed      	addgt	r5, r5, r3
 800640a:	2600      	movs	r6, #0
 800640c:	341a      	adds	r4, #26
 800640e:	42b5      	cmp	r5, r6
 8006410:	d11a      	bne.n	8006448 <_printf_common+0xc8>
 8006412:	2000      	movs	r0, #0
 8006414:	e008      	b.n	8006428 <_printf_common+0xa8>
 8006416:	2301      	movs	r3, #1
 8006418:	4652      	mov	r2, sl
 800641a:	4649      	mov	r1, r9
 800641c:	4638      	mov	r0, r7
 800641e:	47c0      	blx	r8
 8006420:	3001      	adds	r0, #1
 8006422:	d103      	bne.n	800642c <_printf_common+0xac>
 8006424:	f04f 30ff 	mov.w	r0, #4294967295
 8006428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800642c:	3501      	adds	r5, #1
 800642e:	e7c6      	b.n	80063be <_printf_common+0x3e>
 8006430:	18e1      	adds	r1, r4, r3
 8006432:	1c5a      	adds	r2, r3, #1
 8006434:	2030      	movs	r0, #48	; 0x30
 8006436:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800643a:	4422      	add	r2, r4
 800643c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006440:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006444:	3302      	adds	r3, #2
 8006446:	e7c7      	b.n	80063d8 <_printf_common+0x58>
 8006448:	2301      	movs	r3, #1
 800644a:	4622      	mov	r2, r4
 800644c:	4649      	mov	r1, r9
 800644e:	4638      	mov	r0, r7
 8006450:	47c0      	blx	r8
 8006452:	3001      	adds	r0, #1
 8006454:	d0e6      	beq.n	8006424 <_printf_common+0xa4>
 8006456:	3601      	adds	r6, #1
 8006458:	e7d9      	b.n	800640e <_printf_common+0x8e>
	...

0800645c <_printf_i>:
 800645c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006460:	7e0f      	ldrb	r7, [r1, #24]
 8006462:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006464:	2f78      	cmp	r7, #120	; 0x78
 8006466:	4691      	mov	r9, r2
 8006468:	4680      	mov	r8, r0
 800646a:	460c      	mov	r4, r1
 800646c:	469a      	mov	sl, r3
 800646e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006472:	d807      	bhi.n	8006484 <_printf_i+0x28>
 8006474:	2f62      	cmp	r7, #98	; 0x62
 8006476:	d80a      	bhi.n	800648e <_printf_i+0x32>
 8006478:	2f00      	cmp	r7, #0
 800647a:	f000 80d8 	beq.w	800662e <_printf_i+0x1d2>
 800647e:	2f58      	cmp	r7, #88	; 0x58
 8006480:	f000 80a3 	beq.w	80065ca <_printf_i+0x16e>
 8006484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006488:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800648c:	e03a      	b.n	8006504 <_printf_i+0xa8>
 800648e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006492:	2b15      	cmp	r3, #21
 8006494:	d8f6      	bhi.n	8006484 <_printf_i+0x28>
 8006496:	a101      	add	r1, pc, #4	; (adr r1, 800649c <_printf_i+0x40>)
 8006498:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800649c:	080064f5 	.word	0x080064f5
 80064a0:	08006509 	.word	0x08006509
 80064a4:	08006485 	.word	0x08006485
 80064a8:	08006485 	.word	0x08006485
 80064ac:	08006485 	.word	0x08006485
 80064b0:	08006485 	.word	0x08006485
 80064b4:	08006509 	.word	0x08006509
 80064b8:	08006485 	.word	0x08006485
 80064bc:	08006485 	.word	0x08006485
 80064c0:	08006485 	.word	0x08006485
 80064c4:	08006485 	.word	0x08006485
 80064c8:	08006615 	.word	0x08006615
 80064cc:	08006539 	.word	0x08006539
 80064d0:	080065f7 	.word	0x080065f7
 80064d4:	08006485 	.word	0x08006485
 80064d8:	08006485 	.word	0x08006485
 80064dc:	08006637 	.word	0x08006637
 80064e0:	08006485 	.word	0x08006485
 80064e4:	08006539 	.word	0x08006539
 80064e8:	08006485 	.word	0x08006485
 80064ec:	08006485 	.word	0x08006485
 80064f0:	080065ff 	.word	0x080065ff
 80064f4:	682b      	ldr	r3, [r5, #0]
 80064f6:	1d1a      	adds	r2, r3, #4
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	602a      	str	r2, [r5, #0]
 80064fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006500:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006504:	2301      	movs	r3, #1
 8006506:	e0a3      	b.n	8006650 <_printf_i+0x1f4>
 8006508:	6820      	ldr	r0, [r4, #0]
 800650a:	6829      	ldr	r1, [r5, #0]
 800650c:	0606      	lsls	r6, r0, #24
 800650e:	f101 0304 	add.w	r3, r1, #4
 8006512:	d50a      	bpl.n	800652a <_printf_i+0xce>
 8006514:	680e      	ldr	r6, [r1, #0]
 8006516:	602b      	str	r3, [r5, #0]
 8006518:	2e00      	cmp	r6, #0
 800651a:	da03      	bge.n	8006524 <_printf_i+0xc8>
 800651c:	232d      	movs	r3, #45	; 0x2d
 800651e:	4276      	negs	r6, r6
 8006520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006524:	485e      	ldr	r0, [pc, #376]	; (80066a0 <_printf_i+0x244>)
 8006526:	230a      	movs	r3, #10
 8006528:	e019      	b.n	800655e <_printf_i+0x102>
 800652a:	680e      	ldr	r6, [r1, #0]
 800652c:	602b      	str	r3, [r5, #0]
 800652e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006532:	bf18      	it	ne
 8006534:	b236      	sxthne	r6, r6
 8006536:	e7ef      	b.n	8006518 <_printf_i+0xbc>
 8006538:	682b      	ldr	r3, [r5, #0]
 800653a:	6820      	ldr	r0, [r4, #0]
 800653c:	1d19      	adds	r1, r3, #4
 800653e:	6029      	str	r1, [r5, #0]
 8006540:	0601      	lsls	r1, r0, #24
 8006542:	d501      	bpl.n	8006548 <_printf_i+0xec>
 8006544:	681e      	ldr	r6, [r3, #0]
 8006546:	e002      	b.n	800654e <_printf_i+0xf2>
 8006548:	0646      	lsls	r6, r0, #25
 800654a:	d5fb      	bpl.n	8006544 <_printf_i+0xe8>
 800654c:	881e      	ldrh	r6, [r3, #0]
 800654e:	4854      	ldr	r0, [pc, #336]	; (80066a0 <_printf_i+0x244>)
 8006550:	2f6f      	cmp	r7, #111	; 0x6f
 8006552:	bf0c      	ite	eq
 8006554:	2308      	moveq	r3, #8
 8006556:	230a      	movne	r3, #10
 8006558:	2100      	movs	r1, #0
 800655a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800655e:	6865      	ldr	r5, [r4, #4]
 8006560:	60a5      	str	r5, [r4, #8]
 8006562:	2d00      	cmp	r5, #0
 8006564:	bfa2      	ittt	ge
 8006566:	6821      	ldrge	r1, [r4, #0]
 8006568:	f021 0104 	bicge.w	r1, r1, #4
 800656c:	6021      	strge	r1, [r4, #0]
 800656e:	b90e      	cbnz	r6, 8006574 <_printf_i+0x118>
 8006570:	2d00      	cmp	r5, #0
 8006572:	d04d      	beq.n	8006610 <_printf_i+0x1b4>
 8006574:	4615      	mov	r5, r2
 8006576:	fbb6 f1f3 	udiv	r1, r6, r3
 800657a:	fb03 6711 	mls	r7, r3, r1, r6
 800657e:	5dc7      	ldrb	r7, [r0, r7]
 8006580:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006584:	4637      	mov	r7, r6
 8006586:	42bb      	cmp	r3, r7
 8006588:	460e      	mov	r6, r1
 800658a:	d9f4      	bls.n	8006576 <_printf_i+0x11a>
 800658c:	2b08      	cmp	r3, #8
 800658e:	d10b      	bne.n	80065a8 <_printf_i+0x14c>
 8006590:	6823      	ldr	r3, [r4, #0]
 8006592:	07de      	lsls	r6, r3, #31
 8006594:	d508      	bpl.n	80065a8 <_printf_i+0x14c>
 8006596:	6923      	ldr	r3, [r4, #16]
 8006598:	6861      	ldr	r1, [r4, #4]
 800659a:	4299      	cmp	r1, r3
 800659c:	bfde      	ittt	le
 800659e:	2330      	movle	r3, #48	; 0x30
 80065a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80065a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80065a8:	1b52      	subs	r2, r2, r5
 80065aa:	6122      	str	r2, [r4, #16]
 80065ac:	f8cd a000 	str.w	sl, [sp]
 80065b0:	464b      	mov	r3, r9
 80065b2:	aa03      	add	r2, sp, #12
 80065b4:	4621      	mov	r1, r4
 80065b6:	4640      	mov	r0, r8
 80065b8:	f7ff fee2 	bl	8006380 <_printf_common>
 80065bc:	3001      	adds	r0, #1
 80065be:	d14c      	bne.n	800665a <_printf_i+0x1fe>
 80065c0:	f04f 30ff 	mov.w	r0, #4294967295
 80065c4:	b004      	add	sp, #16
 80065c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ca:	4835      	ldr	r0, [pc, #212]	; (80066a0 <_printf_i+0x244>)
 80065cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80065d0:	6829      	ldr	r1, [r5, #0]
 80065d2:	6823      	ldr	r3, [r4, #0]
 80065d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80065d8:	6029      	str	r1, [r5, #0]
 80065da:	061d      	lsls	r5, r3, #24
 80065dc:	d514      	bpl.n	8006608 <_printf_i+0x1ac>
 80065de:	07df      	lsls	r7, r3, #31
 80065e0:	bf44      	itt	mi
 80065e2:	f043 0320 	orrmi.w	r3, r3, #32
 80065e6:	6023      	strmi	r3, [r4, #0]
 80065e8:	b91e      	cbnz	r6, 80065f2 <_printf_i+0x196>
 80065ea:	6823      	ldr	r3, [r4, #0]
 80065ec:	f023 0320 	bic.w	r3, r3, #32
 80065f0:	6023      	str	r3, [r4, #0]
 80065f2:	2310      	movs	r3, #16
 80065f4:	e7b0      	b.n	8006558 <_printf_i+0xfc>
 80065f6:	6823      	ldr	r3, [r4, #0]
 80065f8:	f043 0320 	orr.w	r3, r3, #32
 80065fc:	6023      	str	r3, [r4, #0]
 80065fe:	2378      	movs	r3, #120	; 0x78
 8006600:	4828      	ldr	r0, [pc, #160]	; (80066a4 <_printf_i+0x248>)
 8006602:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006606:	e7e3      	b.n	80065d0 <_printf_i+0x174>
 8006608:	0659      	lsls	r1, r3, #25
 800660a:	bf48      	it	mi
 800660c:	b2b6      	uxthmi	r6, r6
 800660e:	e7e6      	b.n	80065de <_printf_i+0x182>
 8006610:	4615      	mov	r5, r2
 8006612:	e7bb      	b.n	800658c <_printf_i+0x130>
 8006614:	682b      	ldr	r3, [r5, #0]
 8006616:	6826      	ldr	r6, [r4, #0]
 8006618:	6961      	ldr	r1, [r4, #20]
 800661a:	1d18      	adds	r0, r3, #4
 800661c:	6028      	str	r0, [r5, #0]
 800661e:	0635      	lsls	r5, r6, #24
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	d501      	bpl.n	8006628 <_printf_i+0x1cc>
 8006624:	6019      	str	r1, [r3, #0]
 8006626:	e002      	b.n	800662e <_printf_i+0x1d2>
 8006628:	0670      	lsls	r0, r6, #25
 800662a:	d5fb      	bpl.n	8006624 <_printf_i+0x1c8>
 800662c:	8019      	strh	r1, [r3, #0]
 800662e:	2300      	movs	r3, #0
 8006630:	6123      	str	r3, [r4, #16]
 8006632:	4615      	mov	r5, r2
 8006634:	e7ba      	b.n	80065ac <_printf_i+0x150>
 8006636:	682b      	ldr	r3, [r5, #0]
 8006638:	1d1a      	adds	r2, r3, #4
 800663a:	602a      	str	r2, [r5, #0]
 800663c:	681d      	ldr	r5, [r3, #0]
 800663e:	6862      	ldr	r2, [r4, #4]
 8006640:	2100      	movs	r1, #0
 8006642:	4628      	mov	r0, r5
 8006644:	f7f9 fdc4 	bl	80001d0 <memchr>
 8006648:	b108      	cbz	r0, 800664e <_printf_i+0x1f2>
 800664a:	1b40      	subs	r0, r0, r5
 800664c:	6060      	str	r0, [r4, #4]
 800664e:	6863      	ldr	r3, [r4, #4]
 8006650:	6123      	str	r3, [r4, #16]
 8006652:	2300      	movs	r3, #0
 8006654:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006658:	e7a8      	b.n	80065ac <_printf_i+0x150>
 800665a:	6923      	ldr	r3, [r4, #16]
 800665c:	462a      	mov	r2, r5
 800665e:	4649      	mov	r1, r9
 8006660:	4640      	mov	r0, r8
 8006662:	47d0      	blx	sl
 8006664:	3001      	adds	r0, #1
 8006666:	d0ab      	beq.n	80065c0 <_printf_i+0x164>
 8006668:	6823      	ldr	r3, [r4, #0]
 800666a:	079b      	lsls	r3, r3, #30
 800666c:	d413      	bmi.n	8006696 <_printf_i+0x23a>
 800666e:	68e0      	ldr	r0, [r4, #12]
 8006670:	9b03      	ldr	r3, [sp, #12]
 8006672:	4298      	cmp	r0, r3
 8006674:	bfb8      	it	lt
 8006676:	4618      	movlt	r0, r3
 8006678:	e7a4      	b.n	80065c4 <_printf_i+0x168>
 800667a:	2301      	movs	r3, #1
 800667c:	4632      	mov	r2, r6
 800667e:	4649      	mov	r1, r9
 8006680:	4640      	mov	r0, r8
 8006682:	47d0      	blx	sl
 8006684:	3001      	adds	r0, #1
 8006686:	d09b      	beq.n	80065c0 <_printf_i+0x164>
 8006688:	3501      	adds	r5, #1
 800668a:	68e3      	ldr	r3, [r4, #12]
 800668c:	9903      	ldr	r1, [sp, #12]
 800668e:	1a5b      	subs	r3, r3, r1
 8006690:	42ab      	cmp	r3, r5
 8006692:	dcf2      	bgt.n	800667a <_printf_i+0x21e>
 8006694:	e7eb      	b.n	800666e <_printf_i+0x212>
 8006696:	2500      	movs	r5, #0
 8006698:	f104 0619 	add.w	r6, r4, #25
 800669c:	e7f5      	b.n	800668a <_printf_i+0x22e>
 800669e:	bf00      	nop
 80066a0:	08008033 	.word	0x08008033
 80066a4:	08008044 	.word	0x08008044

080066a8 <_sbrk_r>:
 80066a8:	b538      	push	{r3, r4, r5, lr}
 80066aa:	4d06      	ldr	r5, [pc, #24]	; (80066c4 <_sbrk_r+0x1c>)
 80066ac:	2300      	movs	r3, #0
 80066ae:	4604      	mov	r4, r0
 80066b0:	4608      	mov	r0, r1
 80066b2:	602b      	str	r3, [r5, #0]
 80066b4:	f7fb faca 	bl	8001c4c <_sbrk>
 80066b8:	1c43      	adds	r3, r0, #1
 80066ba:	d102      	bne.n	80066c2 <_sbrk_r+0x1a>
 80066bc:	682b      	ldr	r3, [r5, #0]
 80066be:	b103      	cbz	r3, 80066c2 <_sbrk_r+0x1a>
 80066c0:	6023      	str	r3, [r4, #0]
 80066c2:	bd38      	pop	{r3, r4, r5, pc}
 80066c4:	200008dc 	.word	0x200008dc

080066c8 <__swbuf_r>:
 80066c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ca:	460e      	mov	r6, r1
 80066cc:	4614      	mov	r4, r2
 80066ce:	4605      	mov	r5, r0
 80066d0:	b118      	cbz	r0, 80066da <__swbuf_r+0x12>
 80066d2:	6983      	ldr	r3, [r0, #24]
 80066d4:	b90b      	cbnz	r3, 80066da <__swbuf_r+0x12>
 80066d6:	f000 f9d9 	bl	8006a8c <__sinit>
 80066da:	4b21      	ldr	r3, [pc, #132]	; (8006760 <__swbuf_r+0x98>)
 80066dc:	429c      	cmp	r4, r3
 80066de:	d12b      	bne.n	8006738 <__swbuf_r+0x70>
 80066e0:	686c      	ldr	r4, [r5, #4]
 80066e2:	69a3      	ldr	r3, [r4, #24]
 80066e4:	60a3      	str	r3, [r4, #8]
 80066e6:	89a3      	ldrh	r3, [r4, #12]
 80066e8:	071a      	lsls	r2, r3, #28
 80066ea:	d52f      	bpl.n	800674c <__swbuf_r+0x84>
 80066ec:	6923      	ldr	r3, [r4, #16]
 80066ee:	b36b      	cbz	r3, 800674c <__swbuf_r+0x84>
 80066f0:	6923      	ldr	r3, [r4, #16]
 80066f2:	6820      	ldr	r0, [r4, #0]
 80066f4:	1ac0      	subs	r0, r0, r3
 80066f6:	6963      	ldr	r3, [r4, #20]
 80066f8:	b2f6      	uxtb	r6, r6
 80066fa:	4283      	cmp	r3, r0
 80066fc:	4637      	mov	r7, r6
 80066fe:	dc04      	bgt.n	800670a <__swbuf_r+0x42>
 8006700:	4621      	mov	r1, r4
 8006702:	4628      	mov	r0, r5
 8006704:	f000 f92e 	bl	8006964 <_fflush_r>
 8006708:	bb30      	cbnz	r0, 8006758 <__swbuf_r+0x90>
 800670a:	68a3      	ldr	r3, [r4, #8]
 800670c:	3b01      	subs	r3, #1
 800670e:	60a3      	str	r3, [r4, #8]
 8006710:	6823      	ldr	r3, [r4, #0]
 8006712:	1c5a      	adds	r2, r3, #1
 8006714:	6022      	str	r2, [r4, #0]
 8006716:	701e      	strb	r6, [r3, #0]
 8006718:	6963      	ldr	r3, [r4, #20]
 800671a:	3001      	adds	r0, #1
 800671c:	4283      	cmp	r3, r0
 800671e:	d004      	beq.n	800672a <__swbuf_r+0x62>
 8006720:	89a3      	ldrh	r3, [r4, #12]
 8006722:	07db      	lsls	r3, r3, #31
 8006724:	d506      	bpl.n	8006734 <__swbuf_r+0x6c>
 8006726:	2e0a      	cmp	r6, #10
 8006728:	d104      	bne.n	8006734 <__swbuf_r+0x6c>
 800672a:	4621      	mov	r1, r4
 800672c:	4628      	mov	r0, r5
 800672e:	f000 f919 	bl	8006964 <_fflush_r>
 8006732:	b988      	cbnz	r0, 8006758 <__swbuf_r+0x90>
 8006734:	4638      	mov	r0, r7
 8006736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006738:	4b0a      	ldr	r3, [pc, #40]	; (8006764 <__swbuf_r+0x9c>)
 800673a:	429c      	cmp	r4, r3
 800673c:	d101      	bne.n	8006742 <__swbuf_r+0x7a>
 800673e:	68ac      	ldr	r4, [r5, #8]
 8006740:	e7cf      	b.n	80066e2 <__swbuf_r+0x1a>
 8006742:	4b09      	ldr	r3, [pc, #36]	; (8006768 <__swbuf_r+0xa0>)
 8006744:	429c      	cmp	r4, r3
 8006746:	bf08      	it	eq
 8006748:	68ec      	ldreq	r4, [r5, #12]
 800674a:	e7ca      	b.n	80066e2 <__swbuf_r+0x1a>
 800674c:	4621      	mov	r1, r4
 800674e:	4628      	mov	r0, r5
 8006750:	f000 f80c 	bl	800676c <__swsetup_r>
 8006754:	2800      	cmp	r0, #0
 8006756:	d0cb      	beq.n	80066f0 <__swbuf_r+0x28>
 8006758:	f04f 37ff 	mov.w	r7, #4294967295
 800675c:	e7ea      	b.n	8006734 <__swbuf_r+0x6c>
 800675e:	bf00      	nop
 8006760:	08008078 	.word	0x08008078
 8006764:	08008098 	.word	0x08008098
 8006768:	08008058 	.word	0x08008058

0800676c <__swsetup_r>:
 800676c:	4b32      	ldr	r3, [pc, #200]	; (8006838 <__swsetup_r+0xcc>)
 800676e:	b570      	push	{r4, r5, r6, lr}
 8006770:	681d      	ldr	r5, [r3, #0]
 8006772:	4606      	mov	r6, r0
 8006774:	460c      	mov	r4, r1
 8006776:	b125      	cbz	r5, 8006782 <__swsetup_r+0x16>
 8006778:	69ab      	ldr	r3, [r5, #24]
 800677a:	b913      	cbnz	r3, 8006782 <__swsetup_r+0x16>
 800677c:	4628      	mov	r0, r5
 800677e:	f000 f985 	bl	8006a8c <__sinit>
 8006782:	4b2e      	ldr	r3, [pc, #184]	; (800683c <__swsetup_r+0xd0>)
 8006784:	429c      	cmp	r4, r3
 8006786:	d10f      	bne.n	80067a8 <__swsetup_r+0x3c>
 8006788:	686c      	ldr	r4, [r5, #4]
 800678a:	89a3      	ldrh	r3, [r4, #12]
 800678c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006790:	0719      	lsls	r1, r3, #28
 8006792:	d42c      	bmi.n	80067ee <__swsetup_r+0x82>
 8006794:	06dd      	lsls	r5, r3, #27
 8006796:	d411      	bmi.n	80067bc <__swsetup_r+0x50>
 8006798:	2309      	movs	r3, #9
 800679a:	6033      	str	r3, [r6, #0]
 800679c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80067a0:	81a3      	strh	r3, [r4, #12]
 80067a2:	f04f 30ff 	mov.w	r0, #4294967295
 80067a6:	e03e      	b.n	8006826 <__swsetup_r+0xba>
 80067a8:	4b25      	ldr	r3, [pc, #148]	; (8006840 <__swsetup_r+0xd4>)
 80067aa:	429c      	cmp	r4, r3
 80067ac:	d101      	bne.n	80067b2 <__swsetup_r+0x46>
 80067ae:	68ac      	ldr	r4, [r5, #8]
 80067b0:	e7eb      	b.n	800678a <__swsetup_r+0x1e>
 80067b2:	4b24      	ldr	r3, [pc, #144]	; (8006844 <__swsetup_r+0xd8>)
 80067b4:	429c      	cmp	r4, r3
 80067b6:	bf08      	it	eq
 80067b8:	68ec      	ldreq	r4, [r5, #12]
 80067ba:	e7e6      	b.n	800678a <__swsetup_r+0x1e>
 80067bc:	0758      	lsls	r0, r3, #29
 80067be:	d512      	bpl.n	80067e6 <__swsetup_r+0x7a>
 80067c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067c2:	b141      	cbz	r1, 80067d6 <__swsetup_r+0x6a>
 80067c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067c8:	4299      	cmp	r1, r3
 80067ca:	d002      	beq.n	80067d2 <__swsetup_r+0x66>
 80067cc:	4630      	mov	r0, r6
 80067ce:	f7ff fb9d 	bl	8005f0c <_free_r>
 80067d2:	2300      	movs	r3, #0
 80067d4:	6363      	str	r3, [r4, #52]	; 0x34
 80067d6:	89a3      	ldrh	r3, [r4, #12]
 80067d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80067dc:	81a3      	strh	r3, [r4, #12]
 80067de:	2300      	movs	r3, #0
 80067e0:	6063      	str	r3, [r4, #4]
 80067e2:	6923      	ldr	r3, [r4, #16]
 80067e4:	6023      	str	r3, [r4, #0]
 80067e6:	89a3      	ldrh	r3, [r4, #12]
 80067e8:	f043 0308 	orr.w	r3, r3, #8
 80067ec:	81a3      	strh	r3, [r4, #12]
 80067ee:	6923      	ldr	r3, [r4, #16]
 80067f0:	b94b      	cbnz	r3, 8006806 <__swsetup_r+0x9a>
 80067f2:	89a3      	ldrh	r3, [r4, #12]
 80067f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80067f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067fc:	d003      	beq.n	8006806 <__swsetup_r+0x9a>
 80067fe:	4621      	mov	r1, r4
 8006800:	4630      	mov	r0, r6
 8006802:	f000 fa09 	bl	8006c18 <__smakebuf_r>
 8006806:	89a0      	ldrh	r0, [r4, #12]
 8006808:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800680c:	f010 0301 	ands.w	r3, r0, #1
 8006810:	d00a      	beq.n	8006828 <__swsetup_r+0xbc>
 8006812:	2300      	movs	r3, #0
 8006814:	60a3      	str	r3, [r4, #8]
 8006816:	6963      	ldr	r3, [r4, #20]
 8006818:	425b      	negs	r3, r3
 800681a:	61a3      	str	r3, [r4, #24]
 800681c:	6923      	ldr	r3, [r4, #16]
 800681e:	b943      	cbnz	r3, 8006832 <__swsetup_r+0xc6>
 8006820:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006824:	d1ba      	bne.n	800679c <__swsetup_r+0x30>
 8006826:	bd70      	pop	{r4, r5, r6, pc}
 8006828:	0781      	lsls	r1, r0, #30
 800682a:	bf58      	it	pl
 800682c:	6963      	ldrpl	r3, [r4, #20]
 800682e:	60a3      	str	r3, [r4, #8]
 8006830:	e7f4      	b.n	800681c <__swsetup_r+0xb0>
 8006832:	2000      	movs	r0, #0
 8006834:	e7f7      	b.n	8006826 <__swsetup_r+0xba>
 8006836:	bf00      	nop
 8006838:	20000014 	.word	0x20000014
 800683c:	08008078 	.word	0x08008078
 8006840:	08008098 	.word	0x08008098
 8006844:	08008058 	.word	0x08008058

08006848 <abort>:
 8006848:	b508      	push	{r3, lr}
 800684a:	2006      	movs	r0, #6
 800684c:	f000 fa58 	bl	8006d00 <raise>
 8006850:	2001      	movs	r0, #1
 8006852:	f7fb f983 	bl	8001b5c <_exit>
	...

08006858 <__sflush_r>:
 8006858:	898a      	ldrh	r2, [r1, #12]
 800685a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800685e:	4605      	mov	r5, r0
 8006860:	0710      	lsls	r0, r2, #28
 8006862:	460c      	mov	r4, r1
 8006864:	d458      	bmi.n	8006918 <__sflush_r+0xc0>
 8006866:	684b      	ldr	r3, [r1, #4]
 8006868:	2b00      	cmp	r3, #0
 800686a:	dc05      	bgt.n	8006878 <__sflush_r+0x20>
 800686c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800686e:	2b00      	cmp	r3, #0
 8006870:	dc02      	bgt.n	8006878 <__sflush_r+0x20>
 8006872:	2000      	movs	r0, #0
 8006874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006878:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800687a:	2e00      	cmp	r6, #0
 800687c:	d0f9      	beq.n	8006872 <__sflush_r+0x1a>
 800687e:	2300      	movs	r3, #0
 8006880:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006884:	682f      	ldr	r7, [r5, #0]
 8006886:	602b      	str	r3, [r5, #0]
 8006888:	d032      	beq.n	80068f0 <__sflush_r+0x98>
 800688a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800688c:	89a3      	ldrh	r3, [r4, #12]
 800688e:	075a      	lsls	r2, r3, #29
 8006890:	d505      	bpl.n	800689e <__sflush_r+0x46>
 8006892:	6863      	ldr	r3, [r4, #4]
 8006894:	1ac0      	subs	r0, r0, r3
 8006896:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006898:	b10b      	cbz	r3, 800689e <__sflush_r+0x46>
 800689a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800689c:	1ac0      	subs	r0, r0, r3
 800689e:	2300      	movs	r3, #0
 80068a0:	4602      	mov	r2, r0
 80068a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068a4:	6a21      	ldr	r1, [r4, #32]
 80068a6:	4628      	mov	r0, r5
 80068a8:	47b0      	blx	r6
 80068aa:	1c43      	adds	r3, r0, #1
 80068ac:	89a3      	ldrh	r3, [r4, #12]
 80068ae:	d106      	bne.n	80068be <__sflush_r+0x66>
 80068b0:	6829      	ldr	r1, [r5, #0]
 80068b2:	291d      	cmp	r1, #29
 80068b4:	d82c      	bhi.n	8006910 <__sflush_r+0xb8>
 80068b6:	4a2a      	ldr	r2, [pc, #168]	; (8006960 <__sflush_r+0x108>)
 80068b8:	40ca      	lsrs	r2, r1
 80068ba:	07d6      	lsls	r6, r2, #31
 80068bc:	d528      	bpl.n	8006910 <__sflush_r+0xb8>
 80068be:	2200      	movs	r2, #0
 80068c0:	6062      	str	r2, [r4, #4]
 80068c2:	04d9      	lsls	r1, r3, #19
 80068c4:	6922      	ldr	r2, [r4, #16]
 80068c6:	6022      	str	r2, [r4, #0]
 80068c8:	d504      	bpl.n	80068d4 <__sflush_r+0x7c>
 80068ca:	1c42      	adds	r2, r0, #1
 80068cc:	d101      	bne.n	80068d2 <__sflush_r+0x7a>
 80068ce:	682b      	ldr	r3, [r5, #0]
 80068d0:	b903      	cbnz	r3, 80068d4 <__sflush_r+0x7c>
 80068d2:	6560      	str	r0, [r4, #84]	; 0x54
 80068d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068d6:	602f      	str	r7, [r5, #0]
 80068d8:	2900      	cmp	r1, #0
 80068da:	d0ca      	beq.n	8006872 <__sflush_r+0x1a>
 80068dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068e0:	4299      	cmp	r1, r3
 80068e2:	d002      	beq.n	80068ea <__sflush_r+0x92>
 80068e4:	4628      	mov	r0, r5
 80068e6:	f7ff fb11 	bl	8005f0c <_free_r>
 80068ea:	2000      	movs	r0, #0
 80068ec:	6360      	str	r0, [r4, #52]	; 0x34
 80068ee:	e7c1      	b.n	8006874 <__sflush_r+0x1c>
 80068f0:	6a21      	ldr	r1, [r4, #32]
 80068f2:	2301      	movs	r3, #1
 80068f4:	4628      	mov	r0, r5
 80068f6:	47b0      	blx	r6
 80068f8:	1c41      	adds	r1, r0, #1
 80068fa:	d1c7      	bne.n	800688c <__sflush_r+0x34>
 80068fc:	682b      	ldr	r3, [r5, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d0c4      	beq.n	800688c <__sflush_r+0x34>
 8006902:	2b1d      	cmp	r3, #29
 8006904:	d001      	beq.n	800690a <__sflush_r+0xb2>
 8006906:	2b16      	cmp	r3, #22
 8006908:	d101      	bne.n	800690e <__sflush_r+0xb6>
 800690a:	602f      	str	r7, [r5, #0]
 800690c:	e7b1      	b.n	8006872 <__sflush_r+0x1a>
 800690e:	89a3      	ldrh	r3, [r4, #12]
 8006910:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006914:	81a3      	strh	r3, [r4, #12]
 8006916:	e7ad      	b.n	8006874 <__sflush_r+0x1c>
 8006918:	690f      	ldr	r7, [r1, #16]
 800691a:	2f00      	cmp	r7, #0
 800691c:	d0a9      	beq.n	8006872 <__sflush_r+0x1a>
 800691e:	0793      	lsls	r3, r2, #30
 8006920:	680e      	ldr	r6, [r1, #0]
 8006922:	bf08      	it	eq
 8006924:	694b      	ldreq	r3, [r1, #20]
 8006926:	600f      	str	r7, [r1, #0]
 8006928:	bf18      	it	ne
 800692a:	2300      	movne	r3, #0
 800692c:	eba6 0807 	sub.w	r8, r6, r7
 8006930:	608b      	str	r3, [r1, #8]
 8006932:	f1b8 0f00 	cmp.w	r8, #0
 8006936:	dd9c      	ble.n	8006872 <__sflush_r+0x1a>
 8006938:	6a21      	ldr	r1, [r4, #32]
 800693a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800693c:	4643      	mov	r3, r8
 800693e:	463a      	mov	r2, r7
 8006940:	4628      	mov	r0, r5
 8006942:	47b0      	blx	r6
 8006944:	2800      	cmp	r0, #0
 8006946:	dc06      	bgt.n	8006956 <__sflush_r+0xfe>
 8006948:	89a3      	ldrh	r3, [r4, #12]
 800694a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800694e:	81a3      	strh	r3, [r4, #12]
 8006950:	f04f 30ff 	mov.w	r0, #4294967295
 8006954:	e78e      	b.n	8006874 <__sflush_r+0x1c>
 8006956:	4407      	add	r7, r0
 8006958:	eba8 0800 	sub.w	r8, r8, r0
 800695c:	e7e9      	b.n	8006932 <__sflush_r+0xda>
 800695e:	bf00      	nop
 8006960:	20400001 	.word	0x20400001

08006964 <_fflush_r>:
 8006964:	b538      	push	{r3, r4, r5, lr}
 8006966:	690b      	ldr	r3, [r1, #16]
 8006968:	4605      	mov	r5, r0
 800696a:	460c      	mov	r4, r1
 800696c:	b913      	cbnz	r3, 8006974 <_fflush_r+0x10>
 800696e:	2500      	movs	r5, #0
 8006970:	4628      	mov	r0, r5
 8006972:	bd38      	pop	{r3, r4, r5, pc}
 8006974:	b118      	cbz	r0, 800697e <_fflush_r+0x1a>
 8006976:	6983      	ldr	r3, [r0, #24]
 8006978:	b90b      	cbnz	r3, 800697e <_fflush_r+0x1a>
 800697a:	f000 f887 	bl	8006a8c <__sinit>
 800697e:	4b14      	ldr	r3, [pc, #80]	; (80069d0 <_fflush_r+0x6c>)
 8006980:	429c      	cmp	r4, r3
 8006982:	d11b      	bne.n	80069bc <_fflush_r+0x58>
 8006984:	686c      	ldr	r4, [r5, #4]
 8006986:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d0ef      	beq.n	800696e <_fflush_r+0xa>
 800698e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006990:	07d0      	lsls	r0, r2, #31
 8006992:	d404      	bmi.n	800699e <_fflush_r+0x3a>
 8006994:	0599      	lsls	r1, r3, #22
 8006996:	d402      	bmi.n	800699e <_fflush_r+0x3a>
 8006998:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800699a:	f000 f915 	bl	8006bc8 <__retarget_lock_acquire_recursive>
 800699e:	4628      	mov	r0, r5
 80069a0:	4621      	mov	r1, r4
 80069a2:	f7ff ff59 	bl	8006858 <__sflush_r>
 80069a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069a8:	07da      	lsls	r2, r3, #31
 80069aa:	4605      	mov	r5, r0
 80069ac:	d4e0      	bmi.n	8006970 <_fflush_r+0xc>
 80069ae:	89a3      	ldrh	r3, [r4, #12]
 80069b0:	059b      	lsls	r3, r3, #22
 80069b2:	d4dd      	bmi.n	8006970 <_fflush_r+0xc>
 80069b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069b6:	f000 f908 	bl	8006bca <__retarget_lock_release_recursive>
 80069ba:	e7d9      	b.n	8006970 <_fflush_r+0xc>
 80069bc:	4b05      	ldr	r3, [pc, #20]	; (80069d4 <_fflush_r+0x70>)
 80069be:	429c      	cmp	r4, r3
 80069c0:	d101      	bne.n	80069c6 <_fflush_r+0x62>
 80069c2:	68ac      	ldr	r4, [r5, #8]
 80069c4:	e7df      	b.n	8006986 <_fflush_r+0x22>
 80069c6:	4b04      	ldr	r3, [pc, #16]	; (80069d8 <_fflush_r+0x74>)
 80069c8:	429c      	cmp	r4, r3
 80069ca:	bf08      	it	eq
 80069cc:	68ec      	ldreq	r4, [r5, #12]
 80069ce:	e7da      	b.n	8006986 <_fflush_r+0x22>
 80069d0:	08008078 	.word	0x08008078
 80069d4:	08008098 	.word	0x08008098
 80069d8:	08008058 	.word	0x08008058

080069dc <std>:
 80069dc:	2300      	movs	r3, #0
 80069de:	b510      	push	{r4, lr}
 80069e0:	4604      	mov	r4, r0
 80069e2:	e9c0 3300 	strd	r3, r3, [r0]
 80069e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069ea:	6083      	str	r3, [r0, #8]
 80069ec:	8181      	strh	r1, [r0, #12]
 80069ee:	6643      	str	r3, [r0, #100]	; 0x64
 80069f0:	81c2      	strh	r2, [r0, #14]
 80069f2:	6183      	str	r3, [r0, #24]
 80069f4:	4619      	mov	r1, r3
 80069f6:	2208      	movs	r2, #8
 80069f8:	305c      	adds	r0, #92	; 0x5c
 80069fa:	f7ff f9af 	bl	8005d5c <memset>
 80069fe:	4b05      	ldr	r3, [pc, #20]	; (8006a14 <std+0x38>)
 8006a00:	6263      	str	r3, [r4, #36]	; 0x24
 8006a02:	4b05      	ldr	r3, [pc, #20]	; (8006a18 <std+0x3c>)
 8006a04:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a06:	4b05      	ldr	r3, [pc, #20]	; (8006a1c <std+0x40>)
 8006a08:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a0a:	4b05      	ldr	r3, [pc, #20]	; (8006a20 <std+0x44>)
 8006a0c:	6224      	str	r4, [r4, #32]
 8006a0e:	6323      	str	r3, [r4, #48]	; 0x30
 8006a10:	bd10      	pop	{r4, pc}
 8006a12:	bf00      	nop
 8006a14:	08006d39 	.word	0x08006d39
 8006a18:	08006d5b 	.word	0x08006d5b
 8006a1c:	08006d93 	.word	0x08006d93
 8006a20:	08006db7 	.word	0x08006db7

08006a24 <_cleanup_r>:
 8006a24:	4901      	ldr	r1, [pc, #4]	; (8006a2c <_cleanup_r+0x8>)
 8006a26:	f000 b8af 	b.w	8006b88 <_fwalk_reent>
 8006a2a:	bf00      	nop
 8006a2c:	08006965 	.word	0x08006965

08006a30 <__sfmoreglue>:
 8006a30:	b570      	push	{r4, r5, r6, lr}
 8006a32:	2268      	movs	r2, #104	; 0x68
 8006a34:	1e4d      	subs	r5, r1, #1
 8006a36:	4355      	muls	r5, r2
 8006a38:	460e      	mov	r6, r1
 8006a3a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006a3e:	f7ff fad1 	bl	8005fe4 <_malloc_r>
 8006a42:	4604      	mov	r4, r0
 8006a44:	b140      	cbz	r0, 8006a58 <__sfmoreglue+0x28>
 8006a46:	2100      	movs	r1, #0
 8006a48:	e9c0 1600 	strd	r1, r6, [r0]
 8006a4c:	300c      	adds	r0, #12
 8006a4e:	60a0      	str	r0, [r4, #8]
 8006a50:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006a54:	f7ff f982 	bl	8005d5c <memset>
 8006a58:	4620      	mov	r0, r4
 8006a5a:	bd70      	pop	{r4, r5, r6, pc}

08006a5c <__sfp_lock_acquire>:
 8006a5c:	4801      	ldr	r0, [pc, #4]	; (8006a64 <__sfp_lock_acquire+0x8>)
 8006a5e:	f000 b8b3 	b.w	8006bc8 <__retarget_lock_acquire_recursive>
 8006a62:	bf00      	nop
 8006a64:	200008e1 	.word	0x200008e1

08006a68 <__sfp_lock_release>:
 8006a68:	4801      	ldr	r0, [pc, #4]	; (8006a70 <__sfp_lock_release+0x8>)
 8006a6a:	f000 b8ae 	b.w	8006bca <__retarget_lock_release_recursive>
 8006a6e:	bf00      	nop
 8006a70:	200008e1 	.word	0x200008e1

08006a74 <__sinit_lock_acquire>:
 8006a74:	4801      	ldr	r0, [pc, #4]	; (8006a7c <__sinit_lock_acquire+0x8>)
 8006a76:	f000 b8a7 	b.w	8006bc8 <__retarget_lock_acquire_recursive>
 8006a7a:	bf00      	nop
 8006a7c:	200008e2 	.word	0x200008e2

08006a80 <__sinit_lock_release>:
 8006a80:	4801      	ldr	r0, [pc, #4]	; (8006a88 <__sinit_lock_release+0x8>)
 8006a82:	f000 b8a2 	b.w	8006bca <__retarget_lock_release_recursive>
 8006a86:	bf00      	nop
 8006a88:	200008e2 	.word	0x200008e2

08006a8c <__sinit>:
 8006a8c:	b510      	push	{r4, lr}
 8006a8e:	4604      	mov	r4, r0
 8006a90:	f7ff fff0 	bl	8006a74 <__sinit_lock_acquire>
 8006a94:	69a3      	ldr	r3, [r4, #24]
 8006a96:	b11b      	cbz	r3, 8006aa0 <__sinit+0x14>
 8006a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a9c:	f7ff bff0 	b.w	8006a80 <__sinit_lock_release>
 8006aa0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006aa4:	6523      	str	r3, [r4, #80]	; 0x50
 8006aa6:	4b13      	ldr	r3, [pc, #76]	; (8006af4 <__sinit+0x68>)
 8006aa8:	4a13      	ldr	r2, [pc, #76]	; (8006af8 <__sinit+0x6c>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	62a2      	str	r2, [r4, #40]	; 0x28
 8006aae:	42a3      	cmp	r3, r4
 8006ab0:	bf04      	itt	eq
 8006ab2:	2301      	moveq	r3, #1
 8006ab4:	61a3      	streq	r3, [r4, #24]
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	f000 f820 	bl	8006afc <__sfp>
 8006abc:	6060      	str	r0, [r4, #4]
 8006abe:	4620      	mov	r0, r4
 8006ac0:	f000 f81c 	bl	8006afc <__sfp>
 8006ac4:	60a0      	str	r0, [r4, #8]
 8006ac6:	4620      	mov	r0, r4
 8006ac8:	f000 f818 	bl	8006afc <__sfp>
 8006acc:	2200      	movs	r2, #0
 8006ace:	60e0      	str	r0, [r4, #12]
 8006ad0:	2104      	movs	r1, #4
 8006ad2:	6860      	ldr	r0, [r4, #4]
 8006ad4:	f7ff ff82 	bl	80069dc <std>
 8006ad8:	68a0      	ldr	r0, [r4, #8]
 8006ada:	2201      	movs	r2, #1
 8006adc:	2109      	movs	r1, #9
 8006ade:	f7ff ff7d 	bl	80069dc <std>
 8006ae2:	68e0      	ldr	r0, [r4, #12]
 8006ae4:	2202      	movs	r2, #2
 8006ae6:	2112      	movs	r1, #18
 8006ae8:	f7ff ff78 	bl	80069dc <std>
 8006aec:	2301      	movs	r3, #1
 8006aee:	61a3      	str	r3, [r4, #24]
 8006af0:	e7d2      	b.n	8006a98 <__sinit+0xc>
 8006af2:	bf00      	nop
 8006af4:	08007f70 	.word	0x08007f70
 8006af8:	08006a25 	.word	0x08006a25

08006afc <__sfp>:
 8006afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006afe:	4607      	mov	r7, r0
 8006b00:	f7ff ffac 	bl	8006a5c <__sfp_lock_acquire>
 8006b04:	4b1e      	ldr	r3, [pc, #120]	; (8006b80 <__sfp+0x84>)
 8006b06:	681e      	ldr	r6, [r3, #0]
 8006b08:	69b3      	ldr	r3, [r6, #24]
 8006b0a:	b913      	cbnz	r3, 8006b12 <__sfp+0x16>
 8006b0c:	4630      	mov	r0, r6
 8006b0e:	f7ff ffbd 	bl	8006a8c <__sinit>
 8006b12:	3648      	adds	r6, #72	; 0x48
 8006b14:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	d503      	bpl.n	8006b24 <__sfp+0x28>
 8006b1c:	6833      	ldr	r3, [r6, #0]
 8006b1e:	b30b      	cbz	r3, 8006b64 <__sfp+0x68>
 8006b20:	6836      	ldr	r6, [r6, #0]
 8006b22:	e7f7      	b.n	8006b14 <__sfp+0x18>
 8006b24:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006b28:	b9d5      	cbnz	r5, 8006b60 <__sfp+0x64>
 8006b2a:	4b16      	ldr	r3, [pc, #88]	; (8006b84 <__sfp+0x88>)
 8006b2c:	60e3      	str	r3, [r4, #12]
 8006b2e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006b32:	6665      	str	r5, [r4, #100]	; 0x64
 8006b34:	f000 f847 	bl	8006bc6 <__retarget_lock_init_recursive>
 8006b38:	f7ff ff96 	bl	8006a68 <__sfp_lock_release>
 8006b3c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006b40:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006b44:	6025      	str	r5, [r4, #0]
 8006b46:	61a5      	str	r5, [r4, #24]
 8006b48:	2208      	movs	r2, #8
 8006b4a:	4629      	mov	r1, r5
 8006b4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006b50:	f7ff f904 	bl	8005d5c <memset>
 8006b54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006b58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006b5c:	4620      	mov	r0, r4
 8006b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b60:	3468      	adds	r4, #104	; 0x68
 8006b62:	e7d9      	b.n	8006b18 <__sfp+0x1c>
 8006b64:	2104      	movs	r1, #4
 8006b66:	4638      	mov	r0, r7
 8006b68:	f7ff ff62 	bl	8006a30 <__sfmoreglue>
 8006b6c:	4604      	mov	r4, r0
 8006b6e:	6030      	str	r0, [r6, #0]
 8006b70:	2800      	cmp	r0, #0
 8006b72:	d1d5      	bne.n	8006b20 <__sfp+0x24>
 8006b74:	f7ff ff78 	bl	8006a68 <__sfp_lock_release>
 8006b78:	230c      	movs	r3, #12
 8006b7a:	603b      	str	r3, [r7, #0]
 8006b7c:	e7ee      	b.n	8006b5c <__sfp+0x60>
 8006b7e:	bf00      	nop
 8006b80:	08007f70 	.word	0x08007f70
 8006b84:	ffff0001 	.word	0xffff0001

08006b88 <_fwalk_reent>:
 8006b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b8c:	4606      	mov	r6, r0
 8006b8e:	4688      	mov	r8, r1
 8006b90:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006b94:	2700      	movs	r7, #0
 8006b96:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b9a:	f1b9 0901 	subs.w	r9, r9, #1
 8006b9e:	d505      	bpl.n	8006bac <_fwalk_reent+0x24>
 8006ba0:	6824      	ldr	r4, [r4, #0]
 8006ba2:	2c00      	cmp	r4, #0
 8006ba4:	d1f7      	bne.n	8006b96 <_fwalk_reent+0xe>
 8006ba6:	4638      	mov	r0, r7
 8006ba8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bac:	89ab      	ldrh	r3, [r5, #12]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d907      	bls.n	8006bc2 <_fwalk_reent+0x3a>
 8006bb2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	d003      	beq.n	8006bc2 <_fwalk_reent+0x3a>
 8006bba:	4629      	mov	r1, r5
 8006bbc:	4630      	mov	r0, r6
 8006bbe:	47c0      	blx	r8
 8006bc0:	4307      	orrs	r7, r0
 8006bc2:	3568      	adds	r5, #104	; 0x68
 8006bc4:	e7e9      	b.n	8006b9a <_fwalk_reent+0x12>

08006bc6 <__retarget_lock_init_recursive>:
 8006bc6:	4770      	bx	lr

08006bc8 <__retarget_lock_acquire_recursive>:
 8006bc8:	4770      	bx	lr

08006bca <__retarget_lock_release_recursive>:
 8006bca:	4770      	bx	lr

08006bcc <__swhatbuf_r>:
 8006bcc:	b570      	push	{r4, r5, r6, lr}
 8006bce:	460e      	mov	r6, r1
 8006bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bd4:	2900      	cmp	r1, #0
 8006bd6:	b096      	sub	sp, #88	; 0x58
 8006bd8:	4614      	mov	r4, r2
 8006bda:	461d      	mov	r5, r3
 8006bdc:	da08      	bge.n	8006bf0 <__swhatbuf_r+0x24>
 8006bde:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	602a      	str	r2, [r5, #0]
 8006be6:	061a      	lsls	r2, r3, #24
 8006be8:	d410      	bmi.n	8006c0c <__swhatbuf_r+0x40>
 8006bea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bee:	e00e      	b.n	8006c0e <__swhatbuf_r+0x42>
 8006bf0:	466a      	mov	r2, sp
 8006bf2:	f000 f907 	bl	8006e04 <_fstat_r>
 8006bf6:	2800      	cmp	r0, #0
 8006bf8:	dbf1      	blt.n	8006bde <__swhatbuf_r+0x12>
 8006bfa:	9a01      	ldr	r2, [sp, #4]
 8006bfc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006c00:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006c04:	425a      	negs	r2, r3
 8006c06:	415a      	adcs	r2, r3
 8006c08:	602a      	str	r2, [r5, #0]
 8006c0a:	e7ee      	b.n	8006bea <__swhatbuf_r+0x1e>
 8006c0c:	2340      	movs	r3, #64	; 0x40
 8006c0e:	2000      	movs	r0, #0
 8006c10:	6023      	str	r3, [r4, #0]
 8006c12:	b016      	add	sp, #88	; 0x58
 8006c14:	bd70      	pop	{r4, r5, r6, pc}
	...

08006c18 <__smakebuf_r>:
 8006c18:	898b      	ldrh	r3, [r1, #12]
 8006c1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006c1c:	079d      	lsls	r5, r3, #30
 8006c1e:	4606      	mov	r6, r0
 8006c20:	460c      	mov	r4, r1
 8006c22:	d507      	bpl.n	8006c34 <__smakebuf_r+0x1c>
 8006c24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006c28:	6023      	str	r3, [r4, #0]
 8006c2a:	6123      	str	r3, [r4, #16]
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	6163      	str	r3, [r4, #20]
 8006c30:	b002      	add	sp, #8
 8006c32:	bd70      	pop	{r4, r5, r6, pc}
 8006c34:	ab01      	add	r3, sp, #4
 8006c36:	466a      	mov	r2, sp
 8006c38:	f7ff ffc8 	bl	8006bcc <__swhatbuf_r>
 8006c3c:	9900      	ldr	r1, [sp, #0]
 8006c3e:	4605      	mov	r5, r0
 8006c40:	4630      	mov	r0, r6
 8006c42:	f7ff f9cf 	bl	8005fe4 <_malloc_r>
 8006c46:	b948      	cbnz	r0, 8006c5c <__smakebuf_r+0x44>
 8006c48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c4c:	059a      	lsls	r2, r3, #22
 8006c4e:	d4ef      	bmi.n	8006c30 <__smakebuf_r+0x18>
 8006c50:	f023 0303 	bic.w	r3, r3, #3
 8006c54:	f043 0302 	orr.w	r3, r3, #2
 8006c58:	81a3      	strh	r3, [r4, #12]
 8006c5a:	e7e3      	b.n	8006c24 <__smakebuf_r+0xc>
 8006c5c:	4b0d      	ldr	r3, [pc, #52]	; (8006c94 <__smakebuf_r+0x7c>)
 8006c5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006c60:	89a3      	ldrh	r3, [r4, #12]
 8006c62:	6020      	str	r0, [r4, #0]
 8006c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c68:	81a3      	strh	r3, [r4, #12]
 8006c6a:	9b00      	ldr	r3, [sp, #0]
 8006c6c:	6163      	str	r3, [r4, #20]
 8006c6e:	9b01      	ldr	r3, [sp, #4]
 8006c70:	6120      	str	r0, [r4, #16]
 8006c72:	b15b      	cbz	r3, 8006c8c <__smakebuf_r+0x74>
 8006c74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c78:	4630      	mov	r0, r6
 8006c7a:	f000 f8d5 	bl	8006e28 <_isatty_r>
 8006c7e:	b128      	cbz	r0, 8006c8c <__smakebuf_r+0x74>
 8006c80:	89a3      	ldrh	r3, [r4, #12]
 8006c82:	f023 0303 	bic.w	r3, r3, #3
 8006c86:	f043 0301 	orr.w	r3, r3, #1
 8006c8a:	81a3      	strh	r3, [r4, #12]
 8006c8c:	89a0      	ldrh	r0, [r4, #12]
 8006c8e:	4305      	orrs	r5, r0
 8006c90:	81a5      	strh	r5, [r4, #12]
 8006c92:	e7cd      	b.n	8006c30 <__smakebuf_r+0x18>
 8006c94:	08006a25 	.word	0x08006a25

08006c98 <__malloc_lock>:
 8006c98:	4801      	ldr	r0, [pc, #4]	; (8006ca0 <__malloc_lock+0x8>)
 8006c9a:	f7ff bf95 	b.w	8006bc8 <__retarget_lock_acquire_recursive>
 8006c9e:	bf00      	nop
 8006ca0:	200008e0 	.word	0x200008e0

08006ca4 <__malloc_unlock>:
 8006ca4:	4801      	ldr	r0, [pc, #4]	; (8006cac <__malloc_unlock+0x8>)
 8006ca6:	f7ff bf90 	b.w	8006bca <__retarget_lock_release_recursive>
 8006caa:	bf00      	nop
 8006cac:	200008e0 	.word	0x200008e0

08006cb0 <_raise_r>:
 8006cb0:	291f      	cmp	r1, #31
 8006cb2:	b538      	push	{r3, r4, r5, lr}
 8006cb4:	4604      	mov	r4, r0
 8006cb6:	460d      	mov	r5, r1
 8006cb8:	d904      	bls.n	8006cc4 <_raise_r+0x14>
 8006cba:	2316      	movs	r3, #22
 8006cbc:	6003      	str	r3, [r0, #0]
 8006cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc2:	bd38      	pop	{r3, r4, r5, pc}
 8006cc4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006cc6:	b112      	cbz	r2, 8006cce <_raise_r+0x1e>
 8006cc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ccc:	b94b      	cbnz	r3, 8006ce2 <_raise_r+0x32>
 8006cce:	4620      	mov	r0, r4
 8006cd0:	f000 f830 	bl	8006d34 <_getpid_r>
 8006cd4:	462a      	mov	r2, r5
 8006cd6:	4601      	mov	r1, r0
 8006cd8:	4620      	mov	r0, r4
 8006cda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cde:	f000 b817 	b.w	8006d10 <_kill_r>
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d00a      	beq.n	8006cfc <_raise_r+0x4c>
 8006ce6:	1c59      	adds	r1, r3, #1
 8006ce8:	d103      	bne.n	8006cf2 <_raise_r+0x42>
 8006cea:	2316      	movs	r3, #22
 8006cec:	6003      	str	r3, [r0, #0]
 8006cee:	2001      	movs	r0, #1
 8006cf0:	e7e7      	b.n	8006cc2 <_raise_r+0x12>
 8006cf2:	2400      	movs	r4, #0
 8006cf4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006cf8:	4628      	mov	r0, r5
 8006cfa:	4798      	blx	r3
 8006cfc:	2000      	movs	r0, #0
 8006cfe:	e7e0      	b.n	8006cc2 <_raise_r+0x12>

08006d00 <raise>:
 8006d00:	4b02      	ldr	r3, [pc, #8]	; (8006d0c <raise+0xc>)
 8006d02:	4601      	mov	r1, r0
 8006d04:	6818      	ldr	r0, [r3, #0]
 8006d06:	f7ff bfd3 	b.w	8006cb0 <_raise_r>
 8006d0a:	bf00      	nop
 8006d0c:	20000014 	.word	0x20000014

08006d10 <_kill_r>:
 8006d10:	b538      	push	{r3, r4, r5, lr}
 8006d12:	4d07      	ldr	r5, [pc, #28]	; (8006d30 <_kill_r+0x20>)
 8006d14:	2300      	movs	r3, #0
 8006d16:	4604      	mov	r4, r0
 8006d18:	4608      	mov	r0, r1
 8006d1a:	4611      	mov	r1, r2
 8006d1c:	602b      	str	r3, [r5, #0]
 8006d1e:	f7fa ff0d 	bl	8001b3c <_kill>
 8006d22:	1c43      	adds	r3, r0, #1
 8006d24:	d102      	bne.n	8006d2c <_kill_r+0x1c>
 8006d26:	682b      	ldr	r3, [r5, #0]
 8006d28:	b103      	cbz	r3, 8006d2c <_kill_r+0x1c>
 8006d2a:	6023      	str	r3, [r4, #0]
 8006d2c:	bd38      	pop	{r3, r4, r5, pc}
 8006d2e:	bf00      	nop
 8006d30:	200008dc 	.word	0x200008dc

08006d34 <_getpid_r>:
 8006d34:	f7fa befa 	b.w	8001b2c <_getpid>

08006d38 <__sread>:
 8006d38:	b510      	push	{r4, lr}
 8006d3a:	460c      	mov	r4, r1
 8006d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d40:	f000 f894 	bl	8006e6c <_read_r>
 8006d44:	2800      	cmp	r0, #0
 8006d46:	bfab      	itete	ge
 8006d48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006d4a:	89a3      	ldrhlt	r3, [r4, #12]
 8006d4c:	181b      	addge	r3, r3, r0
 8006d4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006d52:	bfac      	ite	ge
 8006d54:	6563      	strge	r3, [r4, #84]	; 0x54
 8006d56:	81a3      	strhlt	r3, [r4, #12]
 8006d58:	bd10      	pop	{r4, pc}

08006d5a <__swrite>:
 8006d5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d5e:	461f      	mov	r7, r3
 8006d60:	898b      	ldrh	r3, [r1, #12]
 8006d62:	05db      	lsls	r3, r3, #23
 8006d64:	4605      	mov	r5, r0
 8006d66:	460c      	mov	r4, r1
 8006d68:	4616      	mov	r6, r2
 8006d6a:	d505      	bpl.n	8006d78 <__swrite+0x1e>
 8006d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d70:	2302      	movs	r3, #2
 8006d72:	2200      	movs	r2, #0
 8006d74:	f000 f868 	bl	8006e48 <_lseek_r>
 8006d78:	89a3      	ldrh	r3, [r4, #12]
 8006d7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d82:	81a3      	strh	r3, [r4, #12]
 8006d84:	4632      	mov	r2, r6
 8006d86:	463b      	mov	r3, r7
 8006d88:	4628      	mov	r0, r5
 8006d8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d8e:	f000 b817 	b.w	8006dc0 <_write_r>

08006d92 <__sseek>:
 8006d92:	b510      	push	{r4, lr}
 8006d94:	460c      	mov	r4, r1
 8006d96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d9a:	f000 f855 	bl	8006e48 <_lseek_r>
 8006d9e:	1c43      	adds	r3, r0, #1
 8006da0:	89a3      	ldrh	r3, [r4, #12]
 8006da2:	bf15      	itete	ne
 8006da4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006da6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006daa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006dae:	81a3      	strheq	r3, [r4, #12]
 8006db0:	bf18      	it	ne
 8006db2:	81a3      	strhne	r3, [r4, #12]
 8006db4:	bd10      	pop	{r4, pc}

08006db6 <__sclose>:
 8006db6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dba:	f000 b813 	b.w	8006de4 <_close_r>
	...

08006dc0 <_write_r>:
 8006dc0:	b538      	push	{r3, r4, r5, lr}
 8006dc2:	4d07      	ldr	r5, [pc, #28]	; (8006de0 <_write_r+0x20>)
 8006dc4:	4604      	mov	r4, r0
 8006dc6:	4608      	mov	r0, r1
 8006dc8:	4611      	mov	r1, r2
 8006dca:	2200      	movs	r2, #0
 8006dcc:	602a      	str	r2, [r5, #0]
 8006dce:	461a      	mov	r2, r3
 8006dd0:	f7fa feeb 	bl	8001baa <_write>
 8006dd4:	1c43      	adds	r3, r0, #1
 8006dd6:	d102      	bne.n	8006dde <_write_r+0x1e>
 8006dd8:	682b      	ldr	r3, [r5, #0]
 8006dda:	b103      	cbz	r3, 8006dde <_write_r+0x1e>
 8006ddc:	6023      	str	r3, [r4, #0]
 8006dde:	bd38      	pop	{r3, r4, r5, pc}
 8006de0:	200008dc 	.word	0x200008dc

08006de4 <_close_r>:
 8006de4:	b538      	push	{r3, r4, r5, lr}
 8006de6:	4d06      	ldr	r5, [pc, #24]	; (8006e00 <_close_r+0x1c>)
 8006de8:	2300      	movs	r3, #0
 8006dea:	4604      	mov	r4, r0
 8006dec:	4608      	mov	r0, r1
 8006dee:	602b      	str	r3, [r5, #0]
 8006df0:	f7fa fef7 	bl	8001be2 <_close>
 8006df4:	1c43      	adds	r3, r0, #1
 8006df6:	d102      	bne.n	8006dfe <_close_r+0x1a>
 8006df8:	682b      	ldr	r3, [r5, #0]
 8006dfa:	b103      	cbz	r3, 8006dfe <_close_r+0x1a>
 8006dfc:	6023      	str	r3, [r4, #0]
 8006dfe:	bd38      	pop	{r3, r4, r5, pc}
 8006e00:	200008dc 	.word	0x200008dc

08006e04 <_fstat_r>:
 8006e04:	b538      	push	{r3, r4, r5, lr}
 8006e06:	4d07      	ldr	r5, [pc, #28]	; (8006e24 <_fstat_r+0x20>)
 8006e08:	2300      	movs	r3, #0
 8006e0a:	4604      	mov	r4, r0
 8006e0c:	4608      	mov	r0, r1
 8006e0e:	4611      	mov	r1, r2
 8006e10:	602b      	str	r3, [r5, #0]
 8006e12:	f7fa fef2 	bl	8001bfa <_fstat>
 8006e16:	1c43      	adds	r3, r0, #1
 8006e18:	d102      	bne.n	8006e20 <_fstat_r+0x1c>
 8006e1a:	682b      	ldr	r3, [r5, #0]
 8006e1c:	b103      	cbz	r3, 8006e20 <_fstat_r+0x1c>
 8006e1e:	6023      	str	r3, [r4, #0]
 8006e20:	bd38      	pop	{r3, r4, r5, pc}
 8006e22:	bf00      	nop
 8006e24:	200008dc 	.word	0x200008dc

08006e28 <_isatty_r>:
 8006e28:	b538      	push	{r3, r4, r5, lr}
 8006e2a:	4d06      	ldr	r5, [pc, #24]	; (8006e44 <_isatty_r+0x1c>)
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	4604      	mov	r4, r0
 8006e30:	4608      	mov	r0, r1
 8006e32:	602b      	str	r3, [r5, #0]
 8006e34:	f7fa fef1 	bl	8001c1a <_isatty>
 8006e38:	1c43      	adds	r3, r0, #1
 8006e3a:	d102      	bne.n	8006e42 <_isatty_r+0x1a>
 8006e3c:	682b      	ldr	r3, [r5, #0]
 8006e3e:	b103      	cbz	r3, 8006e42 <_isatty_r+0x1a>
 8006e40:	6023      	str	r3, [r4, #0]
 8006e42:	bd38      	pop	{r3, r4, r5, pc}
 8006e44:	200008dc 	.word	0x200008dc

08006e48 <_lseek_r>:
 8006e48:	b538      	push	{r3, r4, r5, lr}
 8006e4a:	4d07      	ldr	r5, [pc, #28]	; (8006e68 <_lseek_r+0x20>)
 8006e4c:	4604      	mov	r4, r0
 8006e4e:	4608      	mov	r0, r1
 8006e50:	4611      	mov	r1, r2
 8006e52:	2200      	movs	r2, #0
 8006e54:	602a      	str	r2, [r5, #0]
 8006e56:	461a      	mov	r2, r3
 8006e58:	f7fa feea 	bl	8001c30 <_lseek>
 8006e5c:	1c43      	adds	r3, r0, #1
 8006e5e:	d102      	bne.n	8006e66 <_lseek_r+0x1e>
 8006e60:	682b      	ldr	r3, [r5, #0]
 8006e62:	b103      	cbz	r3, 8006e66 <_lseek_r+0x1e>
 8006e64:	6023      	str	r3, [r4, #0]
 8006e66:	bd38      	pop	{r3, r4, r5, pc}
 8006e68:	200008dc 	.word	0x200008dc

08006e6c <_read_r>:
 8006e6c:	b538      	push	{r3, r4, r5, lr}
 8006e6e:	4d07      	ldr	r5, [pc, #28]	; (8006e8c <_read_r+0x20>)
 8006e70:	4604      	mov	r4, r0
 8006e72:	4608      	mov	r0, r1
 8006e74:	4611      	mov	r1, r2
 8006e76:	2200      	movs	r2, #0
 8006e78:	602a      	str	r2, [r5, #0]
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	f7fa fe78 	bl	8001b70 <_read>
 8006e80:	1c43      	adds	r3, r0, #1
 8006e82:	d102      	bne.n	8006e8a <_read_r+0x1e>
 8006e84:	682b      	ldr	r3, [r5, #0]
 8006e86:	b103      	cbz	r3, 8006e8a <_read_r+0x1e>
 8006e88:	6023      	str	r3, [r4, #0]
 8006e8a:	bd38      	pop	{r3, r4, r5, pc}
 8006e8c:	200008dc 	.word	0x200008dc

08006e90 <sin>:
 8006e90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e92:	ec53 2b10 	vmov	r2, r3, d0
 8006e96:	4828      	ldr	r0, [pc, #160]	; (8006f38 <sin+0xa8>)
 8006e98:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006e9c:	4281      	cmp	r1, r0
 8006e9e:	dc07      	bgt.n	8006eb0 <sin+0x20>
 8006ea0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8006f30 <sin+0xa0>
 8006ea4:	2000      	movs	r0, #0
 8006ea6:	b005      	add	sp, #20
 8006ea8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006eac:	f000 be6c 	b.w	8007b88 <__kernel_sin>
 8006eb0:	4822      	ldr	r0, [pc, #136]	; (8006f3c <sin+0xac>)
 8006eb2:	4281      	cmp	r1, r0
 8006eb4:	dd09      	ble.n	8006eca <sin+0x3a>
 8006eb6:	ee10 0a10 	vmov	r0, s0
 8006eba:	4619      	mov	r1, r3
 8006ebc:	f7f9 f9dc 	bl	8000278 <__aeabi_dsub>
 8006ec0:	ec41 0b10 	vmov	d0, r0, r1
 8006ec4:	b005      	add	sp, #20
 8006ec6:	f85d fb04 	ldr.w	pc, [sp], #4
 8006eca:	4668      	mov	r0, sp
 8006ecc:	f000 f838 	bl	8006f40 <__ieee754_rem_pio2>
 8006ed0:	f000 0003 	and.w	r0, r0, #3
 8006ed4:	2801      	cmp	r0, #1
 8006ed6:	d00c      	beq.n	8006ef2 <sin+0x62>
 8006ed8:	2802      	cmp	r0, #2
 8006eda:	d011      	beq.n	8006f00 <sin+0x70>
 8006edc:	b9f0      	cbnz	r0, 8006f1c <sin+0x8c>
 8006ede:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006ee2:	ed9d 0b00 	vldr	d0, [sp]
 8006ee6:	2001      	movs	r0, #1
 8006ee8:	f000 fe4e 	bl	8007b88 <__kernel_sin>
 8006eec:	ec51 0b10 	vmov	r0, r1, d0
 8006ef0:	e7e6      	b.n	8006ec0 <sin+0x30>
 8006ef2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006ef6:	ed9d 0b00 	vldr	d0, [sp]
 8006efa:	f000 fa2d 	bl	8007358 <__kernel_cos>
 8006efe:	e7f5      	b.n	8006eec <sin+0x5c>
 8006f00:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006f04:	ed9d 0b00 	vldr	d0, [sp]
 8006f08:	2001      	movs	r0, #1
 8006f0a:	f000 fe3d 	bl	8007b88 <__kernel_sin>
 8006f0e:	ec53 2b10 	vmov	r2, r3, d0
 8006f12:	ee10 0a10 	vmov	r0, s0
 8006f16:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006f1a:	e7d1      	b.n	8006ec0 <sin+0x30>
 8006f1c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006f20:	ed9d 0b00 	vldr	d0, [sp]
 8006f24:	f000 fa18 	bl	8007358 <__kernel_cos>
 8006f28:	e7f1      	b.n	8006f0e <sin+0x7e>
 8006f2a:	bf00      	nop
 8006f2c:	f3af 8000 	nop.w
	...
 8006f38:	3fe921fb 	.word	0x3fe921fb
 8006f3c:	7fefffff 	.word	0x7fefffff

08006f40 <__ieee754_rem_pio2>:
 8006f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f44:	ed2d 8b02 	vpush	{d8}
 8006f48:	ec55 4b10 	vmov	r4, r5, d0
 8006f4c:	4bca      	ldr	r3, [pc, #808]	; (8007278 <__ieee754_rem_pio2+0x338>)
 8006f4e:	b08b      	sub	sp, #44	; 0x2c
 8006f50:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006f54:	4598      	cmp	r8, r3
 8006f56:	4682      	mov	sl, r0
 8006f58:	9502      	str	r5, [sp, #8]
 8006f5a:	dc08      	bgt.n	8006f6e <__ieee754_rem_pio2+0x2e>
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	2300      	movs	r3, #0
 8006f60:	ed80 0b00 	vstr	d0, [r0]
 8006f64:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006f68:	f04f 0b00 	mov.w	fp, #0
 8006f6c:	e028      	b.n	8006fc0 <__ieee754_rem_pio2+0x80>
 8006f6e:	4bc3      	ldr	r3, [pc, #780]	; (800727c <__ieee754_rem_pio2+0x33c>)
 8006f70:	4598      	cmp	r8, r3
 8006f72:	dc78      	bgt.n	8007066 <__ieee754_rem_pio2+0x126>
 8006f74:	9b02      	ldr	r3, [sp, #8]
 8006f76:	4ec2      	ldr	r6, [pc, #776]	; (8007280 <__ieee754_rem_pio2+0x340>)
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	ee10 0a10 	vmov	r0, s0
 8006f7e:	a3b0      	add	r3, pc, #704	; (adr r3, 8007240 <__ieee754_rem_pio2+0x300>)
 8006f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f84:	4629      	mov	r1, r5
 8006f86:	dd39      	ble.n	8006ffc <__ieee754_rem_pio2+0xbc>
 8006f88:	f7f9 f976 	bl	8000278 <__aeabi_dsub>
 8006f8c:	45b0      	cmp	r8, r6
 8006f8e:	4604      	mov	r4, r0
 8006f90:	460d      	mov	r5, r1
 8006f92:	d01b      	beq.n	8006fcc <__ieee754_rem_pio2+0x8c>
 8006f94:	a3ac      	add	r3, pc, #688	; (adr r3, 8007248 <__ieee754_rem_pio2+0x308>)
 8006f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9a:	f7f9 f96d 	bl	8000278 <__aeabi_dsub>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	e9ca 2300 	strd	r2, r3, [sl]
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	4629      	mov	r1, r5
 8006faa:	f7f9 f965 	bl	8000278 <__aeabi_dsub>
 8006fae:	a3a6      	add	r3, pc, #664	; (adr r3, 8007248 <__ieee754_rem_pio2+0x308>)
 8006fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb4:	f7f9 f960 	bl	8000278 <__aeabi_dsub>
 8006fb8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006fbc:	f04f 0b01 	mov.w	fp, #1
 8006fc0:	4658      	mov	r0, fp
 8006fc2:	b00b      	add	sp, #44	; 0x2c
 8006fc4:	ecbd 8b02 	vpop	{d8}
 8006fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fcc:	a3a0      	add	r3, pc, #640	; (adr r3, 8007250 <__ieee754_rem_pio2+0x310>)
 8006fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd2:	f7f9 f951 	bl	8000278 <__aeabi_dsub>
 8006fd6:	a3a0      	add	r3, pc, #640	; (adr r3, 8007258 <__ieee754_rem_pio2+0x318>)
 8006fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fdc:	4604      	mov	r4, r0
 8006fde:	460d      	mov	r5, r1
 8006fe0:	f7f9 f94a 	bl	8000278 <__aeabi_dsub>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	e9ca 2300 	strd	r2, r3, [sl]
 8006fec:	4620      	mov	r0, r4
 8006fee:	4629      	mov	r1, r5
 8006ff0:	f7f9 f942 	bl	8000278 <__aeabi_dsub>
 8006ff4:	a398      	add	r3, pc, #608	; (adr r3, 8007258 <__ieee754_rem_pio2+0x318>)
 8006ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffa:	e7db      	b.n	8006fb4 <__ieee754_rem_pio2+0x74>
 8006ffc:	f7f9 f93e 	bl	800027c <__adddf3>
 8007000:	45b0      	cmp	r8, r6
 8007002:	4604      	mov	r4, r0
 8007004:	460d      	mov	r5, r1
 8007006:	d016      	beq.n	8007036 <__ieee754_rem_pio2+0xf6>
 8007008:	a38f      	add	r3, pc, #572	; (adr r3, 8007248 <__ieee754_rem_pio2+0x308>)
 800700a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700e:	f7f9 f935 	bl	800027c <__adddf3>
 8007012:	4602      	mov	r2, r0
 8007014:	460b      	mov	r3, r1
 8007016:	e9ca 2300 	strd	r2, r3, [sl]
 800701a:	4620      	mov	r0, r4
 800701c:	4629      	mov	r1, r5
 800701e:	f7f9 f92b 	bl	8000278 <__aeabi_dsub>
 8007022:	a389      	add	r3, pc, #548	; (adr r3, 8007248 <__ieee754_rem_pio2+0x308>)
 8007024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007028:	f7f9 f928 	bl	800027c <__adddf3>
 800702c:	f04f 3bff 	mov.w	fp, #4294967295
 8007030:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007034:	e7c4      	b.n	8006fc0 <__ieee754_rem_pio2+0x80>
 8007036:	a386      	add	r3, pc, #536	; (adr r3, 8007250 <__ieee754_rem_pio2+0x310>)
 8007038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703c:	f7f9 f91e 	bl	800027c <__adddf3>
 8007040:	a385      	add	r3, pc, #532	; (adr r3, 8007258 <__ieee754_rem_pio2+0x318>)
 8007042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007046:	4604      	mov	r4, r0
 8007048:	460d      	mov	r5, r1
 800704a:	f7f9 f917 	bl	800027c <__adddf3>
 800704e:	4602      	mov	r2, r0
 8007050:	460b      	mov	r3, r1
 8007052:	e9ca 2300 	strd	r2, r3, [sl]
 8007056:	4620      	mov	r0, r4
 8007058:	4629      	mov	r1, r5
 800705a:	f7f9 f90d 	bl	8000278 <__aeabi_dsub>
 800705e:	a37e      	add	r3, pc, #504	; (adr r3, 8007258 <__ieee754_rem_pio2+0x318>)
 8007060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007064:	e7e0      	b.n	8007028 <__ieee754_rem_pio2+0xe8>
 8007066:	4b87      	ldr	r3, [pc, #540]	; (8007284 <__ieee754_rem_pio2+0x344>)
 8007068:	4598      	cmp	r8, r3
 800706a:	f300 80d9 	bgt.w	8007220 <__ieee754_rem_pio2+0x2e0>
 800706e:	f000 fe49 	bl	8007d04 <fabs>
 8007072:	ec55 4b10 	vmov	r4, r5, d0
 8007076:	ee10 0a10 	vmov	r0, s0
 800707a:	a379      	add	r3, pc, #484	; (adr r3, 8007260 <__ieee754_rem_pio2+0x320>)
 800707c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007080:	4629      	mov	r1, r5
 8007082:	f7f9 fab1 	bl	80005e8 <__aeabi_dmul>
 8007086:	4b80      	ldr	r3, [pc, #512]	; (8007288 <__ieee754_rem_pio2+0x348>)
 8007088:	2200      	movs	r2, #0
 800708a:	f7f9 f8f7 	bl	800027c <__adddf3>
 800708e:	f7f9 fd45 	bl	8000b1c <__aeabi_d2iz>
 8007092:	4683      	mov	fp, r0
 8007094:	f7f9 fa3e 	bl	8000514 <__aeabi_i2d>
 8007098:	4602      	mov	r2, r0
 800709a:	460b      	mov	r3, r1
 800709c:	ec43 2b18 	vmov	d8, r2, r3
 80070a0:	a367      	add	r3, pc, #412	; (adr r3, 8007240 <__ieee754_rem_pio2+0x300>)
 80070a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a6:	f7f9 fa9f 	bl	80005e8 <__aeabi_dmul>
 80070aa:	4602      	mov	r2, r0
 80070ac:	460b      	mov	r3, r1
 80070ae:	4620      	mov	r0, r4
 80070b0:	4629      	mov	r1, r5
 80070b2:	f7f9 f8e1 	bl	8000278 <__aeabi_dsub>
 80070b6:	a364      	add	r3, pc, #400	; (adr r3, 8007248 <__ieee754_rem_pio2+0x308>)
 80070b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070bc:	4606      	mov	r6, r0
 80070be:	460f      	mov	r7, r1
 80070c0:	ec51 0b18 	vmov	r0, r1, d8
 80070c4:	f7f9 fa90 	bl	80005e8 <__aeabi_dmul>
 80070c8:	f1bb 0f1f 	cmp.w	fp, #31
 80070cc:	4604      	mov	r4, r0
 80070ce:	460d      	mov	r5, r1
 80070d0:	dc0d      	bgt.n	80070ee <__ieee754_rem_pio2+0x1ae>
 80070d2:	4b6e      	ldr	r3, [pc, #440]	; (800728c <__ieee754_rem_pio2+0x34c>)
 80070d4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80070d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070dc:	4543      	cmp	r3, r8
 80070de:	d006      	beq.n	80070ee <__ieee754_rem_pio2+0x1ae>
 80070e0:	4622      	mov	r2, r4
 80070e2:	462b      	mov	r3, r5
 80070e4:	4630      	mov	r0, r6
 80070e6:	4639      	mov	r1, r7
 80070e8:	f7f9 f8c6 	bl	8000278 <__aeabi_dsub>
 80070ec:	e00f      	b.n	800710e <__ieee754_rem_pio2+0x1ce>
 80070ee:	462b      	mov	r3, r5
 80070f0:	4622      	mov	r2, r4
 80070f2:	4630      	mov	r0, r6
 80070f4:	4639      	mov	r1, r7
 80070f6:	f7f9 f8bf 	bl	8000278 <__aeabi_dsub>
 80070fa:	ea4f 5328 	mov.w	r3, r8, asr #20
 80070fe:	9303      	str	r3, [sp, #12]
 8007100:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007104:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8007108:	f1b8 0f10 	cmp.w	r8, #16
 800710c:	dc02      	bgt.n	8007114 <__ieee754_rem_pio2+0x1d4>
 800710e:	e9ca 0100 	strd	r0, r1, [sl]
 8007112:	e039      	b.n	8007188 <__ieee754_rem_pio2+0x248>
 8007114:	a34e      	add	r3, pc, #312	; (adr r3, 8007250 <__ieee754_rem_pio2+0x310>)
 8007116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711a:	ec51 0b18 	vmov	r0, r1, d8
 800711e:	f7f9 fa63 	bl	80005e8 <__aeabi_dmul>
 8007122:	4604      	mov	r4, r0
 8007124:	460d      	mov	r5, r1
 8007126:	4602      	mov	r2, r0
 8007128:	460b      	mov	r3, r1
 800712a:	4630      	mov	r0, r6
 800712c:	4639      	mov	r1, r7
 800712e:	f7f9 f8a3 	bl	8000278 <__aeabi_dsub>
 8007132:	4602      	mov	r2, r0
 8007134:	460b      	mov	r3, r1
 8007136:	4680      	mov	r8, r0
 8007138:	4689      	mov	r9, r1
 800713a:	4630      	mov	r0, r6
 800713c:	4639      	mov	r1, r7
 800713e:	f7f9 f89b 	bl	8000278 <__aeabi_dsub>
 8007142:	4622      	mov	r2, r4
 8007144:	462b      	mov	r3, r5
 8007146:	f7f9 f897 	bl	8000278 <__aeabi_dsub>
 800714a:	a343      	add	r3, pc, #268	; (adr r3, 8007258 <__ieee754_rem_pio2+0x318>)
 800714c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007150:	4604      	mov	r4, r0
 8007152:	460d      	mov	r5, r1
 8007154:	ec51 0b18 	vmov	r0, r1, d8
 8007158:	f7f9 fa46 	bl	80005e8 <__aeabi_dmul>
 800715c:	4622      	mov	r2, r4
 800715e:	462b      	mov	r3, r5
 8007160:	f7f9 f88a 	bl	8000278 <__aeabi_dsub>
 8007164:	4602      	mov	r2, r0
 8007166:	460b      	mov	r3, r1
 8007168:	4604      	mov	r4, r0
 800716a:	460d      	mov	r5, r1
 800716c:	4640      	mov	r0, r8
 800716e:	4649      	mov	r1, r9
 8007170:	f7f9 f882 	bl	8000278 <__aeabi_dsub>
 8007174:	9a03      	ldr	r2, [sp, #12]
 8007176:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800717a:	1ad3      	subs	r3, r2, r3
 800717c:	2b31      	cmp	r3, #49	; 0x31
 800717e:	dc24      	bgt.n	80071ca <__ieee754_rem_pio2+0x28a>
 8007180:	e9ca 0100 	strd	r0, r1, [sl]
 8007184:	4646      	mov	r6, r8
 8007186:	464f      	mov	r7, r9
 8007188:	e9da 8900 	ldrd	r8, r9, [sl]
 800718c:	4630      	mov	r0, r6
 800718e:	4642      	mov	r2, r8
 8007190:	464b      	mov	r3, r9
 8007192:	4639      	mov	r1, r7
 8007194:	f7f9 f870 	bl	8000278 <__aeabi_dsub>
 8007198:	462b      	mov	r3, r5
 800719a:	4622      	mov	r2, r4
 800719c:	f7f9 f86c 	bl	8000278 <__aeabi_dsub>
 80071a0:	9b02      	ldr	r3, [sp, #8]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80071a8:	f6bf af0a 	bge.w	8006fc0 <__ieee754_rem_pio2+0x80>
 80071ac:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80071b0:	f8ca 3004 	str.w	r3, [sl, #4]
 80071b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071b8:	f8ca 8000 	str.w	r8, [sl]
 80071bc:	f8ca 0008 	str.w	r0, [sl, #8]
 80071c0:	f8ca 300c 	str.w	r3, [sl, #12]
 80071c4:	f1cb 0b00 	rsb	fp, fp, #0
 80071c8:	e6fa      	b.n	8006fc0 <__ieee754_rem_pio2+0x80>
 80071ca:	a327      	add	r3, pc, #156	; (adr r3, 8007268 <__ieee754_rem_pio2+0x328>)
 80071cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d0:	ec51 0b18 	vmov	r0, r1, d8
 80071d4:	f7f9 fa08 	bl	80005e8 <__aeabi_dmul>
 80071d8:	4604      	mov	r4, r0
 80071da:	460d      	mov	r5, r1
 80071dc:	4602      	mov	r2, r0
 80071de:	460b      	mov	r3, r1
 80071e0:	4640      	mov	r0, r8
 80071e2:	4649      	mov	r1, r9
 80071e4:	f7f9 f848 	bl	8000278 <__aeabi_dsub>
 80071e8:	4602      	mov	r2, r0
 80071ea:	460b      	mov	r3, r1
 80071ec:	4606      	mov	r6, r0
 80071ee:	460f      	mov	r7, r1
 80071f0:	4640      	mov	r0, r8
 80071f2:	4649      	mov	r1, r9
 80071f4:	f7f9 f840 	bl	8000278 <__aeabi_dsub>
 80071f8:	4622      	mov	r2, r4
 80071fa:	462b      	mov	r3, r5
 80071fc:	f7f9 f83c 	bl	8000278 <__aeabi_dsub>
 8007200:	a31b      	add	r3, pc, #108	; (adr r3, 8007270 <__ieee754_rem_pio2+0x330>)
 8007202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007206:	4604      	mov	r4, r0
 8007208:	460d      	mov	r5, r1
 800720a:	ec51 0b18 	vmov	r0, r1, d8
 800720e:	f7f9 f9eb 	bl	80005e8 <__aeabi_dmul>
 8007212:	4622      	mov	r2, r4
 8007214:	462b      	mov	r3, r5
 8007216:	f7f9 f82f 	bl	8000278 <__aeabi_dsub>
 800721a:	4604      	mov	r4, r0
 800721c:	460d      	mov	r5, r1
 800721e:	e75f      	b.n	80070e0 <__ieee754_rem_pio2+0x1a0>
 8007220:	4b1b      	ldr	r3, [pc, #108]	; (8007290 <__ieee754_rem_pio2+0x350>)
 8007222:	4598      	cmp	r8, r3
 8007224:	dd36      	ble.n	8007294 <__ieee754_rem_pio2+0x354>
 8007226:	ee10 2a10 	vmov	r2, s0
 800722a:	462b      	mov	r3, r5
 800722c:	4620      	mov	r0, r4
 800722e:	4629      	mov	r1, r5
 8007230:	f7f9 f822 	bl	8000278 <__aeabi_dsub>
 8007234:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007238:	e9ca 0100 	strd	r0, r1, [sl]
 800723c:	e694      	b.n	8006f68 <__ieee754_rem_pio2+0x28>
 800723e:	bf00      	nop
 8007240:	54400000 	.word	0x54400000
 8007244:	3ff921fb 	.word	0x3ff921fb
 8007248:	1a626331 	.word	0x1a626331
 800724c:	3dd0b461 	.word	0x3dd0b461
 8007250:	1a600000 	.word	0x1a600000
 8007254:	3dd0b461 	.word	0x3dd0b461
 8007258:	2e037073 	.word	0x2e037073
 800725c:	3ba3198a 	.word	0x3ba3198a
 8007260:	6dc9c883 	.word	0x6dc9c883
 8007264:	3fe45f30 	.word	0x3fe45f30
 8007268:	2e000000 	.word	0x2e000000
 800726c:	3ba3198a 	.word	0x3ba3198a
 8007270:	252049c1 	.word	0x252049c1
 8007274:	397b839a 	.word	0x397b839a
 8007278:	3fe921fb 	.word	0x3fe921fb
 800727c:	4002d97b 	.word	0x4002d97b
 8007280:	3ff921fb 	.word	0x3ff921fb
 8007284:	413921fb 	.word	0x413921fb
 8007288:	3fe00000 	.word	0x3fe00000
 800728c:	080080b8 	.word	0x080080b8
 8007290:	7fefffff 	.word	0x7fefffff
 8007294:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007298:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800729c:	ee10 0a10 	vmov	r0, s0
 80072a0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80072a4:	ee10 6a10 	vmov	r6, s0
 80072a8:	460f      	mov	r7, r1
 80072aa:	f7f9 fc37 	bl	8000b1c <__aeabi_d2iz>
 80072ae:	f7f9 f931 	bl	8000514 <__aeabi_i2d>
 80072b2:	4602      	mov	r2, r0
 80072b4:	460b      	mov	r3, r1
 80072b6:	4630      	mov	r0, r6
 80072b8:	4639      	mov	r1, r7
 80072ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80072be:	f7f8 ffdb 	bl	8000278 <__aeabi_dsub>
 80072c2:	4b23      	ldr	r3, [pc, #140]	; (8007350 <__ieee754_rem_pio2+0x410>)
 80072c4:	2200      	movs	r2, #0
 80072c6:	f7f9 f98f 	bl	80005e8 <__aeabi_dmul>
 80072ca:	460f      	mov	r7, r1
 80072cc:	4606      	mov	r6, r0
 80072ce:	f7f9 fc25 	bl	8000b1c <__aeabi_d2iz>
 80072d2:	f7f9 f91f 	bl	8000514 <__aeabi_i2d>
 80072d6:	4602      	mov	r2, r0
 80072d8:	460b      	mov	r3, r1
 80072da:	4630      	mov	r0, r6
 80072dc:	4639      	mov	r1, r7
 80072de:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80072e2:	f7f8 ffc9 	bl	8000278 <__aeabi_dsub>
 80072e6:	4b1a      	ldr	r3, [pc, #104]	; (8007350 <__ieee754_rem_pio2+0x410>)
 80072e8:	2200      	movs	r2, #0
 80072ea:	f7f9 f97d 	bl	80005e8 <__aeabi_dmul>
 80072ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80072f2:	ad04      	add	r5, sp, #16
 80072f4:	f04f 0803 	mov.w	r8, #3
 80072f8:	46a9      	mov	r9, r5
 80072fa:	2600      	movs	r6, #0
 80072fc:	2700      	movs	r7, #0
 80072fe:	4632      	mov	r2, r6
 8007300:	463b      	mov	r3, r7
 8007302:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8007306:	46c3      	mov	fp, r8
 8007308:	3d08      	subs	r5, #8
 800730a:	f108 38ff 	add.w	r8, r8, #4294967295
 800730e:	f7f9 fbd3 	bl	8000ab8 <__aeabi_dcmpeq>
 8007312:	2800      	cmp	r0, #0
 8007314:	d1f3      	bne.n	80072fe <__ieee754_rem_pio2+0x3be>
 8007316:	4b0f      	ldr	r3, [pc, #60]	; (8007354 <__ieee754_rem_pio2+0x414>)
 8007318:	9301      	str	r3, [sp, #4]
 800731a:	2302      	movs	r3, #2
 800731c:	9300      	str	r3, [sp, #0]
 800731e:	4622      	mov	r2, r4
 8007320:	465b      	mov	r3, fp
 8007322:	4651      	mov	r1, sl
 8007324:	4648      	mov	r0, r9
 8007326:	f000 f8df 	bl	80074e8 <__kernel_rem_pio2>
 800732a:	9b02      	ldr	r3, [sp, #8]
 800732c:	2b00      	cmp	r3, #0
 800732e:	4683      	mov	fp, r0
 8007330:	f6bf ae46 	bge.w	8006fc0 <__ieee754_rem_pio2+0x80>
 8007334:	e9da 2100 	ldrd	r2, r1, [sl]
 8007338:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800733c:	e9ca 2300 	strd	r2, r3, [sl]
 8007340:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8007344:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007348:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800734c:	e73a      	b.n	80071c4 <__ieee754_rem_pio2+0x284>
 800734e:	bf00      	nop
 8007350:	41700000 	.word	0x41700000
 8007354:	08008138 	.word	0x08008138

08007358 <__kernel_cos>:
 8007358:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800735c:	ec57 6b10 	vmov	r6, r7, d0
 8007360:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007364:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007368:	ed8d 1b00 	vstr	d1, [sp]
 800736c:	da07      	bge.n	800737e <__kernel_cos+0x26>
 800736e:	ee10 0a10 	vmov	r0, s0
 8007372:	4639      	mov	r1, r7
 8007374:	f7f9 fbd2 	bl	8000b1c <__aeabi_d2iz>
 8007378:	2800      	cmp	r0, #0
 800737a:	f000 8088 	beq.w	800748e <__kernel_cos+0x136>
 800737e:	4632      	mov	r2, r6
 8007380:	463b      	mov	r3, r7
 8007382:	4630      	mov	r0, r6
 8007384:	4639      	mov	r1, r7
 8007386:	f7f9 f92f 	bl	80005e8 <__aeabi_dmul>
 800738a:	4b51      	ldr	r3, [pc, #324]	; (80074d0 <__kernel_cos+0x178>)
 800738c:	2200      	movs	r2, #0
 800738e:	4604      	mov	r4, r0
 8007390:	460d      	mov	r5, r1
 8007392:	f7f9 f929 	bl	80005e8 <__aeabi_dmul>
 8007396:	a340      	add	r3, pc, #256	; (adr r3, 8007498 <__kernel_cos+0x140>)
 8007398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739c:	4682      	mov	sl, r0
 800739e:	468b      	mov	fp, r1
 80073a0:	4620      	mov	r0, r4
 80073a2:	4629      	mov	r1, r5
 80073a4:	f7f9 f920 	bl	80005e8 <__aeabi_dmul>
 80073a8:	a33d      	add	r3, pc, #244	; (adr r3, 80074a0 <__kernel_cos+0x148>)
 80073aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ae:	f7f8 ff65 	bl	800027c <__adddf3>
 80073b2:	4622      	mov	r2, r4
 80073b4:	462b      	mov	r3, r5
 80073b6:	f7f9 f917 	bl	80005e8 <__aeabi_dmul>
 80073ba:	a33b      	add	r3, pc, #236	; (adr r3, 80074a8 <__kernel_cos+0x150>)
 80073bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c0:	f7f8 ff5a 	bl	8000278 <__aeabi_dsub>
 80073c4:	4622      	mov	r2, r4
 80073c6:	462b      	mov	r3, r5
 80073c8:	f7f9 f90e 	bl	80005e8 <__aeabi_dmul>
 80073cc:	a338      	add	r3, pc, #224	; (adr r3, 80074b0 <__kernel_cos+0x158>)
 80073ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d2:	f7f8 ff53 	bl	800027c <__adddf3>
 80073d6:	4622      	mov	r2, r4
 80073d8:	462b      	mov	r3, r5
 80073da:	f7f9 f905 	bl	80005e8 <__aeabi_dmul>
 80073de:	a336      	add	r3, pc, #216	; (adr r3, 80074b8 <__kernel_cos+0x160>)
 80073e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e4:	f7f8 ff48 	bl	8000278 <__aeabi_dsub>
 80073e8:	4622      	mov	r2, r4
 80073ea:	462b      	mov	r3, r5
 80073ec:	f7f9 f8fc 	bl	80005e8 <__aeabi_dmul>
 80073f0:	a333      	add	r3, pc, #204	; (adr r3, 80074c0 <__kernel_cos+0x168>)
 80073f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f6:	f7f8 ff41 	bl	800027c <__adddf3>
 80073fa:	4622      	mov	r2, r4
 80073fc:	462b      	mov	r3, r5
 80073fe:	f7f9 f8f3 	bl	80005e8 <__aeabi_dmul>
 8007402:	4622      	mov	r2, r4
 8007404:	462b      	mov	r3, r5
 8007406:	f7f9 f8ef 	bl	80005e8 <__aeabi_dmul>
 800740a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800740e:	4604      	mov	r4, r0
 8007410:	460d      	mov	r5, r1
 8007412:	4630      	mov	r0, r6
 8007414:	4639      	mov	r1, r7
 8007416:	f7f9 f8e7 	bl	80005e8 <__aeabi_dmul>
 800741a:	460b      	mov	r3, r1
 800741c:	4602      	mov	r2, r0
 800741e:	4629      	mov	r1, r5
 8007420:	4620      	mov	r0, r4
 8007422:	f7f8 ff29 	bl	8000278 <__aeabi_dsub>
 8007426:	4b2b      	ldr	r3, [pc, #172]	; (80074d4 <__kernel_cos+0x17c>)
 8007428:	4598      	cmp	r8, r3
 800742a:	4606      	mov	r6, r0
 800742c:	460f      	mov	r7, r1
 800742e:	dc10      	bgt.n	8007452 <__kernel_cos+0xfa>
 8007430:	4602      	mov	r2, r0
 8007432:	460b      	mov	r3, r1
 8007434:	4650      	mov	r0, sl
 8007436:	4659      	mov	r1, fp
 8007438:	f7f8 ff1e 	bl	8000278 <__aeabi_dsub>
 800743c:	460b      	mov	r3, r1
 800743e:	4926      	ldr	r1, [pc, #152]	; (80074d8 <__kernel_cos+0x180>)
 8007440:	4602      	mov	r2, r0
 8007442:	2000      	movs	r0, #0
 8007444:	f7f8 ff18 	bl	8000278 <__aeabi_dsub>
 8007448:	ec41 0b10 	vmov	d0, r0, r1
 800744c:	b003      	add	sp, #12
 800744e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007452:	4b22      	ldr	r3, [pc, #136]	; (80074dc <__kernel_cos+0x184>)
 8007454:	4920      	ldr	r1, [pc, #128]	; (80074d8 <__kernel_cos+0x180>)
 8007456:	4598      	cmp	r8, r3
 8007458:	bfcc      	ite	gt
 800745a:	4d21      	ldrgt	r5, [pc, #132]	; (80074e0 <__kernel_cos+0x188>)
 800745c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007460:	2400      	movs	r4, #0
 8007462:	4622      	mov	r2, r4
 8007464:	462b      	mov	r3, r5
 8007466:	2000      	movs	r0, #0
 8007468:	f7f8 ff06 	bl	8000278 <__aeabi_dsub>
 800746c:	4622      	mov	r2, r4
 800746e:	4680      	mov	r8, r0
 8007470:	4689      	mov	r9, r1
 8007472:	462b      	mov	r3, r5
 8007474:	4650      	mov	r0, sl
 8007476:	4659      	mov	r1, fp
 8007478:	f7f8 fefe 	bl	8000278 <__aeabi_dsub>
 800747c:	4632      	mov	r2, r6
 800747e:	463b      	mov	r3, r7
 8007480:	f7f8 fefa 	bl	8000278 <__aeabi_dsub>
 8007484:	4602      	mov	r2, r0
 8007486:	460b      	mov	r3, r1
 8007488:	4640      	mov	r0, r8
 800748a:	4649      	mov	r1, r9
 800748c:	e7da      	b.n	8007444 <__kernel_cos+0xec>
 800748e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80074c8 <__kernel_cos+0x170>
 8007492:	e7db      	b.n	800744c <__kernel_cos+0xf4>
 8007494:	f3af 8000 	nop.w
 8007498:	be8838d4 	.word	0xbe8838d4
 800749c:	bda8fae9 	.word	0xbda8fae9
 80074a0:	bdb4b1c4 	.word	0xbdb4b1c4
 80074a4:	3e21ee9e 	.word	0x3e21ee9e
 80074a8:	809c52ad 	.word	0x809c52ad
 80074ac:	3e927e4f 	.word	0x3e927e4f
 80074b0:	19cb1590 	.word	0x19cb1590
 80074b4:	3efa01a0 	.word	0x3efa01a0
 80074b8:	16c15177 	.word	0x16c15177
 80074bc:	3f56c16c 	.word	0x3f56c16c
 80074c0:	5555554c 	.word	0x5555554c
 80074c4:	3fa55555 	.word	0x3fa55555
 80074c8:	00000000 	.word	0x00000000
 80074cc:	3ff00000 	.word	0x3ff00000
 80074d0:	3fe00000 	.word	0x3fe00000
 80074d4:	3fd33332 	.word	0x3fd33332
 80074d8:	3ff00000 	.word	0x3ff00000
 80074dc:	3fe90000 	.word	0x3fe90000
 80074e0:	3fd20000 	.word	0x3fd20000
 80074e4:	00000000 	.word	0x00000000

080074e8 <__kernel_rem_pio2>:
 80074e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ec:	ed2d 8b02 	vpush	{d8}
 80074f0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80074f4:	f112 0f14 	cmn.w	r2, #20
 80074f8:	9308      	str	r3, [sp, #32]
 80074fa:	9101      	str	r1, [sp, #4]
 80074fc:	4bc4      	ldr	r3, [pc, #784]	; (8007810 <__kernel_rem_pio2+0x328>)
 80074fe:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8007500:	900b      	str	r0, [sp, #44]	; 0x2c
 8007502:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007506:	9302      	str	r3, [sp, #8]
 8007508:	9b08      	ldr	r3, [sp, #32]
 800750a:	f103 33ff 	add.w	r3, r3, #4294967295
 800750e:	bfa8      	it	ge
 8007510:	1ed4      	subge	r4, r2, #3
 8007512:	9306      	str	r3, [sp, #24]
 8007514:	bfb2      	itee	lt
 8007516:	2400      	movlt	r4, #0
 8007518:	2318      	movge	r3, #24
 800751a:	fb94 f4f3 	sdivge	r4, r4, r3
 800751e:	f06f 0317 	mvn.w	r3, #23
 8007522:	fb04 3303 	mla	r3, r4, r3, r3
 8007526:	eb03 0a02 	add.w	sl, r3, r2
 800752a:	9b02      	ldr	r3, [sp, #8]
 800752c:	9a06      	ldr	r2, [sp, #24]
 800752e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8007800 <__kernel_rem_pio2+0x318>
 8007532:	eb03 0802 	add.w	r8, r3, r2
 8007536:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007538:	1aa7      	subs	r7, r4, r2
 800753a:	ae22      	add	r6, sp, #136	; 0x88
 800753c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007540:	2500      	movs	r5, #0
 8007542:	4545      	cmp	r5, r8
 8007544:	dd13      	ble.n	800756e <__kernel_rem_pio2+0x86>
 8007546:	9b08      	ldr	r3, [sp, #32]
 8007548:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8007800 <__kernel_rem_pio2+0x318>
 800754c:	aa22      	add	r2, sp, #136	; 0x88
 800754e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007552:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8007556:	f04f 0800 	mov.w	r8, #0
 800755a:	9b02      	ldr	r3, [sp, #8]
 800755c:	4598      	cmp	r8, r3
 800755e:	dc2f      	bgt.n	80075c0 <__kernel_rem_pio2+0xd8>
 8007560:	ed8d 8b04 	vstr	d8, [sp, #16]
 8007564:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8007568:	462f      	mov	r7, r5
 800756a:	2600      	movs	r6, #0
 800756c:	e01b      	b.n	80075a6 <__kernel_rem_pio2+0xbe>
 800756e:	42ef      	cmn	r7, r5
 8007570:	d407      	bmi.n	8007582 <__kernel_rem_pio2+0x9a>
 8007572:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007576:	f7f8 ffcd 	bl	8000514 <__aeabi_i2d>
 800757a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800757e:	3501      	adds	r5, #1
 8007580:	e7df      	b.n	8007542 <__kernel_rem_pio2+0x5a>
 8007582:	ec51 0b18 	vmov	r0, r1, d8
 8007586:	e7f8      	b.n	800757a <__kernel_rem_pio2+0x92>
 8007588:	e9d7 2300 	ldrd	r2, r3, [r7]
 800758c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007590:	f7f9 f82a 	bl	80005e8 <__aeabi_dmul>
 8007594:	4602      	mov	r2, r0
 8007596:	460b      	mov	r3, r1
 8007598:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800759c:	f7f8 fe6e 	bl	800027c <__adddf3>
 80075a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075a4:	3601      	adds	r6, #1
 80075a6:	9b06      	ldr	r3, [sp, #24]
 80075a8:	429e      	cmp	r6, r3
 80075aa:	f1a7 0708 	sub.w	r7, r7, #8
 80075ae:	ddeb      	ble.n	8007588 <__kernel_rem_pio2+0xa0>
 80075b0:	ed9d 7b04 	vldr	d7, [sp, #16]
 80075b4:	f108 0801 	add.w	r8, r8, #1
 80075b8:	ecab 7b02 	vstmia	fp!, {d7}
 80075bc:	3508      	adds	r5, #8
 80075be:	e7cc      	b.n	800755a <__kernel_rem_pio2+0x72>
 80075c0:	9b02      	ldr	r3, [sp, #8]
 80075c2:	aa0e      	add	r2, sp, #56	; 0x38
 80075c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80075c8:	930d      	str	r3, [sp, #52]	; 0x34
 80075ca:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80075cc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80075d0:	9c02      	ldr	r4, [sp, #8]
 80075d2:	930c      	str	r3, [sp, #48]	; 0x30
 80075d4:	00e3      	lsls	r3, r4, #3
 80075d6:	930a      	str	r3, [sp, #40]	; 0x28
 80075d8:	ab9a      	add	r3, sp, #616	; 0x268
 80075da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80075de:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80075e2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80075e6:	ab72      	add	r3, sp, #456	; 0x1c8
 80075e8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80075ec:	46c3      	mov	fp, r8
 80075ee:	46a1      	mov	r9, r4
 80075f0:	f1b9 0f00 	cmp.w	r9, #0
 80075f4:	f1a5 0508 	sub.w	r5, r5, #8
 80075f8:	dc77      	bgt.n	80076ea <__kernel_rem_pio2+0x202>
 80075fa:	ec47 6b10 	vmov	d0, r6, r7
 80075fe:	4650      	mov	r0, sl
 8007600:	f000 fc0a 	bl	8007e18 <scalbn>
 8007604:	ec57 6b10 	vmov	r6, r7, d0
 8007608:	2200      	movs	r2, #0
 800760a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800760e:	ee10 0a10 	vmov	r0, s0
 8007612:	4639      	mov	r1, r7
 8007614:	f7f8 ffe8 	bl	80005e8 <__aeabi_dmul>
 8007618:	ec41 0b10 	vmov	d0, r0, r1
 800761c:	f000 fb7c 	bl	8007d18 <floor>
 8007620:	4b7c      	ldr	r3, [pc, #496]	; (8007814 <__kernel_rem_pio2+0x32c>)
 8007622:	ec51 0b10 	vmov	r0, r1, d0
 8007626:	2200      	movs	r2, #0
 8007628:	f7f8 ffde 	bl	80005e8 <__aeabi_dmul>
 800762c:	4602      	mov	r2, r0
 800762e:	460b      	mov	r3, r1
 8007630:	4630      	mov	r0, r6
 8007632:	4639      	mov	r1, r7
 8007634:	f7f8 fe20 	bl	8000278 <__aeabi_dsub>
 8007638:	460f      	mov	r7, r1
 800763a:	4606      	mov	r6, r0
 800763c:	f7f9 fa6e 	bl	8000b1c <__aeabi_d2iz>
 8007640:	9004      	str	r0, [sp, #16]
 8007642:	f7f8 ff67 	bl	8000514 <__aeabi_i2d>
 8007646:	4602      	mov	r2, r0
 8007648:	460b      	mov	r3, r1
 800764a:	4630      	mov	r0, r6
 800764c:	4639      	mov	r1, r7
 800764e:	f7f8 fe13 	bl	8000278 <__aeabi_dsub>
 8007652:	f1ba 0f00 	cmp.w	sl, #0
 8007656:	4606      	mov	r6, r0
 8007658:	460f      	mov	r7, r1
 800765a:	dd6d      	ble.n	8007738 <__kernel_rem_pio2+0x250>
 800765c:	1e62      	subs	r2, r4, #1
 800765e:	ab0e      	add	r3, sp, #56	; 0x38
 8007660:	9d04      	ldr	r5, [sp, #16]
 8007662:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007666:	f1ca 0118 	rsb	r1, sl, #24
 800766a:	fa40 f301 	asr.w	r3, r0, r1
 800766e:	441d      	add	r5, r3
 8007670:	408b      	lsls	r3, r1
 8007672:	1ac0      	subs	r0, r0, r3
 8007674:	ab0e      	add	r3, sp, #56	; 0x38
 8007676:	9504      	str	r5, [sp, #16]
 8007678:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800767c:	f1ca 0317 	rsb	r3, sl, #23
 8007680:	fa40 fb03 	asr.w	fp, r0, r3
 8007684:	f1bb 0f00 	cmp.w	fp, #0
 8007688:	dd65      	ble.n	8007756 <__kernel_rem_pio2+0x26e>
 800768a:	9b04      	ldr	r3, [sp, #16]
 800768c:	2200      	movs	r2, #0
 800768e:	3301      	adds	r3, #1
 8007690:	9304      	str	r3, [sp, #16]
 8007692:	4615      	mov	r5, r2
 8007694:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007698:	4294      	cmp	r4, r2
 800769a:	f300 809c 	bgt.w	80077d6 <__kernel_rem_pio2+0x2ee>
 800769e:	f1ba 0f00 	cmp.w	sl, #0
 80076a2:	dd07      	ble.n	80076b4 <__kernel_rem_pio2+0x1cc>
 80076a4:	f1ba 0f01 	cmp.w	sl, #1
 80076a8:	f000 80c0 	beq.w	800782c <__kernel_rem_pio2+0x344>
 80076ac:	f1ba 0f02 	cmp.w	sl, #2
 80076b0:	f000 80c6 	beq.w	8007840 <__kernel_rem_pio2+0x358>
 80076b4:	f1bb 0f02 	cmp.w	fp, #2
 80076b8:	d14d      	bne.n	8007756 <__kernel_rem_pio2+0x26e>
 80076ba:	4632      	mov	r2, r6
 80076bc:	463b      	mov	r3, r7
 80076be:	4956      	ldr	r1, [pc, #344]	; (8007818 <__kernel_rem_pio2+0x330>)
 80076c0:	2000      	movs	r0, #0
 80076c2:	f7f8 fdd9 	bl	8000278 <__aeabi_dsub>
 80076c6:	4606      	mov	r6, r0
 80076c8:	460f      	mov	r7, r1
 80076ca:	2d00      	cmp	r5, #0
 80076cc:	d043      	beq.n	8007756 <__kernel_rem_pio2+0x26e>
 80076ce:	4650      	mov	r0, sl
 80076d0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8007808 <__kernel_rem_pio2+0x320>
 80076d4:	f000 fba0 	bl	8007e18 <scalbn>
 80076d8:	4630      	mov	r0, r6
 80076da:	4639      	mov	r1, r7
 80076dc:	ec53 2b10 	vmov	r2, r3, d0
 80076e0:	f7f8 fdca 	bl	8000278 <__aeabi_dsub>
 80076e4:	4606      	mov	r6, r0
 80076e6:	460f      	mov	r7, r1
 80076e8:	e035      	b.n	8007756 <__kernel_rem_pio2+0x26e>
 80076ea:	4b4c      	ldr	r3, [pc, #304]	; (800781c <__kernel_rem_pio2+0x334>)
 80076ec:	2200      	movs	r2, #0
 80076ee:	4630      	mov	r0, r6
 80076f0:	4639      	mov	r1, r7
 80076f2:	f7f8 ff79 	bl	80005e8 <__aeabi_dmul>
 80076f6:	f7f9 fa11 	bl	8000b1c <__aeabi_d2iz>
 80076fa:	f7f8 ff0b 	bl	8000514 <__aeabi_i2d>
 80076fe:	4602      	mov	r2, r0
 8007700:	460b      	mov	r3, r1
 8007702:	ec43 2b18 	vmov	d8, r2, r3
 8007706:	4b46      	ldr	r3, [pc, #280]	; (8007820 <__kernel_rem_pio2+0x338>)
 8007708:	2200      	movs	r2, #0
 800770a:	f7f8 ff6d 	bl	80005e8 <__aeabi_dmul>
 800770e:	4602      	mov	r2, r0
 8007710:	460b      	mov	r3, r1
 8007712:	4630      	mov	r0, r6
 8007714:	4639      	mov	r1, r7
 8007716:	f7f8 fdaf 	bl	8000278 <__aeabi_dsub>
 800771a:	f7f9 f9ff 	bl	8000b1c <__aeabi_d2iz>
 800771e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007722:	f84b 0b04 	str.w	r0, [fp], #4
 8007726:	ec51 0b18 	vmov	r0, r1, d8
 800772a:	f7f8 fda7 	bl	800027c <__adddf3>
 800772e:	f109 39ff 	add.w	r9, r9, #4294967295
 8007732:	4606      	mov	r6, r0
 8007734:	460f      	mov	r7, r1
 8007736:	e75b      	b.n	80075f0 <__kernel_rem_pio2+0x108>
 8007738:	d106      	bne.n	8007748 <__kernel_rem_pio2+0x260>
 800773a:	1e63      	subs	r3, r4, #1
 800773c:	aa0e      	add	r2, sp, #56	; 0x38
 800773e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007742:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8007746:	e79d      	b.n	8007684 <__kernel_rem_pio2+0x19c>
 8007748:	4b36      	ldr	r3, [pc, #216]	; (8007824 <__kernel_rem_pio2+0x33c>)
 800774a:	2200      	movs	r2, #0
 800774c:	f7f9 f9d2 	bl	8000af4 <__aeabi_dcmpge>
 8007750:	2800      	cmp	r0, #0
 8007752:	d13d      	bne.n	80077d0 <__kernel_rem_pio2+0x2e8>
 8007754:	4683      	mov	fp, r0
 8007756:	2200      	movs	r2, #0
 8007758:	2300      	movs	r3, #0
 800775a:	4630      	mov	r0, r6
 800775c:	4639      	mov	r1, r7
 800775e:	f7f9 f9ab 	bl	8000ab8 <__aeabi_dcmpeq>
 8007762:	2800      	cmp	r0, #0
 8007764:	f000 80c0 	beq.w	80078e8 <__kernel_rem_pio2+0x400>
 8007768:	1e65      	subs	r5, r4, #1
 800776a:	462b      	mov	r3, r5
 800776c:	2200      	movs	r2, #0
 800776e:	9902      	ldr	r1, [sp, #8]
 8007770:	428b      	cmp	r3, r1
 8007772:	da6c      	bge.n	800784e <__kernel_rem_pio2+0x366>
 8007774:	2a00      	cmp	r2, #0
 8007776:	f000 8089 	beq.w	800788c <__kernel_rem_pio2+0x3a4>
 800777a:	ab0e      	add	r3, sp, #56	; 0x38
 800777c:	f1aa 0a18 	sub.w	sl, sl, #24
 8007780:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007784:	2b00      	cmp	r3, #0
 8007786:	f000 80ad 	beq.w	80078e4 <__kernel_rem_pio2+0x3fc>
 800778a:	4650      	mov	r0, sl
 800778c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8007808 <__kernel_rem_pio2+0x320>
 8007790:	f000 fb42 	bl	8007e18 <scalbn>
 8007794:	ab9a      	add	r3, sp, #616	; 0x268
 8007796:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800779a:	ec57 6b10 	vmov	r6, r7, d0
 800779e:	00ec      	lsls	r4, r5, #3
 80077a0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 80077a4:	46aa      	mov	sl, r5
 80077a6:	f1ba 0f00 	cmp.w	sl, #0
 80077aa:	f280 80d6 	bge.w	800795a <__kernel_rem_pio2+0x472>
 80077ae:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8007800 <__kernel_rem_pio2+0x318>
 80077b2:	462e      	mov	r6, r5
 80077b4:	2e00      	cmp	r6, #0
 80077b6:	f2c0 8104 	blt.w	80079c2 <__kernel_rem_pio2+0x4da>
 80077ba:	ab72      	add	r3, sp, #456	; 0x1c8
 80077bc:	ed8d 8b06 	vstr	d8, [sp, #24]
 80077c0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8007828 <__kernel_rem_pio2+0x340>
 80077c4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80077c8:	f04f 0800 	mov.w	r8, #0
 80077cc:	1baf      	subs	r7, r5, r6
 80077ce:	e0ea      	b.n	80079a6 <__kernel_rem_pio2+0x4be>
 80077d0:	f04f 0b02 	mov.w	fp, #2
 80077d4:	e759      	b.n	800768a <__kernel_rem_pio2+0x1a2>
 80077d6:	f8d8 3000 	ldr.w	r3, [r8]
 80077da:	b955      	cbnz	r5, 80077f2 <__kernel_rem_pio2+0x30a>
 80077dc:	b123      	cbz	r3, 80077e8 <__kernel_rem_pio2+0x300>
 80077de:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80077e2:	f8c8 3000 	str.w	r3, [r8]
 80077e6:	2301      	movs	r3, #1
 80077e8:	3201      	adds	r2, #1
 80077ea:	f108 0804 	add.w	r8, r8, #4
 80077ee:	461d      	mov	r5, r3
 80077f0:	e752      	b.n	8007698 <__kernel_rem_pio2+0x1b0>
 80077f2:	1acb      	subs	r3, r1, r3
 80077f4:	f8c8 3000 	str.w	r3, [r8]
 80077f8:	462b      	mov	r3, r5
 80077fa:	e7f5      	b.n	80077e8 <__kernel_rem_pio2+0x300>
 80077fc:	f3af 8000 	nop.w
	...
 800780c:	3ff00000 	.word	0x3ff00000
 8007810:	08008280 	.word	0x08008280
 8007814:	40200000 	.word	0x40200000
 8007818:	3ff00000 	.word	0x3ff00000
 800781c:	3e700000 	.word	0x3e700000
 8007820:	41700000 	.word	0x41700000
 8007824:	3fe00000 	.word	0x3fe00000
 8007828:	08008240 	.word	0x08008240
 800782c:	1e62      	subs	r2, r4, #1
 800782e:	ab0e      	add	r3, sp, #56	; 0x38
 8007830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007834:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007838:	a90e      	add	r1, sp, #56	; 0x38
 800783a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800783e:	e739      	b.n	80076b4 <__kernel_rem_pio2+0x1cc>
 8007840:	1e62      	subs	r2, r4, #1
 8007842:	ab0e      	add	r3, sp, #56	; 0x38
 8007844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007848:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800784c:	e7f4      	b.n	8007838 <__kernel_rem_pio2+0x350>
 800784e:	a90e      	add	r1, sp, #56	; 0x38
 8007850:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007854:	3b01      	subs	r3, #1
 8007856:	430a      	orrs	r2, r1
 8007858:	e789      	b.n	800776e <__kernel_rem_pio2+0x286>
 800785a:	3301      	adds	r3, #1
 800785c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007860:	2900      	cmp	r1, #0
 8007862:	d0fa      	beq.n	800785a <__kernel_rem_pio2+0x372>
 8007864:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007866:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800786a:	446a      	add	r2, sp
 800786c:	3a98      	subs	r2, #152	; 0x98
 800786e:	920a      	str	r2, [sp, #40]	; 0x28
 8007870:	9a08      	ldr	r2, [sp, #32]
 8007872:	18e3      	adds	r3, r4, r3
 8007874:	18a5      	adds	r5, r4, r2
 8007876:	aa22      	add	r2, sp, #136	; 0x88
 8007878:	f104 0801 	add.w	r8, r4, #1
 800787c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8007880:	9304      	str	r3, [sp, #16]
 8007882:	9b04      	ldr	r3, [sp, #16]
 8007884:	4543      	cmp	r3, r8
 8007886:	da04      	bge.n	8007892 <__kernel_rem_pio2+0x3aa>
 8007888:	461c      	mov	r4, r3
 800788a:	e6a3      	b.n	80075d4 <__kernel_rem_pio2+0xec>
 800788c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800788e:	2301      	movs	r3, #1
 8007890:	e7e4      	b.n	800785c <__kernel_rem_pio2+0x374>
 8007892:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007894:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007898:	f7f8 fe3c 	bl	8000514 <__aeabi_i2d>
 800789c:	e8e5 0102 	strd	r0, r1, [r5], #8
 80078a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078a2:	46ab      	mov	fp, r5
 80078a4:	461c      	mov	r4, r3
 80078a6:	f04f 0900 	mov.w	r9, #0
 80078aa:	2600      	movs	r6, #0
 80078ac:	2700      	movs	r7, #0
 80078ae:	9b06      	ldr	r3, [sp, #24]
 80078b0:	4599      	cmp	r9, r3
 80078b2:	dd06      	ble.n	80078c2 <__kernel_rem_pio2+0x3da>
 80078b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078b6:	e8e3 6702 	strd	r6, r7, [r3], #8
 80078ba:	f108 0801 	add.w	r8, r8, #1
 80078be:	930a      	str	r3, [sp, #40]	; 0x28
 80078c0:	e7df      	b.n	8007882 <__kernel_rem_pio2+0x39a>
 80078c2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80078c6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80078ca:	f7f8 fe8d 	bl	80005e8 <__aeabi_dmul>
 80078ce:	4602      	mov	r2, r0
 80078d0:	460b      	mov	r3, r1
 80078d2:	4630      	mov	r0, r6
 80078d4:	4639      	mov	r1, r7
 80078d6:	f7f8 fcd1 	bl	800027c <__adddf3>
 80078da:	f109 0901 	add.w	r9, r9, #1
 80078de:	4606      	mov	r6, r0
 80078e0:	460f      	mov	r7, r1
 80078e2:	e7e4      	b.n	80078ae <__kernel_rem_pio2+0x3c6>
 80078e4:	3d01      	subs	r5, #1
 80078e6:	e748      	b.n	800777a <__kernel_rem_pio2+0x292>
 80078e8:	ec47 6b10 	vmov	d0, r6, r7
 80078ec:	f1ca 0000 	rsb	r0, sl, #0
 80078f0:	f000 fa92 	bl	8007e18 <scalbn>
 80078f4:	ec57 6b10 	vmov	r6, r7, d0
 80078f8:	4ba0      	ldr	r3, [pc, #640]	; (8007b7c <__kernel_rem_pio2+0x694>)
 80078fa:	ee10 0a10 	vmov	r0, s0
 80078fe:	2200      	movs	r2, #0
 8007900:	4639      	mov	r1, r7
 8007902:	f7f9 f8f7 	bl	8000af4 <__aeabi_dcmpge>
 8007906:	b1f8      	cbz	r0, 8007948 <__kernel_rem_pio2+0x460>
 8007908:	4b9d      	ldr	r3, [pc, #628]	; (8007b80 <__kernel_rem_pio2+0x698>)
 800790a:	2200      	movs	r2, #0
 800790c:	4630      	mov	r0, r6
 800790e:	4639      	mov	r1, r7
 8007910:	f7f8 fe6a 	bl	80005e8 <__aeabi_dmul>
 8007914:	f7f9 f902 	bl	8000b1c <__aeabi_d2iz>
 8007918:	4680      	mov	r8, r0
 800791a:	f7f8 fdfb 	bl	8000514 <__aeabi_i2d>
 800791e:	4b97      	ldr	r3, [pc, #604]	; (8007b7c <__kernel_rem_pio2+0x694>)
 8007920:	2200      	movs	r2, #0
 8007922:	f7f8 fe61 	bl	80005e8 <__aeabi_dmul>
 8007926:	460b      	mov	r3, r1
 8007928:	4602      	mov	r2, r0
 800792a:	4639      	mov	r1, r7
 800792c:	4630      	mov	r0, r6
 800792e:	f7f8 fca3 	bl	8000278 <__aeabi_dsub>
 8007932:	f7f9 f8f3 	bl	8000b1c <__aeabi_d2iz>
 8007936:	1c65      	adds	r5, r4, #1
 8007938:	ab0e      	add	r3, sp, #56	; 0x38
 800793a:	f10a 0a18 	add.w	sl, sl, #24
 800793e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007942:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007946:	e720      	b.n	800778a <__kernel_rem_pio2+0x2a2>
 8007948:	4630      	mov	r0, r6
 800794a:	4639      	mov	r1, r7
 800794c:	f7f9 f8e6 	bl	8000b1c <__aeabi_d2iz>
 8007950:	ab0e      	add	r3, sp, #56	; 0x38
 8007952:	4625      	mov	r5, r4
 8007954:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007958:	e717      	b.n	800778a <__kernel_rem_pio2+0x2a2>
 800795a:	ab0e      	add	r3, sp, #56	; 0x38
 800795c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8007960:	f7f8 fdd8 	bl	8000514 <__aeabi_i2d>
 8007964:	4632      	mov	r2, r6
 8007966:	463b      	mov	r3, r7
 8007968:	f7f8 fe3e 	bl	80005e8 <__aeabi_dmul>
 800796c:	4b84      	ldr	r3, [pc, #528]	; (8007b80 <__kernel_rem_pio2+0x698>)
 800796e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8007972:	2200      	movs	r2, #0
 8007974:	4630      	mov	r0, r6
 8007976:	4639      	mov	r1, r7
 8007978:	f7f8 fe36 	bl	80005e8 <__aeabi_dmul>
 800797c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007980:	4606      	mov	r6, r0
 8007982:	460f      	mov	r7, r1
 8007984:	e70f      	b.n	80077a6 <__kernel_rem_pio2+0x2be>
 8007986:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800798a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800798e:	f7f8 fe2b 	bl	80005e8 <__aeabi_dmul>
 8007992:	4602      	mov	r2, r0
 8007994:	460b      	mov	r3, r1
 8007996:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800799a:	f7f8 fc6f 	bl	800027c <__adddf3>
 800799e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80079a2:	f108 0801 	add.w	r8, r8, #1
 80079a6:	9b02      	ldr	r3, [sp, #8]
 80079a8:	4598      	cmp	r8, r3
 80079aa:	dc01      	bgt.n	80079b0 <__kernel_rem_pio2+0x4c8>
 80079ac:	45b8      	cmp	r8, r7
 80079ae:	ddea      	ble.n	8007986 <__kernel_rem_pio2+0x49e>
 80079b0:	ed9d 7b06 	vldr	d7, [sp, #24]
 80079b4:	ab4a      	add	r3, sp, #296	; 0x128
 80079b6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80079ba:	ed87 7b00 	vstr	d7, [r7]
 80079be:	3e01      	subs	r6, #1
 80079c0:	e6f8      	b.n	80077b4 <__kernel_rem_pio2+0x2cc>
 80079c2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	dc0b      	bgt.n	80079e0 <__kernel_rem_pio2+0x4f8>
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	dc35      	bgt.n	8007a38 <__kernel_rem_pio2+0x550>
 80079cc:	d059      	beq.n	8007a82 <__kernel_rem_pio2+0x59a>
 80079ce:	9b04      	ldr	r3, [sp, #16]
 80079d0:	f003 0007 	and.w	r0, r3, #7
 80079d4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80079d8:	ecbd 8b02 	vpop	{d8}
 80079dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079e0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80079e2:	2b03      	cmp	r3, #3
 80079e4:	d1f3      	bne.n	80079ce <__kernel_rem_pio2+0x4e6>
 80079e6:	ab4a      	add	r3, sp, #296	; 0x128
 80079e8:	4423      	add	r3, r4
 80079ea:	9306      	str	r3, [sp, #24]
 80079ec:	461c      	mov	r4, r3
 80079ee:	469a      	mov	sl, r3
 80079f0:	9502      	str	r5, [sp, #8]
 80079f2:	9b02      	ldr	r3, [sp, #8]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	f1aa 0a08 	sub.w	sl, sl, #8
 80079fa:	dc6b      	bgt.n	8007ad4 <__kernel_rem_pio2+0x5ec>
 80079fc:	46aa      	mov	sl, r5
 80079fe:	f1ba 0f01 	cmp.w	sl, #1
 8007a02:	f1a4 0408 	sub.w	r4, r4, #8
 8007a06:	f300 8085 	bgt.w	8007b14 <__kernel_rem_pio2+0x62c>
 8007a0a:	9c06      	ldr	r4, [sp, #24]
 8007a0c:	2000      	movs	r0, #0
 8007a0e:	3408      	adds	r4, #8
 8007a10:	2100      	movs	r1, #0
 8007a12:	2d01      	cmp	r5, #1
 8007a14:	f300 809d 	bgt.w	8007b52 <__kernel_rem_pio2+0x66a>
 8007a18:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8007a1c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8007a20:	f1bb 0f00 	cmp.w	fp, #0
 8007a24:	f040 809b 	bne.w	8007b5e <__kernel_rem_pio2+0x676>
 8007a28:	9b01      	ldr	r3, [sp, #4]
 8007a2a:	e9c3 5600 	strd	r5, r6, [r3]
 8007a2e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007a32:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007a36:	e7ca      	b.n	80079ce <__kernel_rem_pio2+0x4e6>
 8007a38:	3408      	adds	r4, #8
 8007a3a:	ab4a      	add	r3, sp, #296	; 0x128
 8007a3c:	441c      	add	r4, r3
 8007a3e:	462e      	mov	r6, r5
 8007a40:	2000      	movs	r0, #0
 8007a42:	2100      	movs	r1, #0
 8007a44:	2e00      	cmp	r6, #0
 8007a46:	da36      	bge.n	8007ab6 <__kernel_rem_pio2+0x5ce>
 8007a48:	f1bb 0f00 	cmp.w	fp, #0
 8007a4c:	d039      	beq.n	8007ac2 <__kernel_rem_pio2+0x5da>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a54:	9c01      	ldr	r4, [sp, #4]
 8007a56:	e9c4 2300 	strd	r2, r3, [r4]
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8007a62:	f7f8 fc09 	bl	8000278 <__aeabi_dsub>
 8007a66:	ae4c      	add	r6, sp, #304	; 0x130
 8007a68:	2401      	movs	r4, #1
 8007a6a:	42a5      	cmp	r5, r4
 8007a6c:	da2c      	bge.n	8007ac8 <__kernel_rem_pio2+0x5e0>
 8007a6e:	f1bb 0f00 	cmp.w	fp, #0
 8007a72:	d002      	beq.n	8007a7a <__kernel_rem_pio2+0x592>
 8007a74:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a78:	4619      	mov	r1, r3
 8007a7a:	9b01      	ldr	r3, [sp, #4]
 8007a7c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007a80:	e7a5      	b.n	80079ce <__kernel_rem_pio2+0x4e6>
 8007a82:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8007a86:	eb0d 0403 	add.w	r4, sp, r3
 8007a8a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007a8e:	2000      	movs	r0, #0
 8007a90:	2100      	movs	r1, #0
 8007a92:	2d00      	cmp	r5, #0
 8007a94:	da09      	bge.n	8007aaa <__kernel_rem_pio2+0x5c2>
 8007a96:	f1bb 0f00 	cmp.w	fp, #0
 8007a9a:	d002      	beq.n	8007aa2 <__kernel_rem_pio2+0x5ba>
 8007a9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	9b01      	ldr	r3, [sp, #4]
 8007aa4:	e9c3 0100 	strd	r0, r1, [r3]
 8007aa8:	e791      	b.n	80079ce <__kernel_rem_pio2+0x4e6>
 8007aaa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007aae:	f7f8 fbe5 	bl	800027c <__adddf3>
 8007ab2:	3d01      	subs	r5, #1
 8007ab4:	e7ed      	b.n	8007a92 <__kernel_rem_pio2+0x5aa>
 8007ab6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007aba:	f7f8 fbdf 	bl	800027c <__adddf3>
 8007abe:	3e01      	subs	r6, #1
 8007ac0:	e7c0      	b.n	8007a44 <__kernel_rem_pio2+0x55c>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	e7c5      	b.n	8007a54 <__kernel_rem_pio2+0x56c>
 8007ac8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007acc:	f7f8 fbd6 	bl	800027c <__adddf3>
 8007ad0:	3401      	adds	r4, #1
 8007ad2:	e7ca      	b.n	8007a6a <__kernel_rem_pio2+0x582>
 8007ad4:	e9da 8900 	ldrd	r8, r9, [sl]
 8007ad8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007adc:	9b02      	ldr	r3, [sp, #8]
 8007ade:	3b01      	subs	r3, #1
 8007ae0:	9302      	str	r3, [sp, #8]
 8007ae2:	4632      	mov	r2, r6
 8007ae4:	463b      	mov	r3, r7
 8007ae6:	4640      	mov	r0, r8
 8007ae8:	4649      	mov	r1, r9
 8007aea:	f7f8 fbc7 	bl	800027c <__adddf3>
 8007aee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007af2:	4602      	mov	r2, r0
 8007af4:	460b      	mov	r3, r1
 8007af6:	4640      	mov	r0, r8
 8007af8:	4649      	mov	r1, r9
 8007afa:	f7f8 fbbd 	bl	8000278 <__aeabi_dsub>
 8007afe:	4632      	mov	r2, r6
 8007b00:	463b      	mov	r3, r7
 8007b02:	f7f8 fbbb 	bl	800027c <__adddf3>
 8007b06:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007b0a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007b0e:	ed8a 7b00 	vstr	d7, [sl]
 8007b12:	e76e      	b.n	80079f2 <__kernel_rem_pio2+0x50a>
 8007b14:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007b18:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8007b1c:	4640      	mov	r0, r8
 8007b1e:	4632      	mov	r2, r6
 8007b20:	463b      	mov	r3, r7
 8007b22:	4649      	mov	r1, r9
 8007b24:	f7f8 fbaa 	bl	800027c <__adddf3>
 8007b28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	460b      	mov	r3, r1
 8007b30:	4640      	mov	r0, r8
 8007b32:	4649      	mov	r1, r9
 8007b34:	f7f8 fba0 	bl	8000278 <__aeabi_dsub>
 8007b38:	4632      	mov	r2, r6
 8007b3a:	463b      	mov	r3, r7
 8007b3c:	f7f8 fb9e 	bl	800027c <__adddf3>
 8007b40:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b44:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007b48:	ed84 7b00 	vstr	d7, [r4]
 8007b4c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b50:	e755      	b.n	80079fe <__kernel_rem_pio2+0x516>
 8007b52:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007b56:	f7f8 fb91 	bl	800027c <__adddf3>
 8007b5a:	3d01      	subs	r5, #1
 8007b5c:	e759      	b.n	8007a12 <__kernel_rem_pio2+0x52a>
 8007b5e:	9b01      	ldr	r3, [sp, #4]
 8007b60:	9a01      	ldr	r2, [sp, #4]
 8007b62:	601d      	str	r5, [r3, #0]
 8007b64:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8007b68:	605c      	str	r4, [r3, #4]
 8007b6a:	609f      	str	r7, [r3, #8]
 8007b6c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8007b70:	60d3      	str	r3, [r2, #12]
 8007b72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b76:	6110      	str	r0, [r2, #16]
 8007b78:	6153      	str	r3, [r2, #20]
 8007b7a:	e728      	b.n	80079ce <__kernel_rem_pio2+0x4e6>
 8007b7c:	41700000 	.word	0x41700000
 8007b80:	3e700000 	.word	0x3e700000
 8007b84:	00000000 	.word	0x00000000

08007b88 <__kernel_sin>:
 8007b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b8c:	ed2d 8b04 	vpush	{d8-d9}
 8007b90:	eeb0 8a41 	vmov.f32	s16, s2
 8007b94:	eef0 8a61 	vmov.f32	s17, s3
 8007b98:	ec55 4b10 	vmov	r4, r5, d0
 8007b9c:	b083      	sub	sp, #12
 8007b9e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007ba2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007ba6:	9001      	str	r0, [sp, #4]
 8007ba8:	da06      	bge.n	8007bb8 <__kernel_sin+0x30>
 8007baa:	ee10 0a10 	vmov	r0, s0
 8007bae:	4629      	mov	r1, r5
 8007bb0:	f7f8 ffb4 	bl	8000b1c <__aeabi_d2iz>
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	d051      	beq.n	8007c5c <__kernel_sin+0xd4>
 8007bb8:	4622      	mov	r2, r4
 8007bba:	462b      	mov	r3, r5
 8007bbc:	4620      	mov	r0, r4
 8007bbe:	4629      	mov	r1, r5
 8007bc0:	f7f8 fd12 	bl	80005e8 <__aeabi_dmul>
 8007bc4:	4682      	mov	sl, r0
 8007bc6:	468b      	mov	fp, r1
 8007bc8:	4602      	mov	r2, r0
 8007bca:	460b      	mov	r3, r1
 8007bcc:	4620      	mov	r0, r4
 8007bce:	4629      	mov	r1, r5
 8007bd0:	f7f8 fd0a 	bl	80005e8 <__aeabi_dmul>
 8007bd4:	a341      	add	r3, pc, #260	; (adr r3, 8007cdc <__kernel_sin+0x154>)
 8007bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bda:	4680      	mov	r8, r0
 8007bdc:	4689      	mov	r9, r1
 8007bde:	4650      	mov	r0, sl
 8007be0:	4659      	mov	r1, fp
 8007be2:	f7f8 fd01 	bl	80005e8 <__aeabi_dmul>
 8007be6:	a33f      	add	r3, pc, #252	; (adr r3, 8007ce4 <__kernel_sin+0x15c>)
 8007be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bec:	f7f8 fb44 	bl	8000278 <__aeabi_dsub>
 8007bf0:	4652      	mov	r2, sl
 8007bf2:	465b      	mov	r3, fp
 8007bf4:	f7f8 fcf8 	bl	80005e8 <__aeabi_dmul>
 8007bf8:	a33c      	add	r3, pc, #240	; (adr r3, 8007cec <__kernel_sin+0x164>)
 8007bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfe:	f7f8 fb3d 	bl	800027c <__adddf3>
 8007c02:	4652      	mov	r2, sl
 8007c04:	465b      	mov	r3, fp
 8007c06:	f7f8 fcef 	bl	80005e8 <__aeabi_dmul>
 8007c0a:	a33a      	add	r3, pc, #232	; (adr r3, 8007cf4 <__kernel_sin+0x16c>)
 8007c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c10:	f7f8 fb32 	bl	8000278 <__aeabi_dsub>
 8007c14:	4652      	mov	r2, sl
 8007c16:	465b      	mov	r3, fp
 8007c18:	f7f8 fce6 	bl	80005e8 <__aeabi_dmul>
 8007c1c:	a337      	add	r3, pc, #220	; (adr r3, 8007cfc <__kernel_sin+0x174>)
 8007c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c22:	f7f8 fb2b 	bl	800027c <__adddf3>
 8007c26:	9b01      	ldr	r3, [sp, #4]
 8007c28:	4606      	mov	r6, r0
 8007c2a:	460f      	mov	r7, r1
 8007c2c:	b9eb      	cbnz	r3, 8007c6a <__kernel_sin+0xe2>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	460b      	mov	r3, r1
 8007c32:	4650      	mov	r0, sl
 8007c34:	4659      	mov	r1, fp
 8007c36:	f7f8 fcd7 	bl	80005e8 <__aeabi_dmul>
 8007c3a:	a325      	add	r3, pc, #148	; (adr r3, 8007cd0 <__kernel_sin+0x148>)
 8007c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c40:	f7f8 fb1a 	bl	8000278 <__aeabi_dsub>
 8007c44:	4642      	mov	r2, r8
 8007c46:	464b      	mov	r3, r9
 8007c48:	f7f8 fcce 	bl	80005e8 <__aeabi_dmul>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	460b      	mov	r3, r1
 8007c50:	4620      	mov	r0, r4
 8007c52:	4629      	mov	r1, r5
 8007c54:	f7f8 fb12 	bl	800027c <__adddf3>
 8007c58:	4604      	mov	r4, r0
 8007c5a:	460d      	mov	r5, r1
 8007c5c:	ec45 4b10 	vmov	d0, r4, r5
 8007c60:	b003      	add	sp, #12
 8007c62:	ecbd 8b04 	vpop	{d8-d9}
 8007c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c6a:	4b1b      	ldr	r3, [pc, #108]	; (8007cd8 <__kernel_sin+0x150>)
 8007c6c:	ec51 0b18 	vmov	r0, r1, d8
 8007c70:	2200      	movs	r2, #0
 8007c72:	f7f8 fcb9 	bl	80005e8 <__aeabi_dmul>
 8007c76:	4632      	mov	r2, r6
 8007c78:	ec41 0b19 	vmov	d9, r0, r1
 8007c7c:	463b      	mov	r3, r7
 8007c7e:	4640      	mov	r0, r8
 8007c80:	4649      	mov	r1, r9
 8007c82:	f7f8 fcb1 	bl	80005e8 <__aeabi_dmul>
 8007c86:	4602      	mov	r2, r0
 8007c88:	460b      	mov	r3, r1
 8007c8a:	ec51 0b19 	vmov	r0, r1, d9
 8007c8e:	f7f8 faf3 	bl	8000278 <__aeabi_dsub>
 8007c92:	4652      	mov	r2, sl
 8007c94:	465b      	mov	r3, fp
 8007c96:	f7f8 fca7 	bl	80005e8 <__aeabi_dmul>
 8007c9a:	ec53 2b18 	vmov	r2, r3, d8
 8007c9e:	f7f8 faeb 	bl	8000278 <__aeabi_dsub>
 8007ca2:	a30b      	add	r3, pc, #44	; (adr r3, 8007cd0 <__kernel_sin+0x148>)
 8007ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca8:	4606      	mov	r6, r0
 8007caa:	460f      	mov	r7, r1
 8007cac:	4640      	mov	r0, r8
 8007cae:	4649      	mov	r1, r9
 8007cb0:	f7f8 fc9a 	bl	80005e8 <__aeabi_dmul>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	460b      	mov	r3, r1
 8007cb8:	4630      	mov	r0, r6
 8007cba:	4639      	mov	r1, r7
 8007cbc:	f7f8 fade 	bl	800027c <__adddf3>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	4620      	mov	r0, r4
 8007cc6:	4629      	mov	r1, r5
 8007cc8:	f7f8 fad6 	bl	8000278 <__aeabi_dsub>
 8007ccc:	e7c4      	b.n	8007c58 <__kernel_sin+0xd0>
 8007cce:	bf00      	nop
 8007cd0:	55555549 	.word	0x55555549
 8007cd4:	3fc55555 	.word	0x3fc55555
 8007cd8:	3fe00000 	.word	0x3fe00000
 8007cdc:	5acfd57c 	.word	0x5acfd57c
 8007ce0:	3de5d93a 	.word	0x3de5d93a
 8007ce4:	8a2b9ceb 	.word	0x8a2b9ceb
 8007ce8:	3e5ae5e6 	.word	0x3e5ae5e6
 8007cec:	57b1fe7d 	.word	0x57b1fe7d
 8007cf0:	3ec71de3 	.word	0x3ec71de3
 8007cf4:	19c161d5 	.word	0x19c161d5
 8007cf8:	3f2a01a0 	.word	0x3f2a01a0
 8007cfc:	1110f8a6 	.word	0x1110f8a6
 8007d00:	3f811111 	.word	0x3f811111

08007d04 <fabs>:
 8007d04:	ec51 0b10 	vmov	r0, r1, d0
 8007d08:	ee10 2a10 	vmov	r2, s0
 8007d0c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007d10:	ec43 2b10 	vmov	d0, r2, r3
 8007d14:	4770      	bx	lr
	...

08007d18 <floor>:
 8007d18:	ec51 0b10 	vmov	r0, r1, d0
 8007d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d20:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007d24:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007d28:	2e13      	cmp	r6, #19
 8007d2a:	ee10 5a10 	vmov	r5, s0
 8007d2e:	ee10 8a10 	vmov	r8, s0
 8007d32:	460c      	mov	r4, r1
 8007d34:	dc32      	bgt.n	8007d9c <floor+0x84>
 8007d36:	2e00      	cmp	r6, #0
 8007d38:	da14      	bge.n	8007d64 <floor+0x4c>
 8007d3a:	a333      	add	r3, pc, #204	; (adr r3, 8007e08 <floor+0xf0>)
 8007d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d40:	f7f8 fa9c 	bl	800027c <__adddf3>
 8007d44:	2200      	movs	r2, #0
 8007d46:	2300      	movs	r3, #0
 8007d48:	f7f8 fede 	bl	8000b08 <__aeabi_dcmpgt>
 8007d4c:	b138      	cbz	r0, 8007d5e <floor+0x46>
 8007d4e:	2c00      	cmp	r4, #0
 8007d50:	da57      	bge.n	8007e02 <floor+0xea>
 8007d52:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007d56:	431d      	orrs	r5, r3
 8007d58:	d001      	beq.n	8007d5e <floor+0x46>
 8007d5a:	4c2d      	ldr	r4, [pc, #180]	; (8007e10 <floor+0xf8>)
 8007d5c:	2500      	movs	r5, #0
 8007d5e:	4621      	mov	r1, r4
 8007d60:	4628      	mov	r0, r5
 8007d62:	e025      	b.n	8007db0 <floor+0x98>
 8007d64:	4f2b      	ldr	r7, [pc, #172]	; (8007e14 <floor+0xfc>)
 8007d66:	4137      	asrs	r7, r6
 8007d68:	ea01 0307 	and.w	r3, r1, r7
 8007d6c:	4303      	orrs	r3, r0
 8007d6e:	d01f      	beq.n	8007db0 <floor+0x98>
 8007d70:	a325      	add	r3, pc, #148	; (adr r3, 8007e08 <floor+0xf0>)
 8007d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d76:	f7f8 fa81 	bl	800027c <__adddf3>
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	f7f8 fec3 	bl	8000b08 <__aeabi_dcmpgt>
 8007d82:	2800      	cmp	r0, #0
 8007d84:	d0eb      	beq.n	8007d5e <floor+0x46>
 8007d86:	2c00      	cmp	r4, #0
 8007d88:	bfbe      	ittt	lt
 8007d8a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007d8e:	fa43 f606 	asrlt.w	r6, r3, r6
 8007d92:	19a4      	addlt	r4, r4, r6
 8007d94:	ea24 0407 	bic.w	r4, r4, r7
 8007d98:	2500      	movs	r5, #0
 8007d9a:	e7e0      	b.n	8007d5e <floor+0x46>
 8007d9c:	2e33      	cmp	r6, #51	; 0x33
 8007d9e:	dd0b      	ble.n	8007db8 <floor+0xa0>
 8007da0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007da4:	d104      	bne.n	8007db0 <floor+0x98>
 8007da6:	ee10 2a10 	vmov	r2, s0
 8007daa:	460b      	mov	r3, r1
 8007dac:	f7f8 fa66 	bl	800027c <__adddf3>
 8007db0:	ec41 0b10 	vmov	d0, r0, r1
 8007db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007db8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8007dc0:	fa23 f707 	lsr.w	r7, r3, r7
 8007dc4:	4207      	tst	r7, r0
 8007dc6:	d0f3      	beq.n	8007db0 <floor+0x98>
 8007dc8:	a30f      	add	r3, pc, #60	; (adr r3, 8007e08 <floor+0xf0>)
 8007dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dce:	f7f8 fa55 	bl	800027c <__adddf3>
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	f7f8 fe97 	bl	8000b08 <__aeabi_dcmpgt>
 8007dda:	2800      	cmp	r0, #0
 8007ddc:	d0bf      	beq.n	8007d5e <floor+0x46>
 8007dde:	2c00      	cmp	r4, #0
 8007de0:	da02      	bge.n	8007de8 <floor+0xd0>
 8007de2:	2e14      	cmp	r6, #20
 8007de4:	d103      	bne.n	8007dee <floor+0xd6>
 8007de6:	3401      	adds	r4, #1
 8007de8:	ea25 0507 	bic.w	r5, r5, r7
 8007dec:	e7b7      	b.n	8007d5e <floor+0x46>
 8007dee:	2301      	movs	r3, #1
 8007df0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007df4:	fa03 f606 	lsl.w	r6, r3, r6
 8007df8:	4435      	add	r5, r6
 8007dfa:	4545      	cmp	r5, r8
 8007dfc:	bf38      	it	cc
 8007dfe:	18e4      	addcc	r4, r4, r3
 8007e00:	e7f2      	b.n	8007de8 <floor+0xd0>
 8007e02:	2500      	movs	r5, #0
 8007e04:	462c      	mov	r4, r5
 8007e06:	e7aa      	b.n	8007d5e <floor+0x46>
 8007e08:	8800759c 	.word	0x8800759c
 8007e0c:	7e37e43c 	.word	0x7e37e43c
 8007e10:	bff00000 	.word	0xbff00000
 8007e14:	000fffff 	.word	0x000fffff

08007e18 <scalbn>:
 8007e18:	b570      	push	{r4, r5, r6, lr}
 8007e1a:	ec55 4b10 	vmov	r4, r5, d0
 8007e1e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007e22:	4606      	mov	r6, r0
 8007e24:	462b      	mov	r3, r5
 8007e26:	b99a      	cbnz	r2, 8007e50 <scalbn+0x38>
 8007e28:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007e2c:	4323      	orrs	r3, r4
 8007e2e:	d036      	beq.n	8007e9e <scalbn+0x86>
 8007e30:	4b39      	ldr	r3, [pc, #228]	; (8007f18 <scalbn+0x100>)
 8007e32:	4629      	mov	r1, r5
 8007e34:	ee10 0a10 	vmov	r0, s0
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f7f8 fbd5 	bl	80005e8 <__aeabi_dmul>
 8007e3e:	4b37      	ldr	r3, [pc, #220]	; (8007f1c <scalbn+0x104>)
 8007e40:	429e      	cmp	r6, r3
 8007e42:	4604      	mov	r4, r0
 8007e44:	460d      	mov	r5, r1
 8007e46:	da10      	bge.n	8007e6a <scalbn+0x52>
 8007e48:	a32b      	add	r3, pc, #172	; (adr r3, 8007ef8 <scalbn+0xe0>)
 8007e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4e:	e03a      	b.n	8007ec6 <scalbn+0xae>
 8007e50:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007e54:	428a      	cmp	r2, r1
 8007e56:	d10c      	bne.n	8007e72 <scalbn+0x5a>
 8007e58:	ee10 2a10 	vmov	r2, s0
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	4629      	mov	r1, r5
 8007e60:	f7f8 fa0c 	bl	800027c <__adddf3>
 8007e64:	4604      	mov	r4, r0
 8007e66:	460d      	mov	r5, r1
 8007e68:	e019      	b.n	8007e9e <scalbn+0x86>
 8007e6a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007e6e:	460b      	mov	r3, r1
 8007e70:	3a36      	subs	r2, #54	; 0x36
 8007e72:	4432      	add	r2, r6
 8007e74:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007e78:	428a      	cmp	r2, r1
 8007e7a:	dd08      	ble.n	8007e8e <scalbn+0x76>
 8007e7c:	2d00      	cmp	r5, #0
 8007e7e:	a120      	add	r1, pc, #128	; (adr r1, 8007f00 <scalbn+0xe8>)
 8007e80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e84:	da1c      	bge.n	8007ec0 <scalbn+0xa8>
 8007e86:	a120      	add	r1, pc, #128	; (adr r1, 8007f08 <scalbn+0xf0>)
 8007e88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e8c:	e018      	b.n	8007ec0 <scalbn+0xa8>
 8007e8e:	2a00      	cmp	r2, #0
 8007e90:	dd08      	ble.n	8007ea4 <scalbn+0x8c>
 8007e92:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007e96:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007e9a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007e9e:	ec45 4b10 	vmov	d0, r4, r5
 8007ea2:	bd70      	pop	{r4, r5, r6, pc}
 8007ea4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007ea8:	da19      	bge.n	8007ede <scalbn+0xc6>
 8007eaa:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007eae:	429e      	cmp	r6, r3
 8007eb0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007eb4:	dd0a      	ble.n	8007ecc <scalbn+0xb4>
 8007eb6:	a112      	add	r1, pc, #72	; (adr r1, 8007f00 <scalbn+0xe8>)
 8007eb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d1e2      	bne.n	8007e86 <scalbn+0x6e>
 8007ec0:	a30f      	add	r3, pc, #60	; (adr r3, 8007f00 <scalbn+0xe8>)
 8007ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec6:	f7f8 fb8f 	bl	80005e8 <__aeabi_dmul>
 8007eca:	e7cb      	b.n	8007e64 <scalbn+0x4c>
 8007ecc:	a10a      	add	r1, pc, #40	; (adr r1, 8007ef8 <scalbn+0xe0>)
 8007ece:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d0b8      	beq.n	8007e48 <scalbn+0x30>
 8007ed6:	a10e      	add	r1, pc, #56	; (adr r1, 8007f10 <scalbn+0xf8>)
 8007ed8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007edc:	e7b4      	b.n	8007e48 <scalbn+0x30>
 8007ede:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007ee2:	3236      	adds	r2, #54	; 0x36
 8007ee4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007ee8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007eec:	4620      	mov	r0, r4
 8007eee:	4b0c      	ldr	r3, [pc, #48]	; (8007f20 <scalbn+0x108>)
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	e7e8      	b.n	8007ec6 <scalbn+0xae>
 8007ef4:	f3af 8000 	nop.w
 8007ef8:	c2f8f359 	.word	0xc2f8f359
 8007efc:	01a56e1f 	.word	0x01a56e1f
 8007f00:	8800759c 	.word	0x8800759c
 8007f04:	7e37e43c 	.word	0x7e37e43c
 8007f08:	8800759c 	.word	0x8800759c
 8007f0c:	fe37e43c 	.word	0xfe37e43c
 8007f10:	c2f8f359 	.word	0xc2f8f359
 8007f14:	81a56e1f 	.word	0x81a56e1f
 8007f18:	43500000 	.word	0x43500000
 8007f1c:	ffff3cb0 	.word	0xffff3cb0
 8007f20:	3c900000 	.word	0x3c900000

08007f24 <_gettimeofday>:
 8007f24:	4b02      	ldr	r3, [pc, #8]	; (8007f30 <_gettimeofday+0xc>)
 8007f26:	2258      	movs	r2, #88	; 0x58
 8007f28:	601a      	str	r2, [r3, #0]
 8007f2a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f2e:	4770      	bx	lr
 8007f30:	200008dc 	.word	0x200008dc

08007f34 <_init>:
 8007f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f36:	bf00      	nop
 8007f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f3a:	bc08      	pop	{r3}
 8007f3c:	469e      	mov	lr, r3
 8007f3e:	4770      	bx	lr

08007f40 <_fini>:
 8007f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f42:	bf00      	nop
 8007f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f46:	bc08      	pop	{r3}
 8007f48:	469e      	mov	lr, r3
 8007f4a:	4770      	bx	lr
