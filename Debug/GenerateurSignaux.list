
GenerateurSignaux.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006074  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08006200  08006200  00016200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063f8  080063f8  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080063f8  080063f8  000163f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006400  08006400  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006400  08006400  00016400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006404  08006404  00016404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08006408  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          000007fc  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000810  20000810  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f753  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020d3  00000000  00000000  0002f797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000de8  00000000  00000000  00031870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d10  00000000  00000000  00032658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020ae4  00000000  00000000  00033368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f747  00000000  00000000  00053e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbf78  00000000  00000000  00063593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012f50b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e2c  00000000  00000000  0012f55c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080061e4 	.word	0x080061e4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	080061e4 	.word	0x080061e4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295
 8000b18:	f000 b974 	b.w	8000e04 <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9d08      	ldr	r5, [sp, #32]
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	468e      	mov	lr, r1
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d14d      	bne.n	8000bde <__udivmoddi4+0xaa>
 8000b42:	428a      	cmp	r2, r1
 8000b44:	4694      	mov	ip, r2
 8000b46:	d969      	bls.n	8000c1c <__udivmoddi4+0xe8>
 8000b48:	fab2 f282 	clz	r2, r2
 8000b4c:	b152      	cbz	r2, 8000b64 <__udivmoddi4+0x30>
 8000b4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b52:	f1c2 0120 	rsb	r1, r2, #32
 8000b56:	fa20 f101 	lsr.w	r1, r0, r1
 8000b5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000b62:	4094      	lsls	r4, r2
 8000b64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b68:	0c21      	lsrs	r1, r4, #16
 8000b6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000b6e:	fa1f f78c 	uxth.w	r7, ip
 8000b72:	fb08 e316 	mls	r3, r8, r6, lr
 8000b76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b7a:	fb06 f107 	mul.w	r1, r6, r7
 8000b7e:	4299      	cmp	r1, r3
 8000b80:	d90a      	bls.n	8000b98 <__udivmoddi4+0x64>
 8000b82:	eb1c 0303 	adds.w	r3, ip, r3
 8000b86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b8a:	f080 811f 	bcs.w	8000dcc <__udivmoddi4+0x298>
 8000b8e:	4299      	cmp	r1, r3
 8000b90:	f240 811c 	bls.w	8000dcc <__udivmoddi4+0x298>
 8000b94:	3e02      	subs	r6, #2
 8000b96:	4463      	add	r3, ip
 8000b98:	1a5b      	subs	r3, r3, r1
 8000b9a:	b2a4      	uxth	r4, r4
 8000b9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ba0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba8:	fb00 f707 	mul.w	r7, r0, r7
 8000bac:	42a7      	cmp	r7, r4
 8000bae:	d90a      	bls.n	8000bc6 <__udivmoddi4+0x92>
 8000bb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb8:	f080 810a 	bcs.w	8000dd0 <__udivmoddi4+0x29c>
 8000bbc:	42a7      	cmp	r7, r4
 8000bbe:	f240 8107 	bls.w	8000dd0 <__udivmoddi4+0x29c>
 8000bc2:	4464      	add	r4, ip
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bca:	1be4      	subs	r4, r4, r7
 8000bcc:	2600      	movs	r6, #0
 8000bce:	b11d      	cbz	r5, 8000bd8 <__udivmoddi4+0xa4>
 8000bd0:	40d4      	lsrs	r4, r2
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000bd8:	4631      	mov	r1, r6
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d909      	bls.n	8000bf6 <__udivmoddi4+0xc2>
 8000be2:	2d00      	cmp	r5, #0
 8000be4:	f000 80ef 	beq.w	8000dc6 <__udivmoddi4+0x292>
 8000be8:	2600      	movs	r6, #0
 8000bea:	e9c5 0100 	strd	r0, r1, [r5]
 8000bee:	4630      	mov	r0, r6
 8000bf0:	4631      	mov	r1, r6
 8000bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf6:	fab3 f683 	clz	r6, r3
 8000bfa:	2e00      	cmp	r6, #0
 8000bfc:	d14a      	bne.n	8000c94 <__udivmoddi4+0x160>
 8000bfe:	428b      	cmp	r3, r1
 8000c00:	d302      	bcc.n	8000c08 <__udivmoddi4+0xd4>
 8000c02:	4282      	cmp	r2, r0
 8000c04:	f200 80f9 	bhi.w	8000dfa <__udivmoddi4+0x2c6>
 8000c08:	1a84      	subs	r4, r0, r2
 8000c0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c0e:	2001      	movs	r0, #1
 8000c10:	469e      	mov	lr, r3
 8000c12:	2d00      	cmp	r5, #0
 8000c14:	d0e0      	beq.n	8000bd8 <__udivmoddi4+0xa4>
 8000c16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c1a:	e7dd      	b.n	8000bd8 <__udivmoddi4+0xa4>
 8000c1c:	b902      	cbnz	r2, 8000c20 <__udivmoddi4+0xec>
 8000c1e:	deff      	udf	#255	; 0xff
 8000c20:	fab2 f282 	clz	r2, r2
 8000c24:	2a00      	cmp	r2, #0
 8000c26:	f040 8092 	bne.w	8000d4e <__udivmoddi4+0x21a>
 8000c2a:	eba1 010c 	sub.w	r1, r1, ip
 8000c2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c32:	fa1f fe8c 	uxth.w	lr, ip
 8000c36:	2601      	movs	r6, #1
 8000c38:	0c20      	lsrs	r0, r4, #16
 8000c3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000c42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c46:	fb0e f003 	mul.w	r0, lr, r3
 8000c4a:	4288      	cmp	r0, r1
 8000c4c:	d908      	bls.n	8000c60 <__udivmoddi4+0x12c>
 8000c4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000c52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x12a>
 8000c58:	4288      	cmp	r0, r1
 8000c5a:	f200 80cb 	bhi.w	8000df4 <__udivmoddi4+0x2c0>
 8000c5e:	4643      	mov	r3, r8
 8000c60:	1a09      	subs	r1, r1, r0
 8000c62:	b2a4      	uxth	r4, r4
 8000c64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c68:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c70:	fb0e fe00 	mul.w	lr, lr, r0
 8000c74:	45a6      	cmp	lr, r4
 8000c76:	d908      	bls.n	8000c8a <__udivmoddi4+0x156>
 8000c78:	eb1c 0404 	adds.w	r4, ip, r4
 8000c7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c80:	d202      	bcs.n	8000c88 <__udivmoddi4+0x154>
 8000c82:	45a6      	cmp	lr, r4
 8000c84:	f200 80bb 	bhi.w	8000dfe <__udivmoddi4+0x2ca>
 8000c88:	4608      	mov	r0, r1
 8000c8a:	eba4 040e 	sub.w	r4, r4, lr
 8000c8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c92:	e79c      	b.n	8000bce <__udivmoddi4+0x9a>
 8000c94:	f1c6 0720 	rsb	r7, r6, #32
 8000c98:	40b3      	lsls	r3, r6
 8000c9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ca2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ca6:	fa01 f306 	lsl.w	r3, r1, r6
 8000caa:	431c      	orrs	r4, r3
 8000cac:	40f9      	lsrs	r1, r7
 8000cae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000cb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cba:	0c20      	lsrs	r0, r4, #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fb09 1118 	mls	r1, r9, r8, r1
 8000cc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cc8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ccc:	4288      	cmp	r0, r1
 8000cce:	fa02 f206 	lsl.w	r2, r2, r6
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b8>
 8000cd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cdc:	f080 8088 	bcs.w	8000df0 <__udivmoddi4+0x2bc>
 8000ce0:	4288      	cmp	r0, r1
 8000ce2:	f240 8085 	bls.w	8000df0 <__udivmoddi4+0x2bc>
 8000ce6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cea:	4461      	add	r1, ip
 8000cec:	1a09      	subs	r1, r1, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cf4:	fb09 1110 	mls	r1, r9, r0, r1
 8000cf8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cfc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d00:	458e      	cmp	lr, r1
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1e2>
 8000d04:	eb1c 0101 	adds.w	r1, ip, r1
 8000d08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d0c:	d26c      	bcs.n	8000de8 <__udivmoddi4+0x2b4>
 8000d0e:	458e      	cmp	lr, r1
 8000d10:	d96a      	bls.n	8000de8 <__udivmoddi4+0x2b4>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4461      	add	r1, ip
 8000d16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d1e:	eba1 010e 	sub.w	r1, r1, lr
 8000d22:	42a1      	cmp	r1, r4
 8000d24:	46c8      	mov	r8, r9
 8000d26:	46a6      	mov	lr, r4
 8000d28:	d356      	bcc.n	8000dd8 <__udivmoddi4+0x2a4>
 8000d2a:	d053      	beq.n	8000dd4 <__udivmoddi4+0x2a0>
 8000d2c:	b15d      	cbz	r5, 8000d46 <__udivmoddi4+0x212>
 8000d2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000d32:	eb61 010e 	sbc.w	r1, r1, lr
 8000d36:	fa01 f707 	lsl.w	r7, r1, r7
 8000d3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000d3e:	40f1      	lsrs	r1, r6
 8000d40:	431f      	orrs	r7, r3
 8000d42:	e9c5 7100 	strd	r7, r1, [r5]
 8000d46:	2600      	movs	r6, #0
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	40d8      	lsrs	r0, r3
 8000d54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d58:	fa21 f303 	lsr.w	r3, r1, r3
 8000d5c:	4091      	lsls	r1, r2
 8000d5e:	4301      	orrs	r1, r0
 8000d60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d64:	fa1f fe8c 	uxth.w	lr, ip
 8000d68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000d70:	0c0b      	lsrs	r3, r1, #16
 8000d72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d76:	fb00 f60e 	mul.w	r6, r0, lr
 8000d7a:	429e      	cmp	r6, r3
 8000d7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x260>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d8a:	d22f      	bcs.n	8000dec <__udivmoddi4+0x2b8>
 8000d8c:	429e      	cmp	r6, r3
 8000d8e:	d92d      	bls.n	8000dec <__udivmoddi4+0x2b8>
 8000d90:	3802      	subs	r0, #2
 8000d92:	4463      	add	r3, ip
 8000d94:	1b9b      	subs	r3, r3, r6
 8000d96:	b289      	uxth	r1, r1
 8000d98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb06 f30e 	mul.w	r3, r6, lr
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x28a>
 8000dac:	eb1c 0101 	adds.w	r1, ip, r1
 8000db0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000db4:	d216      	bcs.n	8000de4 <__udivmoddi4+0x2b0>
 8000db6:	428b      	cmp	r3, r1
 8000db8:	d914      	bls.n	8000de4 <__udivmoddi4+0x2b0>
 8000dba:	3e02      	subs	r6, #2
 8000dbc:	4461      	add	r1, ip
 8000dbe:	1ac9      	subs	r1, r1, r3
 8000dc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dc4:	e738      	b.n	8000c38 <__udivmoddi4+0x104>
 8000dc6:	462e      	mov	r6, r5
 8000dc8:	4628      	mov	r0, r5
 8000dca:	e705      	b.n	8000bd8 <__udivmoddi4+0xa4>
 8000dcc:	4606      	mov	r6, r0
 8000dce:	e6e3      	b.n	8000b98 <__udivmoddi4+0x64>
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	e6f8      	b.n	8000bc6 <__udivmoddi4+0x92>
 8000dd4:	454b      	cmp	r3, r9
 8000dd6:	d2a9      	bcs.n	8000d2c <__udivmoddi4+0x1f8>
 8000dd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ddc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000de0:	3801      	subs	r0, #1
 8000de2:	e7a3      	b.n	8000d2c <__udivmoddi4+0x1f8>
 8000de4:	4646      	mov	r6, r8
 8000de6:	e7ea      	b.n	8000dbe <__udivmoddi4+0x28a>
 8000de8:	4620      	mov	r0, r4
 8000dea:	e794      	b.n	8000d16 <__udivmoddi4+0x1e2>
 8000dec:	4640      	mov	r0, r8
 8000dee:	e7d1      	b.n	8000d94 <__udivmoddi4+0x260>
 8000df0:	46d0      	mov	r8, sl
 8000df2:	e77b      	b.n	8000cec <__udivmoddi4+0x1b8>
 8000df4:	3b02      	subs	r3, #2
 8000df6:	4461      	add	r1, ip
 8000df8:	e732      	b.n	8000c60 <__udivmoddi4+0x12c>
 8000dfa:	4630      	mov	r0, r6
 8000dfc:	e709      	b.n	8000c12 <__udivmoddi4+0xde>
 8000dfe:	4464      	add	r4, ip
 8000e00:	3802      	subs	r0, #2
 8000e02:	e742      	b.n	8000c8a <__udivmoddi4+0x156>

08000e04 <__aeabi_idiv0>:
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop

08000e08 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT (&huart2, Rx_data, PACKET_SIZE);
 8000e10:	2204      	movs	r2, #4
 8000e12:	4904      	ldr	r1, [pc, #16]	; (8000e24 <HAL_UART_RxCpltCallback+0x1c>)
 8000e14:	4804      	ldr	r0, [pc, #16]	; (8000e28 <HAL_UART_RxCpltCallback+0x20>)
 8000e16:	f003 fa2c 	bl	8004272 <HAL_UART_Receive_IT>
}
 8000e1a:	bf00      	nop
 8000e1c:	3708      	adds	r7, #8
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	200001c0 	.word	0x200001c0
 8000e28:	2000017c 	.word	0x2000017c

08000e2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e30:	f000 fe6e 	bl	8001b10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e34:	f000 f830 	bl	8000e98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e38:	f000 fa02 	bl	8001240 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e3c:	f000 f9e0 	bl	8001200 <MX_DMA_Init>
  MX_DAC_Init();
 8000e40:	f000 f892 	bl	8000f68 <MX_DAC_Init>
  MX_USART2_UART_Init();
 8000e44:	f000 f9b2 	bl	80011ac <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000e48:	f000 f8b8 	bl	8000fbc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e4c:	f000 f90a 	bl	8001064 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e50:	f000 f95e 	bl	8001110 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  //Activate DAC
  //HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, (uint32_t*)sine_val, N_SAMPLES, DAC_ALIGN_12B_R);

  //Activate timer for signal generator (pitch)
  HAL_TIM_Base_Start(&htim2);
 8000e54:	480b      	ldr	r0, [pc, #44]	; (8000e84 <main+0x58>)
 8000e56:	f002 fcc5 	bl	80037e4 <HAL_TIM_Base_Start>

  //Activate timer for stimulation frequency
  HAL_TIM_Base_Start_IT(&htim3);
 8000e5a:	480b      	ldr	r0, [pc, #44]	; (8000e88 <main+0x5c>)
 8000e5c:	f002 fd52 	bl	8003904 <HAL_TIM_Base_Start_IT>

  //Calculate waveforms
  init_waves(255);
 8000e60:	20ff      	movs	r0, #255	; 0xff
 8000e62:	f000 fcc5 	bl	80017f0 <init_waves>

  //Activate UART RX
  HAL_UART_Receive_IT (&huart2, Rx_data, PACKET_SIZE);
 8000e66:	2204      	movs	r2, #4
 8000e68:	4908      	ldr	r1, [pc, #32]	; (8000e8c <main+0x60>)
 8000e6a:	4809      	ldr	r0, [pc, #36]	; (8000e90 <main+0x64>)
 8000e6c:	f003 fa01 	bl	8004272 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(1000);
 8000e70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e74:	f000 febe 	bl	8001bf4 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000e78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e7c:	4805      	ldr	r0, [pc, #20]	; (8000e94 <main+0x68>)
 8000e7e:	f001 ffee 	bl	8002e5e <HAL_GPIO_TogglePin>
    HAL_Delay(1000);
 8000e82:	e7f5      	b.n	8000e70 <main+0x44>
 8000e84:	200000a4 	.word	0x200000a4
 8000e88:	200000ec 	.word	0x200000ec
 8000e8c:	200001c0 	.word	0x200001c0
 8000e90:	2000017c 	.word	0x2000017c
 8000e94:	40020c00 	.word	0x40020c00

08000e98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b094      	sub	sp, #80	; 0x50
 8000e9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e9e:	f107 0320 	add.w	r3, r7, #32
 8000ea2:	2230      	movs	r2, #48	; 0x30
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f004 f94a 	bl	8005140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eac:	f107 030c 	add.w	r3, r7, #12
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	4b27      	ldr	r3, [pc, #156]	; (8000f60 <SystemClock_Config+0xc8>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	4a26      	ldr	r2, [pc, #152]	; (8000f60 <SystemClock_Config+0xc8>)
 8000ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eca:	6413      	str	r3, [r2, #64]	; 0x40
 8000ecc:	4b24      	ldr	r3, [pc, #144]	; (8000f60 <SystemClock_Config+0xc8>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ed8:	2300      	movs	r3, #0
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	4b21      	ldr	r3, [pc, #132]	; (8000f64 <SystemClock_Config+0xcc>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a20      	ldr	r2, [pc, #128]	; (8000f64 <SystemClock_Config+0xcc>)
 8000ee2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee6:	6013      	str	r3, [r2, #0]
 8000ee8:	4b1e      	ldr	r3, [pc, #120]	; (8000f64 <SystemClock_Config+0xcc>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000efc:	2310      	movs	r3, #16
 8000efe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f00:	2302      	movs	r3, #2
 8000f02:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f04:	2300      	movs	r3, #0
 8000f06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f08:	2308      	movs	r3, #8
 8000f0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000f0c:	2354      	movs	r3, #84	; 0x54
 8000f0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f10:	2302      	movs	r3, #2
 8000f12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f14:	2304      	movs	r3, #4
 8000f16:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f18:	f107 0320 	add.w	r3, r7, #32
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f001 ffb9 	bl	8002e94 <HAL_RCC_OscConfig>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f28:	f000 f9dc 	bl	80012e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f2c:	230f      	movs	r3, #15
 8000f2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f30:	2302      	movs	r3, #2
 8000f32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f42:	f107 030c 	add.w	r3, r7, #12
 8000f46:	2102      	movs	r1, #2
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f002 fa1b 	bl	8003384 <HAL_RCC_ClockConfig>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f54:	f000 f9c6 	bl	80012e4 <Error_Handler>
  }
}
 8000f58:	bf00      	nop
 8000f5a:	3750      	adds	r7, #80	; 0x50
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40007000 	.word	0x40007000

08000f68 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f6e:	463b      	mov	r3, r7
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000f76:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <MX_DAC_Init+0x4c>)
 8000f78:	4a0f      	ldr	r2, [pc, #60]	; (8000fb8 <MX_DAC_Init+0x50>)
 8000f7a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000f7c:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <MX_DAC_Init+0x4c>)
 8000f7e:	f000 ff6e 	bl	8001e5e <HAL_DAC_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000f88:	f000 f9ac 	bl	80012e4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000f8c:	2324      	movs	r3, #36	; 0x24
 8000f8e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f94:	463b      	mov	r3, r7
 8000f96:	2200      	movs	r2, #0
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4806      	ldr	r0, [pc, #24]	; (8000fb4 <MX_DAC_Init+0x4c>)
 8000f9c:	f001 f8b6 	bl	800210c <HAL_DAC_ConfigChannel>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000fa6:	f000 f99d 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000030 	.word	0x20000030
 8000fb8:	40007400 	.word	0x40007400

08000fbc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b086      	sub	sp, #24
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fc2:	f107 0308 	add.w	r3, r7, #8
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fd8:	4b1f      	ldr	r3, [pc, #124]	; (8001058 <MX_TIM2_Init+0x9c>)
 8000fda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fde:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = (42000000/N_SAMPLES) / frequence;
 8000fe0:	4b1e      	ldr	r3, [pc, #120]	; (800105c <MX_TIM2_Init+0xa0>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a1e      	ldr	r2, [pc, #120]	; (8001060 <MX_TIM2_Init+0xa4>)
 8000fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fea:	4a1b      	ldr	r2, [pc, #108]	; (8001058 <MX_TIM2_Init+0x9c>)
 8000fec:	6053      	str	r3, [r2, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fee:	4b1a      	ldr	r3, [pc, #104]	; (8001058 <MX_TIM2_Init+0x9c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8000ff4:	4b18      	ldr	r3, [pc, #96]	; (8001058 <MX_TIM2_Init+0x9c>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ffa:	4b17      	ldr	r3, [pc, #92]	; (8001058 <MX_TIM2_Init+0x9c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001000:	4b15      	ldr	r3, [pc, #84]	; (8001058 <MX_TIM2_Init+0x9c>)
 8001002:	2200      	movs	r2, #0
 8001004:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001006:	4814      	ldr	r0, [pc, #80]	; (8001058 <MX_TIM2_Init+0x9c>)
 8001008:	f002 fb9c 	bl	8003744 <HAL_TIM_Base_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001012:	f000 f967 	bl	80012e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800101a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800101c:	f107 0308 	add.w	r3, r7, #8
 8001020:	4619      	mov	r1, r3
 8001022:	480d      	ldr	r0, [pc, #52]	; (8001058 <MX_TIM2_Init+0x9c>)
 8001024:	f002 fe15 	bl	8003c52 <HAL_TIM_ConfigClockSource>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800102e:	f000 f959 	bl	80012e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001032:	2320      	movs	r3, #32
 8001034:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001036:	2300      	movs	r3, #0
 8001038:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800103a:	463b      	mov	r3, r7
 800103c:	4619      	mov	r1, r3
 800103e:	4806      	ldr	r0, [pc, #24]	; (8001058 <MX_TIM2_Init+0x9c>)
 8001040:	f003 f83a 	bl	80040b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800104a:	f000 f94b 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200000a4 	.word	0x200000a4
 800105c:	20000004 	.word	0x20000004
 8001060:	000668a0 	.word	0x000668a0

08001064 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800106a:	f107 0308 	add.w	r3, r7, #8
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001078:	463b      	mov	r3, r7
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001080:	4b20      	ldr	r3, [pc, #128]	; (8001104 <MX_TIM3_Init+0xa0>)
 8001082:	4a21      	ldr	r2, [pc, #132]	; (8001108 <MX_TIM3_Init+0xa4>)
 8001084:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10500/stim_freq;
 8001086:	4b21      	ldr	r3, [pc, #132]	; (800110c <MX_TIM3_Init+0xa8>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	f642 1304 	movw	r3, #10500	; 0x2904
 8001090:	fb93 f3f2 	sdiv	r3, r3, r2
 8001094:	461a      	mov	r2, r3
 8001096:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <MX_TIM3_Init+0xa0>)
 8001098:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800109a:	4b1a      	ldr	r3, [pc, #104]	; (8001104 <MX_TIM3_Init+0xa0>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4000-1;
 80010a0:	4b18      	ldr	r3, [pc, #96]	; (8001104 <MX_TIM3_Init+0xa0>)
 80010a2:	f640 729f 	movw	r2, #3999	; 0xf9f
 80010a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a8:	4b16      	ldr	r3, [pc, #88]	; (8001104 <MX_TIM3_Init+0xa0>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ae:	4b15      	ldr	r3, [pc, #84]	; (8001104 <MX_TIM3_Init+0xa0>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010b4:	4813      	ldr	r0, [pc, #76]	; (8001104 <MX_TIM3_Init+0xa0>)
 80010b6:	f002 fb45 	bl	8003744 <HAL_TIM_Base_Init>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 80010c0:	f000 f910 	bl	80012e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010ca:	f107 0308 	add.w	r3, r7, #8
 80010ce:	4619      	mov	r1, r3
 80010d0:	480c      	ldr	r0, [pc, #48]	; (8001104 <MX_TIM3_Init+0xa0>)
 80010d2:	f002 fdbe 	bl	8003c52 <HAL_TIM_ConfigClockSource>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80010dc:	f000 f902 	bl	80012e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010e0:	2300      	movs	r3, #0
 80010e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010e8:	463b      	mov	r3, r7
 80010ea:	4619      	mov	r1, r3
 80010ec:	4805      	ldr	r0, [pc, #20]	; (8001104 <MX_TIM3_Init+0xa0>)
 80010ee:	f002 ffe3 	bl	80040b8 <HAL_TIMEx_MasterConfigSynchronization>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80010f8:	f000 f8f4 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80010fc:	bf00      	nop
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	200000ec 	.word	0x200000ec
 8001108:	40000400 	.word	0x40000400
 800110c:	20000000 	.word	0x20000000

08001110 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001116:	f107 0308 	add.w	r3, r7, #8
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
 8001120:	609a      	str	r2, [r3, #8]
 8001122:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001124:	463b      	mov	r3, r7
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
 800112a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800112c:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <MX_TIM4_Init+0x94>)
 800112e:	4a1e      	ldr	r2, [pc, #120]	; (80011a8 <MX_TIM4_Init+0x98>)
 8001130:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001132:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <MX_TIM4_Init+0x94>)
 8001134:	2200      	movs	r2, #0
 8001136:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001138:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <MX_TIM4_Init+0x94>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800113e:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <MX_TIM4_Init+0x94>)
 8001140:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001144:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001146:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <MX_TIM4_Init+0x94>)
 8001148:	2200      	movs	r2, #0
 800114a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800114c:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <MX_TIM4_Init+0x94>)
 800114e:	2200      	movs	r2, #0
 8001150:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001152:	4814      	ldr	r0, [pc, #80]	; (80011a4 <MX_TIM4_Init+0x94>)
 8001154:	f002 faf6 	bl	8003744 <HAL_TIM_Base_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800115e:	f000 f8c1 	bl	80012e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001162:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001166:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001168:	f107 0308 	add.w	r3, r7, #8
 800116c:	4619      	mov	r1, r3
 800116e:	480d      	ldr	r0, [pc, #52]	; (80011a4 <MX_TIM4_Init+0x94>)
 8001170:	f002 fd6f 	bl	8003c52 <HAL_TIM_ConfigClockSource>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800117a:	f000 f8b3 	bl	80012e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117e:	2300      	movs	r3, #0
 8001180:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001186:	463b      	mov	r3, r7
 8001188:	4619      	mov	r1, r3
 800118a:	4806      	ldr	r0, [pc, #24]	; (80011a4 <MX_TIM4_Init+0x94>)
 800118c:	f002 ff94 	bl	80040b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001196:	f000 f8a5 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	20000134 	.word	0x20000134
 80011a8:	40000800 	.word	0x40000800

080011ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <MX_USART2_UART_Init+0x4c>)
 80011b2:	4a12      	ldr	r2, [pc, #72]	; (80011fc <MX_USART2_UART_Init+0x50>)
 80011b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011b6:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <MX_USART2_UART_Init+0x4c>)
 80011b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <MX_USART2_UART_Init+0x4c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011c4:	4b0c      	ldr	r3, [pc, #48]	; (80011f8 <MX_USART2_UART_Init+0x4c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <MX_USART2_UART_Init+0x4c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011d0:	4b09      	ldr	r3, [pc, #36]	; (80011f8 <MX_USART2_UART_Init+0x4c>)
 80011d2:	220c      	movs	r2, #12
 80011d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <MX_USART2_UART_Init+0x4c>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <MX_USART2_UART_Init+0x4c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011e2:	4805      	ldr	r0, [pc, #20]	; (80011f8 <MX_USART2_UART_Init+0x4c>)
 80011e4:	f002 fff8 	bl	80041d8 <HAL_UART_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011ee:	f000 f879 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011f2:	bf00      	nop
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	2000017c 	.word	0x2000017c
 80011fc:	40004400 	.word	0x40004400

08001200 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	607b      	str	r3, [r7, #4]
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <MX_DMA_Init+0x3c>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a0b      	ldr	r2, [pc, #44]	; (800123c <MX_DMA_Init+0x3c>)
 8001210:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b09      	ldr	r3, [pc, #36]	; (800123c <MX_DMA_Init+0x3c>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800121e:	607b      	str	r3, [r7, #4]
 8001220:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2100      	movs	r1, #0
 8001226:	2010      	movs	r0, #16
 8001228:	f000 fde3 	bl	8001df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800122c:	2010      	movs	r0, #16
 800122e:	f000 fdfc 	bl	8001e2a <HAL_NVIC_EnableIRQ>

}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800

08001240 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b088      	sub	sp, #32
 8001244:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	609a      	str	r2, [r3, #8]
 8001252:	60da      	str	r2, [r3, #12]
 8001254:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	4b20      	ldr	r3, [pc, #128]	; (80012dc <MX_GPIO_Init+0x9c>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a1f      	ldr	r2, [pc, #124]	; (80012dc <MX_GPIO_Init+0x9c>)
 8001260:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <MX_GPIO_Init+0x9c>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	4b19      	ldr	r3, [pc, #100]	; (80012dc <MX_GPIO_Init+0x9c>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a18      	ldr	r2, [pc, #96]	; (80012dc <MX_GPIO_Init+0x9c>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b16      	ldr	r3, [pc, #88]	; (80012dc <MX_GPIO_Init+0x9c>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	607b      	str	r3, [r7, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	603b      	str	r3, [r7, #0]
 8001292:	4b12      	ldr	r3, [pc, #72]	; (80012dc <MX_GPIO_Init+0x9c>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a11      	ldr	r2, [pc, #68]	; (80012dc <MX_GPIO_Init+0x9c>)
 8001298:	f043 0308 	orr.w	r3, r3, #8
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <MX_GPIO_Init+0x9c>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	603b      	str	r3, [r7, #0]
 80012a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_ROUGE_Pin|LED_BLEU_Pin, GPIO_PIN_RESET);
 80012aa:	2200      	movs	r2, #0
 80012ac:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80012b0:	480b      	ldr	r0, [pc, #44]	; (80012e0 <MX_GPIO_Init+0xa0>)
 80012b2:	f001 fdbb 	bl	8002e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_ROUGE_Pin LED_BLEU_Pin */
  GPIO_InitStruct.Pin = LED_ROUGE_Pin|LED_BLEU_Pin;
 80012b6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80012ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012bc:	2301      	movs	r3, #1
 80012be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	4619      	mov	r1, r3
 80012ce:	4804      	ldr	r0, [pc, #16]	; (80012e0 <MX_GPIO_Init+0xa0>)
 80012d0:	f001 fbf8 	bl	8002ac4 <HAL_GPIO_Init>

}
 80012d4:	bf00      	nop
 80012d6:	3720      	adds	r7, #32
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40020c00 	.word	0x40020c00

080012e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e8:	b672      	cpsid	i
}
 80012ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ec:	e7fe      	b.n	80012ec <Error_Handler+0x8>
	...

080012f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
 80012fa:	4b13      	ldr	r3, [pc, #76]	; (8001348 <HAL_MspInit+0x58>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fe:	4a12      	ldr	r2, [pc, #72]	; (8001348 <HAL_MspInit+0x58>)
 8001300:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001304:	6453      	str	r3, [r2, #68]	; 0x44
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <HAL_MspInit+0x58>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	603b      	str	r3, [r7, #0]
 8001316:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <HAL_MspInit+0x58>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	4a0b      	ldr	r2, [pc, #44]	; (8001348 <HAL_MspInit+0x58>)
 800131c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001320:	6413      	str	r3, [r2, #64]	; 0x40
 8001322:	4b09      	ldr	r3, [pc, #36]	; (8001348 <HAL_MspInit+0x58>)
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132a:	603b      	str	r3, [r7, #0]
 800132c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800132e:	2200      	movs	r2, #0
 8001330:	2100      	movs	r1, #0
 8001332:	2005      	movs	r0, #5
 8001334:	f000 fd5d 	bl	8001df2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001338:	2005      	movs	r0, #5
 800133a:	f000 fd76 	bl	8001e2a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800

0800134c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	; 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a34      	ldr	r2, [pc, #208]	; (800143c <HAL_DAC_MspInit+0xf0>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d161      	bne.n	8001432 <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	4b33      	ldr	r3, [pc, #204]	; (8001440 <HAL_DAC_MspInit+0xf4>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	4a32      	ldr	r2, [pc, #200]	; (8001440 <HAL_DAC_MspInit+0xf4>)
 8001378:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800137c:	6413      	str	r3, [r2, #64]	; 0x40
 800137e:	4b30      	ldr	r3, [pc, #192]	; (8001440 <HAL_DAC_MspInit+0xf4>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b2c      	ldr	r3, [pc, #176]	; (8001440 <HAL_DAC_MspInit+0xf4>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a2b      	ldr	r2, [pc, #172]	; (8001440 <HAL_DAC_MspInit+0xf4>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b29      	ldr	r3, [pc, #164]	; (8001440 <HAL_DAC_MspInit+0xf4>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013a6:	2310      	movs	r3, #16
 80013a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013aa:	2303      	movs	r3, #3
 80013ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	4619      	mov	r1, r3
 80013b8:	4822      	ldr	r0, [pc, #136]	; (8001444 <HAL_DAC_MspInit+0xf8>)
 80013ba:	f001 fb83 	bl	8002ac4 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80013be:	4b22      	ldr	r3, [pc, #136]	; (8001448 <HAL_DAC_MspInit+0xfc>)
 80013c0:	4a22      	ldr	r2, [pc, #136]	; (800144c <HAL_DAC_MspInit+0x100>)
 80013c2:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80013c4:	4b20      	ldr	r3, [pc, #128]	; (8001448 <HAL_DAC_MspInit+0xfc>)
 80013c6:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80013ca:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013cc:	4b1e      	ldr	r3, [pc, #120]	; (8001448 <HAL_DAC_MspInit+0xfc>)
 80013ce:	2240      	movs	r2, #64	; 0x40
 80013d0:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013d2:	4b1d      	ldr	r3, [pc, #116]	; (8001448 <HAL_DAC_MspInit+0xfc>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80013d8:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <HAL_DAC_MspInit+0xfc>)
 80013da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013de:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013e0:	4b19      	ldr	r3, [pc, #100]	; (8001448 <HAL_DAC_MspInit+0xfc>)
 80013e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013e6:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013e8:	4b17      	ldr	r3, [pc, #92]	; (8001448 <HAL_DAC_MspInit+0xfc>)
 80013ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ee:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80013f0:	4b15      	ldr	r3, [pc, #84]	; (8001448 <HAL_DAC_MspInit+0xfc>)
 80013f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013f6:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 80013f8:	4b13      	ldr	r3, [pc, #76]	; (8001448 <HAL_DAC_MspInit+0xfc>)
 80013fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013fe:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001400:	4b11      	ldr	r3, [pc, #68]	; (8001448 <HAL_DAC_MspInit+0xfc>)
 8001402:	2200      	movs	r2, #0
 8001404:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001406:	4810      	ldr	r0, [pc, #64]	; (8001448 <HAL_DAC_MspInit+0xfc>)
 8001408:	f000 ff5a 	bl	80022c0 <HAL_DMA_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001412:	f7ff ff67 	bl	80012e4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a0b      	ldr	r2, [pc, #44]	; (8001448 <HAL_DAC_MspInit+0xfc>)
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	4a0a      	ldr	r2, [pc, #40]	; (8001448 <HAL_DAC_MspInit+0xfc>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001422:	2200      	movs	r2, #0
 8001424:	2100      	movs	r1, #0
 8001426:	2036      	movs	r0, #54	; 0x36
 8001428:	f000 fce3 	bl	8001df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800142c:	2036      	movs	r0, #54	; 0x36
 800142e:	f000 fcfc 	bl	8001e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001432:	bf00      	nop
 8001434:	3728      	adds	r7, #40	; 0x28
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40007400 	.word	0x40007400
 8001440:	40023800 	.word	0x40023800
 8001444:	40020000 	.word	0x40020000
 8001448:	20000044 	.word	0x20000044
 800144c:	40026088 	.word	0x40026088

08001450 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001460:	d116      	bne.n	8001490 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	4b28      	ldr	r3, [pc, #160]	; (8001508 <HAL_TIM_Base_MspInit+0xb8>)
 8001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146a:	4a27      	ldr	r2, [pc, #156]	; (8001508 <HAL_TIM_Base_MspInit+0xb8>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6413      	str	r3, [r2, #64]	; 0x40
 8001472:	4b25      	ldr	r3, [pc, #148]	; (8001508 <HAL_TIM_Base_MspInit+0xb8>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800147e:	2200      	movs	r2, #0
 8001480:	2100      	movs	r1, #0
 8001482:	201c      	movs	r0, #28
 8001484:	f000 fcb5 	bl	8001df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001488:	201c      	movs	r0, #28
 800148a:	f000 fcce 	bl	8001e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800148e:	e036      	b.n	80014fe <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a1d      	ldr	r2, [pc, #116]	; (800150c <HAL_TIM_Base_MspInit+0xbc>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d116      	bne.n	80014c8 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <HAL_TIM_Base_MspInit+0xb8>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	4a19      	ldr	r2, [pc, #100]	; (8001508 <HAL_TIM_Base_MspInit+0xb8>)
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	6413      	str	r3, [r2, #64]	; 0x40
 80014aa:	4b17      	ldr	r3, [pc, #92]	; (8001508 <HAL_TIM_Base_MspInit+0xb8>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	613b      	str	r3, [r7, #16]
 80014b4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2100      	movs	r1, #0
 80014ba:	201d      	movs	r0, #29
 80014bc:	f000 fc99 	bl	8001df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80014c0:	201d      	movs	r0, #29
 80014c2:	f000 fcb2 	bl	8001e2a <HAL_NVIC_EnableIRQ>
}
 80014c6:	e01a      	b.n	80014fe <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a10      	ldr	r2, [pc, #64]	; (8001510 <HAL_TIM_Base_MspInit+0xc0>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d115      	bne.n	80014fe <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	4b0c      	ldr	r3, [pc, #48]	; (8001508 <HAL_TIM_Base_MspInit+0xb8>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	4a0b      	ldr	r2, [pc, #44]	; (8001508 <HAL_TIM_Base_MspInit+0xb8>)
 80014dc:	f043 0304 	orr.w	r3, r3, #4
 80014e0:	6413      	str	r3, [r2, #64]	; 0x40
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <HAL_TIM_Base_MspInit+0xb8>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	f003 0304 	and.w	r3, r3, #4
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2100      	movs	r1, #0
 80014f2:	201e      	movs	r0, #30
 80014f4:	f000 fc7d 	bl	8001df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80014f8:	201e      	movs	r0, #30
 80014fa:	f000 fc96 	bl	8001e2a <HAL_NVIC_EnableIRQ>
}
 80014fe:	bf00      	nop
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40023800 	.word	0x40023800
 800150c:	40000400 	.word	0x40000400
 8001510:	40000800 	.word	0x40000800

08001514 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	; 0x28
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a1d      	ldr	r2, [pc, #116]	; (80015a8 <HAL_UART_MspInit+0x94>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d133      	bne.n	800159e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	4b1c      	ldr	r3, [pc, #112]	; (80015ac <HAL_UART_MspInit+0x98>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	4a1b      	ldr	r2, [pc, #108]	; (80015ac <HAL_UART_MspInit+0x98>)
 8001540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001544:	6413      	str	r3, [r2, #64]	; 0x40
 8001546:	4b19      	ldr	r3, [pc, #100]	; (80015ac <HAL_UART_MspInit+0x98>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <HAL_UART_MspInit+0x98>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a14      	ldr	r2, [pc, #80]	; (80015ac <HAL_UART_MspInit+0x98>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b12      	ldr	r3, [pc, #72]	; (80015ac <HAL_UART_MspInit+0x98>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800156e:	230c      	movs	r3, #12
 8001570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2302      	movs	r3, #2
 8001574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800157a:	2303      	movs	r3, #3
 800157c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800157e:	2307      	movs	r3, #7
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4619      	mov	r1, r3
 8001588:	4809      	ldr	r0, [pc, #36]	; (80015b0 <HAL_UART_MspInit+0x9c>)
 800158a:	f001 fa9b 	bl	8002ac4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800158e:	2200      	movs	r2, #0
 8001590:	2100      	movs	r1, #0
 8001592:	2026      	movs	r0, #38	; 0x26
 8001594:	f000 fc2d 	bl	8001df2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001598:	2026      	movs	r0, #38	; 0x26
 800159a:	f000 fc46 	bl	8001e2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800159e:	bf00      	nop
 80015a0:	3728      	adds	r7, #40	; 0x28
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40004400 	.word	0x40004400
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40020000 	.word	0x40020000

080015b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <NMI_Handler+0x4>

080015ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015be:	e7fe      	b.n	80015be <HardFault_Handler+0x4>

080015c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <MemManage_Handler+0x4>

080015c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <BusFault_Handler+0x4>

080015cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <UsageFault_Handler+0x4>

080015d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015d6:	bf00      	nop
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001600:	f000 fad8 	bl	8001bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}

08001608 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
	...

08001618 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 800161c:	4802      	ldr	r0, [pc, #8]	; (8001628 <DMA1_Stream5_IRQHandler+0x10>)
 800161e:	f000 ffe7 	bl	80025f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000044 	.word	0x20000044

0800162c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001630:	4802      	ldr	r0, [pc, #8]	; (800163c <TIM2_IRQHandler+0x10>)
 8001632:	f002 fa06 	bl	8003a42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001636:	bf00      	nop
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	200000a4 	.word	0x200000a4

08001640 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001646:	4829      	ldr	r0, [pc, #164]	; (80016ec <TIM3_IRQHandler+0xac>)
 8001648:	f002 f9fb 	bl	8003a42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800164c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001650:	4827      	ldr	r0, [pc, #156]	; (80016f0 <TIM3_IRQHandler+0xb0>)
 8001652:	f001 fc04 	bl	8002e5e <HAL_GPIO_TogglePin>

//  if (stim_freq){
//     htim3.Instance->PSC = 10500/stim_freq;
//  }
  HAL_TIM_Base_Stop(&htim2);
 8001656:	4827      	ldr	r0, [pc, #156]	; (80016f4 <TIM3_IRQHandler+0xb4>)
 8001658:	f002 f92c 	bl	80038b4 <HAL_TIM_Base_Stop>
  if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_14)){
 800165c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001660:	4823      	ldr	r0, [pc, #140]	; (80016f0 <TIM3_IRQHandler+0xb0>)
 8001662:	f001 fbcb 	bl	8002dfc <HAL_GPIO_ReadPin>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d038      	beq.n	80016de <TIM3_IRQHandler+0x9e>
	  switch (wave_type){
 800166c:	4b22      	ldr	r3, [pc, #136]	; (80016f8 <TIM3_IRQHandler+0xb8>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b03      	cmp	r3, #3
 8001672:	d82f      	bhi.n	80016d4 <TIM3_IRQHandler+0x94>
 8001674:	a201      	add	r2, pc, #4	; (adr r2, 800167c <TIM3_IRQHandler+0x3c>)
 8001676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800167a:	bf00      	nop
 800167c:	0800168d 	.word	0x0800168d
 8001680:	0800169f 	.word	0x0800169f
 8001684:	080016b1 	.word	0x080016b1
 8001688:	080016c3 	.word	0x080016c3
		  case 0:
			  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, (uint32_t*)sine_val, N_SAMPLES, DAC_ALIGN_12B_R);
 800168c:	2300      	movs	r3, #0
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	2364      	movs	r3, #100	; 0x64
 8001692:	4a1a      	ldr	r2, [pc, #104]	; (80016fc <TIM3_IRQHandler+0xbc>)
 8001694:	2100      	movs	r1, #0
 8001696:	481a      	ldr	r0, [pc, #104]	; (8001700 <TIM3_IRQHandler+0xc0>)
 8001698:	f000 fc04 	bl	8001ea4 <HAL_DAC_Start_DMA>
			  break;
 800169c:	e01b      	b.n	80016d6 <TIM3_IRQHandler+0x96>
		  case 1:
			  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, (uint32_t*)tri_val, N_SAMPLES, DAC_ALIGN_12B_R);
 800169e:	2300      	movs	r3, #0
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	2364      	movs	r3, #100	; 0x64
 80016a4:	4a17      	ldr	r2, [pc, #92]	; (8001704 <TIM3_IRQHandler+0xc4>)
 80016a6:	2100      	movs	r1, #0
 80016a8:	4815      	ldr	r0, [pc, #84]	; (8001700 <TIM3_IRQHandler+0xc0>)
 80016aa:	f000 fbfb 	bl	8001ea4 <HAL_DAC_Start_DMA>
			  break;
 80016ae:	e012      	b.n	80016d6 <TIM3_IRQHandler+0x96>
		  case 2:
			  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, (uint32_t*)square_val, N_SAMPLES, DAC_ALIGN_12B_R);
 80016b0:	2300      	movs	r3, #0
 80016b2:	9300      	str	r3, [sp, #0]
 80016b4:	2364      	movs	r3, #100	; 0x64
 80016b6:	4a14      	ldr	r2, [pc, #80]	; (8001708 <TIM3_IRQHandler+0xc8>)
 80016b8:	2100      	movs	r1, #0
 80016ba:	4811      	ldr	r0, [pc, #68]	; (8001700 <TIM3_IRQHandler+0xc0>)
 80016bc:	f000 fbf2 	bl	8001ea4 <HAL_DAC_Start_DMA>
			  break;
 80016c0:	e009      	b.n	80016d6 <TIM3_IRQHandler+0x96>
		  case 3:
			  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, (uint32_t*)saw_val, N_SAMPLES, DAC_ALIGN_12B_R);
 80016c2:	2300      	movs	r3, #0
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	2364      	movs	r3, #100	; 0x64
 80016c8:	4a10      	ldr	r2, [pc, #64]	; (800170c <TIM3_IRQHandler+0xcc>)
 80016ca:	2100      	movs	r1, #0
 80016cc:	480c      	ldr	r0, [pc, #48]	; (8001700 <TIM3_IRQHandler+0xc0>)
 80016ce:	f000 fbe9 	bl	8001ea4 <HAL_DAC_Start_DMA>
			  break;
 80016d2:	e000      	b.n	80016d6 <TIM3_IRQHandler+0x96>
		  default:
			  //Nothing
			  break;
 80016d4:	bf00      	nop
	    }
	  HAL_TIM_Base_Start(&htim2);
 80016d6:	4807      	ldr	r0, [pc, #28]	; (80016f4 <TIM3_IRQHandler+0xb4>)
 80016d8:	f002 f884 	bl	80037e4 <HAL_TIM_Base_Start>
  }
  else {
	  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
  }
  /* USER CODE END TIM3_IRQn 1 */
}
 80016dc:	e003      	b.n	80016e6 <TIM3_IRQHandler+0xa6>
	  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 80016de:	2100      	movs	r1, #0
 80016e0:	4807      	ldr	r0, [pc, #28]	; (8001700 <TIM3_IRQHandler+0xc0>)
 80016e2:	f000 fcad 	bl	8002040 <HAL_DAC_Stop_DMA>
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	200000ec 	.word	0x200000ec
 80016f0:	40020c00 	.word	0x40020c00
 80016f4:	200000a4 	.word	0x200000a4
 80016f8:	200001c4 	.word	0x200001c4
 80016fc:	200001c8 	.word	0x200001c8
 8001700:	20000030 	.word	0x20000030
 8001704:	200004e8 	.word	0x200004e8
 8001708:	20000678 	.word	0x20000678
 800170c:	20000358 	.word	0x20000358

08001710 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <TIM4_IRQHandler+0x10>)
 8001716:	f002 f994 	bl	8003a42 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000134 	.word	0x20000134

08001724 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001728:	481f      	ldr	r0, [pc, #124]	; (80017a8 <USART2_IRQHandler+0x84>)
 800172a:	f002 fdd3 	bl	80042d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  //STOOOPPP!!!
  //__disable_irq();
  //NVIC_DisableIRQ(TIM2_IRQn);
  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 800172e:	2100      	movs	r1, #0
 8001730:	481e      	ldr	r0, [pc, #120]	; (80017ac <USART2_IRQHandler+0x88>)
 8001732:	f000 fc85 	bl	8002040 <HAL_DAC_Stop_DMA>
  HAL_TIM_Base_Stop(&htim2);
 8001736:	481e      	ldr	r0, [pc, #120]	; (80017b0 <USART2_IRQHandler+0x8c>)
 8001738:	f002 f8bc 	bl	80038b4 <HAL_TIM_Base_Stop>
  HAL_TIM_Base_Stop_IT(&htim3);
 800173c:	481d      	ldr	r0, [pc, #116]	; (80017b4 <USART2_IRQHandler+0x90>)
 800173e:	f002 f951 	bl	80039e4 <HAL_TIM_Base_Stop_IT>

  //Get values from Rx buffer
  wave_type = Rx_data[0];
 8001742:	4b1d      	ldr	r3, [pc, #116]	; (80017b8 <USART2_IRQHandler+0x94>)
 8001744:	781a      	ldrb	r2, [r3, #0]
 8001746:	4b1d      	ldr	r3, [pc, #116]	; (80017bc <USART2_IRQHandler+0x98>)
 8001748:	701a      	strb	r2, [r3, #0]
  frequence = Rx_data[1] << 8 | Rx_data[2];
 800174a:	4b1b      	ldr	r3, [pc, #108]	; (80017b8 <USART2_IRQHandler+0x94>)
 800174c:	785b      	ldrb	r3, [r3, #1]
 800174e:	021b      	lsls	r3, r3, #8
 8001750:	4a19      	ldr	r2, [pc, #100]	; (80017b8 <USART2_IRQHandler+0x94>)
 8001752:	7892      	ldrb	r2, [r2, #2]
 8001754:	4313      	orrs	r3, r2
 8001756:	461a      	mov	r2, r3
 8001758:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <USART2_IRQHandler+0x9c>)
 800175a:	601a      	str	r2, [r3, #0]
  stim_freq = Rx_data[3];
 800175c:	4b16      	ldr	r3, [pc, #88]	; (80017b8 <USART2_IRQHandler+0x94>)
 800175e:	78da      	ldrb	r2, [r3, #3]
 8001760:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <USART2_IRQHandler+0xa0>)
 8001762:	701a      	strb	r2, [r3, #0]
  //duty_cycle = Rx_data[3];
  //stimulation_length = (uint16_t) Rx_data[5];

  //Set pitch
  if (frequence){
 8001764:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <USART2_IRQHandler+0x9c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d007      	beq.n	800177c <USART2_IRQHandler+0x58>
	htim2.Instance->PSC = (42000000/N_SAMPLES) / frequence;
 800176c:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <USART2_IRQHandler+0x9c>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <USART2_IRQHandler+0x8c>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4914      	ldr	r1, [pc, #80]	; (80017c8 <USART2_IRQHandler+0xa4>)
 8001776:	fbb1 f2f2 	udiv	r2, r1, r2
 800177a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  //Set stimulation frequency
  if (stim_freq){
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <USART2_IRQHandler+0xa0>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d009      	beq.n	8001798 <USART2_IRQHandler+0x74>
	  htim3.Instance->PSC = 10500/stim_freq;
 8001784:	4b0f      	ldr	r3, [pc, #60]	; (80017c4 <USART2_IRQHandler+0xa0>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	461a      	mov	r2, r3
 800178a:	f642 1304 	movw	r3, #10500	; 0x2904
 800178e:	fb93 f2f2 	sdiv	r2, r3, r2
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <USART2_IRQHandler+0x90>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	629a      	str	r2, [r3, #40]	; 0x28
//  		//Nothing
//  		  break;
//  }

  //GOOOOOOOOOOOO!!!
  HAL_TIM_Base_Start(&htim2);
 8001798:	4805      	ldr	r0, [pc, #20]	; (80017b0 <USART2_IRQHandler+0x8c>)
 800179a:	f002 f823 	bl	80037e4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 800179e:	4805      	ldr	r0, [pc, #20]	; (80017b4 <USART2_IRQHandler+0x90>)
 80017a0:	f002 f8b0 	bl	8003904 <HAL_TIM_Base_Start_IT>
  //NVIC_EnableIRQ(TIM2_IRQn);
  //__enable_irq();

  //HAL_UART_Transmit(&huart2, packette, sizeof(packette)-1, 10);
  /* USER CODE END USART2_IRQn 1 */
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	2000017c 	.word	0x2000017c
 80017ac:	20000030 	.word	0x20000030
 80017b0:	200000a4 	.word	0x200000a4
 80017b4:	200000ec 	.word	0x200000ec
 80017b8:	200001c0 	.word	0x200001c0
 80017bc:	200001c4 	.word	0x200001c4
 80017c0:	20000004 	.word	0x20000004
 80017c4:	20000000 	.word	0x20000000
 80017c8:	000668a0 	.word	0x000668a0

080017cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <SystemInit+0x20>)
 80017d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017d6:	4a05      	ldr	r2, [pc, #20]	; (80017ec <SystemInit+0x20>)
 80017d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <init_waves>:
//

#include "../../Inc/init.h"
#include "../../Inc/waves.h"

void init_waves(unsigned int amplitude){
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
    calcsin(amplitude);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 f80d 	bl	8001818 <calcsin>
    calcsaw(amplitude);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f000 f878 	bl	80018f4 <calcsaw>
    calctri(amplitude);
 8001804:	6878      	ldr	r0, [r7, #4]
 8001806:	f000 f8b1 	bl	800196c <calctri>
    calcsquare(amplitude);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 f918 	bl	8001a40 <calcsquare>
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <calcsin>:
unsigned int square_val[N_SAMPLES];
unsigned int empty[N_SAMPLES] = {0};


void calcsin (unsigned int amplitude)
{
 8001818:	b5b0      	push	{r4, r5, r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
    for (int i=0; i<N_SAMPLES; i++)
 8001820:	2300      	movs	r3, #0
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	e04f      	b.n	80018c6 <calcsin+0xae>
    {
        sine_val[i] = ((float)amplitude/255)*((sin(i*2*PI/N_SAMPLES) + 1)*(4096/2));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	ee07 3a90 	vmov	s15, r3
 800182c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001830:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80018e0 <calcsin+0xc8>
 8001834:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001838:	ee16 0a90 	vmov	r0, s13
 800183c:	f7fe fe28 	bl	8000490 <__aeabi_f2d>
 8001840:	4604      	mov	r4, r0
 8001842:	460d      	mov	r5, r1
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fe0f 	bl	800046c <__aeabi_i2d>
 800184e:	a322      	add	r3, pc, #136	; (adr r3, 80018d8 <calcsin+0xc0>)
 8001850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001854:	f7fe fe74 	bl	8000540 <__aeabi_dmul>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4610      	mov	r0, r2
 800185e:	4619      	mov	r1, r3
 8001860:	f04f 0200 	mov.w	r2, #0
 8001864:	4b1f      	ldr	r3, [pc, #124]	; (80018e4 <calcsin+0xcc>)
 8001866:	f7fe ff95 	bl	8000794 <__aeabi_ddiv>
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	ec43 2b17 	vmov	d7, r2, r3
 8001872:	eeb0 0a47 	vmov.f32	s0, s14
 8001876:	eef0 0a67 	vmov.f32	s1, s15
 800187a:	f003 fc69 	bl	8005150 <sin>
 800187e:	ec51 0b10 	vmov	r0, r1, d0
 8001882:	f04f 0200 	mov.w	r2, #0
 8001886:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <calcsin+0xd0>)
 8001888:	f7fe fca4 	bl	80001d4 <__adddf3>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4610      	mov	r0, r2
 8001892:	4619      	mov	r1, r3
 8001894:	f04f 0200 	mov.w	r2, #0
 8001898:	4b14      	ldr	r3, [pc, #80]	; (80018ec <calcsin+0xd4>)
 800189a:	f7fe fe51 	bl	8000540 <__aeabi_dmul>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4620      	mov	r0, r4
 80018a4:	4629      	mov	r1, r5
 80018a6:	f7fe fe4b 	bl	8000540 <__aeabi_dmul>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4610      	mov	r0, r2
 80018b0:	4619      	mov	r1, r3
 80018b2:	f7ff f907 	bl	8000ac4 <__aeabi_d2uiz>
 80018b6:	4602      	mov	r2, r0
 80018b8:	490d      	ldr	r1, [pc, #52]	; (80018f0 <calcsin+0xd8>)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i=0; i<N_SAMPLES; i++)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	3301      	adds	r3, #1
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2b63      	cmp	r3, #99	; 0x63
 80018ca:	ddac      	ble.n	8001826 <calcsin+0xe>
    }
}
 80018cc:	bf00      	nop
 80018ce:	bf00      	nop
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bdb0      	pop	{r4, r5, r7, pc}
 80018d6:	bf00      	nop
 80018d8:	4d12d84a 	.word	0x4d12d84a
 80018dc:	400921fb 	.word	0x400921fb
 80018e0:	437f0000 	.word	0x437f0000
 80018e4:	40590000 	.word	0x40590000
 80018e8:	3ff00000 	.word	0x3ff00000
 80018ec:	40a00000 	.word	0x40a00000
 80018f0:	200001c8 	.word	0x200001c8

080018f4 <calcsaw>:

void calcsaw (unsigned int amplitude)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b085      	sub	sp, #20
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
    for (int j=0; j<N_SAMPLES; j++)
 80018fc:	2300      	movs	r3, #0
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	e022      	b.n	8001948 <calcsaw+0x54>
    {
        saw_val[j] = ((float)amplitude/255)*((float)j/N_SAMPLES)*(4096);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	ee07 3a90 	vmov	s15, r3
 8001908:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800190c:	eddf 6a13 	vldr	s13, [pc, #76]	; 800195c <calcsaw+0x68>
 8001910:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	ee07 3a90 	vmov	s15, r3
 800191a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800191e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8001960 <calcsaw+0x6c>
 8001922:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800192a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001964 <calcsaw+0x70>
 800192e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001932:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001936:	ee17 1a90 	vmov	r1, s15
 800193a:	4a0b      	ldr	r2, [pc, #44]	; (8001968 <calcsaw+0x74>)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int j=0; j<N_SAMPLES; j++)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	3301      	adds	r3, #1
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2b63      	cmp	r3, #99	; 0x63
 800194c:	ddd9      	ble.n	8001902 <calcsaw+0xe>
    }
}
 800194e:	bf00      	nop
 8001950:	bf00      	nop
 8001952:	3714      	adds	r7, #20
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr
 800195c:	437f0000 	.word	0x437f0000
 8001960:	42c80000 	.word	0x42c80000
 8001964:	45800000 	.word	0x45800000
 8001968:	20000358 	.word	0x20000358

0800196c <calctri>:

void calctri (unsigned int amplitude)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
    for (int k=0; k<N_SAMPLES/2; k++)
 8001974:	2300      	movs	r3, #0
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	e022      	b.n	80019c0 <calctri+0x54>
    {
        tri_val[k] = ((float)amplitude/255)*((float)k/(N_SAMPLES/2))*(4095);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	ee07 3a90 	vmov	s15, r3
 8001980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001984:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8001a30 <calctri+0xc4>
 8001988:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	ee07 3a90 	vmov	s15, r3
 8001992:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001996:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8001a34 <calctri+0xc8>
 800199a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800199e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a2:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001a38 <calctri+0xcc>
 80019a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019ae:	ee17 1a90 	vmov	r1, s15
 80019b2:	4a22      	ldr	r2, [pc, #136]	; (8001a3c <calctri+0xd0>)
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int k=0; k<N_SAMPLES/2; k++)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	3301      	adds	r3, #1
 80019be:	60fb      	str	r3, [r7, #12]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2b31      	cmp	r3, #49	; 0x31
 80019c4:	ddd9      	ble.n	800197a <calctri+0xe>
    }
    for (int k=N_SAMPLES/2; k<N_SAMPLES; k++)
 80019c6:	2332      	movs	r3, #50	; 0x32
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	e027      	b.n	8001a1c <calctri+0xb0>
    {
        tri_val[k] = ((float)amplitude/255)*(1-((float)(k-(N_SAMPLES/2)))/(N_SAMPLES/2))*(4095);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	ee07 3a90 	vmov	s15, r3
 80019d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019d6:	eddf 6a16 	vldr	s13, [pc, #88]	; 8001a30 <calctri+0xc4>
 80019da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	3b32      	subs	r3, #50	; 0x32
 80019e2:	ee07 3a90 	vmov	s15, r3
 80019e6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019ea:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8001a34 <calctri+0xc8>
 80019ee:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80019f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80019f6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80019fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019fe:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001a38 <calctri+0xcc>
 8001a02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a0a:	ee17 1a90 	vmov	r1, s15
 8001a0e:	4a0b      	ldr	r2, [pc, #44]	; (8001a3c <calctri+0xd0>)
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int k=N_SAMPLES/2; k<N_SAMPLES; k++)
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	2b63      	cmp	r3, #99	; 0x63
 8001a20:	ddd4      	ble.n	80019cc <calctri+0x60>
    }
}
 8001a22:	bf00      	nop
 8001a24:	bf00      	nop
 8001a26:	3714      	adds	r7, #20
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	437f0000 	.word	0x437f0000
 8001a34:	42480000 	.word	0x42480000
 8001a38:	457ff000 	.word	0x457ff000
 8001a3c:	200004e8 	.word	0x200004e8

08001a40 <calcsquare>:

void calcsquare (unsigned int amplitude)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
    for (int h=0; h<N_SAMPLES/2; h++)
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	e017      	b.n	8001a7e <calcsquare+0x3e>
    {
        square_val[h] = ((float)amplitude/255)*4095;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	ee07 3a90 	vmov	s15, r3
 8001a54:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001a58:	eddf 6a15 	vldr	s13, [pc, #84]	; 8001ab0 <calcsquare+0x70>
 8001a5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a60:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001ab4 <calcsquare+0x74>
 8001a64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a6c:	ee17 1a90 	vmov	r1, s15
 8001a70:	4a11      	ldr	r2, [pc, #68]	; (8001ab8 <calcsquare+0x78>)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int h=0; h<N_SAMPLES/2; h++)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2b31      	cmp	r3, #49	; 0x31
 8001a82:	dde4      	ble.n	8001a4e <calcsquare+0xe>
    }
    for (int h=N_SAMPLES/2; h<N_SAMPLES; h++)
 8001a84:	2332      	movs	r3, #50	; 0x32
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	e007      	b.n	8001a9a <calcsquare+0x5a>
    {
        square_val[h] = 0;
 8001a8a:	4a0b      	ldr	r2, [pc, #44]	; (8001ab8 <calcsquare+0x78>)
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	2100      	movs	r1, #0
 8001a90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int h=N_SAMPLES/2; h<N_SAMPLES; h++)
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	3301      	adds	r3, #1
 8001a98:	60bb      	str	r3, [r7, #8]
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	2b63      	cmp	r3, #99	; 0x63
 8001a9e:	ddf4      	ble.n	8001a8a <calcsquare+0x4a>
    }
}
 8001aa0:	bf00      	nop
 8001aa2:	bf00      	nop
 8001aa4:	3714      	adds	r7, #20
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	437f0000 	.word	0x437f0000
 8001ab4:	457ff000 	.word	0x457ff000
 8001ab8:	20000678 	.word	0x20000678

08001abc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001abc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001af4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ac0:	480d      	ldr	r0, [pc, #52]	; (8001af8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ac2:	490e      	ldr	r1, [pc, #56]	; (8001afc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ac4:	4a0e      	ldr	r2, [pc, #56]	; (8001b00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ac8:	e002      	b.n	8001ad0 <LoopCopyDataInit>

08001aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ace:	3304      	adds	r3, #4

08001ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad4:	d3f9      	bcc.n	8001aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ad6:	4a0b      	ldr	r2, [pc, #44]	; (8001b04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ad8:	4c0b      	ldr	r4, [pc, #44]	; (8001b08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001adc:	e001      	b.n	8001ae2 <LoopFillZerobss>

08001ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae0:	3204      	adds	r2, #4

08001ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae4:	d3fb      	bcc.n	8001ade <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ae6:	f7ff fe71 	bl	80017cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aea:	f003 fb05 	bl	80050f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aee:	f7ff f99d 	bl	8000e2c <main>
  bx  lr    
 8001af2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001af4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001afc:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001b00:	08006408 	.word	0x08006408
  ldr r2, =_sbss
 8001b04:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001b08:	20000810 	.word	0x20000810

08001b0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b0c:	e7fe      	b.n	8001b0c <ADC_IRQHandler>
	...

08001b10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b14:	4b0e      	ldr	r3, [pc, #56]	; (8001b50 <HAL_Init+0x40>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a0d      	ldr	r2, [pc, #52]	; (8001b50 <HAL_Init+0x40>)
 8001b1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <HAL_Init+0x40>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a0a      	ldr	r2, [pc, #40]	; (8001b50 <HAL_Init+0x40>)
 8001b26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b2c:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <HAL_Init+0x40>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a07      	ldr	r2, [pc, #28]	; (8001b50 <HAL_Init+0x40>)
 8001b32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b38:	2003      	movs	r0, #3
 8001b3a:	f000 f94f 	bl	8001ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b3e:	200f      	movs	r0, #15
 8001b40:	f000 f808 	bl	8001b54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b44:	f7ff fbd4 	bl	80012f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40023c00 	.word	0x40023c00

08001b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b5c:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <HAL_InitTick+0x54>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4b12      	ldr	r3, [pc, #72]	; (8001bac <HAL_InitTick+0x58>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	4619      	mov	r1, r3
 8001b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b72:	4618      	mov	r0, r3
 8001b74:	f000 f967 	bl	8001e46 <HAL_SYSTICK_Config>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e00e      	b.n	8001ba0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b0f      	cmp	r3, #15
 8001b86:	d80a      	bhi.n	8001b9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b90:	f000 f92f 	bl	8001df2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b94:	4a06      	ldr	r2, [pc, #24]	; (8001bb0 <HAL_InitTick+0x5c>)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	e000      	b.n	8001ba0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20000008 	.word	0x20000008
 8001bac:	20000010 	.word	0x20000010
 8001bb0:	2000000c 	.word	0x2000000c

08001bb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <HAL_IncTick+0x20>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_IncTick+0x24>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <HAL_IncTick+0x24>)
 8001bc6:	6013      	str	r3, [r2, #0]
}
 8001bc8:	bf00      	nop
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
 8001bd2:	bf00      	nop
 8001bd4:	20000010 	.word	0x20000010
 8001bd8:	20000808 	.word	0x20000808

08001bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return uwTick;
 8001be0:	4b03      	ldr	r3, [pc, #12]	; (8001bf0 <HAL_GetTick+0x14>)
 8001be2:	681b      	ldr	r3, [r3, #0]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	20000808 	.word	0x20000808

08001bf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bfc:	f7ff ffee 	bl	8001bdc <HAL_GetTick>
 8001c00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c0c:	d005      	beq.n	8001c1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c0e:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <HAL_Delay+0x44>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4413      	add	r3, r2
 8001c18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c1a:	bf00      	nop
 8001c1c:	f7ff ffde 	bl	8001bdc <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d8f7      	bhi.n	8001c1c <HAL_Delay+0x28>
  {
  }
}
 8001c2c:	bf00      	nop
 8001c2e:	bf00      	nop
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000010 	.word	0x20000010

08001c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <__NVIC_SetPriorityGrouping+0x44>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c58:	4013      	ands	r3, r2
 8001c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c6e:	4a04      	ldr	r2, [pc, #16]	; (8001c80 <__NVIC_SetPriorityGrouping+0x44>)
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	60d3      	str	r3, [r2, #12]
}
 8001c74:	bf00      	nop
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000ed00 	.word	0xe000ed00

08001c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c88:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <__NVIC_GetPriorityGrouping+0x18>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	0a1b      	lsrs	r3, r3, #8
 8001c8e:	f003 0307 	and.w	r3, r3, #7
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	db0b      	blt.n	8001cca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	f003 021f 	and.w	r2, r3, #31
 8001cb8:	4907      	ldr	r1, [pc, #28]	; (8001cd8 <__NVIC_EnableIRQ+0x38>)
 8001cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbe:	095b      	lsrs	r3, r3, #5
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	e000e100 	.word	0xe000e100

08001cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	6039      	str	r1, [r7, #0]
 8001ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	db0a      	blt.n	8001d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	490c      	ldr	r1, [pc, #48]	; (8001d28 <__NVIC_SetPriority+0x4c>)
 8001cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfa:	0112      	lsls	r2, r2, #4
 8001cfc:	b2d2      	uxtb	r2, r2
 8001cfe:	440b      	add	r3, r1
 8001d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d04:	e00a      	b.n	8001d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	4908      	ldr	r1, [pc, #32]	; (8001d2c <__NVIC_SetPriority+0x50>)
 8001d0c:	79fb      	ldrb	r3, [r7, #7]
 8001d0e:	f003 030f 	and.w	r3, r3, #15
 8001d12:	3b04      	subs	r3, #4
 8001d14:	0112      	lsls	r2, r2, #4
 8001d16:	b2d2      	uxtb	r2, r2
 8001d18:	440b      	add	r3, r1
 8001d1a:	761a      	strb	r2, [r3, #24]
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	e000e100 	.word	0xe000e100
 8001d2c:	e000ed00 	.word	0xe000ed00

08001d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b089      	sub	sp, #36	; 0x24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f1c3 0307 	rsb	r3, r3, #7
 8001d4a:	2b04      	cmp	r3, #4
 8001d4c:	bf28      	it	cs
 8001d4e:	2304      	movcs	r3, #4
 8001d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	3304      	adds	r3, #4
 8001d56:	2b06      	cmp	r3, #6
 8001d58:	d902      	bls.n	8001d60 <NVIC_EncodePriority+0x30>
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3b03      	subs	r3, #3
 8001d5e:	e000      	b.n	8001d62 <NVIC_EncodePriority+0x32>
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d64:	f04f 32ff 	mov.w	r2, #4294967295
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43da      	mvns	r2, r3
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	401a      	ands	r2, r3
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d78:	f04f 31ff 	mov.w	r1, #4294967295
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d82:	43d9      	mvns	r1, r3
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d88:	4313      	orrs	r3, r2
         );
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3724      	adds	r7, #36	; 0x24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
	...

08001d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001da8:	d301      	bcc.n	8001dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001daa:	2301      	movs	r3, #1
 8001dac:	e00f      	b.n	8001dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dae:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <SysTick_Config+0x40>)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001db6:	210f      	movs	r1, #15
 8001db8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dbc:	f7ff ff8e 	bl	8001cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <SysTick_Config+0x40>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dc6:	4b04      	ldr	r3, [pc, #16]	; (8001dd8 <SysTick_Config+0x40>)
 8001dc8:	2207      	movs	r2, #7
 8001dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	e000e010 	.word	0xe000e010

08001ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff ff29 	bl	8001c3c <__NVIC_SetPriorityGrouping>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b086      	sub	sp, #24
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	4603      	mov	r3, r0
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	607a      	str	r2, [r7, #4]
 8001dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e04:	f7ff ff3e 	bl	8001c84 <__NVIC_GetPriorityGrouping>
 8001e08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	68b9      	ldr	r1, [r7, #8]
 8001e0e:	6978      	ldr	r0, [r7, #20]
 8001e10:	f7ff ff8e 	bl	8001d30 <NVIC_EncodePriority>
 8001e14:	4602      	mov	r2, r0
 8001e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e1a:	4611      	mov	r1, r2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff5d 	bl	8001cdc <__NVIC_SetPriority>
}
 8001e22:	bf00      	nop
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b082      	sub	sp, #8
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	4603      	mov	r3, r0
 8001e32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff ff31 	bl	8001ca0 <__NVIC_EnableIRQ>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
 8001e4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7ff ffa2 	bl	8001d98 <SysTick_Config>
 8001e54:	4603      	mov	r3, r0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b082      	sub	sp, #8
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e014      	b.n	8001e9a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	791b      	ldrb	r3, [r3, #4]
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d105      	bne.n	8001e86 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff fa63 	bl	800134c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2202      	movs	r2, #2
 8001e8a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
	...

08001ea4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
 8001eb0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	795b      	ldrb	r3, [r3, #5]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d101      	bne.n	8001ec6 <HAL_DAC_Start_DMA+0x22>
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	e0ab      	b.n	800201e <HAL_DAC_Start_DMA+0x17a>
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2202      	movs	r2, #2
 8001ed0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d12f      	bne.n	8001f38 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	4a52      	ldr	r2, [pc, #328]	; (8002028 <HAL_DAC_Start_DMA+0x184>)
 8001ede:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	4a51      	ldr	r2, [pc, #324]	; (800202c <HAL_DAC_Start_DMA+0x188>)
 8001ee6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	4a50      	ldr	r2, [pc, #320]	; (8002030 <HAL_DAC_Start_DMA+0x18c>)
 8001eee:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001efe:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001f00:	6a3b      	ldr	r3, [r7, #32]
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d013      	beq.n	8001f2e <HAL_DAC_Start_DMA+0x8a>
 8001f06:	6a3b      	ldr	r3, [r7, #32]
 8001f08:	2b08      	cmp	r3, #8
 8001f0a:	d845      	bhi.n	8001f98 <HAL_DAC_Start_DMA+0xf4>
 8001f0c:	6a3b      	ldr	r3, [r7, #32]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_DAC_Start_DMA+0x76>
 8001f12:	6a3b      	ldr	r3, [r7, #32]
 8001f14:	2b04      	cmp	r3, #4
 8001f16:	d005      	beq.n	8001f24 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001f18:	e03e      	b.n	8001f98 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	3308      	adds	r3, #8
 8001f20:	613b      	str	r3, [r7, #16]
        break;
 8001f22:	e03c      	b.n	8001f9e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	330c      	adds	r3, #12
 8001f2a:	613b      	str	r3, [r7, #16]
        break;
 8001f2c:	e037      	b.n	8001f9e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	3310      	adds	r3, #16
 8001f34:	613b      	str	r3, [r7, #16]
        break;
 8001f36:	e032      	b.n	8001f9e <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	4a3d      	ldr	r2, [pc, #244]	; (8002034 <HAL_DAC_Start_DMA+0x190>)
 8001f3e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	4a3c      	ldr	r2, [pc, #240]	; (8002038 <HAL_DAC_Start_DMA+0x194>)
 8001f46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	4a3b      	ldr	r2, [pc, #236]	; (800203c <HAL_DAC_Start_DMA+0x198>)
 8001f4e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001f5e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001f60:	6a3b      	ldr	r3, [r7, #32]
 8001f62:	2b08      	cmp	r3, #8
 8001f64:	d013      	beq.n	8001f8e <HAL_DAC_Start_DMA+0xea>
 8001f66:	6a3b      	ldr	r3, [r7, #32]
 8001f68:	2b08      	cmp	r3, #8
 8001f6a:	d817      	bhi.n	8001f9c <HAL_DAC_Start_DMA+0xf8>
 8001f6c:	6a3b      	ldr	r3, [r7, #32]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_DAC_Start_DMA+0xd6>
 8001f72:	6a3b      	ldr	r3, [r7, #32]
 8001f74:	2b04      	cmp	r3, #4
 8001f76:	d005      	beq.n	8001f84 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001f78:	e010      	b.n	8001f9c <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	3314      	adds	r3, #20
 8001f80:	613b      	str	r3, [r7, #16]
        break;
 8001f82:	e00c      	b.n	8001f9e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	3318      	adds	r3, #24
 8001f8a:	613b      	str	r3, [r7, #16]
        break;
 8001f8c:	e007      	b.n	8001f9e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	331c      	adds	r3, #28
 8001f94:	613b      	str	r3, [r7, #16]
        break;
 8001f96:	e002      	b.n	8001f9e <HAL_DAC_Start_DMA+0xfa>
        break;
 8001f98:	bf00      	nop
 8001f9a:	e000      	b.n	8001f9e <HAL_DAC_Start_DMA+0xfa>
        break;
 8001f9c:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d111      	bne.n	8001fc8 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fb2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	6898      	ldr	r0, [r3, #8]
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	693a      	ldr	r2, [r7, #16]
 8001fbe:	f000 fa2d 	bl	800241c <HAL_DMA_Start_IT>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	75fb      	strb	r3, [r7, #23]
 8001fc6:	e010      	b.n	8001fea <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001fd6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	68d8      	ldr	r0, [r3, #12]
 8001fdc:	6879      	ldr	r1, [r7, #4]
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	f000 fa1b 	bl	800241c <HAL_DMA_Start_IT>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	2200      	movs	r2, #0
 8001fee:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001ff0:	7dfb      	ldrb	r3, [r7, #23]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10c      	bne.n	8002010 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	6819      	ldr	r1, [r3, #0]
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	f003 0310 	and.w	r3, r3, #16
 8002002:	2201      	movs	r2, #1
 8002004:	409a      	lsls	r2, r3
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	430a      	orrs	r2, r1
 800200c:	601a      	str	r2, [r3, #0]
 800200e:	e005      	b.n	800201c <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	f043 0204 	orr.w	r2, r3, #4
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800201c:	7dfb      	ldrb	r3, [r7, #23]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	080021ab 	.word	0x080021ab
 800202c:	080021cd 	.word	0x080021cd
 8002030:	080021e9 	.word	0x080021e9
 8002034:	08002253 	.word	0x08002253
 8002038:	08002275 	.word	0x08002275
 800203c:	08002291 	.word	0x08002291

08002040 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6819      	ldr	r1, [r3, #0]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	f003 0310 	and.w	r3, r3, #16
 8002056:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43da      	mvns	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	400a      	ands	r2, r1
 8002066:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6819      	ldr	r1, [r3, #0]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	f003 0310 	and.w	r3, r3, #16
 8002074:	2201      	movs	r2, #1
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43da      	mvns	r2, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	400a      	ands	r2, r1
 8002082:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d10d      	bne.n	80020a6 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	4618      	mov	r0, r3
 8002090:	f000 fa1c 	bl	80024cc <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	e00c      	b.n	80020c0 <HAL_DAC_Stop_DMA+0x80>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 fa0e 	bl	80024cc <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80020be:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800210c:	b480      	push	{r7}
 800210e:	b087      	sub	sp, #28
 8002110:	af00      	add	r7, sp, #0
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	60b9      	str	r1, [r7, #8]
 8002116:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	795b      	ldrb	r3, [r3, #5]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d101      	bne.n	8002124 <HAL_DAC_ConfigChannel+0x18>
 8002120:	2302      	movs	r3, #2
 8002122:	e03c      	b.n	800219e <HAL_DAC_ConfigChannel+0x92>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2201      	movs	r2, #1
 8002128:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2202      	movs	r2, #2
 800212e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f003 0310 	and.w	r3, r3, #16
 800213e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43db      	mvns	r3, r3
 8002148:	697a      	ldr	r2, [r7, #20]
 800214a:	4013      	ands	r3, r2
 800214c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	4313      	orrs	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f003 0310 	and.w	r3, r3, #16
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	4313      	orrs	r3, r2
 800216a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6819      	ldr	r1, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f003 0310 	and.w	r3, r3, #16
 8002180:	22c0      	movs	r2, #192	; 0xc0
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	43da      	mvns	r2, r3
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	400a      	ands	r2, r1
 800218e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2201      	movs	r2, #1
 8002194:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	371c      	adds	r7, #28
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b084      	sub	sp, #16
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f7ff ff89 	bl	80020d0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2201      	movs	r2, #1
 80021c2:	711a      	strb	r2, [r3, #4]
}
 80021c4:	bf00      	nop
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80021da:	68f8      	ldr	r0, [r7, #12]
 80021dc:	f7ff ff82 	bl	80020e4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80021e0:	bf00      	nop
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f4:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	f043 0204 	orr.w	r2, r3, #4
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f7ff ff78 	bl	80020f8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2201      	movs	r2, #1
 800220c:	711a      	strb	r2, [r3, #4]
}
 800220e:	bf00      	nop
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800221e:	bf00      	nop
 8002220:	370c      	adds	r7, #12
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800223e:	b480      	push	{r7}
 8002240:	b083      	sub	sp, #12
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr

08002252 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b084      	sub	sp, #16
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800225e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f7ff ffd8 	bl	8002216 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2201      	movs	r2, #1
 800226a:	711a      	strb	r2, [r3, #4]
}
 800226c:	bf00      	nop
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002280:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f7ff ffd1 	bl	800222a <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002288:	bf00      	nop
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800229c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	f043 0204 	orr.w	r2, r3, #4
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f7ff ffc7 	bl	800223e <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2201      	movs	r2, #1
 80022b4:	711a      	strb	r2, [r3, #4]
}
 80022b6:	bf00      	nop
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022cc:	f7ff fc86 	bl	8001bdc <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e099      	b.n	8002410 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2202      	movs	r2, #2
 80022e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 0201 	bic.w	r2, r2, #1
 80022fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022fc:	e00f      	b.n	800231e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022fe:	f7ff fc6d 	bl	8001bdc <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b05      	cmp	r3, #5
 800230a:	d908      	bls.n	800231e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2220      	movs	r2, #32
 8002310:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2203      	movs	r2, #3
 8002316:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e078      	b.n	8002410 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0301 	and.w	r3, r3, #1
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1e8      	bne.n	80022fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	4b38      	ldr	r3, [pc, #224]	; (8002418 <HAL_DMA_Init+0x158>)
 8002338:	4013      	ands	r3, r2
 800233a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800234a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002356:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002362:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	4313      	orrs	r3, r2
 800236e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002374:	2b04      	cmp	r3, #4
 8002376:	d107      	bne.n	8002388 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002380:	4313      	orrs	r3, r2
 8002382:	697a      	ldr	r2, [r7, #20]
 8002384:	4313      	orrs	r3, r2
 8002386:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	f023 0307 	bic.w	r3, r3, #7
 800239e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	d117      	bne.n	80023e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00e      	beq.n	80023e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f000 fb01 	bl	80029cc <DMA_CheckFifoParam>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d008      	beq.n	80023e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2240      	movs	r2, #64	; 0x40
 80023d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80023de:	2301      	movs	r3, #1
 80023e0:	e016      	b.n	8002410 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f000 fab8 	bl	8002960 <DMA_CalcBaseAndBitshift>
 80023f0:	4603      	mov	r3, r0
 80023f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f8:	223f      	movs	r2, #63	; 0x3f
 80023fa:	409a      	lsls	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	f010803f 	.word	0xf010803f

0800241c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	60b9      	str	r1, [r7, #8]
 8002426:	607a      	str	r2, [r7, #4]
 8002428:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800242a:	2300      	movs	r3, #0
 800242c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002432:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800243a:	2b01      	cmp	r3, #1
 800243c:	d101      	bne.n	8002442 <HAL_DMA_Start_IT+0x26>
 800243e:	2302      	movs	r3, #2
 8002440:	e040      	b.n	80024c4 <HAL_DMA_Start_IT+0xa8>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2201      	movs	r2, #1
 8002446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b01      	cmp	r3, #1
 8002454:	d12f      	bne.n	80024b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	2202      	movs	r2, #2
 800245a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	68b9      	ldr	r1, [r7, #8]
 800246a:	68f8      	ldr	r0, [r7, #12]
 800246c:	f000 fa4a 	bl	8002904 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002474:	223f      	movs	r2, #63	; 0x3f
 8002476:	409a      	lsls	r2, r3
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f042 0216 	orr.w	r2, r2, #22
 800248a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002490:	2b00      	cmp	r3, #0
 8002492:	d007      	beq.n	80024a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f042 0208 	orr.w	r2, r2, #8
 80024a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0201 	orr.w	r2, r2, #1
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	e005      	b.n	80024c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80024be:	2302      	movs	r3, #2
 80024c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80024c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024da:	f7ff fb7f 	bl	8001bdc <HAL_GetTick>
 80024de:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d008      	beq.n	80024fe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2280      	movs	r2, #128	; 0x80
 80024f0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e052      	b.n	80025a4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 0216 	bic.w	r2, r2, #22
 800250c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	695a      	ldr	r2, [r3, #20]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800251c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002522:	2b00      	cmp	r3, #0
 8002524:	d103      	bne.n	800252e <HAL_DMA_Abort+0x62>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800252a:	2b00      	cmp	r3, #0
 800252c:	d007      	beq.n	800253e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 0208 	bic.w	r2, r2, #8
 800253c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0201 	bic.w	r2, r2, #1
 800254c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800254e:	e013      	b.n	8002578 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002550:	f7ff fb44 	bl	8001bdc <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b05      	cmp	r3, #5
 800255c:	d90c      	bls.n	8002578 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2220      	movs	r2, #32
 8002562:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2203      	movs	r2, #3
 8002568:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002574:	2303      	movs	r3, #3
 8002576:	e015      	b.n	80025a4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1e4      	bne.n	8002550 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258a:	223f      	movs	r2, #63	; 0x3f
 800258c:	409a      	lsls	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d004      	beq.n	80025ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2280      	movs	r2, #128	; 0x80
 80025c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e00c      	b.n	80025e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2205      	movs	r2, #5
 80025ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 0201 	bic.w	r2, r2, #1
 80025e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025fc:	4b8e      	ldr	r3, [pc, #568]	; (8002838 <HAL_DMA_IRQHandler+0x248>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a8e      	ldr	r2, [pc, #568]	; (800283c <HAL_DMA_IRQHandler+0x24c>)
 8002602:	fba2 2303 	umull	r2, r3, r2, r3
 8002606:	0a9b      	lsrs	r3, r3, #10
 8002608:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261a:	2208      	movs	r2, #8
 800261c:	409a      	lsls	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	4013      	ands	r3, r2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d01a      	beq.n	800265c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b00      	cmp	r3, #0
 8002632:	d013      	beq.n	800265c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0204 	bic.w	r2, r2, #4
 8002642:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002648:	2208      	movs	r2, #8
 800264a:	409a      	lsls	r2, r3
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002654:	f043 0201 	orr.w	r2, r3, #1
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002660:	2201      	movs	r2, #1
 8002662:	409a      	lsls	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4013      	ands	r3, r2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d012      	beq.n	8002692 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00b      	beq.n	8002692 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267e:	2201      	movs	r2, #1
 8002680:	409a      	lsls	r2, r3
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268a:	f043 0202 	orr.w	r2, r3, #2
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002696:	2204      	movs	r2, #4
 8002698:	409a      	lsls	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4013      	ands	r3, r2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d012      	beq.n	80026c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00b      	beq.n	80026c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b4:	2204      	movs	r2, #4
 80026b6:	409a      	lsls	r2, r3
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c0:	f043 0204 	orr.w	r2, r3, #4
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026cc:	2210      	movs	r2, #16
 80026ce:	409a      	lsls	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d043      	beq.n	8002760 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d03c      	beq.n	8002760 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ea:	2210      	movs	r2, #16
 80026ec:	409a      	lsls	r2, r3
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d018      	beq.n	8002732 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d108      	bne.n	8002720 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	2b00      	cmp	r3, #0
 8002714:	d024      	beq.n	8002760 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	4798      	blx	r3
 800271e:	e01f      	b.n	8002760 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002724:	2b00      	cmp	r3, #0
 8002726:	d01b      	beq.n	8002760 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	4798      	blx	r3
 8002730:	e016      	b.n	8002760 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273c:	2b00      	cmp	r3, #0
 800273e:	d107      	bne.n	8002750 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0208 	bic.w	r2, r2, #8
 800274e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002764:	2220      	movs	r2, #32
 8002766:	409a      	lsls	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4013      	ands	r3, r2
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 808f 	beq.w	8002890 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0310 	and.w	r3, r3, #16
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 8087 	beq.w	8002890 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002786:	2220      	movs	r2, #32
 8002788:	409a      	lsls	r2, r3
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b05      	cmp	r3, #5
 8002798:	d136      	bne.n	8002808 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f022 0216 	bic.w	r2, r2, #22
 80027a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	695a      	ldr	r2, [r3, #20]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d103      	bne.n	80027ca <HAL_DMA_IRQHandler+0x1da>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d007      	beq.n	80027da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f022 0208 	bic.w	r2, r2, #8
 80027d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027de:	223f      	movs	r2, #63	; 0x3f
 80027e0:	409a      	lsls	r2, r3
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d07e      	beq.n	80028fc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	4798      	blx	r3
        }
        return;
 8002806:	e079      	b.n	80028fc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d01d      	beq.n	8002852 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10d      	bne.n	8002840 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002828:	2b00      	cmp	r3, #0
 800282a:	d031      	beq.n	8002890 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	4798      	blx	r3
 8002834:	e02c      	b.n	8002890 <HAL_DMA_IRQHandler+0x2a0>
 8002836:	bf00      	nop
 8002838:	20000008 	.word	0x20000008
 800283c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002844:	2b00      	cmp	r3, #0
 8002846:	d023      	beq.n	8002890 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	4798      	blx	r3
 8002850:	e01e      	b.n	8002890 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10f      	bne.n	8002880 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0210 	bic.w	r2, r2, #16
 800286e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002884:	2b00      	cmp	r3, #0
 8002886:	d003      	beq.n	8002890 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002894:	2b00      	cmp	r3, #0
 8002896:	d032      	beq.n	80028fe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289c:	f003 0301 	and.w	r3, r3, #1
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d022      	beq.n	80028ea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2205      	movs	r2, #5
 80028a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 0201 	bic.w	r2, r2, #1
 80028ba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	3301      	adds	r3, #1
 80028c0:	60bb      	str	r3, [r7, #8]
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d307      	bcc.n	80028d8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f2      	bne.n	80028bc <HAL_DMA_IRQHandler+0x2cc>
 80028d6:	e000      	b.n	80028da <HAL_DMA_IRQHandler+0x2ea>
          break;
 80028d8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d005      	beq.n	80028fe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	4798      	blx	r3
 80028fa:	e000      	b.n	80028fe <HAL_DMA_IRQHandler+0x30e>
        return;
 80028fc:	bf00      	nop
    }
  }
}
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
 8002910:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002920:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	683a      	ldr	r2, [r7, #0]
 8002928:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	2b40      	cmp	r3, #64	; 0x40
 8002930:	d108      	bne.n	8002944 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002942:	e007      	b.n	8002954 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	60da      	str	r2, [r3, #12]
}
 8002954:	bf00      	nop
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	b2db      	uxtb	r3, r3
 800296e:	3b10      	subs	r3, #16
 8002970:	4a14      	ldr	r2, [pc, #80]	; (80029c4 <DMA_CalcBaseAndBitshift+0x64>)
 8002972:	fba2 2303 	umull	r2, r3, r2, r3
 8002976:	091b      	lsrs	r3, r3, #4
 8002978:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800297a:	4a13      	ldr	r2, [pc, #76]	; (80029c8 <DMA_CalcBaseAndBitshift+0x68>)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	4413      	add	r3, r2
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	461a      	mov	r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2b03      	cmp	r3, #3
 800298c:	d909      	bls.n	80029a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002996:	f023 0303 	bic.w	r3, r3, #3
 800299a:	1d1a      	adds	r2, r3, #4
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	659a      	str	r2, [r3, #88]	; 0x58
 80029a0:	e007      	b.n	80029b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029aa:	f023 0303 	bic.w	r3, r3, #3
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3714      	adds	r7, #20
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	aaaaaaab 	.word	0xaaaaaaab
 80029c8:	08006218 	.word	0x08006218

080029cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029d4:	2300      	movs	r3, #0
 80029d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d11f      	bne.n	8002a26 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2b03      	cmp	r3, #3
 80029ea:	d856      	bhi.n	8002a9a <DMA_CheckFifoParam+0xce>
 80029ec:	a201      	add	r2, pc, #4	; (adr r2, 80029f4 <DMA_CheckFifoParam+0x28>)
 80029ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f2:	bf00      	nop
 80029f4:	08002a05 	.word	0x08002a05
 80029f8:	08002a17 	.word	0x08002a17
 80029fc:	08002a05 	.word	0x08002a05
 8002a00:	08002a9b 	.word	0x08002a9b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d046      	beq.n	8002a9e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a14:	e043      	b.n	8002a9e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a1e:	d140      	bne.n	8002aa2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a24:	e03d      	b.n	8002aa2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a2e:	d121      	bne.n	8002a74 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2b03      	cmp	r3, #3
 8002a34:	d837      	bhi.n	8002aa6 <DMA_CheckFifoParam+0xda>
 8002a36:	a201      	add	r2, pc, #4	; (adr r2, 8002a3c <DMA_CheckFifoParam+0x70>)
 8002a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a3c:	08002a4d 	.word	0x08002a4d
 8002a40:	08002a53 	.word	0x08002a53
 8002a44:	08002a4d 	.word	0x08002a4d
 8002a48:	08002a65 	.word	0x08002a65
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a50:	e030      	b.n	8002ab4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d025      	beq.n	8002aaa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a62:	e022      	b.n	8002aaa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a68:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a6c:	d11f      	bne.n	8002aae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a72:	e01c      	b.n	8002aae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d903      	bls.n	8002a82 <DMA_CheckFifoParam+0xb6>
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	2b03      	cmp	r3, #3
 8002a7e:	d003      	beq.n	8002a88 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a80:	e018      	b.n	8002ab4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	73fb      	strb	r3, [r7, #15]
      break;
 8002a86:	e015      	b.n	8002ab4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00e      	beq.n	8002ab2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	73fb      	strb	r3, [r7, #15]
      break;
 8002a98:	e00b      	b.n	8002ab2 <DMA_CheckFifoParam+0xe6>
      break;
 8002a9a:	bf00      	nop
 8002a9c:	e00a      	b.n	8002ab4 <DMA_CheckFifoParam+0xe8>
      break;
 8002a9e:	bf00      	nop
 8002aa0:	e008      	b.n	8002ab4 <DMA_CheckFifoParam+0xe8>
      break;
 8002aa2:	bf00      	nop
 8002aa4:	e006      	b.n	8002ab4 <DMA_CheckFifoParam+0xe8>
      break;
 8002aa6:	bf00      	nop
 8002aa8:	e004      	b.n	8002ab4 <DMA_CheckFifoParam+0xe8>
      break;
 8002aaa:	bf00      	nop
 8002aac:	e002      	b.n	8002ab4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002aae:	bf00      	nop
 8002ab0:	e000      	b.n	8002ab4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ab2:	bf00      	nop
    }
  } 
  
  return status; 
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3714      	adds	r7, #20
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop

08002ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b089      	sub	sp, #36	; 0x24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ada:	2300      	movs	r3, #0
 8002adc:	61fb      	str	r3, [r7, #28]
 8002ade:	e16b      	b.n	8002db8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4013      	ands	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	f040 815a 	bne.w	8002db2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f003 0303 	and.w	r3, r3, #3
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d005      	beq.n	8002b16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d130      	bne.n	8002b78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	2203      	movs	r2, #3
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	43db      	mvns	r3, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	68da      	ldr	r2, [r3, #12]
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	091b      	lsrs	r3, r3, #4
 8002b62:	f003 0201 	and.w	r2, r3, #1
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 0303 	and.w	r3, r3, #3
 8002b80:	2b03      	cmp	r3, #3
 8002b82:	d017      	beq.n	8002bb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	2203      	movs	r2, #3
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	43db      	mvns	r3, r3
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 0303 	and.w	r3, r3, #3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d123      	bne.n	8002c08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	08da      	lsrs	r2, r3, #3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	3208      	adds	r2, #8
 8002bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	220f      	movs	r2, #15
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4013      	ands	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	691a      	ldr	r2, [r3, #16]
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	f003 0307 	and.w	r3, r3, #7
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	08da      	lsrs	r2, r3, #3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	3208      	adds	r2, #8
 8002c02:	69b9      	ldr	r1, [r7, #24]
 8002c04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	2203      	movs	r2, #3
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f003 0203 	and.w	r2, r3, #3
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f000 80b4 	beq.w	8002db2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	60fb      	str	r3, [r7, #12]
 8002c4e:	4b60      	ldr	r3, [pc, #384]	; (8002dd0 <HAL_GPIO_Init+0x30c>)
 8002c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c52:	4a5f      	ldr	r2, [pc, #380]	; (8002dd0 <HAL_GPIO_Init+0x30c>)
 8002c54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c58:	6453      	str	r3, [r2, #68]	; 0x44
 8002c5a:	4b5d      	ldr	r3, [pc, #372]	; (8002dd0 <HAL_GPIO_Init+0x30c>)
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c66:	4a5b      	ldr	r2, [pc, #364]	; (8002dd4 <HAL_GPIO_Init+0x310>)
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	089b      	lsrs	r3, r3, #2
 8002c6c:	3302      	adds	r3, #2
 8002c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f003 0303 	and.w	r3, r3, #3
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	220f      	movs	r2, #15
 8002c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c82:	43db      	mvns	r3, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4013      	ands	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a52      	ldr	r2, [pc, #328]	; (8002dd8 <HAL_GPIO_Init+0x314>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d02b      	beq.n	8002cea <HAL_GPIO_Init+0x226>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a51      	ldr	r2, [pc, #324]	; (8002ddc <HAL_GPIO_Init+0x318>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d025      	beq.n	8002ce6 <HAL_GPIO_Init+0x222>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a50      	ldr	r2, [pc, #320]	; (8002de0 <HAL_GPIO_Init+0x31c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d01f      	beq.n	8002ce2 <HAL_GPIO_Init+0x21e>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a4f      	ldr	r2, [pc, #316]	; (8002de4 <HAL_GPIO_Init+0x320>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d019      	beq.n	8002cde <HAL_GPIO_Init+0x21a>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a4e      	ldr	r2, [pc, #312]	; (8002de8 <HAL_GPIO_Init+0x324>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d013      	beq.n	8002cda <HAL_GPIO_Init+0x216>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a4d      	ldr	r2, [pc, #308]	; (8002dec <HAL_GPIO_Init+0x328>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d00d      	beq.n	8002cd6 <HAL_GPIO_Init+0x212>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a4c      	ldr	r2, [pc, #304]	; (8002df0 <HAL_GPIO_Init+0x32c>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d007      	beq.n	8002cd2 <HAL_GPIO_Init+0x20e>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	4a4b      	ldr	r2, [pc, #300]	; (8002df4 <HAL_GPIO_Init+0x330>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d101      	bne.n	8002cce <HAL_GPIO_Init+0x20a>
 8002cca:	2307      	movs	r3, #7
 8002ccc:	e00e      	b.n	8002cec <HAL_GPIO_Init+0x228>
 8002cce:	2308      	movs	r3, #8
 8002cd0:	e00c      	b.n	8002cec <HAL_GPIO_Init+0x228>
 8002cd2:	2306      	movs	r3, #6
 8002cd4:	e00a      	b.n	8002cec <HAL_GPIO_Init+0x228>
 8002cd6:	2305      	movs	r3, #5
 8002cd8:	e008      	b.n	8002cec <HAL_GPIO_Init+0x228>
 8002cda:	2304      	movs	r3, #4
 8002cdc:	e006      	b.n	8002cec <HAL_GPIO_Init+0x228>
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e004      	b.n	8002cec <HAL_GPIO_Init+0x228>
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	e002      	b.n	8002cec <HAL_GPIO_Init+0x228>
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e000      	b.n	8002cec <HAL_GPIO_Init+0x228>
 8002cea:	2300      	movs	r3, #0
 8002cec:	69fa      	ldr	r2, [r7, #28]
 8002cee:	f002 0203 	and.w	r2, r2, #3
 8002cf2:	0092      	lsls	r2, r2, #2
 8002cf4:	4093      	lsls	r3, r2
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cfc:	4935      	ldr	r1, [pc, #212]	; (8002dd4 <HAL_GPIO_Init+0x310>)
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	089b      	lsrs	r3, r3, #2
 8002d02:	3302      	adds	r3, #2
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d0a:	4b3b      	ldr	r3, [pc, #236]	; (8002df8 <HAL_GPIO_Init+0x334>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	43db      	mvns	r3, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4013      	ands	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d003      	beq.n	8002d2e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d2e:	4a32      	ldr	r2, [pc, #200]	; (8002df8 <HAL_GPIO_Init+0x334>)
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d34:	4b30      	ldr	r3, [pc, #192]	; (8002df8 <HAL_GPIO_Init+0x334>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	43db      	mvns	r3, r3
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	4013      	ands	r3, r2
 8002d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d58:	4a27      	ldr	r2, [pc, #156]	; (8002df8 <HAL_GPIO_Init+0x334>)
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d5e:	4b26      	ldr	r3, [pc, #152]	; (8002df8 <HAL_GPIO_Init+0x334>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	43db      	mvns	r3, r3
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d82:	4a1d      	ldr	r2, [pc, #116]	; (8002df8 <HAL_GPIO_Init+0x334>)
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d88:	4b1b      	ldr	r3, [pc, #108]	; (8002df8 <HAL_GPIO_Init+0x334>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	43db      	mvns	r3, r3
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4013      	ands	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d003      	beq.n	8002dac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dac:	4a12      	ldr	r2, [pc, #72]	; (8002df8 <HAL_GPIO_Init+0x334>)
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	3301      	adds	r3, #1
 8002db6:	61fb      	str	r3, [r7, #28]
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	2b0f      	cmp	r3, #15
 8002dbc:	f67f ae90 	bls.w	8002ae0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002dc0:	bf00      	nop
 8002dc2:	bf00      	nop
 8002dc4:	3724      	adds	r7, #36	; 0x24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	40013800 	.word	0x40013800
 8002dd8:	40020000 	.word	0x40020000
 8002ddc:	40020400 	.word	0x40020400
 8002de0:	40020800 	.word	0x40020800
 8002de4:	40020c00 	.word	0x40020c00
 8002de8:	40021000 	.word	0x40021000
 8002dec:	40021400 	.word	0x40021400
 8002df0:	40021800 	.word	0x40021800
 8002df4:	40021c00 	.word	0x40021c00
 8002df8:	40013c00 	.word	0x40013c00

08002dfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b085      	sub	sp, #20
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	460b      	mov	r3, r1
 8002e06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	887b      	ldrh	r3, [r7, #2]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d002      	beq.n	8002e1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e14:	2301      	movs	r3, #1
 8002e16:	73fb      	strb	r3, [r7, #15]
 8002e18:	e001      	b.n	8002e1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3714      	adds	r7, #20
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	807b      	strh	r3, [r7, #2]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e3c:	787b      	ldrb	r3, [r7, #1]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e42:	887a      	ldrh	r2, [r7, #2]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e48:	e003      	b.n	8002e52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e4a:	887b      	ldrh	r3, [r7, #2]
 8002e4c:	041a      	lsls	r2, r3, #16
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	619a      	str	r2, [r3, #24]
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr

08002e5e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e5e:	b480      	push	{r7}
 8002e60:	b085      	sub	sp, #20
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	460b      	mov	r3, r1
 8002e68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e70:	887a      	ldrh	r2, [r7, #2]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	4013      	ands	r3, r2
 8002e76:	041a      	lsls	r2, r3, #16
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	43d9      	mvns	r1, r3
 8002e7c:	887b      	ldrh	r3, [r7, #2]
 8002e7e:	400b      	ands	r3, r1
 8002e80:	431a      	orrs	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	619a      	str	r2, [r3, #24]
}
 8002e86:	bf00      	nop
 8002e88:	3714      	adds	r7, #20
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
	...

08002e94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e267      	b.n	8003376 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d075      	beq.n	8002f9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eb2:	4b88      	ldr	r3, [pc, #544]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f003 030c 	and.w	r3, r3, #12
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d00c      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ebe:	4b85      	ldr	r3, [pc, #532]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ec6:	2b08      	cmp	r3, #8
 8002ec8:	d112      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eca:	4b82      	ldr	r3, [pc, #520]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ed2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ed6:	d10b      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed8:	4b7e      	ldr	r3, [pc, #504]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d05b      	beq.n	8002f9c <HAL_RCC_OscConfig+0x108>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d157      	bne.n	8002f9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e242      	b.n	8003376 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef8:	d106      	bne.n	8002f08 <HAL_RCC_OscConfig+0x74>
 8002efa:	4b76      	ldr	r3, [pc, #472]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a75      	ldr	r2, [pc, #468]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	e01d      	b.n	8002f44 <HAL_RCC_OscConfig+0xb0>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f10:	d10c      	bne.n	8002f2c <HAL_RCC_OscConfig+0x98>
 8002f12:	4b70      	ldr	r3, [pc, #448]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a6f      	ldr	r2, [pc, #444]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	4b6d      	ldr	r3, [pc, #436]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a6c      	ldr	r2, [pc, #432]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	e00b      	b.n	8002f44 <HAL_RCC_OscConfig+0xb0>
 8002f2c:	4b69      	ldr	r3, [pc, #420]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a68      	ldr	r2, [pc, #416]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f36:	6013      	str	r3, [r2, #0]
 8002f38:	4b66      	ldr	r3, [pc, #408]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a65      	ldr	r2, [pc, #404]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d013      	beq.n	8002f74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4c:	f7fe fe46 	bl	8001bdc <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f54:	f7fe fe42 	bl	8001bdc <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b64      	cmp	r3, #100	; 0x64
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e207      	b.n	8003376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f66:	4b5b      	ldr	r3, [pc, #364]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d0f0      	beq.n	8002f54 <HAL_RCC_OscConfig+0xc0>
 8002f72:	e014      	b.n	8002f9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f74:	f7fe fe32 	bl	8001bdc <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f7c:	f7fe fe2e 	bl	8001bdc <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b64      	cmp	r3, #100	; 0x64
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e1f3      	b.n	8003376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f8e:	4b51      	ldr	r3, [pc, #324]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f0      	bne.n	8002f7c <HAL_RCC_OscConfig+0xe8>
 8002f9a:	e000      	b.n	8002f9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d063      	beq.n	8003072 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002faa:	4b4a      	ldr	r3, [pc, #296]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 030c 	and.w	r3, r3, #12
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00b      	beq.n	8002fce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fb6:	4b47      	ldr	r3, [pc, #284]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d11c      	bne.n	8002ffc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fc2:	4b44      	ldr	r3, [pc, #272]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d116      	bne.n	8002ffc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fce:	4b41      	ldr	r3, [pc, #260]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d005      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x152>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d001      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e1c7      	b.n	8003376 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe6:	4b3b      	ldr	r3, [pc, #236]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	4937      	ldr	r1, [pc, #220]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ffa:	e03a      	b.n	8003072 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d020      	beq.n	8003046 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003004:	4b34      	ldr	r3, [pc, #208]	; (80030d8 <HAL_RCC_OscConfig+0x244>)
 8003006:	2201      	movs	r2, #1
 8003008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300a:	f7fe fde7 	bl	8001bdc <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003012:	f7fe fde3 	bl	8001bdc <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e1a8      	b.n	8003376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003024:	4b2b      	ldr	r3, [pc, #172]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0f0      	beq.n	8003012 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003030:	4b28      	ldr	r3, [pc, #160]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	4925      	ldr	r1, [pc, #148]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8003040:	4313      	orrs	r3, r2
 8003042:	600b      	str	r3, [r1, #0]
 8003044:	e015      	b.n	8003072 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003046:	4b24      	ldr	r3, [pc, #144]	; (80030d8 <HAL_RCC_OscConfig+0x244>)
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800304c:	f7fe fdc6 	bl	8001bdc <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003054:	f7fe fdc2 	bl	8001bdc <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e187      	b.n	8003376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003066:	4b1b      	ldr	r3, [pc, #108]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1f0      	bne.n	8003054 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b00      	cmp	r3, #0
 800307c:	d036      	beq.n	80030ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d016      	beq.n	80030b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003086:	4b15      	ldr	r3, [pc, #84]	; (80030dc <HAL_RCC_OscConfig+0x248>)
 8003088:	2201      	movs	r2, #1
 800308a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800308c:	f7fe fda6 	bl	8001bdc <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003094:	f7fe fda2 	bl	8001bdc <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e167      	b.n	8003376 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030a6:	4b0b      	ldr	r3, [pc, #44]	; (80030d4 <HAL_RCC_OscConfig+0x240>)
 80030a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0f0      	beq.n	8003094 <HAL_RCC_OscConfig+0x200>
 80030b2:	e01b      	b.n	80030ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030b4:	4b09      	ldr	r3, [pc, #36]	; (80030dc <HAL_RCC_OscConfig+0x248>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ba:	f7fe fd8f 	bl	8001bdc <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c0:	e00e      	b.n	80030e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030c2:	f7fe fd8b 	bl	8001bdc <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d907      	bls.n	80030e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e150      	b.n	8003376 <HAL_RCC_OscConfig+0x4e2>
 80030d4:	40023800 	.word	0x40023800
 80030d8:	42470000 	.word	0x42470000
 80030dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e0:	4b88      	ldr	r3, [pc, #544]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 80030e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1ea      	bne.n	80030c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 8097 	beq.w	8003228 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030fa:	2300      	movs	r3, #0
 80030fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030fe:	4b81      	ldr	r3, [pc, #516]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10f      	bne.n	800312a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800310a:	2300      	movs	r3, #0
 800310c:	60bb      	str	r3, [r7, #8]
 800310e:	4b7d      	ldr	r3, [pc, #500]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	4a7c      	ldr	r2, [pc, #496]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 8003114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003118:	6413      	str	r3, [r2, #64]	; 0x40
 800311a:	4b7a      	ldr	r3, [pc, #488]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003122:	60bb      	str	r3, [r7, #8]
 8003124:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003126:	2301      	movs	r3, #1
 8003128:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312a:	4b77      	ldr	r3, [pc, #476]	; (8003308 <HAL_RCC_OscConfig+0x474>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003132:	2b00      	cmp	r3, #0
 8003134:	d118      	bne.n	8003168 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003136:	4b74      	ldr	r3, [pc, #464]	; (8003308 <HAL_RCC_OscConfig+0x474>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a73      	ldr	r2, [pc, #460]	; (8003308 <HAL_RCC_OscConfig+0x474>)
 800313c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003140:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003142:	f7fe fd4b 	bl	8001bdc <HAL_GetTick>
 8003146:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003148:	e008      	b.n	800315c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800314a:	f7fe fd47 	bl	8001bdc <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	2b02      	cmp	r3, #2
 8003156:	d901      	bls.n	800315c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e10c      	b.n	8003376 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800315c:	4b6a      	ldr	r3, [pc, #424]	; (8003308 <HAL_RCC_OscConfig+0x474>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0f0      	beq.n	800314a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d106      	bne.n	800317e <HAL_RCC_OscConfig+0x2ea>
 8003170:	4b64      	ldr	r3, [pc, #400]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 8003172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003174:	4a63      	ldr	r2, [pc, #396]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 8003176:	f043 0301 	orr.w	r3, r3, #1
 800317a:	6713      	str	r3, [r2, #112]	; 0x70
 800317c:	e01c      	b.n	80031b8 <HAL_RCC_OscConfig+0x324>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	2b05      	cmp	r3, #5
 8003184:	d10c      	bne.n	80031a0 <HAL_RCC_OscConfig+0x30c>
 8003186:	4b5f      	ldr	r3, [pc, #380]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 8003188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318a:	4a5e      	ldr	r2, [pc, #376]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 800318c:	f043 0304 	orr.w	r3, r3, #4
 8003190:	6713      	str	r3, [r2, #112]	; 0x70
 8003192:	4b5c      	ldr	r3, [pc, #368]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 8003194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003196:	4a5b      	ldr	r2, [pc, #364]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 8003198:	f043 0301 	orr.w	r3, r3, #1
 800319c:	6713      	str	r3, [r2, #112]	; 0x70
 800319e:	e00b      	b.n	80031b8 <HAL_RCC_OscConfig+0x324>
 80031a0:	4b58      	ldr	r3, [pc, #352]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 80031a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a4:	4a57      	ldr	r2, [pc, #348]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 80031a6:	f023 0301 	bic.w	r3, r3, #1
 80031aa:	6713      	str	r3, [r2, #112]	; 0x70
 80031ac:	4b55      	ldr	r3, [pc, #340]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 80031ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b0:	4a54      	ldr	r2, [pc, #336]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 80031b2:	f023 0304 	bic.w	r3, r3, #4
 80031b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d015      	beq.n	80031ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c0:	f7fe fd0c 	bl	8001bdc <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c6:	e00a      	b.n	80031de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031c8:	f7fe fd08 	bl	8001bdc <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e0cb      	b.n	8003376 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031de:	4b49      	ldr	r3, [pc, #292]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 80031e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d0ee      	beq.n	80031c8 <HAL_RCC_OscConfig+0x334>
 80031ea:	e014      	b.n	8003216 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ec:	f7fe fcf6 	bl	8001bdc <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f2:	e00a      	b.n	800320a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031f4:	f7fe fcf2 	bl	8001bdc <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003202:	4293      	cmp	r3, r2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e0b5      	b.n	8003376 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800320a:	4b3e      	ldr	r3, [pc, #248]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 800320c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1ee      	bne.n	80031f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003216:	7dfb      	ldrb	r3, [r7, #23]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d105      	bne.n	8003228 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800321c:	4b39      	ldr	r3, [pc, #228]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 800321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003220:	4a38      	ldr	r2, [pc, #224]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 8003222:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003226:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 80a1 	beq.w	8003374 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003232:	4b34      	ldr	r3, [pc, #208]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 030c 	and.w	r3, r3, #12
 800323a:	2b08      	cmp	r3, #8
 800323c:	d05c      	beq.n	80032f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	2b02      	cmp	r3, #2
 8003244:	d141      	bne.n	80032ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003246:	4b31      	ldr	r3, [pc, #196]	; (800330c <HAL_RCC_OscConfig+0x478>)
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800324c:	f7fe fcc6 	bl	8001bdc <HAL_GetTick>
 8003250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003252:	e008      	b.n	8003266 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003254:	f7fe fcc2 	bl	8001bdc <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d901      	bls.n	8003266 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e087      	b.n	8003376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003266:	4b27      	ldr	r3, [pc, #156]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d1f0      	bne.n	8003254 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69da      	ldr	r2, [r3, #28]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	019b      	lsls	r3, r3, #6
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003288:	085b      	lsrs	r3, r3, #1
 800328a:	3b01      	subs	r3, #1
 800328c:	041b      	lsls	r3, r3, #16
 800328e:	431a      	orrs	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003294:	061b      	lsls	r3, r3, #24
 8003296:	491b      	ldr	r1, [pc, #108]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 8003298:	4313      	orrs	r3, r2
 800329a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800329c:	4b1b      	ldr	r3, [pc, #108]	; (800330c <HAL_RCC_OscConfig+0x478>)
 800329e:	2201      	movs	r2, #1
 80032a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a2:	f7fe fc9b 	bl	8001bdc <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032aa:	f7fe fc97 	bl	8001bdc <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e05c      	b.n	8003376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032bc:	4b11      	ldr	r3, [pc, #68]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0f0      	beq.n	80032aa <HAL_RCC_OscConfig+0x416>
 80032c8:	e054      	b.n	8003374 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ca:	4b10      	ldr	r3, [pc, #64]	; (800330c <HAL_RCC_OscConfig+0x478>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d0:	f7fe fc84 	bl	8001bdc <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032d8:	f7fe fc80 	bl	8001bdc <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e045      	b.n	8003376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ea:	4b06      	ldr	r3, [pc, #24]	; (8003304 <HAL_RCC_OscConfig+0x470>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1f0      	bne.n	80032d8 <HAL_RCC_OscConfig+0x444>
 80032f6:	e03d      	b.n	8003374 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d107      	bne.n	8003310 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e038      	b.n	8003376 <HAL_RCC_OscConfig+0x4e2>
 8003304:	40023800 	.word	0x40023800
 8003308:	40007000 	.word	0x40007000
 800330c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003310:	4b1b      	ldr	r3, [pc, #108]	; (8003380 <HAL_RCC_OscConfig+0x4ec>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d028      	beq.n	8003370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003328:	429a      	cmp	r2, r3
 800332a:	d121      	bne.n	8003370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003336:	429a      	cmp	r2, r3
 8003338:	d11a      	bne.n	8003370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800333a:	68fa      	ldr	r2, [r7, #12]
 800333c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003340:	4013      	ands	r3, r2
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003346:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003348:	4293      	cmp	r3, r2
 800334a:	d111      	bne.n	8003370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	085b      	lsrs	r3, r3, #1
 8003358:	3b01      	subs	r3, #1
 800335a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800335c:	429a      	cmp	r2, r3
 800335e:	d107      	bne.n	8003370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800336c:	429a      	cmp	r2, r3
 800336e:	d001      	beq.n	8003374 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e000      	b.n	8003376 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3718      	adds	r7, #24
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	40023800 	.word	0x40023800

08003384 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d101      	bne.n	8003398 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e0cc      	b.n	8003532 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003398:	4b68      	ldr	r3, [pc, #416]	; (800353c <HAL_RCC_ClockConfig+0x1b8>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0307 	and.w	r3, r3, #7
 80033a0:	683a      	ldr	r2, [r7, #0]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d90c      	bls.n	80033c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a6:	4b65      	ldr	r3, [pc, #404]	; (800353c <HAL_RCC_ClockConfig+0x1b8>)
 80033a8:	683a      	ldr	r2, [r7, #0]
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ae:	4b63      	ldr	r3, [pc, #396]	; (800353c <HAL_RCC_ClockConfig+0x1b8>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d001      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e0b8      	b.n	8003532 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d020      	beq.n	800340e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d005      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033d8:	4b59      	ldr	r3, [pc, #356]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	4a58      	ldr	r2, [pc, #352]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80033e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d005      	beq.n	80033fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033f0:	4b53      	ldr	r3, [pc, #332]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	4a52      	ldr	r2, [pc, #328]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80033fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033fc:	4b50      	ldr	r3, [pc, #320]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	494d      	ldr	r1, [pc, #308]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 800340a:	4313      	orrs	r3, r2
 800340c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d044      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d107      	bne.n	8003432 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003422:	4b47      	ldr	r3, [pc, #284]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d119      	bne.n	8003462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e07f      	b.n	8003532 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b02      	cmp	r3, #2
 8003438:	d003      	beq.n	8003442 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800343e:	2b03      	cmp	r3, #3
 8003440:	d107      	bne.n	8003452 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003442:	4b3f      	ldr	r3, [pc, #252]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d109      	bne.n	8003462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e06f      	b.n	8003532 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003452:	4b3b      	ldr	r3, [pc, #236]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e067      	b.n	8003532 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003462:	4b37      	ldr	r3, [pc, #220]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	f023 0203 	bic.w	r2, r3, #3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	4934      	ldr	r1, [pc, #208]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 8003470:	4313      	orrs	r3, r2
 8003472:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003474:	f7fe fbb2 	bl	8001bdc <HAL_GetTick>
 8003478:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347a:	e00a      	b.n	8003492 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800347c:	f7fe fbae 	bl	8001bdc <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	f241 3288 	movw	r2, #5000	; 0x1388
 800348a:	4293      	cmp	r3, r2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e04f      	b.n	8003532 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003492:	4b2b      	ldr	r3, [pc, #172]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 020c 	and.w	r2, r3, #12
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d1eb      	bne.n	800347c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034a4:	4b25      	ldr	r3, [pc, #148]	; (800353c <HAL_RCC_ClockConfig+0x1b8>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d20c      	bcs.n	80034cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034b2:	4b22      	ldr	r3, [pc, #136]	; (800353c <HAL_RCC_ClockConfig+0x1b8>)
 80034b4:	683a      	ldr	r2, [r7, #0]
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ba:	4b20      	ldr	r3, [pc, #128]	; (800353c <HAL_RCC_ClockConfig+0x1b8>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d001      	beq.n	80034cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e032      	b.n	8003532 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d008      	beq.n	80034ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034d8:	4b19      	ldr	r3, [pc, #100]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	4916      	ldr	r1, [pc, #88]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d009      	beq.n	800350a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034f6:	4b12      	ldr	r3, [pc, #72]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	490e      	ldr	r1, [pc, #56]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 8003506:	4313      	orrs	r3, r2
 8003508:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800350a:	f000 f821 	bl	8003550 <HAL_RCC_GetSysClockFreq>
 800350e:	4602      	mov	r2, r0
 8003510:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <HAL_RCC_ClockConfig+0x1bc>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	091b      	lsrs	r3, r3, #4
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	490a      	ldr	r1, [pc, #40]	; (8003544 <HAL_RCC_ClockConfig+0x1c0>)
 800351c:	5ccb      	ldrb	r3, [r1, r3]
 800351e:	fa22 f303 	lsr.w	r3, r2, r3
 8003522:	4a09      	ldr	r2, [pc, #36]	; (8003548 <HAL_RCC_ClockConfig+0x1c4>)
 8003524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003526:	4b09      	ldr	r3, [pc, #36]	; (800354c <HAL_RCC_ClockConfig+0x1c8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f7fe fb12 	bl	8001b54 <HAL_InitTick>

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40023c00 	.word	0x40023c00
 8003540:	40023800 	.word	0x40023800
 8003544:	08006200 	.word	0x08006200
 8003548:	20000008 	.word	0x20000008
 800354c:	2000000c 	.word	0x2000000c

08003550 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003554:	b090      	sub	sp, #64	; 0x40
 8003556:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003558:	2300      	movs	r3, #0
 800355a:	637b      	str	r3, [r7, #52]	; 0x34
 800355c:	2300      	movs	r3, #0
 800355e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003560:	2300      	movs	r3, #0
 8003562:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003564:	2300      	movs	r3, #0
 8003566:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003568:	4b59      	ldr	r3, [pc, #356]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f003 030c 	and.w	r3, r3, #12
 8003570:	2b08      	cmp	r3, #8
 8003572:	d00d      	beq.n	8003590 <HAL_RCC_GetSysClockFreq+0x40>
 8003574:	2b08      	cmp	r3, #8
 8003576:	f200 80a1 	bhi.w	80036bc <HAL_RCC_GetSysClockFreq+0x16c>
 800357a:	2b00      	cmp	r3, #0
 800357c:	d002      	beq.n	8003584 <HAL_RCC_GetSysClockFreq+0x34>
 800357e:	2b04      	cmp	r3, #4
 8003580:	d003      	beq.n	800358a <HAL_RCC_GetSysClockFreq+0x3a>
 8003582:	e09b      	b.n	80036bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003584:	4b53      	ldr	r3, [pc, #332]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003586:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003588:	e09b      	b.n	80036c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800358a:	4b53      	ldr	r3, [pc, #332]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800358c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800358e:	e098      	b.n	80036c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003590:	4b4f      	ldr	r3, [pc, #316]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003598:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800359a:	4b4d      	ldr	r3, [pc, #308]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d028      	beq.n	80035f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035a6:	4b4a      	ldr	r3, [pc, #296]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	099b      	lsrs	r3, r3, #6
 80035ac:	2200      	movs	r2, #0
 80035ae:	623b      	str	r3, [r7, #32]
 80035b0:	627a      	str	r2, [r7, #36]	; 0x24
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80035b8:	2100      	movs	r1, #0
 80035ba:	4b47      	ldr	r3, [pc, #284]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80035bc:	fb03 f201 	mul.w	r2, r3, r1
 80035c0:	2300      	movs	r3, #0
 80035c2:	fb00 f303 	mul.w	r3, r0, r3
 80035c6:	4413      	add	r3, r2
 80035c8:	4a43      	ldr	r2, [pc, #268]	; (80036d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80035ca:	fba0 1202 	umull	r1, r2, r0, r2
 80035ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035d0:	460a      	mov	r2, r1
 80035d2:	62ba      	str	r2, [r7, #40]	; 0x28
 80035d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035d6:	4413      	add	r3, r2
 80035d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035dc:	2200      	movs	r2, #0
 80035de:	61bb      	str	r3, [r7, #24]
 80035e0:	61fa      	str	r2, [r7, #28]
 80035e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80035ea:	f7fd fa8b 	bl	8000b04 <__aeabi_uldivmod>
 80035ee:	4602      	mov	r2, r0
 80035f0:	460b      	mov	r3, r1
 80035f2:	4613      	mov	r3, r2
 80035f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035f6:	e053      	b.n	80036a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035f8:	4b35      	ldr	r3, [pc, #212]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	099b      	lsrs	r3, r3, #6
 80035fe:	2200      	movs	r2, #0
 8003600:	613b      	str	r3, [r7, #16]
 8003602:	617a      	str	r2, [r7, #20]
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800360a:	f04f 0b00 	mov.w	fp, #0
 800360e:	4652      	mov	r2, sl
 8003610:	465b      	mov	r3, fp
 8003612:	f04f 0000 	mov.w	r0, #0
 8003616:	f04f 0100 	mov.w	r1, #0
 800361a:	0159      	lsls	r1, r3, #5
 800361c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003620:	0150      	lsls	r0, r2, #5
 8003622:	4602      	mov	r2, r0
 8003624:	460b      	mov	r3, r1
 8003626:	ebb2 080a 	subs.w	r8, r2, sl
 800362a:	eb63 090b 	sbc.w	r9, r3, fp
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	f04f 0300 	mov.w	r3, #0
 8003636:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800363a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800363e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003642:	ebb2 0408 	subs.w	r4, r2, r8
 8003646:	eb63 0509 	sbc.w	r5, r3, r9
 800364a:	f04f 0200 	mov.w	r2, #0
 800364e:	f04f 0300 	mov.w	r3, #0
 8003652:	00eb      	lsls	r3, r5, #3
 8003654:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003658:	00e2      	lsls	r2, r4, #3
 800365a:	4614      	mov	r4, r2
 800365c:	461d      	mov	r5, r3
 800365e:	eb14 030a 	adds.w	r3, r4, sl
 8003662:	603b      	str	r3, [r7, #0]
 8003664:	eb45 030b 	adc.w	r3, r5, fp
 8003668:	607b      	str	r3, [r7, #4]
 800366a:	f04f 0200 	mov.w	r2, #0
 800366e:	f04f 0300 	mov.w	r3, #0
 8003672:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003676:	4629      	mov	r1, r5
 8003678:	028b      	lsls	r3, r1, #10
 800367a:	4621      	mov	r1, r4
 800367c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003680:	4621      	mov	r1, r4
 8003682:	028a      	lsls	r2, r1, #10
 8003684:	4610      	mov	r0, r2
 8003686:	4619      	mov	r1, r3
 8003688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800368a:	2200      	movs	r2, #0
 800368c:	60bb      	str	r3, [r7, #8]
 800368e:	60fa      	str	r2, [r7, #12]
 8003690:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003694:	f7fd fa36 	bl	8000b04 <__aeabi_uldivmod>
 8003698:	4602      	mov	r2, r0
 800369a:	460b      	mov	r3, r1
 800369c:	4613      	mov	r3, r2
 800369e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036a0:	4b0b      	ldr	r3, [pc, #44]	; (80036d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	0c1b      	lsrs	r3, r3, #16
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	3301      	adds	r3, #1
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80036b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80036b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036ba:	e002      	b.n	80036c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036bc:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80036be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80036c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3740      	adds	r7, #64	; 0x40
 80036c8:	46bd      	mov	sp, r7
 80036ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036ce:	bf00      	nop
 80036d0:	40023800 	.word	0x40023800
 80036d4:	00f42400 	.word	0x00f42400
 80036d8:	017d7840 	.word	0x017d7840

080036dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036e0:	4b03      	ldr	r3, [pc, #12]	; (80036f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80036e2:	681b      	ldr	r3, [r3, #0]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	20000008 	.word	0x20000008

080036f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036f8:	f7ff fff0 	bl	80036dc <HAL_RCC_GetHCLKFreq>
 80036fc:	4602      	mov	r2, r0
 80036fe:	4b05      	ldr	r3, [pc, #20]	; (8003714 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	0a9b      	lsrs	r3, r3, #10
 8003704:	f003 0307 	and.w	r3, r3, #7
 8003708:	4903      	ldr	r1, [pc, #12]	; (8003718 <HAL_RCC_GetPCLK1Freq+0x24>)
 800370a:	5ccb      	ldrb	r3, [r1, r3]
 800370c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003710:	4618      	mov	r0, r3
 8003712:	bd80      	pop	{r7, pc}
 8003714:	40023800 	.word	0x40023800
 8003718:	08006210 	.word	0x08006210

0800371c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003720:	f7ff ffdc 	bl	80036dc <HAL_RCC_GetHCLKFreq>
 8003724:	4602      	mov	r2, r0
 8003726:	4b05      	ldr	r3, [pc, #20]	; (800373c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	0b5b      	lsrs	r3, r3, #13
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	4903      	ldr	r1, [pc, #12]	; (8003740 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003732:	5ccb      	ldrb	r3, [r1, r3]
 8003734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003738:	4618      	mov	r0, r3
 800373a:	bd80      	pop	{r7, pc}
 800373c:	40023800 	.word	0x40023800
 8003740:	08006210 	.word	0x08006210

08003744 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e041      	b.n	80037da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d106      	bne.n	8003770 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7fd fe70 	bl	8001450 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2202      	movs	r2, #2
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3304      	adds	r3, #4
 8003780:	4619      	mov	r1, r3
 8003782:	4610      	mov	r0, r2
 8003784:	f000 fb5e 	bl	8003e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2201      	movs	r2, #1
 800379c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037d8:	2300      	movs	r3, #0
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3708      	adds	r7, #8
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
	...

080037e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d001      	beq.n	80037fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e046      	b.n	800388a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a23      	ldr	r2, [pc, #140]	; (8003898 <HAL_TIM_Base_Start+0xb4>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d022      	beq.n	8003854 <HAL_TIM_Base_Start+0x70>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003816:	d01d      	beq.n	8003854 <HAL_TIM_Base_Start+0x70>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a1f      	ldr	r2, [pc, #124]	; (800389c <HAL_TIM_Base_Start+0xb8>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d018      	beq.n	8003854 <HAL_TIM_Base_Start+0x70>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a1e      	ldr	r2, [pc, #120]	; (80038a0 <HAL_TIM_Base_Start+0xbc>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d013      	beq.n	8003854 <HAL_TIM_Base_Start+0x70>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a1c      	ldr	r2, [pc, #112]	; (80038a4 <HAL_TIM_Base_Start+0xc0>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d00e      	beq.n	8003854 <HAL_TIM_Base_Start+0x70>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a1b      	ldr	r2, [pc, #108]	; (80038a8 <HAL_TIM_Base_Start+0xc4>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d009      	beq.n	8003854 <HAL_TIM_Base_Start+0x70>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a19      	ldr	r2, [pc, #100]	; (80038ac <HAL_TIM_Base_Start+0xc8>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d004      	beq.n	8003854 <HAL_TIM_Base_Start+0x70>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a18      	ldr	r2, [pc, #96]	; (80038b0 <HAL_TIM_Base_Start+0xcc>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d111      	bne.n	8003878 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 0307 	and.w	r3, r3, #7
 800385e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2b06      	cmp	r3, #6
 8003864:	d010      	beq.n	8003888 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f042 0201 	orr.w	r2, r2, #1
 8003874:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003876:	e007      	b.n	8003888 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f042 0201 	orr.w	r2, r2, #1
 8003886:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3714      	adds	r7, #20
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	40010000 	.word	0x40010000
 800389c:	40000400 	.word	0x40000400
 80038a0:	40000800 	.word	0x40000800
 80038a4:	40000c00 	.word	0x40000c00
 80038a8:	40010400 	.word	0x40010400
 80038ac:	40014000 	.word	0x40014000
 80038b0:	40001800 	.word	0x40001800

080038b4 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6a1a      	ldr	r2, [r3, #32]
 80038c2:	f241 1311 	movw	r3, #4369	; 0x1111
 80038c6:	4013      	ands	r3, r2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10f      	bne.n	80038ec <HAL_TIM_Base_Stop+0x38>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6a1a      	ldr	r2, [r3, #32]
 80038d2:	f240 4344 	movw	r3, #1092	; 0x444
 80038d6:	4013      	ands	r3, r2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d107      	bne.n	80038ec <HAL_TIM_Base_Stop+0x38>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0201 	bic.w	r2, r2, #1
 80038ea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
	...

08003904 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003912:	b2db      	uxtb	r3, r3
 8003914:	2b01      	cmp	r3, #1
 8003916:	d001      	beq.n	800391c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e04e      	b.n	80039ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2202      	movs	r2, #2
 8003920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68da      	ldr	r2, [r3, #12]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0201 	orr.w	r2, r2, #1
 8003932:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a23      	ldr	r2, [pc, #140]	; (80039c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d022      	beq.n	8003984 <HAL_TIM_Base_Start_IT+0x80>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003946:	d01d      	beq.n	8003984 <HAL_TIM_Base_Start_IT+0x80>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a1f      	ldr	r2, [pc, #124]	; (80039cc <HAL_TIM_Base_Start_IT+0xc8>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d018      	beq.n	8003984 <HAL_TIM_Base_Start_IT+0x80>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a1e      	ldr	r2, [pc, #120]	; (80039d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d013      	beq.n	8003984 <HAL_TIM_Base_Start_IT+0x80>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a1c      	ldr	r2, [pc, #112]	; (80039d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d00e      	beq.n	8003984 <HAL_TIM_Base_Start_IT+0x80>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a1b      	ldr	r2, [pc, #108]	; (80039d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d009      	beq.n	8003984 <HAL_TIM_Base_Start_IT+0x80>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a19      	ldr	r2, [pc, #100]	; (80039dc <HAL_TIM_Base_Start_IT+0xd8>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d004      	beq.n	8003984 <HAL_TIM_Base_Start_IT+0x80>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a18      	ldr	r2, [pc, #96]	; (80039e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d111      	bne.n	80039a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2b06      	cmp	r3, #6
 8003994:	d010      	beq.n	80039b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f042 0201 	orr.w	r2, r2, #1
 80039a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a6:	e007      	b.n	80039b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0201 	orr.w	r2, r2, #1
 80039b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40010000 	.word	0x40010000
 80039cc:	40000400 	.word	0x40000400
 80039d0:	40000800 	.word	0x40000800
 80039d4:	40000c00 	.word	0x40000c00
 80039d8:	40010400 	.word	0x40010400
 80039dc:	40014000 	.word	0x40014000
 80039e0:	40001800 	.word	0x40001800

080039e4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0201 	bic.w	r2, r2, #1
 80039fa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6a1a      	ldr	r2, [r3, #32]
 8003a02:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a06:	4013      	ands	r3, r2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10f      	bne.n	8003a2c <HAL_TIM_Base_Stop_IT+0x48>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6a1a      	ldr	r2, [r3, #32]
 8003a12:	f240 4344 	movw	r3, #1092	; 0x444
 8003a16:	4013      	ands	r3, r2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d107      	bne.n	8003a2c <HAL_TIM_Base_Stop_IT+0x48>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 0201 	bic.w	r2, r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b082      	sub	sp, #8
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d122      	bne.n	8003a9e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d11b      	bne.n	8003a9e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f06f 0202 	mvn.w	r2, #2
 8003a6e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	f003 0303 	and.w	r3, r3, #3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f9bf 	bl	8003e08 <HAL_TIM_IC_CaptureCallback>
 8003a8a:	e005      	b.n	8003a98 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f000 f9b1 	bl	8003df4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f9c2 	bl	8003e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d122      	bne.n	8003af2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f003 0304 	and.w	r3, r3, #4
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d11b      	bne.n	8003af2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f06f 0204 	mvn.w	r2, #4
 8003ac2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 f995 	bl	8003e08 <HAL_TIM_IC_CaptureCallback>
 8003ade:	e005      	b.n	8003aec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f987 	bl	8003df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f998 	bl	8003e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	f003 0308 	and.w	r3, r3, #8
 8003afc:	2b08      	cmp	r3, #8
 8003afe:	d122      	bne.n	8003b46 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	f003 0308 	and.w	r3, r3, #8
 8003b0a:	2b08      	cmp	r3, #8
 8003b0c:	d11b      	bne.n	8003b46 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f06f 0208 	mvn.w	r2, #8
 8003b16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2204      	movs	r2, #4
 8003b1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	69db      	ldr	r3, [r3, #28]
 8003b24:	f003 0303 	and.w	r3, r3, #3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d003      	beq.n	8003b34 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f96b 	bl	8003e08 <HAL_TIM_IC_CaptureCallback>
 8003b32:	e005      	b.n	8003b40 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f95d 	bl	8003df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f96e 	bl	8003e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	f003 0310 	and.w	r3, r3, #16
 8003b50:	2b10      	cmp	r3, #16
 8003b52:	d122      	bne.n	8003b9a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f003 0310 	and.w	r3, r3, #16
 8003b5e:	2b10      	cmp	r3, #16
 8003b60:	d11b      	bne.n	8003b9a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f06f 0210 	mvn.w	r2, #16
 8003b6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2208      	movs	r2, #8
 8003b70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	69db      	ldr	r3, [r3, #28]
 8003b78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d003      	beq.n	8003b88 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 f941 	bl	8003e08 <HAL_TIM_IC_CaptureCallback>
 8003b86:	e005      	b.n	8003b94 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f933 	bl	8003df4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f944 	bl	8003e1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	691b      	ldr	r3, [r3, #16]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d10e      	bne.n	8003bc6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f003 0301 	and.w	r3, r3, #1
 8003bb2:	2b01      	cmp	r3, #1
 8003bb4:	d107      	bne.n	8003bc6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f06f 0201 	mvn.w	r2, #1
 8003bbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 f90d 	bl	8003de0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd0:	2b80      	cmp	r3, #128	; 0x80
 8003bd2:	d10e      	bne.n	8003bf2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bde:	2b80      	cmp	r3, #128	; 0x80
 8003be0:	d107      	bne.n	8003bf2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 fae9 	bl	80041c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bfc:	2b40      	cmp	r3, #64	; 0x40
 8003bfe:	d10e      	bne.n	8003c1e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0a:	2b40      	cmp	r3, #64	; 0x40
 8003c0c:	d107      	bne.n	8003c1e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 f909 	bl	8003e30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	f003 0320 	and.w	r3, r3, #32
 8003c28:	2b20      	cmp	r3, #32
 8003c2a:	d10e      	bne.n	8003c4a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	f003 0320 	and.w	r3, r3, #32
 8003c36:	2b20      	cmp	r3, #32
 8003c38:	d107      	bne.n	8003c4a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f06f 0220 	mvn.w	r2, #32
 8003c42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 fab3 	bl	80041b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c4a:	bf00      	nop
 8003c4c:	3708      	adds	r7, #8
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b084      	sub	sp, #16
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
 8003c5a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d101      	bne.n	8003c6e <HAL_TIM_ConfigClockSource+0x1c>
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	e0b4      	b.n	8003dd8 <HAL_TIM_ConfigClockSource+0x186>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2202      	movs	r2, #2
 8003c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c8c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c94:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ca6:	d03e      	beq.n	8003d26 <HAL_TIM_ConfigClockSource+0xd4>
 8003ca8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cac:	f200 8087 	bhi.w	8003dbe <HAL_TIM_ConfigClockSource+0x16c>
 8003cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb4:	f000 8086 	beq.w	8003dc4 <HAL_TIM_ConfigClockSource+0x172>
 8003cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cbc:	d87f      	bhi.n	8003dbe <HAL_TIM_ConfigClockSource+0x16c>
 8003cbe:	2b70      	cmp	r3, #112	; 0x70
 8003cc0:	d01a      	beq.n	8003cf8 <HAL_TIM_ConfigClockSource+0xa6>
 8003cc2:	2b70      	cmp	r3, #112	; 0x70
 8003cc4:	d87b      	bhi.n	8003dbe <HAL_TIM_ConfigClockSource+0x16c>
 8003cc6:	2b60      	cmp	r3, #96	; 0x60
 8003cc8:	d050      	beq.n	8003d6c <HAL_TIM_ConfigClockSource+0x11a>
 8003cca:	2b60      	cmp	r3, #96	; 0x60
 8003ccc:	d877      	bhi.n	8003dbe <HAL_TIM_ConfigClockSource+0x16c>
 8003cce:	2b50      	cmp	r3, #80	; 0x50
 8003cd0:	d03c      	beq.n	8003d4c <HAL_TIM_ConfigClockSource+0xfa>
 8003cd2:	2b50      	cmp	r3, #80	; 0x50
 8003cd4:	d873      	bhi.n	8003dbe <HAL_TIM_ConfigClockSource+0x16c>
 8003cd6:	2b40      	cmp	r3, #64	; 0x40
 8003cd8:	d058      	beq.n	8003d8c <HAL_TIM_ConfigClockSource+0x13a>
 8003cda:	2b40      	cmp	r3, #64	; 0x40
 8003cdc:	d86f      	bhi.n	8003dbe <HAL_TIM_ConfigClockSource+0x16c>
 8003cde:	2b30      	cmp	r3, #48	; 0x30
 8003ce0:	d064      	beq.n	8003dac <HAL_TIM_ConfigClockSource+0x15a>
 8003ce2:	2b30      	cmp	r3, #48	; 0x30
 8003ce4:	d86b      	bhi.n	8003dbe <HAL_TIM_ConfigClockSource+0x16c>
 8003ce6:	2b20      	cmp	r3, #32
 8003ce8:	d060      	beq.n	8003dac <HAL_TIM_ConfigClockSource+0x15a>
 8003cea:	2b20      	cmp	r3, #32
 8003cec:	d867      	bhi.n	8003dbe <HAL_TIM_ConfigClockSource+0x16c>
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d05c      	beq.n	8003dac <HAL_TIM_ConfigClockSource+0x15a>
 8003cf2:	2b10      	cmp	r3, #16
 8003cf4:	d05a      	beq.n	8003dac <HAL_TIM_ConfigClockSource+0x15a>
 8003cf6:	e062      	b.n	8003dbe <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6818      	ldr	r0, [r3, #0]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	6899      	ldr	r1, [r3, #8]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	f000 f9b6 	bl	8004078 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d1a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68ba      	ldr	r2, [r7, #8]
 8003d22:	609a      	str	r2, [r3, #8]
      break;
 8003d24:	e04f      	b.n	8003dc6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6818      	ldr	r0, [r3, #0]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	6899      	ldr	r1, [r3, #8]
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f000 f99f 	bl	8004078 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d48:	609a      	str	r2, [r3, #8]
      break;
 8003d4a:	e03c      	b.n	8003dc6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6818      	ldr	r0, [r3, #0]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	6859      	ldr	r1, [r3, #4]
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	461a      	mov	r2, r3
 8003d5a:	f000 f913 	bl	8003f84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2150      	movs	r1, #80	; 0x50
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 f96c 	bl	8004042 <TIM_ITRx_SetConfig>
      break;
 8003d6a:	e02c      	b.n	8003dc6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6818      	ldr	r0, [r3, #0]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	6859      	ldr	r1, [r3, #4]
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	461a      	mov	r2, r3
 8003d7a:	f000 f932 	bl	8003fe2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2160      	movs	r1, #96	; 0x60
 8003d84:	4618      	mov	r0, r3
 8003d86:	f000 f95c 	bl	8004042 <TIM_ITRx_SetConfig>
      break;
 8003d8a:	e01c      	b.n	8003dc6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6818      	ldr	r0, [r3, #0]
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	6859      	ldr	r1, [r3, #4]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	461a      	mov	r2, r3
 8003d9a:	f000 f8f3 	bl	8003f84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2140      	movs	r1, #64	; 0x40
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 f94c 	bl	8004042 <TIM_ITRx_SetConfig>
      break;
 8003daa:	e00c      	b.n	8003dc6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4619      	mov	r1, r3
 8003db6:	4610      	mov	r0, r2
 8003db8:	f000 f943 	bl	8004042 <TIM_ITRx_SetConfig>
      break;
 8003dbc:	e003      	b.n	8003dc6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	73fb      	strb	r3, [r7, #15]
      break;
 8003dc2:	e000      	b.n	8003dc6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003dc4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a40      	ldr	r2, [pc, #256]	; (8003f58 <TIM_Base_SetConfig+0x114>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d013      	beq.n	8003e84 <TIM_Base_SetConfig+0x40>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e62:	d00f      	beq.n	8003e84 <TIM_Base_SetConfig+0x40>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a3d      	ldr	r2, [pc, #244]	; (8003f5c <TIM_Base_SetConfig+0x118>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d00b      	beq.n	8003e84 <TIM_Base_SetConfig+0x40>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a3c      	ldr	r2, [pc, #240]	; (8003f60 <TIM_Base_SetConfig+0x11c>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d007      	beq.n	8003e84 <TIM_Base_SetConfig+0x40>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a3b      	ldr	r2, [pc, #236]	; (8003f64 <TIM_Base_SetConfig+0x120>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d003      	beq.n	8003e84 <TIM_Base_SetConfig+0x40>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a3a      	ldr	r2, [pc, #232]	; (8003f68 <TIM_Base_SetConfig+0x124>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d108      	bne.n	8003e96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a2f      	ldr	r2, [pc, #188]	; (8003f58 <TIM_Base_SetConfig+0x114>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d02b      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea4:	d027      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a2c      	ldr	r2, [pc, #176]	; (8003f5c <TIM_Base_SetConfig+0x118>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d023      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a2b      	ldr	r2, [pc, #172]	; (8003f60 <TIM_Base_SetConfig+0x11c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d01f      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a2a      	ldr	r2, [pc, #168]	; (8003f64 <TIM_Base_SetConfig+0x120>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d01b      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a29      	ldr	r2, [pc, #164]	; (8003f68 <TIM_Base_SetConfig+0x124>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d017      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a28      	ldr	r2, [pc, #160]	; (8003f6c <TIM_Base_SetConfig+0x128>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d013      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a27      	ldr	r2, [pc, #156]	; (8003f70 <TIM_Base_SetConfig+0x12c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d00f      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a26      	ldr	r2, [pc, #152]	; (8003f74 <TIM_Base_SetConfig+0x130>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d00b      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a25      	ldr	r2, [pc, #148]	; (8003f78 <TIM_Base_SetConfig+0x134>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d007      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a24      	ldr	r2, [pc, #144]	; (8003f7c <TIM_Base_SetConfig+0x138>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d003      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a23      	ldr	r2, [pc, #140]	; (8003f80 <TIM_Base_SetConfig+0x13c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d108      	bne.n	8003f08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003efc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a0a      	ldr	r2, [pc, #40]	; (8003f58 <TIM_Base_SetConfig+0x114>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d003      	beq.n	8003f3c <TIM_Base_SetConfig+0xf8>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a0c      	ldr	r2, [pc, #48]	; (8003f68 <TIM_Base_SetConfig+0x124>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d103      	bne.n	8003f44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	691a      	ldr	r2, [r3, #16]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	615a      	str	r2, [r3, #20]
}
 8003f4a:	bf00      	nop
 8003f4c:	3714      	adds	r7, #20
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	40010000 	.word	0x40010000
 8003f5c:	40000400 	.word	0x40000400
 8003f60:	40000800 	.word	0x40000800
 8003f64:	40000c00 	.word	0x40000c00
 8003f68:	40010400 	.word	0x40010400
 8003f6c:	40014000 	.word	0x40014000
 8003f70:	40014400 	.word	0x40014400
 8003f74:	40014800 	.word	0x40014800
 8003f78:	40001800 	.word	0x40001800
 8003f7c:	40001c00 	.word	0x40001c00
 8003f80:	40002000 	.word	0x40002000

08003f84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b087      	sub	sp, #28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	6a1b      	ldr	r3, [r3, #32]
 8003f94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	f023 0201 	bic.w	r2, r3, #1
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	011b      	lsls	r3, r3, #4
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f023 030a 	bic.w	r3, r3, #10
 8003fc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	621a      	str	r2, [r3, #32]
}
 8003fd6:	bf00      	nop
 8003fd8:	371c      	adds	r7, #28
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b087      	sub	sp, #28
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	60f8      	str	r0, [r7, #12]
 8003fea:	60b9      	str	r1, [r7, #8]
 8003fec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	f023 0210 	bic.w	r2, r3, #16
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6a1b      	ldr	r3, [r3, #32]
 8004004:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800400c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	031b      	lsls	r3, r3, #12
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	4313      	orrs	r3, r2
 8004016:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800401e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	011b      	lsls	r3, r3, #4
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	4313      	orrs	r3, r2
 8004028:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	693a      	ldr	r2, [r7, #16]
 8004034:	621a      	str	r2, [r3, #32]
}
 8004036:	bf00      	nop
 8004038:	371c      	adds	r7, #28
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004042:	b480      	push	{r7}
 8004044:	b085      	sub	sp, #20
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
 800404a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004058:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4313      	orrs	r3, r2
 8004060:	f043 0307 	orr.w	r3, r3, #7
 8004064:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	609a      	str	r2, [r3, #8]
}
 800406c:	bf00      	nop
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004078:	b480      	push	{r7}
 800407a:	b087      	sub	sp, #28
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
 8004084:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004092:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	021a      	lsls	r2, r3, #8
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	431a      	orrs	r2, r3
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	4313      	orrs	r3, r2
 80040a0:	697a      	ldr	r2, [r7, #20]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	609a      	str	r2, [r3, #8]
}
 80040ac:	bf00      	nop
 80040ae:	371c      	adds	r7, #28
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d101      	bne.n	80040d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040cc:	2302      	movs	r3, #2
 80040ce:	e05a      	b.n	8004186 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2202      	movs	r2, #2
 80040dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68fa      	ldr	r2, [r7, #12]
 80040fe:	4313      	orrs	r3, r2
 8004100:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a21      	ldr	r2, [pc, #132]	; (8004194 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d022      	beq.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800411c:	d01d      	beq.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a1d      	ldr	r2, [pc, #116]	; (8004198 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d018      	beq.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a1b      	ldr	r2, [pc, #108]	; (800419c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d013      	beq.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a1a      	ldr	r2, [pc, #104]	; (80041a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d00e      	beq.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a18      	ldr	r2, [pc, #96]	; (80041a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d009      	beq.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a17      	ldr	r2, [pc, #92]	; (80041a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d004      	beq.n	800415a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a15      	ldr	r2, [pc, #84]	; (80041ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d10c      	bne.n	8004174 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004160:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	68ba      	ldr	r2, [r7, #8]
 8004168:	4313      	orrs	r3, r2
 800416a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	40010000 	.word	0x40010000
 8004198:	40000400 	.word	0x40000400
 800419c:	40000800 	.word	0x40000800
 80041a0:	40000c00 	.word	0x40000c00
 80041a4:	40010400 	.word	0x40010400
 80041a8:	40014000 	.word	0x40014000
 80041ac:	40001800 	.word	0x40001800

080041b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e03f      	b.n	800426a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041f0:	b2db      	uxtb	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d106      	bne.n	8004204 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7fd f988 	bl	8001514 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2224      	movs	r2, #36	; 0x24
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800421a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 fcf7 	bl	8004c10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	691a      	ldr	r2, [r3, #16]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004230:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	695a      	ldr	r2, [r3, #20]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004240:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68da      	ldr	r2, [r3, #12]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004250:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2220      	movs	r2, #32
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2220      	movs	r2, #32
 8004264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004272:	b580      	push	{r7, lr}
 8004274:	b084      	sub	sp, #16
 8004276:	af00      	add	r7, sp, #0
 8004278:	60f8      	str	r0, [r7, #12]
 800427a:	60b9      	str	r1, [r7, #8]
 800427c:	4613      	mov	r3, r2
 800427e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b20      	cmp	r3, #32
 800428a:	d11d      	bne.n	80042c8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d002      	beq.n	8004298 <HAL_UART_Receive_IT+0x26>
 8004292:	88fb      	ldrh	r3, [r7, #6]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e016      	b.n	80042ca <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d101      	bne.n	80042aa <HAL_UART_Receive_IT+0x38>
 80042a6:	2302      	movs	r3, #2
 80042a8:	e00f      	b.n	80042ca <HAL_UART_Receive_IT+0x58>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80042b8:	88fb      	ldrh	r3, [r7, #6]
 80042ba:	461a      	mov	r2, r3
 80042bc:	68b9      	ldr	r1, [r7, #8]
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	f000 fab6 	bl	8004830 <UART_Start_Receive_IT>
 80042c4:	4603      	mov	r3, r0
 80042c6:	e000      	b.n	80042ca <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80042c8:	2302      	movs	r3, #2
  }
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3710      	adds	r7, #16
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}
	...

080042d4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b0ba      	sub	sp, #232	; 0xe8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80042fa:	2300      	movs	r3, #0
 80042fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004300:	2300      	movs	r3, #0
 8004302:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004312:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10f      	bne.n	800433a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800431a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800431e:	f003 0320 	and.w	r3, r3, #32
 8004322:	2b00      	cmp	r3, #0
 8004324:	d009      	beq.n	800433a <HAL_UART_IRQHandler+0x66>
 8004326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800432a:	f003 0320 	and.w	r3, r3, #32
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f000 fb9a 	bl	8004a6c <UART_Receive_IT>
      return;
 8004338:	e256      	b.n	80047e8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800433a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800433e:	2b00      	cmp	r3, #0
 8004340:	f000 80de 	beq.w	8004500 <HAL_UART_IRQHandler+0x22c>
 8004344:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004348:	f003 0301 	and.w	r3, r3, #1
 800434c:	2b00      	cmp	r3, #0
 800434e:	d106      	bne.n	800435e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004354:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 80d1 	beq.w	8004500 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800435e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d00b      	beq.n	8004382 <HAL_UART_IRQHandler+0xae>
 800436a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800436e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004372:	2b00      	cmp	r3, #0
 8004374:	d005      	beq.n	8004382 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437a:	f043 0201 	orr.w	r2, r3, #1
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004386:	f003 0304 	and.w	r3, r3, #4
 800438a:	2b00      	cmp	r3, #0
 800438c:	d00b      	beq.n	80043a6 <HAL_UART_IRQHandler+0xd2>
 800438e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	2b00      	cmp	r3, #0
 8004398:	d005      	beq.n	80043a6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	f043 0202 	orr.w	r2, r3, #2
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00b      	beq.n	80043ca <HAL_UART_IRQHandler+0xf6>
 80043b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043b6:	f003 0301 	and.w	r3, r3, #1
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d005      	beq.n	80043ca <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	f043 0204 	orr.w	r2, r3, #4
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80043ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d011      	beq.n	80043fa <HAL_UART_IRQHandler+0x126>
 80043d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043da:	f003 0320 	and.w	r3, r3, #32
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d105      	bne.n	80043ee <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80043e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d005      	beq.n	80043fa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	f043 0208 	orr.w	r2, r3, #8
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f000 81ed 	beq.w	80047de <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004408:	f003 0320 	and.w	r3, r3, #32
 800440c:	2b00      	cmp	r3, #0
 800440e:	d008      	beq.n	8004422 <HAL_UART_IRQHandler+0x14e>
 8004410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004414:	f003 0320 	and.w	r3, r3, #32
 8004418:	2b00      	cmp	r3, #0
 800441a:	d002      	beq.n	8004422 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 fb25 	bl	8004a6c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442c:	2b40      	cmp	r3, #64	; 0x40
 800442e:	bf0c      	ite	eq
 8004430:	2301      	moveq	r3, #1
 8004432:	2300      	movne	r3, #0
 8004434:	b2db      	uxtb	r3, r3
 8004436:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443e:	f003 0308 	and.w	r3, r3, #8
 8004442:	2b00      	cmp	r3, #0
 8004444:	d103      	bne.n	800444e <HAL_UART_IRQHandler+0x17a>
 8004446:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800444a:	2b00      	cmp	r3, #0
 800444c:	d04f      	beq.n	80044ee <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 fa2c 	bl	80048ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800445e:	2b40      	cmp	r3, #64	; 0x40
 8004460:	d141      	bne.n	80044e6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	3314      	adds	r3, #20
 8004468:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004470:	e853 3f00 	ldrex	r3, [r3]
 8004474:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004478:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800447c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004480:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	3314      	adds	r3, #20
 800448a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800448e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004492:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004496:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800449a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800449e:	e841 2300 	strex	r3, r2, [r1]
 80044a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80044a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1d9      	bne.n	8004462 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d013      	beq.n	80044de <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ba:	4a7d      	ldr	r2, [pc, #500]	; (80046b0 <HAL_UART_IRQHandler+0x3dc>)
 80044bc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7fe f872 	bl	80025ac <HAL_DMA_Abort_IT>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d016      	beq.n	80044fc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044d8:	4610      	mov	r0, r2
 80044da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044dc:	e00e      	b.n	80044fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f990 	bl	8004804 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044e4:	e00a      	b.n	80044fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f98c 	bl	8004804 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044ec:	e006      	b.n	80044fc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f988 	bl	8004804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80044fa:	e170      	b.n	80047de <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044fc:	bf00      	nop
    return;
 80044fe:	e16e      	b.n	80047de <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004504:	2b01      	cmp	r3, #1
 8004506:	f040 814a 	bne.w	800479e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800450a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800450e:	f003 0310 	and.w	r3, r3, #16
 8004512:	2b00      	cmp	r3, #0
 8004514:	f000 8143 	beq.w	800479e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800451c:	f003 0310 	and.w	r3, r3, #16
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 813c 	beq.w	800479e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004526:	2300      	movs	r3, #0
 8004528:	60bb      	str	r3, [r7, #8]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	60bb      	str	r3, [r7, #8]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	60bb      	str	r3, [r7, #8]
 800453a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004546:	2b40      	cmp	r3, #64	; 0x40
 8004548:	f040 80b4 	bne.w	80046b4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004558:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800455c:	2b00      	cmp	r3, #0
 800455e:	f000 8140 	beq.w	80047e2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004566:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800456a:	429a      	cmp	r2, r3
 800456c:	f080 8139 	bcs.w	80047e2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004576:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004582:	f000 8088 	beq.w	8004696 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	330c      	adds	r3, #12
 800458c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004590:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004594:	e853 3f00 	ldrex	r3, [r3]
 8004598:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800459c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80045a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	330c      	adds	r3, #12
 80045ae:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80045b2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80045be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80045c2:	e841 2300 	strex	r3, r2, [r1]
 80045c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80045ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1d9      	bne.n	8004586 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	3314      	adds	r3, #20
 80045d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045dc:	e853 3f00 	ldrex	r3, [r3]
 80045e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80045e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045e4:	f023 0301 	bic.w	r3, r3, #1
 80045e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	3314      	adds	r3, #20
 80045f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80045f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80045fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80045fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004602:	e841 2300 	strex	r3, r2, [r1]
 8004606:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004608:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1e1      	bne.n	80045d2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	3314      	adds	r3, #20
 8004614:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004616:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004618:	e853 3f00 	ldrex	r3, [r3]
 800461c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800461e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004620:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004624:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	3314      	adds	r3, #20
 800462e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004632:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004634:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004636:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004638:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800463a:	e841 2300 	strex	r3, r2, [r1]
 800463e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004640:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004642:	2b00      	cmp	r3, #0
 8004644:	d1e3      	bne.n	800460e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2220      	movs	r2, #32
 800464a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	330c      	adds	r3, #12
 800465a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800465e:	e853 3f00 	ldrex	r3, [r3]
 8004662:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004666:	f023 0310 	bic.w	r3, r3, #16
 800466a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	330c      	adds	r3, #12
 8004674:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004678:	65ba      	str	r2, [r7, #88]	; 0x58
 800467a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800467e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004680:	e841 2300 	strex	r3, r2, [r1]
 8004684:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1e3      	bne.n	8004654 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004690:	4618      	mov	r0, r3
 8004692:	f7fd ff1b 	bl	80024cc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800469e:	b29b      	uxth	r3, r3
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	4619      	mov	r1, r3
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f8b6 	bl	8004818 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046ac:	e099      	b.n	80047e2 <HAL_UART_IRQHandler+0x50e>
 80046ae:	bf00      	nop
 80046b0:	08004973 	.word	0x08004973
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046bc:	b29b      	uxth	r3, r3
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 808b 	beq.w	80047e6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80046d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f000 8086 	beq.w	80047e6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	330c      	adds	r3, #12
 80046e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046e4:	e853 3f00 	ldrex	r3, [r3]
 80046e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	330c      	adds	r3, #12
 80046fa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80046fe:	647a      	str	r2, [r7, #68]	; 0x44
 8004700:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004702:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004704:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004706:	e841 2300 	strex	r3, r2, [r1]
 800470a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800470c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1e3      	bne.n	80046da <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	3314      	adds	r3, #20
 8004718:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471c:	e853 3f00 	ldrex	r3, [r3]
 8004720:	623b      	str	r3, [r7, #32]
   return(result);
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	f023 0301 	bic.w	r3, r3, #1
 8004728:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	3314      	adds	r3, #20
 8004732:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004736:	633a      	str	r2, [r7, #48]	; 0x30
 8004738:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800473a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800473c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800473e:	e841 2300 	strex	r3, r2, [r1]
 8004742:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1e3      	bne.n	8004712 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2220      	movs	r2, #32
 800474e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	330c      	adds	r3, #12
 800475e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	e853 3f00 	ldrex	r3, [r3]
 8004766:	60fb      	str	r3, [r7, #12]
   return(result);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f023 0310 	bic.w	r3, r3, #16
 800476e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	330c      	adds	r3, #12
 8004778:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800477c:	61fa      	str	r2, [r7, #28]
 800477e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004780:	69b9      	ldr	r1, [r7, #24]
 8004782:	69fa      	ldr	r2, [r7, #28]
 8004784:	e841 2300 	strex	r3, r2, [r1]
 8004788:	617b      	str	r3, [r7, #20]
   return(result);
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1e3      	bne.n	8004758 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004790:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004794:	4619      	mov	r1, r3
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f83e 	bl	8004818 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800479c:	e023      	b.n	80047e6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800479e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d009      	beq.n	80047be <HAL_UART_IRQHandler+0x4ea>
 80047aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f8ef 	bl	800499a <UART_Transmit_IT>
    return;
 80047bc:	e014      	b.n	80047e8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80047be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d00e      	beq.n	80047e8 <HAL_UART_IRQHandler+0x514>
 80047ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d008      	beq.n	80047e8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f000 f92f 	bl	8004a3a <UART_EndTransmit_IT>
    return;
 80047dc:	e004      	b.n	80047e8 <HAL_UART_IRQHandler+0x514>
    return;
 80047de:	bf00      	nop
 80047e0:	e002      	b.n	80047e8 <HAL_UART_IRQHandler+0x514>
      return;
 80047e2:	bf00      	nop
 80047e4:	e000      	b.n	80047e8 <HAL_UART_IRQHandler+0x514>
      return;
 80047e6:	bf00      	nop
  }
}
 80047e8:	37e8      	adds	r7, #232	; 0xe8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop

080047f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800480c:	bf00      	nop
 800480e:	370c      	adds	r7, #12
 8004810:	46bd      	mov	sp, r7
 8004812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004816:	4770      	bx	lr

08004818 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	460b      	mov	r3, r1
 8004822:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	4613      	mov	r3, r2
 800483c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	88fa      	ldrh	r2, [r7, #6]
 8004848:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	88fa      	ldrh	r2, [r7, #6]
 800484e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2222      	movs	r2, #34	; 0x22
 800485a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d007      	beq.n	800487e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68da      	ldr	r2, [r3, #12]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800487c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	695a      	ldr	r2, [r3, #20]
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f042 0201 	orr.w	r2, r2, #1
 800488c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68da      	ldr	r2, [r3, #12]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f042 0220 	orr.w	r2, r2, #32
 800489c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3714      	adds	r7, #20
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b095      	sub	sp, #84	; 0x54
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	330c      	adds	r3, #12
 80048ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048be:	e853 3f00 	ldrex	r3, [r3]
 80048c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	330c      	adds	r3, #12
 80048d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048d4:	643a      	str	r2, [r7, #64]	; 0x40
 80048d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048dc:	e841 2300 	strex	r3, r2, [r1]
 80048e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1e5      	bne.n	80048b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	3314      	adds	r3, #20
 80048ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f0:	6a3b      	ldr	r3, [r7, #32]
 80048f2:	e853 3f00 	ldrex	r3, [r3]
 80048f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	f023 0301 	bic.w	r3, r3, #1
 80048fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	3314      	adds	r3, #20
 8004906:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004908:	62fa      	str	r2, [r7, #44]	; 0x2c
 800490a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800490e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004910:	e841 2300 	strex	r3, r2, [r1]
 8004914:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1e5      	bne.n	80048e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004920:	2b01      	cmp	r3, #1
 8004922:	d119      	bne.n	8004958 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	330c      	adds	r3, #12
 800492a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	e853 3f00 	ldrex	r3, [r3]
 8004932:	60bb      	str	r3, [r7, #8]
   return(result);
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	f023 0310 	bic.w	r3, r3, #16
 800493a:	647b      	str	r3, [r7, #68]	; 0x44
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	330c      	adds	r3, #12
 8004942:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004944:	61ba      	str	r2, [r7, #24]
 8004946:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004948:	6979      	ldr	r1, [r7, #20]
 800494a:	69ba      	ldr	r2, [r7, #24]
 800494c:	e841 2300 	strex	r3, r2, [r1]
 8004950:	613b      	str	r3, [r7, #16]
   return(result);
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1e5      	bne.n	8004924 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2220      	movs	r2, #32
 800495c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004966:	bf00      	nop
 8004968:	3754      	adds	r7, #84	; 0x54
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b084      	sub	sp, #16
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800498c:	68f8      	ldr	r0, [r7, #12]
 800498e:	f7ff ff39 	bl	8004804 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004992:	bf00      	nop
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800499a:	b480      	push	{r7}
 800499c:	b085      	sub	sp, #20
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b21      	cmp	r3, #33	; 0x21
 80049ac:	d13e      	bne.n	8004a2c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049b6:	d114      	bne.n	80049e2 <UART_Transmit_IT+0x48>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d110      	bne.n	80049e2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a1b      	ldr	r3, [r3, #32]
 80049c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	461a      	mov	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	1c9a      	adds	r2, r3, #2
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	621a      	str	r2, [r3, #32]
 80049e0:	e008      	b.n	80049f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	1c59      	adds	r1, r3, #1
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	6211      	str	r1, [r2, #32]
 80049ec:	781a      	ldrb	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	3b01      	subs	r3, #1
 80049fc:	b29b      	uxth	r3, r3
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	4619      	mov	r1, r3
 8004a02:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10f      	bne.n	8004a28 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68da      	ldr	r2, [r3, #12]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a16:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68da      	ldr	r2, [r3, #12]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a26:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	e000      	b.n	8004a2e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a2c:	2302      	movs	r3, #2
  }
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr

08004a3a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b082      	sub	sp, #8
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68da      	ldr	r2, [r3, #12]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a50:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2220      	movs	r2, #32
 8004a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7ff fec8 	bl	80047f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3708      	adds	r7, #8
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
	...

08004a6c <UART_Receive_IT>:
  * @retval HAL status
  */
int buffer_counter = 0;

static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b08c      	sub	sp, #48	; 0x30
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	2b22      	cmp	r3, #34	; 0x22
 8004a7e:	f040 80bf 	bne.w	8004c00 <UART_Receive_IT+0x194>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a8a:	d117      	bne.n	8004abc <UART_Receive_IT+0x50>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	691b      	ldr	r3, [r3, #16]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d113      	bne.n	8004abc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004a94:	2300      	movs	r3, #0
 8004a96:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab4:	1c9a      	adds	r2, r3, #2
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	629a      	str	r2, [r3, #40]	; 0x28
 8004aba:	e03a      	b.n	8004b32 <UART_Receive_IT+0xc6>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ace:	d007      	beq.n	8004ae0 <UART_Receive_IT+0x74>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10a      	bne.n	8004aee <UART_Receive_IT+0x82>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d106      	bne.n	8004aee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	b2da      	uxtb	r2, r3
 8004ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aea:	701a      	strb	r2, [r3, #0]
 8004aec:	e008      	b.n	8004b00 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b04:	1c5a      	adds	r2, r3, #1
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	629a      	str	r2, [r3, #40]	; 0x28
      buffer_counter++;
 8004b0a:	4b40      	ldr	r3, [pc, #256]	; (8004c0c <UART_Receive_IT+0x1a0>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	3301      	adds	r3, #1
 8004b10:	4a3e      	ldr	r2, [pc, #248]	; (8004c0c <UART_Receive_IT+0x1a0>)
 8004b12:	6013      	str	r3, [r2, #0]
      if (buffer_counter >= 7){
 8004b14:	4b3d      	ldr	r3, [pc, #244]	; (8004c0c <UART_Receive_IT+0x1a0>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2b06      	cmp	r3, #6
 8004b1a:	dd0a      	ble.n	8004b32 <UART_Receive_IT+0xc6>
    	  huart->pRxBuffPtr -= buffer_counter;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b20:	4b3a      	ldr	r3, [pc, #232]	; (8004c0c <UART_Receive_IT+0x1a0>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	425b      	negs	r3, r3
 8004b26:	441a      	add	r2, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	629a      	str	r2, [r3, #40]	; 0x28
    	  buffer_counter = 0;
 8004b2c:	4b37      	ldr	r3, [pc, #220]	; (8004c0c <UART_Receive_IT+0x1a0>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	601a      	str	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	4619      	mov	r1, r3
 8004b40:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d15a      	bne.n	8004bfc <UART_Receive_IT+0x190>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68da      	ldr	r2, [r3, #12]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f022 0220 	bic.w	r2, r2, #32
 8004b54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68da      	ldr	r2, [r3, #12]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b64:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	695a      	ldr	r2, [r3, #20]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 0201 	bic.w	r2, r2, #1
 8004b74:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d135      	bne.n	8004bf2 <UART_Receive_IT+0x186>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	330c      	adds	r3, #12
 8004b92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	e853 3f00 	ldrex	r3, [r3]
 8004b9a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	f023 0310 	bic.w	r3, r3, #16
 8004ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	330c      	adds	r3, #12
 8004baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bac:	623a      	str	r2, [r7, #32]
 8004bae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb0:	69f9      	ldr	r1, [r7, #28]
 8004bb2:	6a3a      	ldr	r2, [r7, #32]
 8004bb4:	e841 2300 	strex	r3, r2, [r1]
 8004bb8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1e5      	bne.n	8004b8c <UART_Receive_IT+0x120>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0310 	and.w	r3, r3, #16
 8004bca:	2b10      	cmp	r3, #16
 8004bcc:	d10a      	bne.n	8004be4 <UART_Receive_IT+0x178>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bce:	2300      	movs	r3, #0
 8004bd0:	60fb      	str	r3, [r7, #12]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	60fb      	str	r3, [r7, #12]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	60fb      	str	r3, [r7, #12]
 8004be2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004be8:	4619      	mov	r1, r3
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7ff fe14 	bl	8004818 <HAL_UARTEx_RxEventCallback>
 8004bf0:	e002      	b.n	8004bf8 <UART_Receive_IT+0x18c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7fc f908 	bl	8000e08 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	e002      	b.n	8004c02 <UART_Receive_IT+0x196>
    }
    return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	e000      	b.n	8004c02 <UART_Receive_IT+0x196>
  }
  else
  {
    return HAL_BUSY;
 8004c00:	2302      	movs	r3, #2
  }
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3730      	adds	r7, #48	; 0x30
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	2000080c 	.word	0x2000080c

08004c10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c14:	b0c0      	sub	sp, #256	; 0x100
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c2c:	68d9      	ldr	r1, [r3, #12]
 8004c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	ea40 0301 	orr.w	r3, r0, r1
 8004c38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	431a      	orrs	r2, r3
 8004c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c4c:	695b      	ldr	r3, [r3, #20]
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c68:	f021 010c 	bic.w	r1, r1, #12
 8004c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c76:	430b      	orrs	r3, r1
 8004c78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c8a:	6999      	ldr	r1, [r3, #24]
 8004c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	ea40 0301 	orr.w	r3, r0, r1
 8004c96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	4b8f      	ldr	r3, [pc, #572]	; (8004edc <UART_SetConfig+0x2cc>)
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d005      	beq.n	8004cb0 <UART_SetConfig+0xa0>
 8004ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	4b8d      	ldr	r3, [pc, #564]	; (8004ee0 <UART_SetConfig+0x2d0>)
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d104      	bne.n	8004cba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004cb0:	f7fe fd34 	bl	800371c <HAL_RCC_GetPCLK2Freq>
 8004cb4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004cb8:	e003      	b.n	8004cc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004cba:	f7fe fd1b 	bl	80036f4 <HAL_RCC_GetPCLK1Freq>
 8004cbe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc6:	69db      	ldr	r3, [r3, #28]
 8004cc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ccc:	f040 810c 	bne.w	8004ee8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004cd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004cda:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004cde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004ce2:	4622      	mov	r2, r4
 8004ce4:	462b      	mov	r3, r5
 8004ce6:	1891      	adds	r1, r2, r2
 8004ce8:	65b9      	str	r1, [r7, #88]	; 0x58
 8004cea:	415b      	adcs	r3, r3
 8004cec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004cf2:	4621      	mov	r1, r4
 8004cf4:	eb12 0801 	adds.w	r8, r2, r1
 8004cf8:	4629      	mov	r1, r5
 8004cfa:	eb43 0901 	adc.w	r9, r3, r1
 8004cfe:	f04f 0200 	mov.w	r2, #0
 8004d02:	f04f 0300 	mov.w	r3, #0
 8004d06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d12:	4690      	mov	r8, r2
 8004d14:	4699      	mov	r9, r3
 8004d16:	4623      	mov	r3, r4
 8004d18:	eb18 0303 	adds.w	r3, r8, r3
 8004d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d20:	462b      	mov	r3, r5
 8004d22:	eb49 0303 	adc.w	r3, r9, r3
 8004d26:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d36:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004d3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004d3e:	460b      	mov	r3, r1
 8004d40:	18db      	adds	r3, r3, r3
 8004d42:	653b      	str	r3, [r7, #80]	; 0x50
 8004d44:	4613      	mov	r3, r2
 8004d46:	eb42 0303 	adc.w	r3, r2, r3
 8004d4a:	657b      	str	r3, [r7, #84]	; 0x54
 8004d4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004d50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004d54:	f7fb fed6 	bl	8000b04 <__aeabi_uldivmod>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	460b      	mov	r3, r1
 8004d5c:	4b61      	ldr	r3, [pc, #388]	; (8004ee4 <UART_SetConfig+0x2d4>)
 8004d5e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d62:	095b      	lsrs	r3, r3, #5
 8004d64:	011c      	lsls	r4, r3, #4
 8004d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d70:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004d74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004d78:	4642      	mov	r2, r8
 8004d7a:	464b      	mov	r3, r9
 8004d7c:	1891      	adds	r1, r2, r2
 8004d7e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d80:	415b      	adcs	r3, r3
 8004d82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d88:	4641      	mov	r1, r8
 8004d8a:	eb12 0a01 	adds.w	sl, r2, r1
 8004d8e:	4649      	mov	r1, r9
 8004d90:	eb43 0b01 	adc.w	fp, r3, r1
 8004d94:	f04f 0200 	mov.w	r2, #0
 8004d98:	f04f 0300 	mov.w	r3, #0
 8004d9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004da0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004da4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004da8:	4692      	mov	sl, r2
 8004daa:	469b      	mov	fp, r3
 8004dac:	4643      	mov	r3, r8
 8004dae:	eb1a 0303 	adds.w	r3, sl, r3
 8004db2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004db6:	464b      	mov	r3, r9
 8004db8:	eb4b 0303 	adc.w	r3, fp, r3
 8004dbc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004dcc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004dd0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	18db      	adds	r3, r3, r3
 8004dd8:	643b      	str	r3, [r7, #64]	; 0x40
 8004dda:	4613      	mov	r3, r2
 8004ddc:	eb42 0303 	adc.w	r3, r2, r3
 8004de0:	647b      	str	r3, [r7, #68]	; 0x44
 8004de2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004de6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004dea:	f7fb fe8b 	bl	8000b04 <__aeabi_uldivmod>
 8004dee:	4602      	mov	r2, r0
 8004df0:	460b      	mov	r3, r1
 8004df2:	4611      	mov	r1, r2
 8004df4:	4b3b      	ldr	r3, [pc, #236]	; (8004ee4 <UART_SetConfig+0x2d4>)
 8004df6:	fba3 2301 	umull	r2, r3, r3, r1
 8004dfa:	095b      	lsrs	r3, r3, #5
 8004dfc:	2264      	movs	r2, #100	; 0x64
 8004dfe:	fb02 f303 	mul.w	r3, r2, r3
 8004e02:	1acb      	subs	r3, r1, r3
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004e0a:	4b36      	ldr	r3, [pc, #216]	; (8004ee4 <UART_SetConfig+0x2d4>)
 8004e0c:	fba3 2302 	umull	r2, r3, r3, r2
 8004e10:	095b      	lsrs	r3, r3, #5
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e18:	441c      	add	r4, r3
 8004e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e24:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004e28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004e2c:	4642      	mov	r2, r8
 8004e2e:	464b      	mov	r3, r9
 8004e30:	1891      	adds	r1, r2, r2
 8004e32:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e34:	415b      	adcs	r3, r3
 8004e36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e3c:	4641      	mov	r1, r8
 8004e3e:	1851      	adds	r1, r2, r1
 8004e40:	6339      	str	r1, [r7, #48]	; 0x30
 8004e42:	4649      	mov	r1, r9
 8004e44:	414b      	adcs	r3, r1
 8004e46:	637b      	str	r3, [r7, #52]	; 0x34
 8004e48:	f04f 0200 	mov.w	r2, #0
 8004e4c:	f04f 0300 	mov.w	r3, #0
 8004e50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004e54:	4659      	mov	r1, fp
 8004e56:	00cb      	lsls	r3, r1, #3
 8004e58:	4651      	mov	r1, sl
 8004e5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e5e:	4651      	mov	r1, sl
 8004e60:	00ca      	lsls	r2, r1, #3
 8004e62:	4610      	mov	r0, r2
 8004e64:	4619      	mov	r1, r3
 8004e66:	4603      	mov	r3, r0
 8004e68:	4642      	mov	r2, r8
 8004e6a:	189b      	adds	r3, r3, r2
 8004e6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e70:	464b      	mov	r3, r9
 8004e72:	460a      	mov	r2, r1
 8004e74:	eb42 0303 	adc.w	r3, r2, r3
 8004e78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004e88:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004e8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004e90:	460b      	mov	r3, r1
 8004e92:	18db      	adds	r3, r3, r3
 8004e94:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e96:	4613      	mov	r3, r2
 8004e98:	eb42 0303 	adc.w	r3, r2, r3
 8004e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ea2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004ea6:	f7fb fe2d 	bl	8000b04 <__aeabi_uldivmod>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	460b      	mov	r3, r1
 8004eae:	4b0d      	ldr	r3, [pc, #52]	; (8004ee4 <UART_SetConfig+0x2d4>)
 8004eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8004eb4:	095b      	lsrs	r3, r3, #5
 8004eb6:	2164      	movs	r1, #100	; 0x64
 8004eb8:	fb01 f303 	mul.w	r3, r1, r3
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	3332      	adds	r3, #50	; 0x32
 8004ec2:	4a08      	ldr	r2, [pc, #32]	; (8004ee4 <UART_SetConfig+0x2d4>)
 8004ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec8:	095b      	lsrs	r3, r3, #5
 8004eca:	f003 0207 	and.w	r2, r3, #7
 8004ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4422      	add	r2, r4
 8004ed6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ed8:	e105      	b.n	80050e6 <UART_SetConfig+0x4d6>
 8004eda:	bf00      	nop
 8004edc:	40011000 	.word	0x40011000
 8004ee0:	40011400 	.word	0x40011400
 8004ee4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004eec:	2200      	movs	r2, #0
 8004eee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ef2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004ef6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004efa:	4642      	mov	r2, r8
 8004efc:	464b      	mov	r3, r9
 8004efe:	1891      	adds	r1, r2, r2
 8004f00:	6239      	str	r1, [r7, #32]
 8004f02:	415b      	adcs	r3, r3
 8004f04:	627b      	str	r3, [r7, #36]	; 0x24
 8004f06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f0a:	4641      	mov	r1, r8
 8004f0c:	1854      	adds	r4, r2, r1
 8004f0e:	4649      	mov	r1, r9
 8004f10:	eb43 0501 	adc.w	r5, r3, r1
 8004f14:	f04f 0200 	mov.w	r2, #0
 8004f18:	f04f 0300 	mov.w	r3, #0
 8004f1c:	00eb      	lsls	r3, r5, #3
 8004f1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f22:	00e2      	lsls	r2, r4, #3
 8004f24:	4614      	mov	r4, r2
 8004f26:	461d      	mov	r5, r3
 8004f28:	4643      	mov	r3, r8
 8004f2a:	18e3      	adds	r3, r4, r3
 8004f2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f30:	464b      	mov	r3, r9
 8004f32:	eb45 0303 	adc.w	r3, r5, r3
 8004f36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f46:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f4a:	f04f 0200 	mov.w	r2, #0
 8004f4e:	f04f 0300 	mov.w	r3, #0
 8004f52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004f56:	4629      	mov	r1, r5
 8004f58:	008b      	lsls	r3, r1, #2
 8004f5a:	4621      	mov	r1, r4
 8004f5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f60:	4621      	mov	r1, r4
 8004f62:	008a      	lsls	r2, r1, #2
 8004f64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004f68:	f7fb fdcc 	bl	8000b04 <__aeabi_uldivmod>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	460b      	mov	r3, r1
 8004f70:	4b60      	ldr	r3, [pc, #384]	; (80050f4 <UART_SetConfig+0x4e4>)
 8004f72:	fba3 2302 	umull	r2, r3, r3, r2
 8004f76:	095b      	lsrs	r3, r3, #5
 8004f78:	011c      	lsls	r4, r3, #4
 8004f7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004f8c:	4642      	mov	r2, r8
 8004f8e:	464b      	mov	r3, r9
 8004f90:	1891      	adds	r1, r2, r2
 8004f92:	61b9      	str	r1, [r7, #24]
 8004f94:	415b      	adcs	r3, r3
 8004f96:	61fb      	str	r3, [r7, #28]
 8004f98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f9c:	4641      	mov	r1, r8
 8004f9e:	1851      	adds	r1, r2, r1
 8004fa0:	6139      	str	r1, [r7, #16]
 8004fa2:	4649      	mov	r1, r9
 8004fa4:	414b      	adcs	r3, r1
 8004fa6:	617b      	str	r3, [r7, #20]
 8004fa8:	f04f 0200 	mov.w	r2, #0
 8004fac:	f04f 0300 	mov.w	r3, #0
 8004fb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fb4:	4659      	mov	r1, fp
 8004fb6:	00cb      	lsls	r3, r1, #3
 8004fb8:	4651      	mov	r1, sl
 8004fba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fbe:	4651      	mov	r1, sl
 8004fc0:	00ca      	lsls	r2, r1, #3
 8004fc2:	4610      	mov	r0, r2
 8004fc4:	4619      	mov	r1, r3
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	4642      	mov	r2, r8
 8004fca:	189b      	adds	r3, r3, r2
 8004fcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fd0:	464b      	mov	r3, r9
 8004fd2:	460a      	mov	r2, r1
 8004fd4:	eb42 0303 	adc.w	r3, r2, r3
 8004fd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004fe6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004fe8:	f04f 0200 	mov.w	r2, #0
 8004fec:	f04f 0300 	mov.w	r3, #0
 8004ff0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ff4:	4649      	mov	r1, r9
 8004ff6:	008b      	lsls	r3, r1, #2
 8004ff8:	4641      	mov	r1, r8
 8004ffa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ffe:	4641      	mov	r1, r8
 8005000:	008a      	lsls	r2, r1, #2
 8005002:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005006:	f7fb fd7d 	bl	8000b04 <__aeabi_uldivmod>
 800500a:	4602      	mov	r2, r0
 800500c:	460b      	mov	r3, r1
 800500e:	4b39      	ldr	r3, [pc, #228]	; (80050f4 <UART_SetConfig+0x4e4>)
 8005010:	fba3 1302 	umull	r1, r3, r3, r2
 8005014:	095b      	lsrs	r3, r3, #5
 8005016:	2164      	movs	r1, #100	; 0x64
 8005018:	fb01 f303 	mul.w	r3, r1, r3
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	011b      	lsls	r3, r3, #4
 8005020:	3332      	adds	r3, #50	; 0x32
 8005022:	4a34      	ldr	r2, [pc, #208]	; (80050f4 <UART_SetConfig+0x4e4>)
 8005024:	fba2 2303 	umull	r2, r3, r2, r3
 8005028:	095b      	lsrs	r3, r3, #5
 800502a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800502e:	441c      	add	r4, r3
 8005030:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005034:	2200      	movs	r2, #0
 8005036:	673b      	str	r3, [r7, #112]	; 0x70
 8005038:	677a      	str	r2, [r7, #116]	; 0x74
 800503a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800503e:	4642      	mov	r2, r8
 8005040:	464b      	mov	r3, r9
 8005042:	1891      	adds	r1, r2, r2
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	415b      	adcs	r3, r3
 8005048:	60fb      	str	r3, [r7, #12]
 800504a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800504e:	4641      	mov	r1, r8
 8005050:	1851      	adds	r1, r2, r1
 8005052:	6039      	str	r1, [r7, #0]
 8005054:	4649      	mov	r1, r9
 8005056:	414b      	adcs	r3, r1
 8005058:	607b      	str	r3, [r7, #4]
 800505a:	f04f 0200 	mov.w	r2, #0
 800505e:	f04f 0300 	mov.w	r3, #0
 8005062:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005066:	4659      	mov	r1, fp
 8005068:	00cb      	lsls	r3, r1, #3
 800506a:	4651      	mov	r1, sl
 800506c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005070:	4651      	mov	r1, sl
 8005072:	00ca      	lsls	r2, r1, #3
 8005074:	4610      	mov	r0, r2
 8005076:	4619      	mov	r1, r3
 8005078:	4603      	mov	r3, r0
 800507a:	4642      	mov	r2, r8
 800507c:	189b      	adds	r3, r3, r2
 800507e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005080:	464b      	mov	r3, r9
 8005082:	460a      	mov	r2, r1
 8005084:	eb42 0303 	adc.w	r3, r2, r3
 8005088:	66fb      	str	r3, [r7, #108]	; 0x6c
 800508a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	663b      	str	r3, [r7, #96]	; 0x60
 8005094:	667a      	str	r2, [r7, #100]	; 0x64
 8005096:	f04f 0200 	mov.w	r2, #0
 800509a:	f04f 0300 	mov.w	r3, #0
 800509e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80050a2:	4649      	mov	r1, r9
 80050a4:	008b      	lsls	r3, r1, #2
 80050a6:	4641      	mov	r1, r8
 80050a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050ac:	4641      	mov	r1, r8
 80050ae:	008a      	lsls	r2, r1, #2
 80050b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80050b4:	f7fb fd26 	bl	8000b04 <__aeabi_uldivmod>
 80050b8:	4602      	mov	r2, r0
 80050ba:	460b      	mov	r3, r1
 80050bc:	4b0d      	ldr	r3, [pc, #52]	; (80050f4 <UART_SetConfig+0x4e4>)
 80050be:	fba3 1302 	umull	r1, r3, r3, r2
 80050c2:	095b      	lsrs	r3, r3, #5
 80050c4:	2164      	movs	r1, #100	; 0x64
 80050c6:	fb01 f303 	mul.w	r3, r1, r3
 80050ca:	1ad3      	subs	r3, r2, r3
 80050cc:	011b      	lsls	r3, r3, #4
 80050ce:	3332      	adds	r3, #50	; 0x32
 80050d0:	4a08      	ldr	r2, [pc, #32]	; (80050f4 <UART_SetConfig+0x4e4>)
 80050d2:	fba2 2303 	umull	r2, r3, r2, r3
 80050d6:	095b      	lsrs	r3, r3, #5
 80050d8:	f003 020f 	and.w	r2, r3, #15
 80050dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4422      	add	r2, r4
 80050e4:	609a      	str	r2, [r3, #8]
}
 80050e6:	bf00      	nop
 80050e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80050ec:	46bd      	mov	sp, r7
 80050ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050f2:	bf00      	nop
 80050f4:	51eb851f 	.word	0x51eb851f

080050f8 <__libc_init_array>:
 80050f8:	b570      	push	{r4, r5, r6, lr}
 80050fa:	4d0d      	ldr	r5, [pc, #52]	; (8005130 <__libc_init_array+0x38>)
 80050fc:	4c0d      	ldr	r4, [pc, #52]	; (8005134 <__libc_init_array+0x3c>)
 80050fe:	1b64      	subs	r4, r4, r5
 8005100:	10a4      	asrs	r4, r4, #2
 8005102:	2600      	movs	r6, #0
 8005104:	42a6      	cmp	r6, r4
 8005106:	d109      	bne.n	800511c <__libc_init_array+0x24>
 8005108:	4d0b      	ldr	r5, [pc, #44]	; (8005138 <__libc_init_array+0x40>)
 800510a:	4c0c      	ldr	r4, [pc, #48]	; (800513c <__libc_init_array+0x44>)
 800510c:	f001 f86a 	bl	80061e4 <_init>
 8005110:	1b64      	subs	r4, r4, r5
 8005112:	10a4      	asrs	r4, r4, #2
 8005114:	2600      	movs	r6, #0
 8005116:	42a6      	cmp	r6, r4
 8005118:	d105      	bne.n	8005126 <__libc_init_array+0x2e>
 800511a:	bd70      	pop	{r4, r5, r6, pc}
 800511c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005120:	4798      	blx	r3
 8005122:	3601      	adds	r6, #1
 8005124:	e7ee      	b.n	8005104 <__libc_init_array+0xc>
 8005126:	f855 3b04 	ldr.w	r3, [r5], #4
 800512a:	4798      	blx	r3
 800512c:	3601      	adds	r6, #1
 800512e:	e7f2      	b.n	8005116 <__libc_init_array+0x1e>
 8005130:	08006400 	.word	0x08006400
 8005134:	08006400 	.word	0x08006400
 8005138:	08006400 	.word	0x08006400
 800513c:	08006404 	.word	0x08006404

08005140 <memset>:
 8005140:	4402      	add	r2, r0
 8005142:	4603      	mov	r3, r0
 8005144:	4293      	cmp	r3, r2
 8005146:	d100      	bne.n	800514a <memset+0xa>
 8005148:	4770      	bx	lr
 800514a:	f803 1b01 	strb.w	r1, [r3], #1
 800514e:	e7f9      	b.n	8005144 <memset+0x4>

08005150 <sin>:
 8005150:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005152:	ec53 2b10 	vmov	r2, r3, d0
 8005156:	4828      	ldr	r0, [pc, #160]	; (80051f8 <sin+0xa8>)
 8005158:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800515c:	4281      	cmp	r1, r0
 800515e:	dc07      	bgt.n	8005170 <sin+0x20>
 8005160:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80051f0 <sin+0xa0>
 8005164:	2000      	movs	r0, #0
 8005166:	b005      	add	sp, #20
 8005168:	f85d eb04 	ldr.w	lr, [sp], #4
 800516c:	f000 be6c 	b.w	8005e48 <__kernel_sin>
 8005170:	4822      	ldr	r0, [pc, #136]	; (80051fc <sin+0xac>)
 8005172:	4281      	cmp	r1, r0
 8005174:	dd09      	ble.n	800518a <sin+0x3a>
 8005176:	ee10 0a10 	vmov	r0, s0
 800517a:	4619      	mov	r1, r3
 800517c:	f7fb f828 	bl	80001d0 <__aeabi_dsub>
 8005180:	ec41 0b10 	vmov	d0, r0, r1
 8005184:	b005      	add	sp, #20
 8005186:	f85d fb04 	ldr.w	pc, [sp], #4
 800518a:	4668      	mov	r0, sp
 800518c:	f000 f838 	bl	8005200 <__ieee754_rem_pio2>
 8005190:	f000 0003 	and.w	r0, r0, #3
 8005194:	2801      	cmp	r0, #1
 8005196:	d00c      	beq.n	80051b2 <sin+0x62>
 8005198:	2802      	cmp	r0, #2
 800519a:	d011      	beq.n	80051c0 <sin+0x70>
 800519c:	b9f0      	cbnz	r0, 80051dc <sin+0x8c>
 800519e:	ed9d 1b02 	vldr	d1, [sp, #8]
 80051a2:	ed9d 0b00 	vldr	d0, [sp]
 80051a6:	2001      	movs	r0, #1
 80051a8:	f000 fe4e 	bl	8005e48 <__kernel_sin>
 80051ac:	ec51 0b10 	vmov	r0, r1, d0
 80051b0:	e7e6      	b.n	8005180 <sin+0x30>
 80051b2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80051b6:	ed9d 0b00 	vldr	d0, [sp]
 80051ba:	f000 fa2d 	bl	8005618 <__kernel_cos>
 80051be:	e7f5      	b.n	80051ac <sin+0x5c>
 80051c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80051c4:	ed9d 0b00 	vldr	d0, [sp]
 80051c8:	2001      	movs	r0, #1
 80051ca:	f000 fe3d 	bl	8005e48 <__kernel_sin>
 80051ce:	ec53 2b10 	vmov	r2, r3, d0
 80051d2:	ee10 0a10 	vmov	r0, s0
 80051d6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80051da:	e7d1      	b.n	8005180 <sin+0x30>
 80051dc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80051e0:	ed9d 0b00 	vldr	d0, [sp]
 80051e4:	f000 fa18 	bl	8005618 <__kernel_cos>
 80051e8:	e7f1      	b.n	80051ce <sin+0x7e>
 80051ea:	bf00      	nop
 80051ec:	f3af 8000 	nop.w
	...
 80051f8:	3fe921fb 	.word	0x3fe921fb
 80051fc:	7fefffff 	.word	0x7fefffff

08005200 <__ieee754_rem_pio2>:
 8005200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005204:	ed2d 8b02 	vpush	{d8}
 8005208:	ec55 4b10 	vmov	r4, r5, d0
 800520c:	4bca      	ldr	r3, [pc, #808]	; (8005538 <__ieee754_rem_pio2+0x338>)
 800520e:	b08b      	sub	sp, #44	; 0x2c
 8005210:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8005214:	4598      	cmp	r8, r3
 8005216:	4682      	mov	sl, r0
 8005218:	9502      	str	r5, [sp, #8]
 800521a:	dc08      	bgt.n	800522e <__ieee754_rem_pio2+0x2e>
 800521c:	2200      	movs	r2, #0
 800521e:	2300      	movs	r3, #0
 8005220:	ed80 0b00 	vstr	d0, [r0]
 8005224:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005228:	f04f 0b00 	mov.w	fp, #0
 800522c:	e028      	b.n	8005280 <__ieee754_rem_pio2+0x80>
 800522e:	4bc3      	ldr	r3, [pc, #780]	; (800553c <__ieee754_rem_pio2+0x33c>)
 8005230:	4598      	cmp	r8, r3
 8005232:	dc78      	bgt.n	8005326 <__ieee754_rem_pio2+0x126>
 8005234:	9b02      	ldr	r3, [sp, #8]
 8005236:	4ec2      	ldr	r6, [pc, #776]	; (8005540 <__ieee754_rem_pio2+0x340>)
 8005238:	2b00      	cmp	r3, #0
 800523a:	ee10 0a10 	vmov	r0, s0
 800523e:	a3b0      	add	r3, pc, #704	; (adr r3, 8005500 <__ieee754_rem_pio2+0x300>)
 8005240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005244:	4629      	mov	r1, r5
 8005246:	dd39      	ble.n	80052bc <__ieee754_rem_pio2+0xbc>
 8005248:	f7fa ffc2 	bl	80001d0 <__aeabi_dsub>
 800524c:	45b0      	cmp	r8, r6
 800524e:	4604      	mov	r4, r0
 8005250:	460d      	mov	r5, r1
 8005252:	d01b      	beq.n	800528c <__ieee754_rem_pio2+0x8c>
 8005254:	a3ac      	add	r3, pc, #688	; (adr r3, 8005508 <__ieee754_rem_pio2+0x308>)
 8005256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800525a:	f7fa ffb9 	bl	80001d0 <__aeabi_dsub>
 800525e:	4602      	mov	r2, r0
 8005260:	460b      	mov	r3, r1
 8005262:	e9ca 2300 	strd	r2, r3, [sl]
 8005266:	4620      	mov	r0, r4
 8005268:	4629      	mov	r1, r5
 800526a:	f7fa ffb1 	bl	80001d0 <__aeabi_dsub>
 800526e:	a3a6      	add	r3, pc, #664	; (adr r3, 8005508 <__ieee754_rem_pio2+0x308>)
 8005270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005274:	f7fa ffac 	bl	80001d0 <__aeabi_dsub>
 8005278:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800527c:	f04f 0b01 	mov.w	fp, #1
 8005280:	4658      	mov	r0, fp
 8005282:	b00b      	add	sp, #44	; 0x2c
 8005284:	ecbd 8b02 	vpop	{d8}
 8005288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800528c:	a3a0      	add	r3, pc, #640	; (adr r3, 8005510 <__ieee754_rem_pio2+0x310>)
 800528e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005292:	f7fa ff9d 	bl	80001d0 <__aeabi_dsub>
 8005296:	a3a0      	add	r3, pc, #640	; (adr r3, 8005518 <__ieee754_rem_pio2+0x318>)
 8005298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529c:	4604      	mov	r4, r0
 800529e:	460d      	mov	r5, r1
 80052a0:	f7fa ff96 	bl	80001d0 <__aeabi_dsub>
 80052a4:	4602      	mov	r2, r0
 80052a6:	460b      	mov	r3, r1
 80052a8:	e9ca 2300 	strd	r2, r3, [sl]
 80052ac:	4620      	mov	r0, r4
 80052ae:	4629      	mov	r1, r5
 80052b0:	f7fa ff8e 	bl	80001d0 <__aeabi_dsub>
 80052b4:	a398      	add	r3, pc, #608	; (adr r3, 8005518 <__ieee754_rem_pio2+0x318>)
 80052b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ba:	e7db      	b.n	8005274 <__ieee754_rem_pio2+0x74>
 80052bc:	f7fa ff8a 	bl	80001d4 <__adddf3>
 80052c0:	45b0      	cmp	r8, r6
 80052c2:	4604      	mov	r4, r0
 80052c4:	460d      	mov	r5, r1
 80052c6:	d016      	beq.n	80052f6 <__ieee754_rem_pio2+0xf6>
 80052c8:	a38f      	add	r3, pc, #572	; (adr r3, 8005508 <__ieee754_rem_pio2+0x308>)
 80052ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ce:	f7fa ff81 	bl	80001d4 <__adddf3>
 80052d2:	4602      	mov	r2, r0
 80052d4:	460b      	mov	r3, r1
 80052d6:	e9ca 2300 	strd	r2, r3, [sl]
 80052da:	4620      	mov	r0, r4
 80052dc:	4629      	mov	r1, r5
 80052de:	f7fa ff77 	bl	80001d0 <__aeabi_dsub>
 80052e2:	a389      	add	r3, pc, #548	; (adr r3, 8005508 <__ieee754_rem_pio2+0x308>)
 80052e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e8:	f7fa ff74 	bl	80001d4 <__adddf3>
 80052ec:	f04f 3bff 	mov.w	fp, #4294967295
 80052f0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80052f4:	e7c4      	b.n	8005280 <__ieee754_rem_pio2+0x80>
 80052f6:	a386      	add	r3, pc, #536	; (adr r3, 8005510 <__ieee754_rem_pio2+0x310>)
 80052f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fc:	f7fa ff6a 	bl	80001d4 <__adddf3>
 8005300:	a385      	add	r3, pc, #532	; (adr r3, 8005518 <__ieee754_rem_pio2+0x318>)
 8005302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005306:	4604      	mov	r4, r0
 8005308:	460d      	mov	r5, r1
 800530a:	f7fa ff63 	bl	80001d4 <__adddf3>
 800530e:	4602      	mov	r2, r0
 8005310:	460b      	mov	r3, r1
 8005312:	e9ca 2300 	strd	r2, r3, [sl]
 8005316:	4620      	mov	r0, r4
 8005318:	4629      	mov	r1, r5
 800531a:	f7fa ff59 	bl	80001d0 <__aeabi_dsub>
 800531e:	a37e      	add	r3, pc, #504	; (adr r3, 8005518 <__ieee754_rem_pio2+0x318>)
 8005320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005324:	e7e0      	b.n	80052e8 <__ieee754_rem_pio2+0xe8>
 8005326:	4b87      	ldr	r3, [pc, #540]	; (8005544 <__ieee754_rem_pio2+0x344>)
 8005328:	4598      	cmp	r8, r3
 800532a:	f300 80d9 	bgt.w	80054e0 <__ieee754_rem_pio2+0x2e0>
 800532e:	f000 fe49 	bl	8005fc4 <fabs>
 8005332:	ec55 4b10 	vmov	r4, r5, d0
 8005336:	ee10 0a10 	vmov	r0, s0
 800533a:	a379      	add	r3, pc, #484	; (adr r3, 8005520 <__ieee754_rem_pio2+0x320>)
 800533c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005340:	4629      	mov	r1, r5
 8005342:	f7fb f8fd 	bl	8000540 <__aeabi_dmul>
 8005346:	4b80      	ldr	r3, [pc, #512]	; (8005548 <__ieee754_rem_pio2+0x348>)
 8005348:	2200      	movs	r2, #0
 800534a:	f7fa ff43 	bl	80001d4 <__adddf3>
 800534e:	f7fb fb91 	bl	8000a74 <__aeabi_d2iz>
 8005352:	4683      	mov	fp, r0
 8005354:	f7fb f88a 	bl	800046c <__aeabi_i2d>
 8005358:	4602      	mov	r2, r0
 800535a:	460b      	mov	r3, r1
 800535c:	ec43 2b18 	vmov	d8, r2, r3
 8005360:	a367      	add	r3, pc, #412	; (adr r3, 8005500 <__ieee754_rem_pio2+0x300>)
 8005362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005366:	f7fb f8eb 	bl	8000540 <__aeabi_dmul>
 800536a:	4602      	mov	r2, r0
 800536c:	460b      	mov	r3, r1
 800536e:	4620      	mov	r0, r4
 8005370:	4629      	mov	r1, r5
 8005372:	f7fa ff2d 	bl	80001d0 <__aeabi_dsub>
 8005376:	a364      	add	r3, pc, #400	; (adr r3, 8005508 <__ieee754_rem_pio2+0x308>)
 8005378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537c:	4606      	mov	r6, r0
 800537e:	460f      	mov	r7, r1
 8005380:	ec51 0b18 	vmov	r0, r1, d8
 8005384:	f7fb f8dc 	bl	8000540 <__aeabi_dmul>
 8005388:	f1bb 0f1f 	cmp.w	fp, #31
 800538c:	4604      	mov	r4, r0
 800538e:	460d      	mov	r5, r1
 8005390:	dc0d      	bgt.n	80053ae <__ieee754_rem_pio2+0x1ae>
 8005392:	4b6e      	ldr	r3, [pc, #440]	; (800554c <__ieee754_rem_pio2+0x34c>)
 8005394:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800539c:	4543      	cmp	r3, r8
 800539e:	d006      	beq.n	80053ae <__ieee754_rem_pio2+0x1ae>
 80053a0:	4622      	mov	r2, r4
 80053a2:	462b      	mov	r3, r5
 80053a4:	4630      	mov	r0, r6
 80053a6:	4639      	mov	r1, r7
 80053a8:	f7fa ff12 	bl	80001d0 <__aeabi_dsub>
 80053ac:	e00f      	b.n	80053ce <__ieee754_rem_pio2+0x1ce>
 80053ae:	462b      	mov	r3, r5
 80053b0:	4622      	mov	r2, r4
 80053b2:	4630      	mov	r0, r6
 80053b4:	4639      	mov	r1, r7
 80053b6:	f7fa ff0b 	bl	80001d0 <__aeabi_dsub>
 80053ba:	ea4f 5328 	mov.w	r3, r8, asr #20
 80053be:	9303      	str	r3, [sp, #12]
 80053c0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80053c4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80053c8:	f1b8 0f10 	cmp.w	r8, #16
 80053cc:	dc02      	bgt.n	80053d4 <__ieee754_rem_pio2+0x1d4>
 80053ce:	e9ca 0100 	strd	r0, r1, [sl]
 80053d2:	e039      	b.n	8005448 <__ieee754_rem_pio2+0x248>
 80053d4:	a34e      	add	r3, pc, #312	; (adr r3, 8005510 <__ieee754_rem_pio2+0x310>)
 80053d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053da:	ec51 0b18 	vmov	r0, r1, d8
 80053de:	f7fb f8af 	bl	8000540 <__aeabi_dmul>
 80053e2:	4604      	mov	r4, r0
 80053e4:	460d      	mov	r5, r1
 80053e6:	4602      	mov	r2, r0
 80053e8:	460b      	mov	r3, r1
 80053ea:	4630      	mov	r0, r6
 80053ec:	4639      	mov	r1, r7
 80053ee:	f7fa feef 	bl	80001d0 <__aeabi_dsub>
 80053f2:	4602      	mov	r2, r0
 80053f4:	460b      	mov	r3, r1
 80053f6:	4680      	mov	r8, r0
 80053f8:	4689      	mov	r9, r1
 80053fa:	4630      	mov	r0, r6
 80053fc:	4639      	mov	r1, r7
 80053fe:	f7fa fee7 	bl	80001d0 <__aeabi_dsub>
 8005402:	4622      	mov	r2, r4
 8005404:	462b      	mov	r3, r5
 8005406:	f7fa fee3 	bl	80001d0 <__aeabi_dsub>
 800540a:	a343      	add	r3, pc, #268	; (adr r3, 8005518 <__ieee754_rem_pio2+0x318>)
 800540c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005410:	4604      	mov	r4, r0
 8005412:	460d      	mov	r5, r1
 8005414:	ec51 0b18 	vmov	r0, r1, d8
 8005418:	f7fb f892 	bl	8000540 <__aeabi_dmul>
 800541c:	4622      	mov	r2, r4
 800541e:	462b      	mov	r3, r5
 8005420:	f7fa fed6 	bl	80001d0 <__aeabi_dsub>
 8005424:	4602      	mov	r2, r0
 8005426:	460b      	mov	r3, r1
 8005428:	4604      	mov	r4, r0
 800542a:	460d      	mov	r5, r1
 800542c:	4640      	mov	r0, r8
 800542e:	4649      	mov	r1, r9
 8005430:	f7fa fece 	bl	80001d0 <__aeabi_dsub>
 8005434:	9a03      	ldr	r2, [sp, #12]
 8005436:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	2b31      	cmp	r3, #49	; 0x31
 800543e:	dc24      	bgt.n	800548a <__ieee754_rem_pio2+0x28a>
 8005440:	e9ca 0100 	strd	r0, r1, [sl]
 8005444:	4646      	mov	r6, r8
 8005446:	464f      	mov	r7, r9
 8005448:	e9da 8900 	ldrd	r8, r9, [sl]
 800544c:	4630      	mov	r0, r6
 800544e:	4642      	mov	r2, r8
 8005450:	464b      	mov	r3, r9
 8005452:	4639      	mov	r1, r7
 8005454:	f7fa febc 	bl	80001d0 <__aeabi_dsub>
 8005458:	462b      	mov	r3, r5
 800545a:	4622      	mov	r2, r4
 800545c:	f7fa feb8 	bl	80001d0 <__aeabi_dsub>
 8005460:	9b02      	ldr	r3, [sp, #8]
 8005462:	2b00      	cmp	r3, #0
 8005464:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005468:	f6bf af0a 	bge.w	8005280 <__ieee754_rem_pio2+0x80>
 800546c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005470:	f8ca 3004 	str.w	r3, [sl, #4]
 8005474:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005478:	f8ca 8000 	str.w	r8, [sl]
 800547c:	f8ca 0008 	str.w	r0, [sl, #8]
 8005480:	f8ca 300c 	str.w	r3, [sl, #12]
 8005484:	f1cb 0b00 	rsb	fp, fp, #0
 8005488:	e6fa      	b.n	8005280 <__ieee754_rem_pio2+0x80>
 800548a:	a327      	add	r3, pc, #156	; (adr r3, 8005528 <__ieee754_rem_pio2+0x328>)
 800548c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005490:	ec51 0b18 	vmov	r0, r1, d8
 8005494:	f7fb f854 	bl	8000540 <__aeabi_dmul>
 8005498:	4604      	mov	r4, r0
 800549a:	460d      	mov	r5, r1
 800549c:	4602      	mov	r2, r0
 800549e:	460b      	mov	r3, r1
 80054a0:	4640      	mov	r0, r8
 80054a2:	4649      	mov	r1, r9
 80054a4:	f7fa fe94 	bl	80001d0 <__aeabi_dsub>
 80054a8:	4602      	mov	r2, r0
 80054aa:	460b      	mov	r3, r1
 80054ac:	4606      	mov	r6, r0
 80054ae:	460f      	mov	r7, r1
 80054b0:	4640      	mov	r0, r8
 80054b2:	4649      	mov	r1, r9
 80054b4:	f7fa fe8c 	bl	80001d0 <__aeabi_dsub>
 80054b8:	4622      	mov	r2, r4
 80054ba:	462b      	mov	r3, r5
 80054bc:	f7fa fe88 	bl	80001d0 <__aeabi_dsub>
 80054c0:	a31b      	add	r3, pc, #108	; (adr r3, 8005530 <__ieee754_rem_pio2+0x330>)
 80054c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c6:	4604      	mov	r4, r0
 80054c8:	460d      	mov	r5, r1
 80054ca:	ec51 0b18 	vmov	r0, r1, d8
 80054ce:	f7fb f837 	bl	8000540 <__aeabi_dmul>
 80054d2:	4622      	mov	r2, r4
 80054d4:	462b      	mov	r3, r5
 80054d6:	f7fa fe7b 	bl	80001d0 <__aeabi_dsub>
 80054da:	4604      	mov	r4, r0
 80054dc:	460d      	mov	r5, r1
 80054de:	e75f      	b.n	80053a0 <__ieee754_rem_pio2+0x1a0>
 80054e0:	4b1b      	ldr	r3, [pc, #108]	; (8005550 <__ieee754_rem_pio2+0x350>)
 80054e2:	4598      	cmp	r8, r3
 80054e4:	dd36      	ble.n	8005554 <__ieee754_rem_pio2+0x354>
 80054e6:	ee10 2a10 	vmov	r2, s0
 80054ea:	462b      	mov	r3, r5
 80054ec:	4620      	mov	r0, r4
 80054ee:	4629      	mov	r1, r5
 80054f0:	f7fa fe6e 	bl	80001d0 <__aeabi_dsub>
 80054f4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80054f8:	e9ca 0100 	strd	r0, r1, [sl]
 80054fc:	e694      	b.n	8005228 <__ieee754_rem_pio2+0x28>
 80054fe:	bf00      	nop
 8005500:	54400000 	.word	0x54400000
 8005504:	3ff921fb 	.word	0x3ff921fb
 8005508:	1a626331 	.word	0x1a626331
 800550c:	3dd0b461 	.word	0x3dd0b461
 8005510:	1a600000 	.word	0x1a600000
 8005514:	3dd0b461 	.word	0x3dd0b461
 8005518:	2e037073 	.word	0x2e037073
 800551c:	3ba3198a 	.word	0x3ba3198a
 8005520:	6dc9c883 	.word	0x6dc9c883
 8005524:	3fe45f30 	.word	0x3fe45f30
 8005528:	2e000000 	.word	0x2e000000
 800552c:	3ba3198a 	.word	0x3ba3198a
 8005530:	252049c1 	.word	0x252049c1
 8005534:	397b839a 	.word	0x397b839a
 8005538:	3fe921fb 	.word	0x3fe921fb
 800553c:	4002d97b 	.word	0x4002d97b
 8005540:	3ff921fb 	.word	0x3ff921fb
 8005544:	413921fb 	.word	0x413921fb
 8005548:	3fe00000 	.word	0x3fe00000
 800554c:	08006220 	.word	0x08006220
 8005550:	7fefffff 	.word	0x7fefffff
 8005554:	ea4f 5428 	mov.w	r4, r8, asr #20
 8005558:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800555c:	ee10 0a10 	vmov	r0, s0
 8005560:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8005564:	ee10 6a10 	vmov	r6, s0
 8005568:	460f      	mov	r7, r1
 800556a:	f7fb fa83 	bl	8000a74 <__aeabi_d2iz>
 800556e:	f7fa ff7d 	bl	800046c <__aeabi_i2d>
 8005572:	4602      	mov	r2, r0
 8005574:	460b      	mov	r3, r1
 8005576:	4630      	mov	r0, r6
 8005578:	4639      	mov	r1, r7
 800557a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800557e:	f7fa fe27 	bl	80001d0 <__aeabi_dsub>
 8005582:	4b23      	ldr	r3, [pc, #140]	; (8005610 <__ieee754_rem_pio2+0x410>)
 8005584:	2200      	movs	r2, #0
 8005586:	f7fa ffdb 	bl	8000540 <__aeabi_dmul>
 800558a:	460f      	mov	r7, r1
 800558c:	4606      	mov	r6, r0
 800558e:	f7fb fa71 	bl	8000a74 <__aeabi_d2iz>
 8005592:	f7fa ff6b 	bl	800046c <__aeabi_i2d>
 8005596:	4602      	mov	r2, r0
 8005598:	460b      	mov	r3, r1
 800559a:	4630      	mov	r0, r6
 800559c:	4639      	mov	r1, r7
 800559e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80055a2:	f7fa fe15 	bl	80001d0 <__aeabi_dsub>
 80055a6:	4b1a      	ldr	r3, [pc, #104]	; (8005610 <__ieee754_rem_pio2+0x410>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	f7fa ffc9 	bl	8000540 <__aeabi_dmul>
 80055ae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80055b2:	ad04      	add	r5, sp, #16
 80055b4:	f04f 0803 	mov.w	r8, #3
 80055b8:	46a9      	mov	r9, r5
 80055ba:	2600      	movs	r6, #0
 80055bc:	2700      	movs	r7, #0
 80055be:	4632      	mov	r2, r6
 80055c0:	463b      	mov	r3, r7
 80055c2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80055c6:	46c3      	mov	fp, r8
 80055c8:	3d08      	subs	r5, #8
 80055ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80055ce:	f7fb fa1f 	bl	8000a10 <__aeabi_dcmpeq>
 80055d2:	2800      	cmp	r0, #0
 80055d4:	d1f3      	bne.n	80055be <__ieee754_rem_pio2+0x3be>
 80055d6:	4b0f      	ldr	r3, [pc, #60]	; (8005614 <__ieee754_rem_pio2+0x414>)
 80055d8:	9301      	str	r3, [sp, #4]
 80055da:	2302      	movs	r3, #2
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	4622      	mov	r2, r4
 80055e0:	465b      	mov	r3, fp
 80055e2:	4651      	mov	r1, sl
 80055e4:	4648      	mov	r0, r9
 80055e6:	f000 f8df 	bl	80057a8 <__kernel_rem_pio2>
 80055ea:	9b02      	ldr	r3, [sp, #8]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	4683      	mov	fp, r0
 80055f0:	f6bf ae46 	bge.w	8005280 <__ieee754_rem_pio2+0x80>
 80055f4:	e9da 2100 	ldrd	r2, r1, [sl]
 80055f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80055fc:	e9ca 2300 	strd	r2, r3, [sl]
 8005600:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8005604:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005608:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800560c:	e73a      	b.n	8005484 <__ieee754_rem_pio2+0x284>
 800560e:	bf00      	nop
 8005610:	41700000 	.word	0x41700000
 8005614:	080062a0 	.word	0x080062a0

08005618 <__kernel_cos>:
 8005618:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800561c:	ec57 6b10 	vmov	r6, r7, d0
 8005620:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005624:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8005628:	ed8d 1b00 	vstr	d1, [sp]
 800562c:	da07      	bge.n	800563e <__kernel_cos+0x26>
 800562e:	ee10 0a10 	vmov	r0, s0
 8005632:	4639      	mov	r1, r7
 8005634:	f7fb fa1e 	bl	8000a74 <__aeabi_d2iz>
 8005638:	2800      	cmp	r0, #0
 800563a:	f000 8088 	beq.w	800574e <__kernel_cos+0x136>
 800563e:	4632      	mov	r2, r6
 8005640:	463b      	mov	r3, r7
 8005642:	4630      	mov	r0, r6
 8005644:	4639      	mov	r1, r7
 8005646:	f7fa ff7b 	bl	8000540 <__aeabi_dmul>
 800564a:	4b51      	ldr	r3, [pc, #324]	; (8005790 <__kernel_cos+0x178>)
 800564c:	2200      	movs	r2, #0
 800564e:	4604      	mov	r4, r0
 8005650:	460d      	mov	r5, r1
 8005652:	f7fa ff75 	bl	8000540 <__aeabi_dmul>
 8005656:	a340      	add	r3, pc, #256	; (adr r3, 8005758 <__kernel_cos+0x140>)
 8005658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565c:	4682      	mov	sl, r0
 800565e:	468b      	mov	fp, r1
 8005660:	4620      	mov	r0, r4
 8005662:	4629      	mov	r1, r5
 8005664:	f7fa ff6c 	bl	8000540 <__aeabi_dmul>
 8005668:	a33d      	add	r3, pc, #244	; (adr r3, 8005760 <__kernel_cos+0x148>)
 800566a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566e:	f7fa fdb1 	bl	80001d4 <__adddf3>
 8005672:	4622      	mov	r2, r4
 8005674:	462b      	mov	r3, r5
 8005676:	f7fa ff63 	bl	8000540 <__aeabi_dmul>
 800567a:	a33b      	add	r3, pc, #236	; (adr r3, 8005768 <__kernel_cos+0x150>)
 800567c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005680:	f7fa fda6 	bl	80001d0 <__aeabi_dsub>
 8005684:	4622      	mov	r2, r4
 8005686:	462b      	mov	r3, r5
 8005688:	f7fa ff5a 	bl	8000540 <__aeabi_dmul>
 800568c:	a338      	add	r3, pc, #224	; (adr r3, 8005770 <__kernel_cos+0x158>)
 800568e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005692:	f7fa fd9f 	bl	80001d4 <__adddf3>
 8005696:	4622      	mov	r2, r4
 8005698:	462b      	mov	r3, r5
 800569a:	f7fa ff51 	bl	8000540 <__aeabi_dmul>
 800569e:	a336      	add	r3, pc, #216	; (adr r3, 8005778 <__kernel_cos+0x160>)
 80056a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056a4:	f7fa fd94 	bl	80001d0 <__aeabi_dsub>
 80056a8:	4622      	mov	r2, r4
 80056aa:	462b      	mov	r3, r5
 80056ac:	f7fa ff48 	bl	8000540 <__aeabi_dmul>
 80056b0:	a333      	add	r3, pc, #204	; (adr r3, 8005780 <__kernel_cos+0x168>)
 80056b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b6:	f7fa fd8d 	bl	80001d4 <__adddf3>
 80056ba:	4622      	mov	r2, r4
 80056bc:	462b      	mov	r3, r5
 80056be:	f7fa ff3f 	bl	8000540 <__aeabi_dmul>
 80056c2:	4622      	mov	r2, r4
 80056c4:	462b      	mov	r3, r5
 80056c6:	f7fa ff3b 	bl	8000540 <__aeabi_dmul>
 80056ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 80056ce:	4604      	mov	r4, r0
 80056d0:	460d      	mov	r5, r1
 80056d2:	4630      	mov	r0, r6
 80056d4:	4639      	mov	r1, r7
 80056d6:	f7fa ff33 	bl	8000540 <__aeabi_dmul>
 80056da:	460b      	mov	r3, r1
 80056dc:	4602      	mov	r2, r0
 80056de:	4629      	mov	r1, r5
 80056e0:	4620      	mov	r0, r4
 80056e2:	f7fa fd75 	bl	80001d0 <__aeabi_dsub>
 80056e6:	4b2b      	ldr	r3, [pc, #172]	; (8005794 <__kernel_cos+0x17c>)
 80056e8:	4598      	cmp	r8, r3
 80056ea:	4606      	mov	r6, r0
 80056ec:	460f      	mov	r7, r1
 80056ee:	dc10      	bgt.n	8005712 <__kernel_cos+0xfa>
 80056f0:	4602      	mov	r2, r0
 80056f2:	460b      	mov	r3, r1
 80056f4:	4650      	mov	r0, sl
 80056f6:	4659      	mov	r1, fp
 80056f8:	f7fa fd6a 	bl	80001d0 <__aeabi_dsub>
 80056fc:	460b      	mov	r3, r1
 80056fe:	4926      	ldr	r1, [pc, #152]	; (8005798 <__kernel_cos+0x180>)
 8005700:	4602      	mov	r2, r0
 8005702:	2000      	movs	r0, #0
 8005704:	f7fa fd64 	bl	80001d0 <__aeabi_dsub>
 8005708:	ec41 0b10 	vmov	d0, r0, r1
 800570c:	b003      	add	sp, #12
 800570e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005712:	4b22      	ldr	r3, [pc, #136]	; (800579c <__kernel_cos+0x184>)
 8005714:	4920      	ldr	r1, [pc, #128]	; (8005798 <__kernel_cos+0x180>)
 8005716:	4598      	cmp	r8, r3
 8005718:	bfcc      	ite	gt
 800571a:	4d21      	ldrgt	r5, [pc, #132]	; (80057a0 <__kernel_cos+0x188>)
 800571c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8005720:	2400      	movs	r4, #0
 8005722:	4622      	mov	r2, r4
 8005724:	462b      	mov	r3, r5
 8005726:	2000      	movs	r0, #0
 8005728:	f7fa fd52 	bl	80001d0 <__aeabi_dsub>
 800572c:	4622      	mov	r2, r4
 800572e:	4680      	mov	r8, r0
 8005730:	4689      	mov	r9, r1
 8005732:	462b      	mov	r3, r5
 8005734:	4650      	mov	r0, sl
 8005736:	4659      	mov	r1, fp
 8005738:	f7fa fd4a 	bl	80001d0 <__aeabi_dsub>
 800573c:	4632      	mov	r2, r6
 800573e:	463b      	mov	r3, r7
 8005740:	f7fa fd46 	bl	80001d0 <__aeabi_dsub>
 8005744:	4602      	mov	r2, r0
 8005746:	460b      	mov	r3, r1
 8005748:	4640      	mov	r0, r8
 800574a:	4649      	mov	r1, r9
 800574c:	e7da      	b.n	8005704 <__kernel_cos+0xec>
 800574e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8005788 <__kernel_cos+0x170>
 8005752:	e7db      	b.n	800570c <__kernel_cos+0xf4>
 8005754:	f3af 8000 	nop.w
 8005758:	be8838d4 	.word	0xbe8838d4
 800575c:	bda8fae9 	.word	0xbda8fae9
 8005760:	bdb4b1c4 	.word	0xbdb4b1c4
 8005764:	3e21ee9e 	.word	0x3e21ee9e
 8005768:	809c52ad 	.word	0x809c52ad
 800576c:	3e927e4f 	.word	0x3e927e4f
 8005770:	19cb1590 	.word	0x19cb1590
 8005774:	3efa01a0 	.word	0x3efa01a0
 8005778:	16c15177 	.word	0x16c15177
 800577c:	3f56c16c 	.word	0x3f56c16c
 8005780:	5555554c 	.word	0x5555554c
 8005784:	3fa55555 	.word	0x3fa55555
 8005788:	00000000 	.word	0x00000000
 800578c:	3ff00000 	.word	0x3ff00000
 8005790:	3fe00000 	.word	0x3fe00000
 8005794:	3fd33332 	.word	0x3fd33332
 8005798:	3ff00000 	.word	0x3ff00000
 800579c:	3fe90000 	.word	0x3fe90000
 80057a0:	3fd20000 	.word	0x3fd20000
 80057a4:	00000000 	.word	0x00000000

080057a8 <__kernel_rem_pio2>:
 80057a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057ac:	ed2d 8b02 	vpush	{d8}
 80057b0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80057b4:	f112 0f14 	cmn.w	r2, #20
 80057b8:	9308      	str	r3, [sp, #32]
 80057ba:	9101      	str	r1, [sp, #4]
 80057bc:	4bc4      	ldr	r3, [pc, #784]	; (8005ad0 <__kernel_rem_pio2+0x328>)
 80057be:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80057c0:	900b      	str	r0, [sp, #44]	; 0x2c
 80057c2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80057c6:	9302      	str	r3, [sp, #8]
 80057c8:	9b08      	ldr	r3, [sp, #32]
 80057ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80057ce:	bfa8      	it	ge
 80057d0:	1ed4      	subge	r4, r2, #3
 80057d2:	9306      	str	r3, [sp, #24]
 80057d4:	bfb2      	itee	lt
 80057d6:	2400      	movlt	r4, #0
 80057d8:	2318      	movge	r3, #24
 80057da:	fb94 f4f3 	sdivge	r4, r4, r3
 80057de:	f06f 0317 	mvn.w	r3, #23
 80057e2:	fb04 3303 	mla	r3, r4, r3, r3
 80057e6:	eb03 0a02 	add.w	sl, r3, r2
 80057ea:	9b02      	ldr	r3, [sp, #8]
 80057ec:	9a06      	ldr	r2, [sp, #24]
 80057ee:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8005ac0 <__kernel_rem_pio2+0x318>
 80057f2:	eb03 0802 	add.w	r8, r3, r2
 80057f6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80057f8:	1aa7      	subs	r7, r4, r2
 80057fa:	ae22      	add	r6, sp, #136	; 0x88
 80057fc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005800:	2500      	movs	r5, #0
 8005802:	4545      	cmp	r5, r8
 8005804:	dd13      	ble.n	800582e <__kernel_rem_pio2+0x86>
 8005806:	9b08      	ldr	r3, [sp, #32]
 8005808:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8005ac0 <__kernel_rem_pio2+0x318>
 800580c:	aa22      	add	r2, sp, #136	; 0x88
 800580e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005812:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8005816:	f04f 0800 	mov.w	r8, #0
 800581a:	9b02      	ldr	r3, [sp, #8]
 800581c:	4598      	cmp	r8, r3
 800581e:	dc2f      	bgt.n	8005880 <__kernel_rem_pio2+0xd8>
 8005820:	ed8d 8b04 	vstr	d8, [sp, #16]
 8005824:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8005828:	462f      	mov	r7, r5
 800582a:	2600      	movs	r6, #0
 800582c:	e01b      	b.n	8005866 <__kernel_rem_pio2+0xbe>
 800582e:	42ef      	cmn	r7, r5
 8005830:	d407      	bmi.n	8005842 <__kernel_rem_pio2+0x9a>
 8005832:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005836:	f7fa fe19 	bl	800046c <__aeabi_i2d>
 800583a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800583e:	3501      	adds	r5, #1
 8005840:	e7df      	b.n	8005802 <__kernel_rem_pio2+0x5a>
 8005842:	ec51 0b18 	vmov	r0, r1, d8
 8005846:	e7f8      	b.n	800583a <__kernel_rem_pio2+0x92>
 8005848:	e9d7 2300 	ldrd	r2, r3, [r7]
 800584c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005850:	f7fa fe76 	bl	8000540 <__aeabi_dmul>
 8005854:	4602      	mov	r2, r0
 8005856:	460b      	mov	r3, r1
 8005858:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800585c:	f7fa fcba 	bl	80001d4 <__adddf3>
 8005860:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005864:	3601      	adds	r6, #1
 8005866:	9b06      	ldr	r3, [sp, #24]
 8005868:	429e      	cmp	r6, r3
 800586a:	f1a7 0708 	sub.w	r7, r7, #8
 800586e:	ddeb      	ble.n	8005848 <__kernel_rem_pio2+0xa0>
 8005870:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005874:	f108 0801 	add.w	r8, r8, #1
 8005878:	ecab 7b02 	vstmia	fp!, {d7}
 800587c:	3508      	adds	r5, #8
 800587e:	e7cc      	b.n	800581a <__kernel_rem_pio2+0x72>
 8005880:	9b02      	ldr	r3, [sp, #8]
 8005882:	aa0e      	add	r2, sp, #56	; 0x38
 8005884:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005888:	930d      	str	r3, [sp, #52]	; 0x34
 800588a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800588c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005890:	9c02      	ldr	r4, [sp, #8]
 8005892:	930c      	str	r3, [sp, #48]	; 0x30
 8005894:	00e3      	lsls	r3, r4, #3
 8005896:	930a      	str	r3, [sp, #40]	; 0x28
 8005898:	ab9a      	add	r3, sp, #616	; 0x268
 800589a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800589e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80058a2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80058a6:	ab72      	add	r3, sp, #456	; 0x1c8
 80058a8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80058ac:	46c3      	mov	fp, r8
 80058ae:	46a1      	mov	r9, r4
 80058b0:	f1b9 0f00 	cmp.w	r9, #0
 80058b4:	f1a5 0508 	sub.w	r5, r5, #8
 80058b8:	dc77      	bgt.n	80059aa <__kernel_rem_pio2+0x202>
 80058ba:	ec47 6b10 	vmov	d0, r6, r7
 80058be:	4650      	mov	r0, sl
 80058c0:	f000 fc0a 	bl	80060d8 <scalbn>
 80058c4:	ec57 6b10 	vmov	r6, r7, d0
 80058c8:	2200      	movs	r2, #0
 80058ca:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80058ce:	ee10 0a10 	vmov	r0, s0
 80058d2:	4639      	mov	r1, r7
 80058d4:	f7fa fe34 	bl	8000540 <__aeabi_dmul>
 80058d8:	ec41 0b10 	vmov	d0, r0, r1
 80058dc:	f000 fb7c 	bl	8005fd8 <floor>
 80058e0:	4b7c      	ldr	r3, [pc, #496]	; (8005ad4 <__kernel_rem_pio2+0x32c>)
 80058e2:	ec51 0b10 	vmov	r0, r1, d0
 80058e6:	2200      	movs	r2, #0
 80058e8:	f7fa fe2a 	bl	8000540 <__aeabi_dmul>
 80058ec:	4602      	mov	r2, r0
 80058ee:	460b      	mov	r3, r1
 80058f0:	4630      	mov	r0, r6
 80058f2:	4639      	mov	r1, r7
 80058f4:	f7fa fc6c 	bl	80001d0 <__aeabi_dsub>
 80058f8:	460f      	mov	r7, r1
 80058fa:	4606      	mov	r6, r0
 80058fc:	f7fb f8ba 	bl	8000a74 <__aeabi_d2iz>
 8005900:	9004      	str	r0, [sp, #16]
 8005902:	f7fa fdb3 	bl	800046c <__aeabi_i2d>
 8005906:	4602      	mov	r2, r0
 8005908:	460b      	mov	r3, r1
 800590a:	4630      	mov	r0, r6
 800590c:	4639      	mov	r1, r7
 800590e:	f7fa fc5f 	bl	80001d0 <__aeabi_dsub>
 8005912:	f1ba 0f00 	cmp.w	sl, #0
 8005916:	4606      	mov	r6, r0
 8005918:	460f      	mov	r7, r1
 800591a:	dd6d      	ble.n	80059f8 <__kernel_rem_pio2+0x250>
 800591c:	1e62      	subs	r2, r4, #1
 800591e:	ab0e      	add	r3, sp, #56	; 0x38
 8005920:	9d04      	ldr	r5, [sp, #16]
 8005922:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005926:	f1ca 0118 	rsb	r1, sl, #24
 800592a:	fa40 f301 	asr.w	r3, r0, r1
 800592e:	441d      	add	r5, r3
 8005930:	408b      	lsls	r3, r1
 8005932:	1ac0      	subs	r0, r0, r3
 8005934:	ab0e      	add	r3, sp, #56	; 0x38
 8005936:	9504      	str	r5, [sp, #16]
 8005938:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800593c:	f1ca 0317 	rsb	r3, sl, #23
 8005940:	fa40 fb03 	asr.w	fp, r0, r3
 8005944:	f1bb 0f00 	cmp.w	fp, #0
 8005948:	dd65      	ble.n	8005a16 <__kernel_rem_pio2+0x26e>
 800594a:	9b04      	ldr	r3, [sp, #16]
 800594c:	2200      	movs	r2, #0
 800594e:	3301      	adds	r3, #1
 8005950:	9304      	str	r3, [sp, #16]
 8005952:	4615      	mov	r5, r2
 8005954:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005958:	4294      	cmp	r4, r2
 800595a:	f300 809c 	bgt.w	8005a96 <__kernel_rem_pio2+0x2ee>
 800595e:	f1ba 0f00 	cmp.w	sl, #0
 8005962:	dd07      	ble.n	8005974 <__kernel_rem_pio2+0x1cc>
 8005964:	f1ba 0f01 	cmp.w	sl, #1
 8005968:	f000 80c0 	beq.w	8005aec <__kernel_rem_pio2+0x344>
 800596c:	f1ba 0f02 	cmp.w	sl, #2
 8005970:	f000 80c6 	beq.w	8005b00 <__kernel_rem_pio2+0x358>
 8005974:	f1bb 0f02 	cmp.w	fp, #2
 8005978:	d14d      	bne.n	8005a16 <__kernel_rem_pio2+0x26e>
 800597a:	4632      	mov	r2, r6
 800597c:	463b      	mov	r3, r7
 800597e:	4956      	ldr	r1, [pc, #344]	; (8005ad8 <__kernel_rem_pio2+0x330>)
 8005980:	2000      	movs	r0, #0
 8005982:	f7fa fc25 	bl	80001d0 <__aeabi_dsub>
 8005986:	4606      	mov	r6, r0
 8005988:	460f      	mov	r7, r1
 800598a:	2d00      	cmp	r5, #0
 800598c:	d043      	beq.n	8005a16 <__kernel_rem_pio2+0x26e>
 800598e:	4650      	mov	r0, sl
 8005990:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8005ac8 <__kernel_rem_pio2+0x320>
 8005994:	f000 fba0 	bl	80060d8 <scalbn>
 8005998:	4630      	mov	r0, r6
 800599a:	4639      	mov	r1, r7
 800599c:	ec53 2b10 	vmov	r2, r3, d0
 80059a0:	f7fa fc16 	bl	80001d0 <__aeabi_dsub>
 80059a4:	4606      	mov	r6, r0
 80059a6:	460f      	mov	r7, r1
 80059a8:	e035      	b.n	8005a16 <__kernel_rem_pio2+0x26e>
 80059aa:	4b4c      	ldr	r3, [pc, #304]	; (8005adc <__kernel_rem_pio2+0x334>)
 80059ac:	2200      	movs	r2, #0
 80059ae:	4630      	mov	r0, r6
 80059b0:	4639      	mov	r1, r7
 80059b2:	f7fa fdc5 	bl	8000540 <__aeabi_dmul>
 80059b6:	f7fb f85d 	bl	8000a74 <__aeabi_d2iz>
 80059ba:	f7fa fd57 	bl	800046c <__aeabi_i2d>
 80059be:	4602      	mov	r2, r0
 80059c0:	460b      	mov	r3, r1
 80059c2:	ec43 2b18 	vmov	d8, r2, r3
 80059c6:	4b46      	ldr	r3, [pc, #280]	; (8005ae0 <__kernel_rem_pio2+0x338>)
 80059c8:	2200      	movs	r2, #0
 80059ca:	f7fa fdb9 	bl	8000540 <__aeabi_dmul>
 80059ce:	4602      	mov	r2, r0
 80059d0:	460b      	mov	r3, r1
 80059d2:	4630      	mov	r0, r6
 80059d4:	4639      	mov	r1, r7
 80059d6:	f7fa fbfb 	bl	80001d0 <__aeabi_dsub>
 80059da:	f7fb f84b 	bl	8000a74 <__aeabi_d2iz>
 80059de:	e9d5 2300 	ldrd	r2, r3, [r5]
 80059e2:	f84b 0b04 	str.w	r0, [fp], #4
 80059e6:	ec51 0b18 	vmov	r0, r1, d8
 80059ea:	f7fa fbf3 	bl	80001d4 <__adddf3>
 80059ee:	f109 39ff 	add.w	r9, r9, #4294967295
 80059f2:	4606      	mov	r6, r0
 80059f4:	460f      	mov	r7, r1
 80059f6:	e75b      	b.n	80058b0 <__kernel_rem_pio2+0x108>
 80059f8:	d106      	bne.n	8005a08 <__kernel_rem_pio2+0x260>
 80059fa:	1e63      	subs	r3, r4, #1
 80059fc:	aa0e      	add	r2, sp, #56	; 0x38
 80059fe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005a02:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8005a06:	e79d      	b.n	8005944 <__kernel_rem_pio2+0x19c>
 8005a08:	4b36      	ldr	r3, [pc, #216]	; (8005ae4 <__kernel_rem_pio2+0x33c>)
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f7fb f81e 	bl	8000a4c <__aeabi_dcmpge>
 8005a10:	2800      	cmp	r0, #0
 8005a12:	d13d      	bne.n	8005a90 <__kernel_rem_pio2+0x2e8>
 8005a14:	4683      	mov	fp, r0
 8005a16:	2200      	movs	r2, #0
 8005a18:	2300      	movs	r3, #0
 8005a1a:	4630      	mov	r0, r6
 8005a1c:	4639      	mov	r1, r7
 8005a1e:	f7fa fff7 	bl	8000a10 <__aeabi_dcmpeq>
 8005a22:	2800      	cmp	r0, #0
 8005a24:	f000 80c0 	beq.w	8005ba8 <__kernel_rem_pio2+0x400>
 8005a28:	1e65      	subs	r5, r4, #1
 8005a2a:	462b      	mov	r3, r5
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	9902      	ldr	r1, [sp, #8]
 8005a30:	428b      	cmp	r3, r1
 8005a32:	da6c      	bge.n	8005b0e <__kernel_rem_pio2+0x366>
 8005a34:	2a00      	cmp	r2, #0
 8005a36:	f000 8089 	beq.w	8005b4c <__kernel_rem_pio2+0x3a4>
 8005a3a:	ab0e      	add	r3, sp, #56	; 0x38
 8005a3c:	f1aa 0a18 	sub.w	sl, sl, #24
 8005a40:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f000 80ad 	beq.w	8005ba4 <__kernel_rem_pio2+0x3fc>
 8005a4a:	4650      	mov	r0, sl
 8005a4c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8005ac8 <__kernel_rem_pio2+0x320>
 8005a50:	f000 fb42 	bl	80060d8 <scalbn>
 8005a54:	ab9a      	add	r3, sp, #616	; 0x268
 8005a56:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005a5a:	ec57 6b10 	vmov	r6, r7, d0
 8005a5e:	00ec      	lsls	r4, r5, #3
 8005a60:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8005a64:	46aa      	mov	sl, r5
 8005a66:	f1ba 0f00 	cmp.w	sl, #0
 8005a6a:	f280 80d6 	bge.w	8005c1a <__kernel_rem_pio2+0x472>
 8005a6e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8005ac0 <__kernel_rem_pio2+0x318>
 8005a72:	462e      	mov	r6, r5
 8005a74:	2e00      	cmp	r6, #0
 8005a76:	f2c0 8104 	blt.w	8005c82 <__kernel_rem_pio2+0x4da>
 8005a7a:	ab72      	add	r3, sp, #456	; 0x1c8
 8005a7c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8005a80:	f8df a064 	ldr.w	sl, [pc, #100]	; 8005ae8 <__kernel_rem_pio2+0x340>
 8005a84:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8005a88:	f04f 0800 	mov.w	r8, #0
 8005a8c:	1baf      	subs	r7, r5, r6
 8005a8e:	e0ea      	b.n	8005c66 <__kernel_rem_pio2+0x4be>
 8005a90:	f04f 0b02 	mov.w	fp, #2
 8005a94:	e759      	b.n	800594a <__kernel_rem_pio2+0x1a2>
 8005a96:	f8d8 3000 	ldr.w	r3, [r8]
 8005a9a:	b955      	cbnz	r5, 8005ab2 <__kernel_rem_pio2+0x30a>
 8005a9c:	b123      	cbz	r3, 8005aa8 <__kernel_rem_pio2+0x300>
 8005a9e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005aa2:	f8c8 3000 	str.w	r3, [r8]
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	3201      	adds	r2, #1
 8005aaa:	f108 0804 	add.w	r8, r8, #4
 8005aae:	461d      	mov	r5, r3
 8005ab0:	e752      	b.n	8005958 <__kernel_rem_pio2+0x1b0>
 8005ab2:	1acb      	subs	r3, r1, r3
 8005ab4:	f8c8 3000 	str.w	r3, [r8]
 8005ab8:	462b      	mov	r3, r5
 8005aba:	e7f5      	b.n	8005aa8 <__kernel_rem_pio2+0x300>
 8005abc:	f3af 8000 	nop.w
	...
 8005acc:	3ff00000 	.word	0x3ff00000
 8005ad0:	080063e8 	.word	0x080063e8
 8005ad4:	40200000 	.word	0x40200000
 8005ad8:	3ff00000 	.word	0x3ff00000
 8005adc:	3e700000 	.word	0x3e700000
 8005ae0:	41700000 	.word	0x41700000
 8005ae4:	3fe00000 	.word	0x3fe00000
 8005ae8:	080063a8 	.word	0x080063a8
 8005aec:	1e62      	subs	r2, r4, #1
 8005aee:	ab0e      	add	r3, sp, #56	; 0x38
 8005af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005af4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005af8:	a90e      	add	r1, sp, #56	; 0x38
 8005afa:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005afe:	e739      	b.n	8005974 <__kernel_rem_pio2+0x1cc>
 8005b00:	1e62      	subs	r2, r4, #1
 8005b02:	ab0e      	add	r3, sp, #56	; 0x38
 8005b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b08:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005b0c:	e7f4      	b.n	8005af8 <__kernel_rem_pio2+0x350>
 8005b0e:	a90e      	add	r1, sp, #56	; 0x38
 8005b10:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005b14:	3b01      	subs	r3, #1
 8005b16:	430a      	orrs	r2, r1
 8005b18:	e789      	b.n	8005a2e <__kernel_rem_pio2+0x286>
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005b20:	2900      	cmp	r1, #0
 8005b22:	d0fa      	beq.n	8005b1a <__kernel_rem_pio2+0x372>
 8005b24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b26:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8005b2a:	446a      	add	r2, sp
 8005b2c:	3a98      	subs	r2, #152	; 0x98
 8005b2e:	920a      	str	r2, [sp, #40]	; 0x28
 8005b30:	9a08      	ldr	r2, [sp, #32]
 8005b32:	18e3      	adds	r3, r4, r3
 8005b34:	18a5      	adds	r5, r4, r2
 8005b36:	aa22      	add	r2, sp, #136	; 0x88
 8005b38:	f104 0801 	add.w	r8, r4, #1
 8005b3c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8005b40:	9304      	str	r3, [sp, #16]
 8005b42:	9b04      	ldr	r3, [sp, #16]
 8005b44:	4543      	cmp	r3, r8
 8005b46:	da04      	bge.n	8005b52 <__kernel_rem_pio2+0x3aa>
 8005b48:	461c      	mov	r4, r3
 8005b4a:	e6a3      	b.n	8005894 <__kernel_rem_pio2+0xec>
 8005b4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005b4e:	2301      	movs	r3, #1
 8005b50:	e7e4      	b.n	8005b1c <__kernel_rem_pio2+0x374>
 8005b52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b54:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005b58:	f7fa fc88 	bl	800046c <__aeabi_i2d>
 8005b5c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8005b60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b62:	46ab      	mov	fp, r5
 8005b64:	461c      	mov	r4, r3
 8005b66:	f04f 0900 	mov.w	r9, #0
 8005b6a:	2600      	movs	r6, #0
 8005b6c:	2700      	movs	r7, #0
 8005b6e:	9b06      	ldr	r3, [sp, #24]
 8005b70:	4599      	cmp	r9, r3
 8005b72:	dd06      	ble.n	8005b82 <__kernel_rem_pio2+0x3da>
 8005b74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b76:	e8e3 6702 	strd	r6, r7, [r3], #8
 8005b7a:	f108 0801 	add.w	r8, r8, #1
 8005b7e:	930a      	str	r3, [sp, #40]	; 0x28
 8005b80:	e7df      	b.n	8005b42 <__kernel_rem_pio2+0x39a>
 8005b82:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005b86:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005b8a:	f7fa fcd9 	bl	8000540 <__aeabi_dmul>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	460b      	mov	r3, r1
 8005b92:	4630      	mov	r0, r6
 8005b94:	4639      	mov	r1, r7
 8005b96:	f7fa fb1d 	bl	80001d4 <__adddf3>
 8005b9a:	f109 0901 	add.w	r9, r9, #1
 8005b9e:	4606      	mov	r6, r0
 8005ba0:	460f      	mov	r7, r1
 8005ba2:	e7e4      	b.n	8005b6e <__kernel_rem_pio2+0x3c6>
 8005ba4:	3d01      	subs	r5, #1
 8005ba6:	e748      	b.n	8005a3a <__kernel_rem_pio2+0x292>
 8005ba8:	ec47 6b10 	vmov	d0, r6, r7
 8005bac:	f1ca 0000 	rsb	r0, sl, #0
 8005bb0:	f000 fa92 	bl	80060d8 <scalbn>
 8005bb4:	ec57 6b10 	vmov	r6, r7, d0
 8005bb8:	4ba0      	ldr	r3, [pc, #640]	; (8005e3c <__kernel_rem_pio2+0x694>)
 8005bba:	ee10 0a10 	vmov	r0, s0
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	4639      	mov	r1, r7
 8005bc2:	f7fa ff43 	bl	8000a4c <__aeabi_dcmpge>
 8005bc6:	b1f8      	cbz	r0, 8005c08 <__kernel_rem_pio2+0x460>
 8005bc8:	4b9d      	ldr	r3, [pc, #628]	; (8005e40 <__kernel_rem_pio2+0x698>)
 8005bca:	2200      	movs	r2, #0
 8005bcc:	4630      	mov	r0, r6
 8005bce:	4639      	mov	r1, r7
 8005bd0:	f7fa fcb6 	bl	8000540 <__aeabi_dmul>
 8005bd4:	f7fa ff4e 	bl	8000a74 <__aeabi_d2iz>
 8005bd8:	4680      	mov	r8, r0
 8005bda:	f7fa fc47 	bl	800046c <__aeabi_i2d>
 8005bde:	4b97      	ldr	r3, [pc, #604]	; (8005e3c <__kernel_rem_pio2+0x694>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	f7fa fcad 	bl	8000540 <__aeabi_dmul>
 8005be6:	460b      	mov	r3, r1
 8005be8:	4602      	mov	r2, r0
 8005bea:	4639      	mov	r1, r7
 8005bec:	4630      	mov	r0, r6
 8005bee:	f7fa faef 	bl	80001d0 <__aeabi_dsub>
 8005bf2:	f7fa ff3f 	bl	8000a74 <__aeabi_d2iz>
 8005bf6:	1c65      	adds	r5, r4, #1
 8005bf8:	ab0e      	add	r3, sp, #56	; 0x38
 8005bfa:	f10a 0a18 	add.w	sl, sl, #24
 8005bfe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005c02:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005c06:	e720      	b.n	8005a4a <__kernel_rem_pio2+0x2a2>
 8005c08:	4630      	mov	r0, r6
 8005c0a:	4639      	mov	r1, r7
 8005c0c:	f7fa ff32 	bl	8000a74 <__aeabi_d2iz>
 8005c10:	ab0e      	add	r3, sp, #56	; 0x38
 8005c12:	4625      	mov	r5, r4
 8005c14:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005c18:	e717      	b.n	8005a4a <__kernel_rem_pio2+0x2a2>
 8005c1a:	ab0e      	add	r3, sp, #56	; 0x38
 8005c1c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8005c20:	f7fa fc24 	bl	800046c <__aeabi_i2d>
 8005c24:	4632      	mov	r2, r6
 8005c26:	463b      	mov	r3, r7
 8005c28:	f7fa fc8a 	bl	8000540 <__aeabi_dmul>
 8005c2c:	4b84      	ldr	r3, [pc, #528]	; (8005e40 <__kernel_rem_pio2+0x698>)
 8005c2e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8005c32:	2200      	movs	r2, #0
 8005c34:	4630      	mov	r0, r6
 8005c36:	4639      	mov	r1, r7
 8005c38:	f7fa fc82 	bl	8000540 <__aeabi_dmul>
 8005c3c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c40:	4606      	mov	r6, r0
 8005c42:	460f      	mov	r7, r1
 8005c44:	e70f      	b.n	8005a66 <__kernel_rem_pio2+0x2be>
 8005c46:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8005c4a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8005c4e:	f7fa fc77 	bl	8000540 <__aeabi_dmul>
 8005c52:	4602      	mov	r2, r0
 8005c54:	460b      	mov	r3, r1
 8005c56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c5a:	f7fa fabb 	bl	80001d4 <__adddf3>
 8005c5e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005c62:	f108 0801 	add.w	r8, r8, #1
 8005c66:	9b02      	ldr	r3, [sp, #8]
 8005c68:	4598      	cmp	r8, r3
 8005c6a:	dc01      	bgt.n	8005c70 <__kernel_rem_pio2+0x4c8>
 8005c6c:	45b8      	cmp	r8, r7
 8005c6e:	ddea      	ble.n	8005c46 <__kernel_rem_pio2+0x49e>
 8005c70:	ed9d 7b06 	vldr	d7, [sp, #24]
 8005c74:	ab4a      	add	r3, sp, #296	; 0x128
 8005c76:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005c7a:	ed87 7b00 	vstr	d7, [r7]
 8005c7e:	3e01      	subs	r6, #1
 8005c80:	e6f8      	b.n	8005a74 <__kernel_rem_pio2+0x2cc>
 8005c82:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	dc0b      	bgt.n	8005ca0 <__kernel_rem_pio2+0x4f8>
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	dc35      	bgt.n	8005cf8 <__kernel_rem_pio2+0x550>
 8005c8c:	d059      	beq.n	8005d42 <__kernel_rem_pio2+0x59a>
 8005c8e:	9b04      	ldr	r3, [sp, #16]
 8005c90:	f003 0007 	and.w	r0, r3, #7
 8005c94:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005c98:	ecbd 8b02 	vpop	{d8}
 8005c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ca0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005ca2:	2b03      	cmp	r3, #3
 8005ca4:	d1f3      	bne.n	8005c8e <__kernel_rem_pio2+0x4e6>
 8005ca6:	ab4a      	add	r3, sp, #296	; 0x128
 8005ca8:	4423      	add	r3, r4
 8005caa:	9306      	str	r3, [sp, #24]
 8005cac:	461c      	mov	r4, r3
 8005cae:	469a      	mov	sl, r3
 8005cb0:	9502      	str	r5, [sp, #8]
 8005cb2:	9b02      	ldr	r3, [sp, #8]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f1aa 0a08 	sub.w	sl, sl, #8
 8005cba:	dc6b      	bgt.n	8005d94 <__kernel_rem_pio2+0x5ec>
 8005cbc:	46aa      	mov	sl, r5
 8005cbe:	f1ba 0f01 	cmp.w	sl, #1
 8005cc2:	f1a4 0408 	sub.w	r4, r4, #8
 8005cc6:	f300 8085 	bgt.w	8005dd4 <__kernel_rem_pio2+0x62c>
 8005cca:	9c06      	ldr	r4, [sp, #24]
 8005ccc:	2000      	movs	r0, #0
 8005cce:	3408      	adds	r4, #8
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	2d01      	cmp	r5, #1
 8005cd4:	f300 809d 	bgt.w	8005e12 <__kernel_rem_pio2+0x66a>
 8005cd8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8005cdc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8005ce0:	f1bb 0f00 	cmp.w	fp, #0
 8005ce4:	f040 809b 	bne.w	8005e1e <__kernel_rem_pio2+0x676>
 8005ce8:	9b01      	ldr	r3, [sp, #4]
 8005cea:	e9c3 5600 	strd	r5, r6, [r3]
 8005cee:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8005cf2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005cf6:	e7ca      	b.n	8005c8e <__kernel_rem_pio2+0x4e6>
 8005cf8:	3408      	adds	r4, #8
 8005cfa:	ab4a      	add	r3, sp, #296	; 0x128
 8005cfc:	441c      	add	r4, r3
 8005cfe:	462e      	mov	r6, r5
 8005d00:	2000      	movs	r0, #0
 8005d02:	2100      	movs	r1, #0
 8005d04:	2e00      	cmp	r6, #0
 8005d06:	da36      	bge.n	8005d76 <__kernel_rem_pio2+0x5ce>
 8005d08:	f1bb 0f00 	cmp.w	fp, #0
 8005d0c:	d039      	beq.n	8005d82 <__kernel_rem_pio2+0x5da>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d14:	9c01      	ldr	r4, [sp, #4]
 8005d16:	e9c4 2300 	strd	r2, r3, [r4]
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8005d22:	f7fa fa55 	bl	80001d0 <__aeabi_dsub>
 8005d26:	ae4c      	add	r6, sp, #304	; 0x130
 8005d28:	2401      	movs	r4, #1
 8005d2a:	42a5      	cmp	r5, r4
 8005d2c:	da2c      	bge.n	8005d88 <__kernel_rem_pio2+0x5e0>
 8005d2e:	f1bb 0f00 	cmp.w	fp, #0
 8005d32:	d002      	beq.n	8005d3a <__kernel_rem_pio2+0x592>
 8005d34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d38:	4619      	mov	r1, r3
 8005d3a:	9b01      	ldr	r3, [sp, #4]
 8005d3c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005d40:	e7a5      	b.n	8005c8e <__kernel_rem_pio2+0x4e6>
 8005d42:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8005d46:	eb0d 0403 	add.w	r4, sp, r3
 8005d4a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005d4e:	2000      	movs	r0, #0
 8005d50:	2100      	movs	r1, #0
 8005d52:	2d00      	cmp	r5, #0
 8005d54:	da09      	bge.n	8005d6a <__kernel_rem_pio2+0x5c2>
 8005d56:	f1bb 0f00 	cmp.w	fp, #0
 8005d5a:	d002      	beq.n	8005d62 <__kernel_rem_pio2+0x5ba>
 8005d5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005d60:	4619      	mov	r1, r3
 8005d62:	9b01      	ldr	r3, [sp, #4]
 8005d64:	e9c3 0100 	strd	r0, r1, [r3]
 8005d68:	e791      	b.n	8005c8e <__kernel_rem_pio2+0x4e6>
 8005d6a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005d6e:	f7fa fa31 	bl	80001d4 <__adddf3>
 8005d72:	3d01      	subs	r5, #1
 8005d74:	e7ed      	b.n	8005d52 <__kernel_rem_pio2+0x5aa>
 8005d76:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005d7a:	f7fa fa2b 	bl	80001d4 <__adddf3>
 8005d7e:	3e01      	subs	r6, #1
 8005d80:	e7c0      	b.n	8005d04 <__kernel_rem_pio2+0x55c>
 8005d82:	4602      	mov	r2, r0
 8005d84:	460b      	mov	r3, r1
 8005d86:	e7c5      	b.n	8005d14 <__kernel_rem_pio2+0x56c>
 8005d88:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8005d8c:	f7fa fa22 	bl	80001d4 <__adddf3>
 8005d90:	3401      	adds	r4, #1
 8005d92:	e7ca      	b.n	8005d2a <__kernel_rem_pio2+0x582>
 8005d94:	e9da 8900 	ldrd	r8, r9, [sl]
 8005d98:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8005d9c:	9b02      	ldr	r3, [sp, #8]
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	9302      	str	r3, [sp, #8]
 8005da2:	4632      	mov	r2, r6
 8005da4:	463b      	mov	r3, r7
 8005da6:	4640      	mov	r0, r8
 8005da8:	4649      	mov	r1, r9
 8005daa:	f7fa fa13 	bl	80001d4 <__adddf3>
 8005dae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005db2:	4602      	mov	r2, r0
 8005db4:	460b      	mov	r3, r1
 8005db6:	4640      	mov	r0, r8
 8005db8:	4649      	mov	r1, r9
 8005dba:	f7fa fa09 	bl	80001d0 <__aeabi_dsub>
 8005dbe:	4632      	mov	r2, r6
 8005dc0:	463b      	mov	r3, r7
 8005dc2:	f7fa fa07 	bl	80001d4 <__adddf3>
 8005dc6:	ed9d 7b08 	vldr	d7, [sp, #32]
 8005dca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005dce:	ed8a 7b00 	vstr	d7, [sl]
 8005dd2:	e76e      	b.n	8005cb2 <__kernel_rem_pio2+0x50a>
 8005dd4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005dd8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8005ddc:	4640      	mov	r0, r8
 8005dde:	4632      	mov	r2, r6
 8005de0:	463b      	mov	r3, r7
 8005de2:	4649      	mov	r1, r9
 8005de4:	f7fa f9f6 	bl	80001d4 <__adddf3>
 8005de8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005dec:	4602      	mov	r2, r0
 8005dee:	460b      	mov	r3, r1
 8005df0:	4640      	mov	r0, r8
 8005df2:	4649      	mov	r1, r9
 8005df4:	f7fa f9ec 	bl	80001d0 <__aeabi_dsub>
 8005df8:	4632      	mov	r2, r6
 8005dfa:	463b      	mov	r3, r7
 8005dfc:	f7fa f9ea 	bl	80001d4 <__adddf3>
 8005e00:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005e04:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005e08:	ed84 7b00 	vstr	d7, [r4]
 8005e0c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e10:	e755      	b.n	8005cbe <__kernel_rem_pio2+0x516>
 8005e12:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005e16:	f7fa f9dd 	bl	80001d4 <__adddf3>
 8005e1a:	3d01      	subs	r5, #1
 8005e1c:	e759      	b.n	8005cd2 <__kernel_rem_pio2+0x52a>
 8005e1e:	9b01      	ldr	r3, [sp, #4]
 8005e20:	9a01      	ldr	r2, [sp, #4]
 8005e22:	601d      	str	r5, [r3, #0]
 8005e24:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8005e28:	605c      	str	r4, [r3, #4]
 8005e2a:	609f      	str	r7, [r3, #8]
 8005e2c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8005e30:	60d3      	str	r3, [r2, #12]
 8005e32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005e36:	6110      	str	r0, [r2, #16]
 8005e38:	6153      	str	r3, [r2, #20]
 8005e3a:	e728      	b.n	8005c8e <__kernel_rem_pio2+0x4e6>
 8005e3c:	41700000 	.word	0x41700000
 8005e40:	3e700000 	.word	0x3e700000
 8005e44:	00000000 	.word	0x00000000

08005e48 <__kernel_sin>:
 8005e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e4c:	ed2d 8b04 	vpush	{d8-d9}
 8005e50:	eeb0 8a41 	vmov.f32	s16, s2
 8005e54:	eef0 8a61 	vmov.f32	s17, s3
 8005e58:	ec55 4b10 	vmov	r4, r5, d0
 8005e5c:	b083      	sub	sp, #12
 8005e5e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005e62:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005e66:	9001      	str	r0, [sp, #4]
 8005e68:	da06      	bge.n	8005e78 <__kernel_sin+0x30>
 8005e6a:	ee10 0a10 	vmov	r0, s0
 8005e6e:	4629      	mov	r1, r5
 8005e70:	f7fa fe00 	bl	8000a74 <__aeabi_d2iz>
 8005e74:	2800      	cmp	r0, #0
 8005e76:	d051      	beq.n	8005f1c <__kernel_sin+0xd4>
 8005e78:	4622      	mov	r2, r4
 8005e7a:	462b      	mov	r3, r5
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	4629      	mov	r1, r5
 8005e80:	f7fa fb5e 	bl	8000540 <__aeabi_dmul>
 8005e84:	4682      	mov	sl, r0
 8005e86:	468b      	mov	fp, r1
 8005e88:	4602      	mov	r2, r0
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	4620      	mov	r0, r4
 8005e8e:	4629      	mov	r1, r5
 8005e90:	f7fa fb56 	bl	8000540 <__aeabi_dmul>
 8005e94:	a341      	add	r3, pc, #260	; (adr r3, 8005f9c <__kernel_sin+0x154>)
 8005e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9a:	4680      	mov	r8, r0
 8005e9c:	4689      	mov	r9, r1
 8005e9e:	4650      	mov	r0, sl
 8005ea0:	4659      	mov	r1, fp
 8005ea2:	f7fa fb4d 	bl	8000540 <__aeabi_dmul>
 8005ea6:	a33f      	add	r3, pc, #252	; (adr r3, 8005fa4 <__kernel_sin+0x15c>)
 8005ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eac:	f7fa f990 	bl	80001d0 <__aeabi_dsub>
 8005eb0:	4652      	mov	r2, sl
 8005eb2:	465b      	mov	r3, fp
 8005eb4:	f7fa fb44 	bl	8000540 <__aeabi_dmul>
 8005eb8:	a33c      	add	r3, pc, #240	; (adr r3, 8005fac <__kernel_sin+0x164>)
 8005eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ebe:	f7fa f989 	bl	80001d4 <__adddf3>
 8005ec2:	4652      	mov	r2, sl
 8005ec4:	465b      	mov	r3, fp
 8005ec6:	f7fa fb3b 	bl	8000540 <__aeabi_dmul>
 8005eca:	a33a      	add	r3, pc, #232	; (adr r3, 8005fb4 <__kernel_sin+0x16c>)
 8005ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed0:	f7fa f97e 	bl	80001d0 <__aeabi_dsub>
 8005ed4:	4652      	mov	r2, sl
 8005ed6:	465b      	mov	r3, fp
 8005ed8:	f7fa fb32 	bl	8000540 <__aeabi_dmul>
 8005edc:	a337      	add	r3, pc, #220	; (adr r3, 8005fbc <__kernel_sin+0x174>)
 8005ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee2:	f7fa f977 	bl	80001d4 <__adddf3>
 8005ee6:	9b01      	ldr	r3, [sp, #4]
 8005ee8:	4606      	mov	r6, r0
 8005eea:	460f      	mov	r7, r1
 8005eec:	b9eb      	cbnz	r3, 8005f2a <__kernel_sin+0xe2>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	4650      	mov	r0, sl
 8005ef4:	4659      	mov	r1, fp
 8005ef6:	f7fa fb23 	bl	8000540 <__aeabi_dmul>
 8005efa:	a325      	add	r3, pc, #148	; (adr r3, 8005f90 <__kernel_sin+0x148>)
 8005efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f00:	f7fa f966 	bl	80001d0 <__aeabi_dsub>
 8005f04:	4642      	mov	r2, r8
 8005f06:	464b      	mov	r3, r9
 8005f08:	f7fa fb1a 	bl	8000540 <__aeabi_dmul>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	460b      	mov	r3, r1
 8005f10:	4620      	mov	r0, r4
 8005f12:	4629      	mov	r1, r5
 8005f14:	f7fa f95e 	bl	80001d4 <__adddf3>
 8005f18:	4604      	mov	r4, r0
 8005f1a:	460d      	mov	r5, r1
 8005f1c:	ec45 4b10 	vmov	d0, r4, r5
 8005f20:	b003      	add	sp, #12
 8005f22:	ecbd 8b04 	vpop	{d8-d9}
 8005f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f2a:	4b1b      	ldr	r3, [pc, #108]	; (8005f98 <__kernel_sin+0x150>)
 8005f2c:	ec51 0b18 	vmov	r0, r1, d8
 8005f30:	2200      	movs	r2, #0
 8005f32:	f7fa fb05 	bl	8000540 <__aeabi_dmul>
 8005f36:	4632      	mov	r2, r6
 8005f38:	ec41 0b19 	vmov	d9, r0, r1
 8005f3c:	463b      	mov	r3, r7
 8005f3e:	4640      	mov	r0, r8
 8005f40:	4649      	mov	r1, r9
 8005f42:	f7fa fafd 	bl	8000540 <__aeabi_dmul>
 8005f46:	4602      	mov	r2, r0
 8005f48:	460b      	mov	r3, r1
 8005f4a:	ec51 0b19 	vmov	r0, r1, d9
 8005f4e:	f7fa f93f 	bl	80001d0 <__aeabi_dsub>
 8005f52:	4652      	mov	r2, sl
 8005f54:	465b      	mov	r3, fp
 8005f56:	f7fa faf3 	bl	8000540 <__aeabi_dmul>
 8005f5a:	ec53 2b18 	vmov	r2, r3, d8
 8005f5e:	f7fa f937 	bl	80001d0 <__aeabi_dsub>
 8005f62:	a30b      	add	r3, pc, #44	; (adr r3, 8005f90 <__kernel_sin+0x148>)
 8005f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f68:	4606      	mov	r6, r0
 8005f6a:	460f      	mov	r7, r1
 8005f6c:	4640      	mov	r0, r8
 8005f6e:	4649      	mov	r1, r9
 8005f70:	f7fa fae6 	bl	8000540 <__aeabi_dmul>
 8005f74:	4602      	mov	r2, r0
 8005f76:	460b      	mov	r3, r1
 8005f78:	4630      	mov	r0, r6
 8005f7a:	4639      	mov	r1, r7
 8005f7c:	f7fa f92a 	bl	80001d4 <__adddf3>
 8005f80:	4602      	mov	r2, r0
 8005f82:	460b      	mov	r3, r1
 8005f84:	4620      	mov	r0, r4
 8005f86:	4629      	mov	r1, r5
 8005f88:	f7fa f922 	bl	80001d0 <__aeabi_dsub>
 8005f8c:	e7c4      	b.n	8005f18 <__kernel_sin+0xd0>
 8005f8e:	bf00      	nop
 8005f90:	55555549 	.word	0x55555549
 8005f94:	3fc55555 	.word	0x3fc55555
 8005f98:	3fe00000 	.word	0x3fe00000
 8005f9c:	5acfd57c 	.word	0x5acfd57c
 8005fa0:	3de5d93a 	.word	0x3de5d93a
 8005fa4:	8a2b9ceb 	.word	0x8a2b9ceb
 8005fa8:	3e5ae5e6 	.word	0x3e5ae5e6
 8005fac:	57b1fe7d 	.word	0x57b1fe7d
 8005fb0:	3ec71de3 	.word	0x3ec71de3
 8005fb4:	19c161d5 	.word	0x19c161d5
 8005fb8:	3f2a01a0 	.word	0x3f2a01a0
 8005fbc:	1110f8a6 	.word	0x1110f8a6
 8005fc0:	3f811111 	.word	0x3f811111

08005fc4 <fabs>:
 8005fc4:	ec51 0b10 	vmov	r0, r1, d0
 8005fc8:	ee10 2a10 	vmov	r2, s0
 8005fcc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005fd0:	ec43 2b10 	vmov	d0, r2, r3
 8005fd4:	4770      	bx	lr
	...

08005fd8 <floor>:
 8005fd8:	ec51 0b10 	vmov	r0, r1, d0
 8005fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fe0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005fe4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005fe8:	2e13      	cmp	r6, #19
 8005fea:	ee10 5a10 	vmov	r5, s0
 8005fee:	ee10 8a10 	vmov	r8, s0
 8005ff2:	460c      	mov	r4, r1
 8005ff4:	dc32      	bgt.n	800605c <floor+0x84>
 8005ff6:	2e00      	cmp	r6, #0
 8005ff8:	da14      	bge.n	8006024 <floor+0x4c>
 8005ffa:	a333      	add	r3, pc, #204	; (adr r3, 80060c8 <floor+0xf0>)
 8005ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006000:	f7fa f8e8 	bl	80001d4 <__adddf3>
 8006004:	2200      	movs	r2, #0
 8006006:	2300      	movs	r3, #0
 8006008:	f7fa fd2a 	bl	8000a60 <__aeabi_dcmpgt>
 800600c:	b138      	cbz	r0, 800601e <floor+0x46>
 800600e:	2c00      	cmp	r4, #0
 8006010:	da57      	bge.n	80060c2 <floor+0xea>
 8006012:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006016:	431d      	orrs	r5, r3
 8006018:	d001      	beq.n	800601e <floor+0x46>
 800601a:	4c2d      	ldr	r4, [pc, #180]	; (80060d0 <floor+0xf8>)
 800601c:	2500      	movs	r5, #0
 800601e:	4621      	mov	r1, r4
 8006020:	4628      	mov	r0, r5
 8006022:	e025      	b.n	8006070 <floor+0x98>
 8006024:	4f2b      	ldr	r7, [pc, #172]	; (80060d4 <floor+0xfc>)
 8006026:	4137      	asrs	r7, r6
 8006028:	ea01 0307 	and.w	r3, r1, r7
 800602c:	4303      	orrs	r3, r0
 800602e:	d01f      	beq.n	8006070 <floor+0x98>
 8006030:	a325      	add	r3, pc, #148	; (adr r3, 80060c8 <floor+0xf0>)
 8006032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006036:	f7fa f8cd 	bl	80001d4 <__adddf3>
 800603a:	2200      	movs	r2, #0
 800603c:	2300      	movs	r3, #0
 800603e:	f7fa fd0f 	bl	8000a60 <__aeabi_dcmpgt>
 8006042:	2800      	cmp	r0, #0
 8006044:	d0eb      	beq.n	800601e <floor+0x46>
 8006046:	2c00      	cmp	r4, #0
 8006048:	bfbe      	ittt	lt
 800604a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800604e:	fa43 f606 	asrlt.w	r6, r3, r6
 8006052:	19a4      	addlt	r4, r4, r6
 8006054:	ea24 0407 	bic.w	r4, r4, r7
 8006058:	2500      	movs	r5, #0
 800605a:	e7e0      	b.n	800601e <floor+0x46>
 800605c:	2e33      	cmp	r6, #51	; 0x33
 800605e:	dd0b      	ble.n	8006078 <floor+0xa0>
 8006060:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006064:	d104      	bne.n	8006070 <floor+0x98>
 8006066:	ee10 2a10 	vmov	r2, s0
 800606a:	460b      	mov	r3, r1
 800606c:	f7fa f8b2 	bl	80001d4 <__adddf3>
 8006070:	ec41 0b10 	vmov	d0, r0, r1
 8006074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006078:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800607c:	f04f 33ff 	mov.w	r3, #4294967295
 8006080:	fa23 f707 	lsr.w	r7, r3, r7
 8006084:	4207      	tst	r7, r0
 8006086:	d0f3      	beq.n	8006070 <floor+0x98>
 8006088:	a30f      	add	r3, pc, #60	; (adr r3, 80060c8 <floor+0xf0>)
 800608a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800608e:	f7fa f8a1 	bl	80001d4 <__adddf3>
 8006092:	2200      	movs	r2, #0
 8006094:	2300      	movs	r3, #0
 8006096:	f7fa fce3 	bl	8000a60 <__aeabi_dcmpgt>
 800609a:	2800      	cmp	r0, #0
 800609c:	d0bf      	beq.n	800601e <floor+0x46>
 800609e:	2c00      	cmp	r4, #0
 80060a0:	da02      	bge.n	80060a8 <floor+0xd0>
 80060a2:	2e14      	cmp	r6, #20
 80060a4:	d103      	bne.n	80060ae <floor+0xd6>
 80060a6:	3401      	adds	r4, #1
 80060a8:	ea25 0507 	bic.w	r5, r5, r7
 80060ac:	e7b7      	b.n	800601e <floor+0x46>
 80060ae:	2301      	movs	r3, #1
 80060b0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80060b4:	fa03 f606 	lsl.w	r6, r3, r6
 80060b8:	4435      	add	r5, r6
 80060ba:	4545      	cmp	r5, r8
 80060bc:	bf38      	it	cc
 80060be:	18e4      	addcc	r4, r4, r3
 80060c0:	e7f2      	b.n	80060a8 <floor+0xd0>
 80060c2:	2500      	movs	r5, #0
 80060c4:	462c      	mov	r4, r5
 80060c6:	e7aa      	b.n	800601e <floor+0x46>
 80060c8:	8800759c 	.word	0x8800759c
 80060cc:	7e37e43c 	.word	0x7e37e43c
 80060d0:	bff00000 	.word	0xbff00000
 80060d4:	000fffff 	.word	0x000fffff

080060d8 <scalbn>:
 80060d8:	b570      	push	{r4, r5, r6, lr}
 80060da:	ec55 4b10 	vmov	r4, r5, d0
 80060de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80060e2:	4606      	mov	r6, r0
 80060e4:	462b      	mov	r3, r5
 80060e6:	b99a      	cbnz	r2, 8006110 <scalbn+0x38>
 80060e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80060ec:	4323      	orrs	r3, r4
 80060ee:	d036      	beq.n	800615e <scalbn+0x86>
 80060f0:	4b39      	ldr	r3, [pc, #228]	; (80061d8 <scalbn+0x100>)
 80060f2:	4629      	mov	r1, r5
 80060f4:	ee10 0a10 	vmov	r0, s0
 80060f8:	2200      	movs	r2, #0
 80060fa:	f7fa fa21 	bl	8000540 <__aeabi_dmul>
 80060fe:	4b37      	ldr	r3, [pc, #220]	; (80061dc <scalbn+0x104>)
 8006100:	429e      	cmp	r6, r3
 8006102:	4604      	mov	r4, r0
 8006104:	460d      	mov	r5, r1
 8006106:	da10      	bge.n	800612a <scalbn+0x52>
 8006108:	a32b      	add	r3, pc, #172	; (adr r3, 80061b8 <scalbn+0xe0>)
 800610a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800610e:	e03a      	b.n	8006186 <scalbn+0xae>
 8006110:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006114:	428a      	cmp	r2, r1
 8006116:	d10c      	bne.n	8006132 <scalbn+0x5a>
 8006118:	ee10 2a10 	vmov	r2, s0
 800611c:	4620      	mov	r0, r4
 800611e:	4629      	mov	r1, r5
 8006120:	f7fa f858 	bl	80001d4 <__adddf3>
 8006124:	4604      	mov	r4, r0
 8006126:	460d      	mov	r5, r1
 8006128:	e019      	b.n	800615e <scalbn+0x86>
 800612a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800612e:	460b      	mov	r3, r1
 8006130:	3a36      	subs	r2, #54	; 0x36
 8006132:	4432      	add	r2, r6
 8006134:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006138:	428a      	cmp	r2, r1
 800613a:	dd08      	ble.n	800614e <scalbn+0x76>
 800613c:	2d00      	cmp	r5, #0
 800613e:	a120      	add	r1, pc, #128	; (adr r1, 80061c0 <scalbn+0xe8>)
 8006140:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006144:	da1c      	bge.n	8006180 <scalbn+0xa8>
 8006146:	a120      	add	r1, pc, #128	; (adr r1, 80061c8 <scalbn+0xf0>)
 8006148:	e9d1 0100 	ldrd	r0, r1, [r1]
 800614c:	e018      	b.n	8006180 <scalbn+0xa8>
 800614e:	2a00      	cmp	r2, #0
 8006150:	dd08      	ble.n	8006164 <scalbn+0x8c>
 8006152:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006156:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800615a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800615e:	ec45 4b10 	vmov	d0, r4, r5
 8006162:	bd70      	pop	{r4, r5, r6, pc}
 8006164:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006168:	da19      	bge.n	800619e <scalbn+0xc6>
 800616a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800616e:	429e      	cmp	r6, r3
 8006170:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8006174:	dd0a      	ble.n	800618c <scalbn+0xb4>
 8006176:	a112      	add	r1, pc, #72	; (adr r1, 80061c0 <scalbn+0xe8>)
 8006178:	e9d1 0100 	ldrd	r0, r1, [r1]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d1e2      	bne.n	8006146 <scalbn+0x6e>
 8006180:	a30f      	add	r3, pc, #60	; (adr r3, 80061c0 <scalbn+0xe8>)
 8006182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006186:	f7fa f9db 	bl	8000540 <__aeabi_dmul>
 800618a:	e7cb      	b.n	8006124 <scalbn+0x4c>
 800618c:	a10a      	add	r1, pc, #40	; (adr r1, 80061b8 <scalbn+0xe0>)
 800618e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d0b8      	beq.n	8006108 <scalbn+0x30>
 8006196:	a10e      	add	r1, pc, #56	; (adr r1, 80061d0 <scalbn+0xf8>)
 8006198:	e9d1 0100 	ldrd	r0, r1, [r1]
 800619c:	e7b4      	b.n	8006108 <scalbn+0x30>
 800619e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80061a2:	3236      	adds	r2, #54	; 0x36
 80061a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80061a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80061ac:	4620      	mov	r0, r4
 80061ae:	4b0c      	ldr	r3, [pc, #48]	; (80061e0 <scalbn+0x108>)
 80061b0:	2200      	movs	r2, #0
 80061b2:	e7e8      	b.n	8006186 <scalbn+0xae>
 80061b4:	f3af 8000 	nop.w
 80061b8:	c2f8f359 	.word	0xc2f8f359
 80061bc:	01a56e1f 	.word	0x01a56e1f
 80061c0:	8800759c 	.word	0x8800759c
 80061c4:	7e37e43c 	.word	0x7e37e43c
 80061c8:	8800759c 	.word	0x8800759c
 80061cc:	fe37e43c 	.word	0xfe37e43c
 80061d0:	c2f8f359 	.word	0xc2f8f359
 80061d4:	81a56e1f 	.word	0x81a56e1f
 80061d8:	43500000 	.word	0x43500000
 80061dc:	ffff3cb0 	.word	0xffff3cb0
 80061e0:	3c900000 	.word	0x3c900000

080061e4 <_init>:
 80061e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061e6:	bf00      	nop
 80061e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ea:	bc08      	pop	{r3}
 80061ec:	469e      	mov	lr, r3
 80061ee:	4770      	bx	lr

080061f0 <_fini>:
 80061f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061f2:	bf00      	nop
 80061f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061f6:	bc08      	pop	{r3}
 80061f8:	469e      	mov	lr, r3
 80061fa:	4770      	bx	lr
