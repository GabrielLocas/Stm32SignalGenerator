
GenerateurSignaux.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083cc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  08008560  08008560  00018560  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088a0  080088a0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080088a0  080088a0  000188a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088a8  080088a8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088a8  080088a8  000188a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088ac  080088ac  000188ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080088b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          0000086c  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200008e4  200008e4  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001309e  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002709  00000000  00000000  00033146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001190  00000000  00000000  00035850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001090  00000000  00000000  000369e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022d3a  00000000  00000000  00037a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014b9f  00000000  00000000  0005a7aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0d6c  00000000  00000000  0006f349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001400b5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005854  00000000  00000000  00140108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .stab         00000024  00000000  00000000  0014595c  2**2
                  CONTENTS, READONLY, DEBUGGING
 23 .stabstr      0000004e  00000000  00000000  00145980  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008544 	.word	0x08008544

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08008544 	.word	0x08008544

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b974 	b.w	8000eac <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9d08      	ldr	r5, [sp, #32]
 8000be2:	4604      	mov	r4, r0
 8000be4:	468e      	mov	lr, r1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d14d      	bne.n	8000c86 <__udivmoddi4+0xaa>
 8000bea:	428a      	cmp	r2, r1
 8000bec:	4694      	mov	ip, r2
 8000bee:	d969      	bls.n	8000cc4 <__udivmoddi4+0xe8>
 8000bf0:	fab2 f282 	clz	r2, r2
 8000bf4:	b152      	cbz	r2, 8000c0c <__udivmoddi4+0x30>
 8000bf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfa:	f1c2 0120 	rsb	r1, r2, #32
 8000bfe:	fa20 f101 	lsr.w	r1, r0, r1
 8000c02:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c06:	ea41 0e03 	orr.w	lr, r1, r3
 8000c0a:	4094      	lsls	r4, r2
 8000c0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c10:	0c21      	lsrs	r1, r4, #16
 8000c12:	fbbe f6f8 	udiv	r6, lr, r8
 8000c16:	fa1f f78c 	uxth.w	r7, ip
 8000c1a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c22:	fb06 f107 	mul.w	r1, r6, r7
 8000c26:	4299      	cmp	r1, r3
 8000c28:	d90a      	bls.n	8000c40 <__udivmoddi4+0x64>
 8000c2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c32:	f080 811f 	bcs.w	8000e74 <__udivmoddi4+0x298>
 8000c36:	4299      	cmp	r1, r3
 8000c38:	f240 811c 	bls.w	8000e74 <__udivmoddi4+0x298>
 8000c3c:	3e02      	subs	r6, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1a5b      	subs	r3, r3, r1
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c48:	fb08 3310 	mls	r3, r8, r0, r3
 8000c4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c50:	fb00 f707 	mul.w	r7, r0, r7
 8000c54:	42a7      	cmp	r7, r4
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x92>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c60:	f080 810a 	bcs.w	8000e78 <__udivmoddi4+0x29c>
 8000c64:	42a7      	cmp	r7, r4
 8000c66:	f240 8107 	bls.w	8000e78 <__udivmoddi4+0x29c>
 8000c6a:	4464      	add	r4, ip
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c72:	1be4      	subs	r4, r4, r7
 8000c74:	2600      	movs	r6, #0
 8000c76:	b11d      	cbz	r5, 8000c80 <__udivmoddi4+0xa4>
 8000c78:	40d4      	lsrs	r4, r2
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c80:	4631      	mov	r1, r6
 8000c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c86:	428b      	cmp	r3, r1
 8000c88:	d909      	bls.n	8000c9e <__udivmoddi4+0xc2>
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	f000 80ef 	beq.w	8000e6e <__udivmoddi4+0x292>
 8000c90:	2600      	movs	r6, #0
 8000c92:	e9c5 0100 	strd	r0, r1, [r5]
 8000c96:	4630      	mov	r0, r6
 8000c98:	4631      	mov	r1, r6
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	fab3 f683 	clz	r6, r3
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	d14a      	bne.n	8000d3c <__udivmoddi4+0x160>
 8000ca6:	428b      	cmp	r3, r1
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xd4>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 80f9 	bhi.w	8000ea2 <__udivmoddi4+0x2c6>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	469e      	mov	lr, r3
 8000cba:	2d00      	cmp	r5, #0
 8000cbc:	d0e0      	beq.n	8000c80 <__udivmoddi4+0xa4>
 8000cbe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cc2:	e7dd      	b.n	8000c80 <__udivmoddi4+0xa4>
 8000cc4:	b902      	cbnz	r2, 8000cc8 <__udivmoddi4+0xec>
 8000cc6:	deff      	udf	#255	; 0xff
 8000cc8:	fab2 f282 	clz	r2, r2
 8000ccc:	2a00      	cmp	r2, #0
 8000cce:	f040 8092 	bne.w	8000df6 <__udivmoddi4+0x21a>
 8000cd2:	eba1 010c 	sub.w	r1, r1, ip
 8000cd6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cda:	fa1f fe8c 	uxth.w	lr, ip
 8000cde:	2601      	movs	r6, #1
 8000ce0:	0c20      	lsrs	r0, r4, #16
 8000ce2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cee:	fb0e f003 	mul.w	r0, lr, r3
 8000cf2:	4288      	cmp	r0, r1
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x12c>
 8000cf6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cfa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x12a>
 8000d00:	4288      	cmp	r0, r1
 8000d02:	f200 80cb 	bhi.w	8000e9c <__udivmoddi4+0x2c0>
 8000d06:	4643      	mov	r3, r8
 8000d08:	1a09      	subs	r1, r1, r0
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d10:	fb07 1110 	mls	r1, r7, r0, r1
 8000d14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d18:	fb0e fe00 	mul.w	lr, lr, r0
 8000d1c:	45a6      	cmp	lr, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x156>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d28:	d202      	bcs.n	8000d30 <__udivmoddi4+0x154>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f200 80bb 	bhi.w	8000ea6 <__udivmoddi4+0x2ca>
 8000d30:	4608      	mov	r0, r1
 8000d32:	eba4 040e 	sub.w	r4, r4, lr
 8000d36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d3a:	e79c      	b.n	8000c76 <__udivmoddi4+0x9a>
 8000d3c:	f1c6 0720 	rsb	r7, r6, #32
 8000d40:	40b3      	lsls	r3, r6
 8000d42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d52:	431c      	orrs	r4, r3
 8000d54:	40f9      	lsrs	r1, r7
 8000d56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d62:	0c20      	lsrs	r0, r4, #16
 8000d64:	fa1f fe8c 	uxth.w	lr, ip
 8000d68:	fb09 1118 	mls	r1, r9, r8, r1
 8000d6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d70:	fb08 f00e 	mul.w	r0, r8, lr
 8000d74:	4288      	cmp	r0, r1
 8000d76:	fa02 f206 	lsl.w	r2, r2, r6
 8000d7a:	d90b      	bls.n	8000d94 <__udivmoddi4+0x1b8>
 8000d7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d84:	f080 8088 	bcs.w	8000e98 <__udivmoddi4+0x2bc>
 8000d88:	4288      	cmp	r0, r1
 8000d8a:	f240 8085 	bls.w	8000e98 <__udivmoddi4+0x2bc>
 8000d8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d92:	4461      	add	r1, ip
 8000d94:	1a09      	subs	r1, r1, r0
 8000d96:	b2a4      	uxth	r4, r4
 8000d98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000da0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da8:	458e      	cmp	lr, r1
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x1e2>
 8000dac:	eb1c 0101 	adds.w	r1, ip, r1
 8000db0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db4:	d26c      	bcs.n	8000e90 <__udivmoddi4+0x2b4>
 8000db6:	458e      	cmp	lr, r1
 8000db8:	d96a      	bls.n	8000e90 <__udivmoddi4+0x2b4>
 8000dba:	3802      	subs	r0, #2
 8000dbc:	4461      	add	r1, ip
 8000dbe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dc2:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc6:	eba1 010e 	sub.w	r1, r1, lr
 8000dca:	42a1      	cmp	r1, r4
 8000dcc:	46c8      	mov	r8, r9
 8000dce:	46a6      	mov	lr, r4
 8000dd0:	d356      	bcc.n	8000e80 <__udivmoddi4+0x2a4>
 8000dd2:	d053      	beq.n	8000e7c <__udivmoddi4+0x2a0>
 8000dd4:	b15d      	cbz	r5, 8000dee <__udivmoddi4+0x212>
 8000dd6:	ebb3 0208 	subs.w	r2, r3, r8
 8000dda:	eb61 010e 	sbc.w	r1, r1, lr
 8000dde:	fa01 f707 	lsl.w	r7, r1, r7
 8000de2:	fa22 f306 	lsr.w	r3, r2, r6
 8000de6:	40f1      	lsrs	r1, r6
 8000de8:	431f      	orrs	r7, r3
 8000dea:	e9c5 7100 	strd	r7, r1, [r5]
 8000dee:	2600      	movs	r6, #0
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	f1c2 0320 	rsb	r3, r2, #32
 8000dfa:	40d8      	lsrs	r0, r3
 8000dfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e00:	fa21 f303 	lsr.w	r3, r1, r3
 8000e04:	4091      	lsls	r1, r2
 8000e06:	4301      	orrs	r1, r0
 8000e08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e0c:	fa1f fe8c 	uxth.w	lr, ip
 8000e10:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e14:	fb07 3610 	mls	r6, r7, r0, r3
 8000e18:	0c0b      	lsrs	r3, r1, #16
 8000e1a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e22:	429e      	cmp	r6, r3
 8000e24:	fa04 f402 	lsl.w	r4, r4, r2
 8000e28:	d908      	bls.n	8000e3c <__udivmoddi4+0x260>
 8000e2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e32:	d22f      	bcs.n	8000e94 <__udivmoddi4+0x2b8>
 8000e34:	429e      	cmp	r6, r3
 8000e36:	d92d      	bls.n	8000e94 <__udivmoddi4+0x2b8>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4463      	add	r3, ip
 8000e3c:	1b9b      	subs	r3, r3, r6
 8000e3e:	b289      	uxth	r1, r1
 8000e40:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e44:	fb07 3316 	mls	r3, r7, r6, r3
 8000e48:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e50:	428b      	cmp	r3, r1
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x28a>
 8000e54:	eb1c 0101 	adds.w	r1, ip, r1
 8000e58:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e5c:	d216      	bcs.n	8000e8c <__udivmoddi4+0x2b0>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d914      	bls.n	8000e8c <__udivmoddi4+0x2b0>
 8000e62:	3e02      	subs	r6, #2
 8000e64:	4461      	add	r1, ip
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e6c:	e738      	b.n	8000ce0 <__udivmoddi4+0x104>
 8000e6e:	462e      	mov	r6, r5
 8000e70:	4628      	mov	r0, r5
 8000e72:	e705      	b.n	8000c80 <__udivmoddi4+0xa4>
 8000e74:	4606      	mov	r6, r0
 8000e76:	e6e3      	b.n	8000c40 <__udivmoddi4+0x64>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6f8      	b.n	8000c6e <__udivmoddi4+0x92>
 8000e7c:	454b      	cmp	r3, r9
 8000e7e:	d2a9      	bcs.n	8000dd4 <__udivmoddi4+0x1f8>
 8000e80:	ebb9 0802 	subs.w	r8, r9, r2
 8000e84:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e88:	3801      	subs	r0, #1
 8000e8a:	e7a3      	b.n	8000dd4 <__udivmoddi4+0x1f8>
 8000e8c:	4646      	mov	r6, r8
 8000e8e:	e7ea      	b.n	8000e66 <__udivmoddi4+0x28a>
 8000e90:	4620      	mov	r0, r4
 8000e92:	e794      	b.n	8000dbe <__udivmoddi4+0x1e2>
 8000e94:	4640      	mov	r0, r8
 8000e96:	e7d1      	b.n	8000e3c <__udivmoddi4+0x260>
 8000e98:	46d0      	mov	r8, sl
 8000e9a:	e77b      	b.n	8000d94 <__udivmoddi4+0x1b8>
 8000e9c:	3b02      	subs	r3, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	e732      	b.n	8000d08 <__udivmoddi4+0x12c>
 8000ea2:	4630      	mov	r0, r6
 8000ea4:	e709      	b.n	8000cba <__udivmoddi4+0xde>
 8000ea6:	4464      	add	r4, ip
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	e742      	b.n	8000d32 <__udivmoddi4+0x156>

08000eac <__aeabi_idiv0>:
 8000eac:	4770      	bx	lr
 8000eae:	bf00      	nop

08000eb0 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Callback for UART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT (&huart2, Rx_data, PACKET_SIZE);
 8000eb8:	2208      	movs	r2, #8
 8000eba:	4904      	ldr	r1, [pc, #16]	; (8000ecc <HAL_UART_RxCpltCallback+0x1c>)
 8000ebc:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <HAL_UART_RxCpltCallback+0x20>)
 8000ebe:	f004 fafe 	bl	80054be <HAL_UART_Receive_IT>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000280 	.word	0x20000280
 8000ed0:	20000234 	.word	0x20000234

08000ed4 <HAL_GPIO_EXTI_Callback>:
	HAL_I2C_Master_Transmit(&hi2c2, 0b10010010, tmp, 1, 100);
}

//Callback for external interruption
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af02      	add	r7, sp, #8
 8000eda:	4603      	mov	r3, r0
 8000edc:	80fb      	strh	r3, [r7, #6]
	// Turn off timer for DAC
	HAL_TIM_Base_Stop(&htim2);
 8000ede:	483e      	ldr	r0, [pc, #248]	; (8000fd8 <HAL_GPIO_EXTI_Callback+0x104>)
 8000ee0:	f003 fc42 	bl	8004768 <HAL_TIM_Base_Stop>

	// Choose wave form for sound
    if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1)){
 8000ee4:	2102      	movs	r1, #2
 8000ee6:	483d      	ldr	r0, [pc, #244]	; (8000fdc <HAL_GPIO_EXTI_Callback+0x108>)
 8000ee8:	f002 fa98 	bl	800341c <HAL_GPIO_ReadPin>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d066      	beq.n	8000fc0 <HAL_GPIO_EXTI_Callback+0xec>
        switch (wave_type){
 8000ef2:	4b3b      	ldr	r3, [pc, #236]	; (8000fe0 <HAL_GPIO_EXTI_Callback+0x10c>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	d82e      	bhi.n	8000f58 <HAL_GPIO_EXTI_Callback+0x84>
 8000efa:	a201      	add	r2, pc, #4	; (adr r2, 8000f00 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f00:	08000f11 	.word	0x08000f11
 8000f04:	08000f23 	.word	0x08000f23
 8000f08:	08000f35 	.word	0x08000f35
 8000f0c:	08000f47 	.word	0x08000f47
            case 0:
                HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, (uint32_t*)sine_val, N_SAMPLES, DAC_ALIGN_12B_R);
 8000f10:	2300      	movs	r3, #0
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	2364      	movs	r3, #100	; 0x64
 8000f16:	4a33      	ldr	r2, [pc, #204]	; (8000fe4 <HAL_GPIO_EXTI_Callback+0x110>)
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4833      	ldr	r0, [pc, #204]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x114>)
 8000f1c:	f001 fad2 	bl	80024c4 <HAL_DAC_Start_DMA>
                break;
 8000f20:	e01b      	b.n	8000f5a <HAL_GPIO_EXTI_Callback+0x86>
            case 1:
                HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, (uint32_t*)tri_val, N_SAMPLES, DAC_ALIGN_12B_R);
 8000f22:	2300      	movs	r3, #0
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2364      	movs	r3, #100	; 0x64
 8000f28:	4a30      	ldr	r2, [pc, #192]	; (8000fec <HAL_GPIO_EXTI_Callback+0x118>)
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	482e      	ldr	r0, [pc, #184]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x114>)
 8000f2e:	f001 fac9 	bl	80024c4 <HAL_DAC_Start_DMA>
                break;
 8000f32:	e012      	b.n	8000f5a <HAL_GPIO_EXTI_Callback+0x86>
            case 2:
                HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, (uint32_t*)square_val, N_SAMPLES, DAC_ALIGN_12B_R);
 8000f34:	2300      	movs	r3, #0
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	2364      	movs	r3, #100	; 0x64
 8000f3a:	4a2d      	ldr	r2, [pc, #180]	; (8000ff0 <HAL_GPIO_EXTI_Callback+0x11c>)
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	482a      	ldr	r0, [pc, #168]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x114>)
 8000f40:	f001 fac0 	bl	80024c4 <HAL_DAC_Start_DMA>
                break;
 8000f44:	e009      	b.n	8000f5a <HAL_GPIO_EXTI_Callback+0x86>
            case 3:
                HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, (uint32_t*)saw_val, N_SAMPLES, DAC_ALIGN_12B_R);
 8000f46:	2300      	movs	r3, #0
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	2364      	movs	r3, #100	; 0x64
 8000f4c:	4a29      	ldr	r2, [pc, #164]	; (8000ff4 <HAL_GPIO_EXTI_Callback+0x120>)
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4825      	ldr	r0, [pc, #148]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x114>)
 8000f52:	f001 fab7 	bl	80024c4 <HAL_DAC_Start_DMA>
                break;
 8000f56:	e000      	b.n	8000f5a <HAL_GPIO_EXTI_Callback+0x86>
            default:
                //Nothing
                break;
 8000f58:	bf00      	nop
        }
        // Random duty cycle for stimulation
        if(randomOn){
 8000f5a:	4b27      	ldr	r3, [pc, #156]	; (8000ff8 <HAL_GPIO_EXTI_Callback+0x124>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d019      	beq.n	8000f96 <HAL_GPIO_EXTI_Callback+0xc2>
			r = rand() % 256;
 8000f62:	f005 fa37 	bl	80063d4 <rand>
 8000f66:	4603      	mov	r3, r0
 8000f68:	425a      	negs	r2, r3
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	bf58      	it	pl
 8000f70:	4253      	negpl	r3, r2
 8000f72:	4a22      	ldr	r2, [pc, #136]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x128>)
 8000f74:	6013      	str	r3, [r2, #0]
			htim3.Instance->CCR1 = (TIMER_PRESCALER*r)/INT_MAX;
 8000f76:	4b21      	ldr	r3, [pc, #132]	; (8000ffc <HAL_GPIO_EXTI_Callback+0x128>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000f7e:	fb02 f303 	mul.w	r3, r2, r3
 8000f82:	4a1f      	ldr	r2, [pc, #124]	; (8001000 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000f84:	fb82 1203 	smull	r1, r2, r2, r3
 8000f88:	441a      	add	r2, r3
 8000f8a:	11d2      	asrs	r2, r2, #7
 8000f8c:	17db      	asrs	r3, r3, #31
 8000f8e:	1ad2      	subs	r2, r2, r3
 8000f90:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <HAL_GPIO_EXTI_Callback+0x130>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	635a      	str	r2, [r3, #52]	; 0x34
        }

        // Change PWM duty cycle for light intensity
        htim4.Instance->CCR1 = (TIMER_PRESCALER*light_intensity)/INT_MAX;
 8000f96:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <HAL_GPIO_EXTI_Callback+0x134>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8000fa0:	fb02 f303 	mul.w	r3, r2, r3
 8000fa4:	4a16      	ldr	r2, [pc, #88]	; (8001000 <HAL_GPIO_EXTI_Callback+0x12c>)
 8000fa6:	fb82 1203 	smull	r1, r2, r2, r3
 8000faa:	441a      	add	r2, r3
 8000fac:	11d2      	asrs	r2, r2, #7
 8000fae:	17db      	asrs	r3, r3, #31
 8000fb0:	1ad2      	subs	r2, r2, r3
 8000fb2:	4b16      	ldr	r3, [pc, #88]	; (800100c <HAL_GPIO_EXTI_Callback+0x138>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	635a      	str	r2, [r3, #52]	; 0x34

        //Activate timer for DAC
        HAL_TIM_Base_Start(&htim2);
 8000fb8:	4807      	ldr	r0, [pc, #28]	; (8000fd8 <HAL_GPIO_EXTI_Callback+0x104>)
 8000fba:	f003 fb6d 	bl	8004698 <HAL_TIM_Base_Start>
        HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);

        // Set PWM to 0 to turn off light
        htim4.Instance->CCR1 = 0;
    }
}
 8000fbe:	e007      	b.n	8000fd0 <HAL_GPIO_EXTI_Callback+0xfc>
        HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4809      	ldr	r0, [pc, #36]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x114>)
 8000fc4:	f001 fb4c 	bl	8002660 <HAL_DAC_Stop_DMA>
        htim4.Instance->CCR1 = 0;
 8000fc8:	4b10      	ldr	r3, [pc, #64]	; (800100c <HAL_GPIO_EXTI_Callback+0x138>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2200      	movs	r2, #0
 8000fce:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	2000015c 	.word	0x2000015c
 8000fdc:	40020400 	.word	0x40020400
 8000fe0:	20000289 	.word	0x20000289
 8000fe4:	20000290 	.word	0x20000290
 8000fe8:	20000094 	.word	0x20000094
 8000fec:	200005b0 	.word	0x200005b0
 8000ff0:	20000740 	.word	0x20000740
 8000ff4:	20000420 	.word	0x20000420
 8000ff8:	2000028a 	.word	0x2000028a
 8000ffc:	20000278 	.word	0x20000278
 8001000:	80808081 	.word	0x80808081
 8001004:	200001a4 	.word	0x200001a4
 8001008:	2000028c 	.word	0x2000028c
 800100c:	200001ec 	.word	0x200001ec

08001010 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001016:	f001 f88b 	bl	8002130 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800101a:	f000 f853 	bl	80010c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101e:	f000 fabf 	bl	80015a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001022:	f000 fa9d 	bl	8001560 <MX_DMA_Init>
  MX_DAC_Init();
 8001026:	f000 f8b5 	bl	8001194 <MX_DAC_Init>
  MX_USART2_UART_Init();
 800102a:	f000 fa6f 	bl	800150c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800102e:	f000 f909 	bl	8001244 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001032:	f000 f95b 	bl	80012ec <MX_TIM3_Init>
  MX_TIM4_Init();
 8001036:	f000 f9e9 	bl	800140c <MX_TIM4_Init>
  MX_I2C2_Init();
 800103a:	f000 f8d5 	bl	80011e8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  //Activate timer for signal generator (pitch)
  HAL_TIM_Base_Start(&htim2);
 800103e:	4819      	ldr	r0, [pc, #100]	; (80010a4 <main+0x94>)
 8001040:	f003 fb2a 	bl	8004698 <HAL_TIM_Base_Start>

  //Activate PWM for duty cycle of light stimulation
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001044:	2100      	movs	r1, #0
 8001046:	4818      	ldr	r0, [pc, #96]	; (80010a8 <main+0x98>)
 8001048:	f003 fc0e 	bl	8004868 <HAL_TIM_PWM_Start>

  //Activate PWM for light intensity
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800104c:	2100      	movs	r1, #0
 800104e:	4817      	ldr	r0, [pc, #92]	; (80010ac <main+0x9c>)
 8001050:	f003 fc0a 	bl	8004868 <HAL_TIM_PWM_Start>

  //Calculate waveforms
  init_waves(INT_MAX); //255 is max amplitude
 8001054:	20ff      	movs	r0, #255	; 0xff
 8001056:	f000 fedb 	bl	8001e10 <init_waves>

  //Activate UART RX
  HAL_UART_Receive_IT (&huart2, Rx_data, PACKET_SIZE);
 800105a:	2208      	movs	r2, #8
 800105c:	4914      	ldr	r1, [pc, #80]	; (80010b0 <main+0xa0>)
 800105e:	4815      	ldr	r0, [pc, #84]	; (80010b4 <main+0xa4>)
 8001060:	f004 fa2d 	bl	80054be <HAL_UART_Receive_IT>

  //Initialize random
  srand(time(NULL));
 8001064:	2000      	movs	r0, #0
 8001066:	f005 f9f3 	bl	8006450 <time>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	4613      	mov	r3, r2
 8001070:	4618      	mov	r0, r3
 8001072:	f005 f981 	bl	8006378 <srand>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(10);
 8001076:	200a      	movs	r0, #10
 8001078:	f001 f8cc 	bl	8002214 <HAL_Delay>
    //HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15); //Control LED
    if (i2cFlag){
 800107c:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <main+0xa8>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d0f8      	beq.n	8001076 <main+0x66>
    	//Set intensity for MAX9744 with I2C
    	uint8_t tmp[] = {sound_intensity};
 8001084:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <main+0xac>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	713b      	strb	r3, [r7, #4]
	    HAL_I2C_Master_Transmit(&hi2c2, 0x96, tmp, 1, 10);
 800108a:	1d3a      	adds	r2, r7, #4
 800108c:	230a      	movs	r3, #10
 800108e:	9300      	str	r3, [sp, #0]
 8001090:	2301      	movs	r3, #1
 8001092:	2196      	movs	r1, #150	; 0x96
 8001094:	480a      	ldr	r0, [pc, #40]	; (80010c0 <main+0xb0>)
 8001096:	f002 fb4f 	bl	8003738 <HAL_I2C_Master_Transmit>
	    i2cFlag = 0;
 800109a:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <main+0xa8>)
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
    HAL_Delay(10);
 80010a0:	e7e9      	b.n	8001076 <main+0x66>
 80010a2:	bf00      	nop
 80010a4:	2000015c 	.word	0x2000015c
 80010a8:	200001a4 	.word	0x200001a4
 80010ac:	200001ec 	.word	0x200001ec
 80010b0:	20000280 	.word	0x20000280
 80010b4:	20000234 	.word	0x20000234
 80010b8:	2000028d 	.word	0x2000028d
 80010bc:	2000028b 	.word	0x2000028b
 80010c0:	20000108 	.word	0x20000108

080010c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b094      	sub	sp, #80	; 0x50
 80010c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ca:	f107 0320 	add.w	r3, r7, #32
 80010ce:	2230      	movs	r2, #48	; 0x30
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f005 f948 	bl	8006368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e8:	2300      	movs	r3, #0
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	4b27      	ldr	r3, [pc, #156]	; (800118c <SystemClock_Config+0xc8>)
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	4a26      	ldr	r2, [pc, #152]	; (800118c <SystemClock_Config+0xc8>)
 80010f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f6:	6413      	str	r3, [r2, #64]	; 0x40
 80010f8:	4b24      	ldr	r3, [pc, #144]	; (800118c <SystemClock_Config+0xc8>)
 80010fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001104:	2300      	movs	r3, #0
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	4b21      	ldr	r3, [pc, #132]	; (8001190 <SystemClock_Config+0xcc>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a20      	ldr	r2, [pc, #128]	; (8001190 <SystemClock_Config+0xcc>)
 800110e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	4b1e      	ldr	r3, [pc, #120]	; (8001190 <SystemClock_Config+0xcc>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001120:	2302      	movs	r3, #2
 8001122:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001124:	2301      	movs	r3, #1
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001128:	2310      	movs	r3, #16
 800112a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800112c:	2302      	movs	r3, #2
 800112e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001130:	2300      	movs	r3, #0
 8001132:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001134:	2308      	movs	r3, #8
 8001136:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001138:	2354      	movs	r3, #84	; 0x54
 800113a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800113c:	2302      	movs	r3, #2
 800113e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001140:	2304      	movs	r3, #4
 8001142:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001144:	f107 0320 	add.w	r3, r7, #32
 8001148:	4618      	mov	r0, r3
 800114a:	f002 fdfd 	bl	8003d48 <HAL_RCC_OscConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001154:	f000 fa9c 	bl	8001690 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001158:	230f      	movs	r3, #15
 800115a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800115c:	2302      	movs	r3, #2
 800115e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001168:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800116e:	f107 030c 	add.w	r3, r7, #12
 8001172:	2102      	movs	r1, #2
 8001174:	4618      	mov	r0, r3
 8001176:	f003 f85f 	bl	8004238 <HAL_RCC_ClockConfig>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001180:	f000 fa86 	bl	8001690 <Error_Handler>
  }
}
 8001184:	bf00      	nop
 8001186:	3750      	adds	r7, #80	; 0x50
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40023800 	.word	0x40023800
 8001190:	40007000 	.word	0x40007000

08001194 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800119a:	463b      	mov	r3, r7
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80011a2:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <MX_DAC_Init+0x4c>)
 80011a4:	4a0f      	ldr	r2, [pc, #60]	; (80011e4 <MX_DAC_Init+0x50>)
 80011a6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80011a8:	480d      	ldr	r0, [pc, #52]	; (80011e0 <MX_DAC_Init+0x4c>)
 80011aa:	f001 f968 	bl	800247e <HAL_DAC_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80011b4:	f000 fa6c 	bl	8001690 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80011b8:	2324      	movs	r3, #36	; 0x24
 80011ba:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80011bc:	2300      	movs	r3, #0
 80011be:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011c0:	463b      	mov	r3, r7
 80011c2:	2200      	movs	r2, #0
 80011c4:	4619      	mov	r1, r3
 80011c6:	4806      	ldr	r0, [pc, #24]	; (80011e0 <MX_DAC_Init+0x4c>)
 80011c8:	f001 fab0 	bl	800272c <HAL_DAC_ConfigChannel>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80011d2:	f000 fa5d 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000094 	.word	0x20000094
 80011e4:	40007400 	.word	0x40007400

080011e8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011ec:	4b12      	ldr	r3, [pc, #72]	; (8001238 <MX_I2C2_Init+0x50>)
 80011ee:	4a13      	ldr	r2, [pc, #76]	; (800123c <MX_I2C2_Init+0x54>)
 80011f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80011f2:	4b11      	ldr	r3, [pc, #68]	; (8001238 <MX_I2C2_Init+0x50>)
 80011f4:	4a12      	ldr	r2, [pc, #72]	; (8001240 <MX_I2C2_Init+0x58>)
 80011f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011f8:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <MX_I2C2_Init+0x50>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <MX_I2C2_Init+0x50>)
 8001200:	2200      	movs	r2, #0
 8001202:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <MX_I2C2_Init+0x50>)
 8001206:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800120a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800120c:	4b0a      	ldr	r3, [pc, #40]	; (8001238 <MX_I2C2_Init+0x50>)
 800120e:	2200      	movs	r2, #0
 8001210:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <MX_I2C2_Init+0x50>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001218:	4b07      	ldr	r3, [pc, #28]	; (8001238 <MX_I2C2_Init+0x50>)
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <MX_I2C2_Init+0x50>)
 8001220:	2200      	movs	r2, #0
 8001222:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001224:	4804      	ldr	r0, [pc, #16]	; (8001238 <MX_I2C2_Init+0x50>)
 8001226:	f002 f943 	bl	80034b0 <HAL_I2C_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001230:	f000 fa2e 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000108 	.word	0x20000108
 800123c:	40005800 	.word	0x40005800
 8001240:	000186a0 	.word	0x000186a0

08001244 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800124a:	f107 0308 	add.w	r3, r7, #8
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001258:	463b      	mov	r3, r7
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001260:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <MX_TIM2_Init+0x9c>)
 8001262:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001266:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = (42000000/N_SAMPLES) / pitch;
 8001268:	4b1e      	ldr	r3, [pc, #120]	; (80012e4 <MX_TIM2_Init+0xa0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a1e      	ldr	r2, [pc, #120]	; (80012e8 <MX_TIM2_Init+0xa4>)
 800126e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001272:	4a1b      	ldr	r2, [pc, #108]	; (80012e0 <MX_TIM2_Init+0x9c>)
 8001274:	6053      	str	r3, [r2, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001276:	4b1a      	ldr	r3, [pc, #104]	; (80012e0 <MX_TIM2_Init+0x9c>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 800127c:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <MX_TIM2_Init+0x9c>)
 800127e:	2201      	movs	r2, #1
 8001280:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001282:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <MX_TIM2_Init+0x9c>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001288:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <MX_TIM2_Init+0x9c>)
 800128a:	2200      	movs	r2, #0
 800128c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800128e:	4814      	ldr	r0, [pc, #80]	; (80012e0 <MX_TIM2_Init+0x9c>)
 8001290:	f003 f9b2 	bl	80045f8 <HAL_TIM_Base_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800129a:	f000 f9f9 	bl	8001690 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800129e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012a4:	f107 0308 	add.w	r3, r7, #8
 80012a8:	4619      	mov	r1, r3
 80012aa:	480d      	ldr	r0, [pc, #52]	; (80012e0 <MX_TIM2_Init+0x9c>)
 80012ac:	f003 fc66 	bl	8004b7c <HAL_TIM_ConfigClockSource>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80012b6:	f000 f9eb 	bl	8001690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012ba:	2320      	movs	r3, #32
 80012bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012be:	2300      	movs	r3, #0
 80012c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012c2:	463b      	mov	r3, r7
 80012c4:	4619      	mov	r1, r3
 80012c6:	4806      	ldr	r0, [pc, #24]	; (80012e0 <MX_TIM2_Init+0x9c>)
 80012c8:	f004 f830 	bl	800532c <HAL_TIMEx_MasterConfigSynchronization>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80012d2:	f000 f9dd 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	2000015c 	.word	0x2000015c
 80012e4:	20000008 	.word	0x20000008
 80012e8:	000668a0 	.word	0x000668a0

080012ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08e      	sub	sp, #56	; 0x38
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001300:	f107 0320 	add.w	r3, r7, #32
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
 8001318:	615a      	str	r2, [r3, #20]
 800131a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800131c:	4b36      	ldr	r3, [pc, #216]	; (80013f8 <MX_TIM3_Init+0x10c>)
 800131e:	4a37      	ldr	r2, [pc, #220]	; (80013fc <MX_TIM3_Init+0x110>)
 8001320:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 21000/stim_freq;
 8001322:	4b37      	ldr	r3, [pc, #220]	; (8001400 <MX_TIM3_Init+0x114>)
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	461a      	mov	r2, r3
 8001328:	f245 2308 	movw	r3, #21000	; 0x5208
 800132c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001330:	461a      	mov	r2, r3
 8001332:	4b31      	ldr	r3, [pc, #196]	; (80013f8 <MX_TIM3_Init+0x10c>)
 8001334:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001336:	4b30      	ldr	r3, [pc, #192]	; (80013f8 <MX_TIM3_Init+0x10c>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = TIMER_PRESCALER-1;
 800133c:	4b2e      	ldr	r3, [pc, #184]	; (80013f8 <MX_TIM3_Init+0x10c>)
 800133e:	f640 729f 	movw	r2, #3999	; 0xf9f
 8001342:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001344:	4b2c      	ldr	r3, [pc, #176]	; (80013f8 <MX_TIM3_Init+0x10c>)
 8001346:	2200      	movs	r2, #0
 8001348:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800134a:	4b2b      	ldr	r3, [pc, #172]	; (80013f8 <MX_TIM3_Init+0x10c>)
 800134c:	2200      	movs	r2, #0
 800134e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001350:	4829      	ldr	r0, [pc, #164]	; (80013f8 <MX_TIM3_Init+0x10c>)
 8001352:	f003 f951 	bl	80045f8 <HAL_TIM_Base_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 800135c:	f000 f998 	bl	8001690 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001364:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001366:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800136a:	4619      	mov	r1, r3
 800136c:	4822      	ldr	r0, [pc, #136]	; (80013f8 <MX_TIM3_Init+0x10c>)
 800136e:	f003 fc05 	bl	8004b7c <HAL_TIM_ConfigClockSource>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001378:	f000 f98a 	bl	8001690 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800137c:	481e      	ldr	r0, [pc, #120]	; (80013f8 <MX_TIM3_Init+0x10c>)
 800137e:	f003 fa1a 	bl	80047b6 <HAL_TIM_PWM_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001388:	f000 f982 	bl	8001690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138c:	2300      	movs	r3, #0
 800138e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001390:	2300      	movs	r3, #0
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001394:	f107 0320 	add.w	r3, r7, #32
 8001398:	4619      	mov	r1, r3
 800139a:	4817      	ldr	r0, [pc, #92]	; (80013f8 <MX_TIM3_Init+0x10c>)
 800139c:	f003 ffc6 	bl	800532c <HAL_TIMEx_MasterConfigSynchronization>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM3_Init+0xbe>
  {
    Error_Handler();
 80013a6:	f000 f973 	bl	8001690 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013aa:	2360      	movs	r3, #96	; 0x60
 80013ac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = (TIMER_PRESCALER*duty_cycle)/INT_MAX;
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <MX_TIM3_Init+0x118>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	461a      	mov	r2, r3
 80013b4:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80013b8:	fb02 f303 	mul.w	r3, r2, r3
 80013bc:	4a12      	ldr	r2, [pc, #72]	; (8001408 <MX_TIM3_Init+0x11c>)
 80013be:	fb82 1203 	smull	r1, r2, r2, r3
 80013c2:	441a      	add	r2, r3
 80013c4:	11d2      	asrs	r2, r2, #7
 80013c6:	17db      	asrs	r3, r3, #31
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	2200      	movs	r2, #0
 80013d8:	4619      	mov	r1, r3
 80013da:	4807      	ldr	r0, [pc, #28]	; (80013f8 <MX_TIM3_Init+0x10c>)
 80013dc:	f003 fb0c 	bl	80049f8 <HAL_TIM_PWM_ConfigChannel>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM3_Init+0xfe>
  {
    Error_Handler();
 80013e6:	f000 f953 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80013ea:	4803      	ldr	r0, [pc, #12]	; (80013f8 <MX_TIM3_Init+0x10c>)
 80013ec:	f000 fab0 	bl	8001950 <HAL_TIM_MspPostInit>

}
 80013f0:	bf00      	nop
 80013f2:	3738      	adds	r7, #56	; 0x38
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	200001a4 	.word	0x200001a4
 80013fc:	40000400 	.word	0x40000400
 8001400:	20000004 	.word	0x20000004
 8001404:	20000288 	.word	0x20000288
 8001408:	80808081 	.word	0x80808081

0800140c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08e      	sub	sp, #56	; 0x38
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001412:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001420:	f107 0320 	add.w	r3, r7, #32
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
 8001438:	615a      	str	r2, [r3, #20]
 800143a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800143c:	4b2f      	ldr	r3, [pc, #188]	; (80014fc <MX_TIM4_Init+0xf0>)
 800143e:	4a30      	ldr	r2, [pc, #192]	; (8001500 <MX_TIM4_Init+0xf4>)
 8001440:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = htim3.Init.Prescaler/LIGHT_INTENSITY_PWM_MULTIPLIER;
 8001442:	4b30      	ldr	r3, [pc, #192]	; (8001504 <MX_TIM4_Init+0xf8>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	4a30      	ldr	r2, [pc, #192]	; (8001508 <MX_TIM4_Init+0xfc>)
 8001448:	fba2 2303 	umull	r2, r3, r2, r3
 800144c:	099b      	lsrs	r3, r3, #6
 800144e:	4a2b      	ldr	r2, [pc, #172]	; (80014fc <MX_TIM4_Init+0xf0>)
 8001450:	6053      	str	r3, [r2, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001452:	4b2a      	ldr	r3, [pc, #168]	; (80014fc <MX_TIM4_Init+0xf0>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = TIMER_PRESCALER-1;;
 8001458:	4b28      	ldr	r3, [pc, #160]	; (80014fc <MX_TIM4_Init+0xf0>)
 800145a:	f640 729f 	movw	r2, #3999	; 0xf9f
 800145e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001460:	4b26      	ldr	r3, [pc, #152]	; (80014fc <MX_TIM4_Init+0xf0>)
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001466:	4b25      	ldr	r3, [pc, #148]	; (80014fc <MX_TIM4_Init+0xf0>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800146c:	4823      	ldr	r0, [pc, #140]	; (80014fc <MX_TIM4_Init+0xf0>)
 800146e:	f003 f8c3 	bl	80045f8 <HAL_TIM_Base_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001478:	f000 f90a 	bl	8001690 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800147c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001480:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001482:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001486:	4619      	mov	r1, r3
 8001488:	481c      	ldr	r0, [pc, #112]	; (80014fc <MX_TIM4_Init+0xf0>)
 800148a:	f003 fb77 	bl	8004b7c <HAL_TIM_ConfigClockSource>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001494:	f000 f8fc 	bl	8001690 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001498:	4818      	ldr	r0, [pc, #96]	; (80014fc <MX_TIM4_Init+0xf0>)
 800149a:	f003 f98c 	bl	80047b6 <HAL_TIM_PWM_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80014a4:	f000 f8f4 	bl	8001690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a8:	2300      	movs	r3, #0
 80014aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014b0:	f107 0320 	add.w	r3, r7, #32
 80014b4:	4619      	mov	r1, r3
 80014b6:	4811      	ldr	r0, [pc, #68]	; (80014fc <MX_TIM4_Init+0xf0>)
 80014b8:	f003 ff38 	bl	800532c <HAL_TIMEx_MasterConfigSynchronization>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM4_Init+0xba>
  {
    Error_Handler();
 80014c2:	f000 f8e5 	bl	8001690 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014c6:	2360      	movs	r3, #96	; 0x60
 80014c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014ca:	2300      	movs	r3, #0
 80014cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014d2:	2300      	movs	r3, #0
 80014d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	2200      	movs	r2, #0
 80014da:	4619      	mov	r1, r3
 80014dc:	4807      	ldr	r0, [pc, #28]	; (80014fc <MX_TIM4_Init+0xf0>)
 80014de:	f003 fa8b 	bl	80049f8 <HAL_TIM_PWM_ConfigChannel>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 80014e8:	f000 f8d2 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80014ec:	4803      	ldr	r0, [pc, #12]	; (80014fc <MX_TIM4_Init+0xf0>)
 80014ee:	f000 fa2f 	bl	8001950 <HAL_TIM_MspPostInit>

}
 80014f2:	bf00      	nop
 80014f4:	3738      	adds	r7, #56	; 0x38
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200001ec 	.word	0x200001ec
 8001500:	40000800 	.word	0x40000800
 8001504:	200001a4 	.word	0x200001a4
 8001508:	10624dd3 	.word	0x10624dd3

0800150c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001510:	4b11      	ldr	r3, [pc, #68]	; (8001558 <MX_USART2_UART_Init+0x4c>)
 8001512:	4a12      	ldr	r2, [pc, #72]	; (800155c <MX_USART2_UART_Init+0x50>)
 8001514:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001516:	4b10      	ldr	r3, [pc, #64]	; (8001558 <MX_USART2_UART_Init+0x4c>)
 8001518:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800151c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800151e:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <MX_USART2_UART_Init+0x4c>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001524:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <MX_USART2_UART_Init+0x4c>)
 8001526:	2200      	movs	r2, #0
 8001528:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800152a:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <MX_USART2_UART_Init+0x4c>)
 800152c:	2200      	movs	r2, #0
 800152e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001530:	4b09      	ldr	r3, [pc, #36]	; (8001558 <MX_USART2_UART_Init+0x4c>)
 8001532:	220c      	movs	r2, #12
 8001534:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001536:	4b08      	ldr	r3, [pc, #32]	; (8001558 <MX_USART2_UART_Init+0x4c>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <MX_USART2_UART_Init+0x4c>)
 800153e:	2200      	movs	r2, #0
 8001540:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001542:	4805      	ldr	r0, [pc, #20]	; (8001558 <MX_USART2_UART_Init+0x4c>)
 8001544:	f003 ff6e 	bl	8005424 <HAL_UART_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800154e:	f000 f89f 	bl	8001690 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000234 	.word	0x20000234
 800155c:	40004400 	.word	0x40004400

08001560 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	4b0c      	ldr	r3, [pc, #48]	; (800159c <MX_DMA_Init+0x3c>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a0b      	ldr	r2, [pc, #44]	; (800159c <MX_DMA_Init+0x3c>)
 8001570:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <MX_DMA_Init+0x3c>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2100      	movs	r1, #0
 8001586:	2010      	movs	r0, #16
 8001588:	f000 ff43 	bl	8002412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800158c:	2010      	movs	r0, #16
 800158e:	f000 ff5c 	bl	800244a <HAL_NVIC_EnableIRQ>

}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800

080015a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08a      	sub	sp, #40	; 0x28
 80015a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
 80015b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	4b32      	ldr	r3, [pc, #200]	; (8001684 <MX_GPIO_Init+0xe4>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a31      	ldr	r2, [pc, #196]	; (8001684 <MX_GPIO_Init+0xe4>)
 80015c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b2f      	ldr	r3, [pc, #188]	; (8001684 <MX_GPIO_Init+0xe4>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	4b2b      	ldr	r3, [pc, #172]	; (8001684 <MX_GPIO_Init+0xe4>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a2a      	ldr	r2, [pc, #168]	; (8001684 <MX_GPIO_Init+0xe4>)
 80015dc:	f043 0301 	orr.w	r3, r3, #1
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b28      	ldr	r3, [pc, #160]	; (8001684 <MX_GPIO_Init+0xe4>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	4b24      	ldr	r3, [pc, #144]	; (8001684 <MX_GPIO_Init+0xe4>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a23      	ldr	r2, [pc, #140]	; (8001684 <MX_GPIO_Init+0xe4>)
 80015f8:	f043 0302 	orr.w	r3, r3, #2
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b21      	ldr	r3, [pc, #132]	; (8001684 <MX_GPIO_Init+0xe4>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	4b1d      	ldr	r3, [pc, #116]	; (8001684 <MX_GPIO_Init+0xe4>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a1c      	ldr	r2, [pc, #112]	; (8001684 <MX_GPIO_Init+0xe4>)
 8001614:	f043 0308 	orr.w	r3, r3, #8
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b1a      	ldr	r3, [pc, #104]	; (8001684 <MX_GPIO_Init+0xe4>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0308 	and.w	r3, r3, #8
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_ROUGE_Pin|LED_BLEU_Pin, GPIO_PIN_RESET);
 8001626:	2200      	movs	r2, #0
 8001628:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800162c:	4816      	ldr	r0, [pc, #88]	; (8001688 <MX_GPIO_Init+0xe8>)
 800162e:	f001 ff0d 	bl	800344c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001632:	2302      	movs	r3, #2
 8001634:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001636:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800163a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	4619      	mov	r1, r3
 8001646:	4811      	ldr	r0, [pc, #68]	; (800168c <MX_GPIO_Init+0xec>)
 8001648:	f001 fd4c 	bl	80030e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_ROUGE_Pin LED_BLEU_Pin */
  GPIO_InitStruct.Pin = LED_ROUGE_Pin|LED_BLEU_Pin;
 800164c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001652:	2301      	movs	r3, #1
 8001654:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165a:	2300      	movs	r3, #0
 800165c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	4619      	mov	r1, r3
 8001664:	4808      	ldr	r0, [pc, #32]	; (8001688 <MX_GPIO_Init+0xe8>)
 8001666:	f001 fd3d 	bl	80030e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 1);
 800166a:	2201      	movs	r2, #1
 800166c:	2101      	movs	r1, #1
 800166e:	2007      	movs	r0, #7
 8001670:	f000 fecf 	bl	8002412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001674:	2007      	movs	r0, #7
 8001676:	f000 fee8 	bl	800244a <HAL_NVIC_EnableIRQ>

}
 800167a:	bf00      	nop
 800167c:	3728      	adds	r7, #40	; 0x28
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40023800 	.word	0x40023800
 8001688:	40020c00 	.word	0x40020c00
 800168c:	40020400 	.word	0x40020400

08001690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001694:	b672      	cpsid	i
}
 8001696:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001698:	e7fe      	b.n	8001698 <Error_Handler+0x8>
	...

0800169c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <HAL_MspInit+0x58>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	4a12      	ldr	r2, [pc, #72]	; (80016f4 <HAL_MspInit+0x58>)
 80016ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b0:	6453      	str	r3, [r2, #68]	; 0x44
 80016b2:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <HAL_MspInit+0x58>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	603b      	str	r3, [r7, #0]
 80016c2:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <HAL_MspInit+0x58>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	4a0b      	ldr	r2, [pc, #44]	; (80016f4 <HAL_MspInit+0x58>)
 80016c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016cc:	6413      	str	r3, [r2, #64]	; 0x40
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <HAL_MspInit+0x58>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d6:	603b      	str	r3, [r7, #0]
 80016d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80016da:	2200      	movs	r2, #0
 80016dc:	2100      	movs	r1, #0
 80016de:	2005      	movs	r0, #5
 80016e0:	f000 fe97 	bl	8002412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80016e4:	2005      	movs	r0, #5
 80016e6:	f000 feb0 	bl	800244a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ea:	bf00      	nop
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	40023800 	.word	0x40023800

080016f8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08a      	sub	sp, #40	; 0x28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a34      	ldr	r2, [pc, #208]	; (80017e8 <HAL_DAC_MspInit+0xf0>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d161      	bne.n	80017de <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	4b33      	ldr	r3, [pc, #204]	; (80017ec <HAL_DAC_MspInit+0xf4>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	4a32      	ldr	r2, [pc, #200]	; (80017ec <HAL_DAC_MspInit+0xf4>)
 8001724:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001728:	6413      	str	r3, [r2, #64]	; 0x40
 800172a:	4b30      	ldr	r3, [pc, #192]	; (80017ec <HAL_DAC_MspInit+0xf4>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	4b2c      	ldr	r3, [pc, #176]	; (80017ec <HAL_DAC_MspInit+0xf4>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	4a2b      	ldr	r2, [pc, #172]	; (80017ec <HAL_DAC_MspInit+0xf4>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6313      	str	r3, [r2, #48]	; 0x30
 8001746:	4b29      	ldr	r3, [pc, #164]	; (80017ec <HAL_DAC_MspInit+0xf4>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001752:	2310      	movs	r3, #16
 8001754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001756:	2303      	movs	r3, #3
 8001758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800175e:	f107 0314 	add.w	r3, r7, #20
 8001762:	4619      	mov	r1, r3
 8001764:	4822      	ldr	r0, [pc, #136]	; (80017f0 <HAL_DAC_MspInit+0xf8>)
 8001766:	f001 fcbd 	bl	80030e4 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800176a:	4b22      	ldr	r3, [pc, #136]	; (80017f4 <HAL_DAC_MspInit+0xfc>)
 800176c:	4a22      	ldr	r2, [pc, #136]	; (80017f8 <HAL_DAC_MspInit+0x100>)
 800176e:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001770:	4b20      	ldr	r3, [pc, #128]	; (80017f4 <HAL_DAC_MspInit+0xfc>)
 8001772:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001776:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001778:	4b1e      	ldr	r3, [pc, #120]	; (80017f4 <HAL_DAC_MspInit+0xfc>)
 800177a:	2240      	movs	r2, #64	; 0x40
 800177c:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800177e:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <HAL_DAC_MspInit+0xfc>)
 8001780:	2200      	movs	r2, #0
 8001782:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001784:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <HAL_DAC_MspInit+0xfc>)
 8001786:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800178a:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800178c:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <HAL_DAC_MspInit+0xfc>)
 800178e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001792:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001794:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <HAL_DAC_MspInit+0xfc>)
 8001796:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800179a:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 800179c:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <HAL_DAC_MspInit+0xfc>)
 800179e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017a2:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 80017a4:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <HAL_DAC_MspInit+0xfc>)
 80017a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017aa:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017ac:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <HAL_DAC_MspInit+0xfc>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80017b2:	4810      	ldr	r0, [pc, #64]	; (80017f4 <HAL_DAC_MspInit+0xfc>)
 80017b4:	f001 f894 	bl	80028e0 <HAL_DMA_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 80017be:	f7ff ff67 	bl	8001690 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a0b      	ldr	r2, [pc, #44]	; (80017f4 <HAL_DAC_MspInit+0xfc>)
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <HAL_DAC_MspInit+0xfc>)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80017ce:	2200      	movs	r2, #0
 80017d0:	2100      	movs	r1, #0
 80017d2:	2036      	movs	r0, #54	; 0x36
 80017d4:	f000 fe1d 	bl	8002412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017d8:	2036      	movs	r0, #54	; 0x36
 80017da:	f000 fe36 	bl	800244a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80017de:	bf00      	nop
 80017e0:	3728      	adds	r7, #40	; 0x28
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40007400 	.word	0x40007400
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40020000 	.word	0x40020000
 80017f4:	200000a8 	.word	0x200000a8
 80017f8:	40026088 	.word	0x40026088

080017fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	; 0x28
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a19      	ldr	r2, [pc, #100]	; (8001880 <HAL_I2C_MspInit+0x84>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d12c      	bne.n	8001878 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800181e:	2300      	movs	r3, #0
 8001820:	613b      	str	r3, [r7, #16]
 8001822:	4b18      	ldr	r3, [pc, #96]	; (8001884 <HAL_I2C_MspInit+0x88>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	4a17      	ldr	r2, [pc, #92]	; (8001884 <HAL_I2C_MspInit+0x88>)
 8001828:	f043 0302 	orr.w	r3, r3, #2
 800182c:	6313      	str	r3, [r2, #48]	; 0x30
 800182e:	4b15      	ldr	r3, [pc, #84]	; (8001884 <HAL_I2C_MspInit+0x88>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	613b      	str	r3, [r7, #16]
 8001838:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800183a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800183e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001840:	2312      	movs	r3, #18
 8001842:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001844:	2301      	movs	r3, #1
 8001846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001848:	2303      	movs	r3, #3
 800184a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800184c:	2304      	movs	r3, #4
 800184e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	4619      	mov	r1, r3
 8001856:	480c      	ldr	r0, [pc, #48]	; (8001888 <HAL_I2C_MspInit+0x8c>)
 8001858:	f001 fc44 	bl	80030e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800185c:	2300      	movs	r3, #0
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	4b08      	ldr	r3, [pc, #32]	; (8001884 <HAL_I2C_MspInit+0x88>)
 8001862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001864:	4a07      	ldr	r2, [pc, #28]	; (8001884 <HAL_I2C_MspInit+0x88>)
 8001866:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800186a:	6413      	str	r3, [r2, #64]	; 0x40
 800186c:	4b05      	ldr	r3, [pc, #20]	; (8001884 <HAL_I2C_MspInit+0x88>)
 800186e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001870:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001878:	bf00      	nop
 800187a:	3728      	adds	r7, #40	; 0x28
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40005800 	.word	0x40005800
 8001884:	40023800 	.word	0x40023800
 8001888:	40020400 	.word	0x40020400

0800188c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800189c:	d116      	bne.n	80018cc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	4b28      	ldr	r3, [pc, #160]	; (8001944 <HAL_TIM_Base_MspInit+0xb8>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	4a27      	ldr	r2, [pc, #156]	; (8001944 <HAL_TIM_Base_MspInit+0xb8>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6413      	str	r3, [r2, #64]	; 0x40
 80018ae:	4b25      	ldr	r3, [pc, #148]	; (8001944 <HAL_TIM_Base_MspInit+0xb8>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018ba:	2200      	movs	r2, #0
 80018bc:	2100      	movs	r1, #0
 80018be:	201c      	movs	r0, #28
 80018c0:	f000 fda7 	bl	8002412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018c4:	201c      	movs	r0, #28
 80018c6:	f000 fdc0 	bl	800244a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80018ca:	e036      	b.n	800193a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM3)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a1d      	ldr	r2, [pc, #116]	; (8001948 <HAL_TIM_Base_MspInit+0xbc>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d116      	bne.n	8001904 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	4b1a      	ldr	r3, [pc, #104]	; (8001944 <HAL_TIM_Base_MspInit+0xb8>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	4a19      	ldr	r2, [pc, #100]	; (8001944 <HAL_TIM_Base_MspInit+0xb8>)
 80018e0:	f043 0302 	orr.w	r3, r3, #2
 80018e4:	6413      	str	r3, [r2, #64]	; 0x40
 80018e6:	4b17      	ldr	r3, [pc, #92]	; (8001944 <HAL_TIM_Base_MspInit+0xb8>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	613b      	str	r3, [r7, #16]
 80018f0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2100      	movs	r1, #0
 80018f6:	201d      	movs	r0, #29
 80018f8:	f000 fd8b 	bl	8002412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018fc:	201d      	movs	r0, #29
 80018fe:	f000 fda4 	bl	800244a <HAL_NVIC_EnableIRQ>
}
 8001902:	e01a      	b.n	800193a <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM4)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a10      	ldr	r2, [pc, #64]	; (800194c <HAL_TIM_Base_MspInit+0xc0>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d115      	bne.n	800193a <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	4b0c      	ldr	r3, [pc, #48]	; (8001944 <HAL_TIM_Base_MspInit+0xb8>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	4a0b      	ldr	r2, [pc, #44]	; (8001944 <HAL_TIM_Base_MspInit+0xb8>)
 8001918:	f043 0304 	orr.w	r3, r3, #4
 800191c:	6413      	str	r3, [r2, #64]	; 0x40
 800191e:	4b09      	ldr	r3, [pc, #36]	; (8001944 <HAL_TIM_Base_MspInit+0xb8>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	f003 0304 	and.w	r3, r3, #4
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800192a:	2200      	movs	r2, #0
 800192c:	2100      	movs	r1, #0
 800192e:	201e      	movs	r0, #30
 8001930:	f000 fd6f 	bl	8002412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001934:	201e      	movs	r0, #30
 8001936:	f000 fd88 	bl	800244a <HAL_NVIC_EnableIRQ>
}
 800193a:	bf00      	nop
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800
 8001948:	40000400 	.word	0x40000400
 800194c:	40000800 	.word	0x40000800

08001950 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b08a      	sub	sp, #40	; 0x28
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a24      	ldr	r2, [pc, #144]	; (8001a00 <HAL_TIM_MspPostInit+0xb0>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d11e      	bne.n	80019b0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001972:	2300      	movs	r3, #0
 8001974:	613b      	str	r3, [r7, #16]
 8001976:	4b23      	ldr	r3, [pc, #140]	; (8001a04 <HAL_TIM_MspPostInit+0xb4>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	4a22      	ldr	r2, [pc, #136]	; (8001a04 <HAL_TIM_MspPostInit+0xb4>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6313      	str	r3, [r2, #48]	; 0x30
 8001982:	4b20      	ldr	r3, [pc, #128]	; (8001a04 <HAL_TIM_MspPostInit+0xb4>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	613b      	str	r3, [r7, #16]
 800198c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800198e:	2340      	movs	r3, #64	; 0x40
 8001990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001992:	2302      	movs	r3, #2
 8001994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199a:	2300      	movs	r3, #0
 800199c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800199e:	2302      	movs	r3, #2
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a2:	f107 0314 	add.w	r3, r7, #20
 80019a6:	4619      	mov	r1, r3
 80019a8:	4817      	ldr	r0, [pc, #92]	; (8001a08 <HAL_TIM_MspPostInit+0xb8>)
 80019aa:	f001 fb9b 	bl	80030e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80019ae:	e023      	b.n	80019f8 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM4)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a15      	ldr	r2, [pc, #84]	; (8001a0c <HAL_TIM_MspPostInit+0xbc>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d11e      	bne.n	80019f8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <HAL_TIM_MspPostInit+0xb4>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a10      	ldr	r2, [pc, #64]	; (8001a04 <HAL_TIM_MspPostInit+0xb4>)
 80019c4:	f043 0308 	orr.w	r3, r3, #8
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <HAL_TIM_MspPostInit+0xb4>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0308 	and.w	r3, r3, #8
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80019d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019dc:	2302      	movs	r3, #2
 80019de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e4:	2300      	movs	r3, #0
 80019e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80019e8:	2302      	movs	r3, #2
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	4619      	mov	r1, r3
 80019f2:	4807      	ldr	r0, [pc, #28]	; (8001a10 <HAL_TIM_MspPostInit+0xc0>)
 80019f4:	f001 fb76 	bl	80030e4 <HAL_GPIO_Init>
}
 80019f8:	bf00      	nop
 80019fa:	3728      	adds	r7, #40	; 0x28
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40000400 	.word	0x40000400
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40020000 	.word	0x40020000
 8001a0c:	40000800 	.word	0x40000800
 8001a10:	40020c00 	.word	0x40020c00

08001a14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b08a      	sub	sp, #40	; 0x28
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	2200      	movs	r2, #0
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	605a      	str	r2, [r3, #4]
 8001a26:	609a      	str	r2, [r3, #8]
 8001a28:	60da      	str	r2, [r3, #12]
 8001a2a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a1d      	ldr	r2, [pc, #116]	; (8001aa8 <HAL_UART_MspInit+0x94>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d133      	bne.n	8001a9e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	4b1c      	ldr	r3, [pc, #112]	; (8001aac <HAL_UART_MspInit+0x98>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	4a1b      	ldr	r2, [pc, #108]	; (8001aac <HAL_UART_MspInit+0x98>)
 8001a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a44:	6413      	str	r3, [r2, #64]	; 0x40
 8001a46:	4b19      	ldr	r3, [pc, #100]	; (8001aac <HAL_UART_MspInit+0x98>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	613b      	str	r3, [r7, #16]
 8001a50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	4b15      	ldr	r3, [pc, #84]	; (8001aac <HAL_UART_MspInit+0x98>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4a14      	ldr	r2, [pc, #80]	; (8001aac <HAL_UART_MspInit+0x98>)
 8001a5c:	f043 0301 	orr.w	r3, r3, #1
 8001a60:	6313      	str	r3, [r2, #48]	; 0x30
 8001a62:	4b12      	ldr	r3, [pc, #72]	; (8001aac <HAL_UART_MspInit+0x98>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	60fb      	str	r3, [r7, #12]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a6e:	230c      	movs	r3, #12
 8001a70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a72:	2302      	movs	r3, #2
 8001a74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a7e:	2307      	movs	r3, #7
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a82:	f107 0314 	add.w	r3, r7, #20
 8001a86:	4619      	mov	r1, r3
 8001a88:	4809      	ldr	r0, [pc, #36]	; (8001ab0 <HAL_UART_MspInit+0x9c>)
 8001a8a:	f001 fb2b 	bl	80030e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2100      	movs	r1, #0
 8001a92:	2026      	movs	r0, #38	; 0x26
 8001a94:	f000 fcbd 	bl	8002412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a98:	2026      	movs	r0, #38	; 0x26
 8001a9a:	f000 fcd6 	bl	800244a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a9e:	bf00      	nop
 8001aa0:	3728      	adds	r7, #40	; 0x28
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40004400 	.word	0x40004400
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40020000 	.word	0x40020000

08001ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <NMI_Handler+0x4>

08001aba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001abe:	e7fe      	b.n	8001abe <HardFault_Handler+0x4>

08001ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac4:	e7fe      	b.n	8001ac4 <MemManage_Handler+0x4>

08001ac6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aca:	e7fe      	b.n	8001aca <BusFault_Handler+0x4>

08001acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad0:	e7fe      	b.n	8001ad0 <UsageFault_Handler+0x4>

08001ad2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr

08001aee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b00:	f000 fb68 	bl	80021d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b04:	bf00      	nop
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr

08001b16 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001b1a:	2002      	movs	r0, #2
 8001b1c:	f001 fcb0 	bl	8003480 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001b28:	4802      	ldr	r0, [pc, #8]	; (8001b34 <DMA1_Stream5_IRQHandler+0x10>)
 8001b2a:	f001 f871 	bl	8002c10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	200000a8 	.word	0x200000a8

08001b38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b3c:	4803      	ldr	r0, [pc, #12]	; (8001b4c <USART2_IRQHandler+0x14>)
 8001b3e:	f003 fcef 	bl	8005520 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  receiveUARTpacket();
 8001b42:	f000 f8dd 	bl	8001d00 <receiveUARTpacket>

  /* USER CODE END USART2_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000234 	.word	0x20000234

08001b50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return 1;
 8001b54:	2301      	movs	r3, #1
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <_kill>:

int _kill(int pid, int sig)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b6a:	f004 fbd3 	bl	8006314 <__errno>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2216      	movs	r2, #22
 8001b72:	601a      	str	r2, [r3, #0]
  return -1;
 8001b74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <_exit>:

void _exit (int status)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b88:	f04f 31ff 	mov.w	r1, #4294967295
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ffe7 	bl	8001b60 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b92:	e7fe      	b.n	8001b92 <_exit+0x12>

08001b94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
 8001ba4:	e00a      	b.n	8001bbc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ba6:	f3af 8000 	nop.w
 8001baa:	4601      	mov	r1, r0
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	1c5a      	adds	r2, r3, #1
 8001bb0:	60ba      	str	r2, [r7, #8]
 8001bb2:	b2ca      	uxtb	r2, r1
 8001bb4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	dbf0      	blt.n	8001ba6 <_read+0x12>
  }

  return len;
 8001bc4:	687b      	ldr	r3, [r7, #4]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3718      	adds	r7, #24
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b086      	sub	sp, #24
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	60b9      	str	r1, [r7, #8]
 8001bd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bda:	2300      	movs	r3, #0
 8001bdc:	617b      	str	r3, [r7, #20]
 8001bde:	e009      	b.n	8001bf4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	1c5a      	adds	r2, r3, #1
 8001be4:	60ba      	str	r2, [r7, #8]
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	dbf1      	blt.n	8001be0 <_write+0x12>
  }
  return len;
 8001bfc:	687b      	ldr	r3, [r7, #4]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <_close>:

int _close(int file)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
 8001c26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c2e:	605a      	str	r2, [r3, #4]
  return 0;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <_isatty>:

int _isatty(int file)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c46:	2301      	movs	r3, #1
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3714      	adds	r7, #20
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
	...

08001c70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c78:	4a14      	ldr	r2, [pc, #80]	; (8001ccc <_sbrk+0x5c>)
 8001c7a:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <_sbrk+0x60>)
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c84:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <_sbrk+0x64>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d102      	bne.n	8001c92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <_sbrk+0x64>)
 8001c8e:	4a12      	ldr	r2, [pc, #72]	; (8001cd8 <_sbrk+0x68>)
 8001c90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c92:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <_sbrk+0x64>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d207      	bcs.n	8001cb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca0:	f004 fb38 	bl	8006314 <__errno>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	220c      	movs	r2, #12
 8001ca8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001caa:	f04f 33ff 	mov.w	r3, #4294967295
 8001cae:	e009      	b.n	8001cc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb0:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <_sbrk+0x64>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cb6:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <_sbrk+0x64>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	4a05      	ldr	r2, [pc, #20]	; (8001cd4 <_sbrk+0x64>)
 8001cc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20020000 	.word	0x20020000
 8001cd0:	00000400 	.word	0x00000400
 8001cd4:	2000027c 	.word	0x2000027c
 8001cd8:	200008e8 	.word	0x200008e8

08001cdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ce0:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <SystemInit+0x20>)
 8001ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ce6:	4a05      	ldr	r2, [pc, #20]	; (8001cfc <SystemInit+0x20>)
 8001ce8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cf0:	bf00      	nop
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <receiveUARTpacket>:
uint8_t randomOn = 0; 			// 0 (off), anything else is random
uint8_t sound_intensity = 0; 	// 0 - 255 (INT_MAX)
uint8_t light_intensity = 0; 	// 0 - 255 (INT_MAX) where 255 is max intensity
uint8_t i2cFlag = 0;			// flag for knowing when to send i2c packet

void receiveUARTpacket(){
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
	// Stop DAC
	  HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
 8001d04:	2100      	movs	r1, #0
 8001d06:	4832      	ldr	r0, [pc, #200]	; (8001dd0 <receiveUARTpacket+0xd0>)
 8001d08:	f000 fcaa 	bl	8002660 <HAL_DAC_Stop_DMA>
	  HAL_TIM_Base_Stop(&htim2);
 8001d0c:	4831      	ldr	r0, [pc, #196]	; (8001dd4 <receiveUARTpacket+0xd4>)
 8001d0e:	f002 fd2b 	bl	8004768 <HAL_TIM_Base_Stop>

	  //Get values from Rx buffer
	  wave_type = Rx_data[0];
 8001d12:	4b31      	ldr	r3, [pc, #196]	; (8001dd8 <receiveUARTpacket+0xd8>)
 8001d14:	781a      	ldrb	r2, [r3, #0]
 8001d16:	4b31      	ldr	r3, [pc, #196]	; (8001ddc <receiveUARTpacket+0xdc>)
 8001d18:	701a      	strb	r2, [r3, #0]
	  pitch = Rx_data[1] << 8 | Rx_data[2];
 8001d1a:	4b2f      	ldr	r3, [pc, #188]	; (8001dd8 <receiveUARTpacket+0xd8>)
 8001d1c:	785b      	ldrb	r3, [r3, #1]
 8001d1e:	021b      	lsls	r3, r3, #8
 8001d20:	4a2d      	ldr	r2, [pc, #180]	; (8001dd8 <receiveUARTpacket+0xd8>)
 8001d22:	7892      	ldrb	r2, [r2, #2]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	461a      	mov	r2, r3
 8001d28:	4b2d      	ldr	r3, [pc, #180]	; (8001de0 <receiveUARTpacket+0xe0>)
 8001d2a:	601a      	str	r2, [r3, #0]
	  stim_freq = Rx_data[3];
 8001d2c:	4b2a      	ldr	r3, [pc, #168]	; (8001dd8 <receiveUARTpacket+0xd8>)
 8001d2e:	78da      	ldrb	r2, [r3, #3]
 8001d30:	4b2c      	ldr	r3, [pc, #176]	; (8001de4 <receiveUARTpacket+0xe4>)
 8001d32:	701a      	strb	r2, [r3, #0]
	  duty_cycle = Rx_data[4];
 8001d34:	4b28      	ldr	r3, [pc, #160]	; (8001dd8 <receiveUARTpacket+0xd8>)
 8001d36:	791a      	ldrb	r2, [r3, #4]
 8001d38:	4b2b      	ldr	r3, [pc, #172]	; (8001de8 <receiveUARTpacket+0xe8>)
 8001d3a:	701a      	strb	r2, [r3, #0]
	  randomOn = Rx_data[5];
 8001d3c:	4b26      	ldr	r3, [pc, #152]	; (8001dd8 <receiveUARTpacket+0xd8>)
 8001d3e:	795a      	ldrb	r2, [r3, #5]
 8001d40:	4b2a      	ldr	r3, [pc, #168]	; (8001dec <receiveUARTpacket+0xec>)
 8001d42:	701a      	strb	r2, [r3, #0]
	  sound_intensity = Rx_data[6];
 8001d44:	4b24      	ldr	r3, [pc, #144]	; (8001dd8 <receiveUARTpacket+0xd8>)
 8001d46:	799a      	ldrb	r2, [r3, #6]
 8001d48:	4b29      	ldr	r3, [pc, #164]	; (8001df0 <receiveUARTpacket+0xf0>)
 8001d4a:	701a      	strb	r2, [r3, #0]
	  light_intensity = Rx_data[7];
 8001d4c:	4b22      	ldr	r3, [pc, #136]	; (8001dd8 <receiveUARTpacket+0xd8>)
 8001d4e:	79da      	ldrb	r2, [r3, #7]
 8001d50:	4b28      	ldr	r3, [pc, #160]	; (8001df4 <receiveUARTpacket+0xf4>)
 8001d52:	701a      	strb	r2, [r3, #0]

	  //Set pitch
	  if (pitch){
 8001d54:	4b22      	ldr	r3, [pc, #136]	; (8001de0 <receiveUARTpacket+0xe0>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d007      	beq.n	8001d6c <receiveUARTpacket+0x6c>
		htim2.Instance->PSC = (42000000/N_SAMPLES) / pitch;
 8001d5c:	4b20      	ldr	r3, [pc, #128]	; (8001de0 <receiveUARTpacket+0xe0>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4b1c      	ldr	r3, [pc, #112]	; (8001dd4 <receiveUARTpacket+0xd4>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4924      	ldr	r1, [pc, #144]	; (8001df8 <receiveUARTpacket+0xf8>)
 8001d66:	fbb1 f2f2 	udiv	r2, r1, r2
 8001d6a:	629a      	str	r2, [r3, #40]	; 0x28
	  }

	  //Set stimulation frequency
	  if (stim_freq){
 8001d6c:	4b1d      	ldr	r3, [pc, #116]	; (8001de4 <receiveUARTpacket+0xe4>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d009      	beq.n	8001d88 <receiveUARTpacket+0x88>
		  htim3.Instance->PSC = 21000/stim_freq;
 8001d74:	4b1b      	ldr	r3, [pc, #108]	; (8001de4 <receiveUARTpacket+0xe4>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	f245 2308 	movw	r3, #21000	; 0x5208
 8001d7e:	fb93 f2f2 	sdiv	r2, r3, r2
 8001d82:	4b1e      	ldr	r3, [pc, #120]	; (8001dfc <receiveUARTpacket+0xfc>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	629a      	str	r2, [r3, #40]	; 0x28
	  }

	  //Set duty cycle for light frequency
	  htim3.Instance->CCR1 = (TIMER_PRESCALER*duty_cycle)/INT_MAX;
 8001d88:	4b17      	ldr	r3, [pc, #92]	; (8001de8 <receiveUARTpacket+0xe8>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8001d92:	fb02 f303 	mul.w	r3, r2, r3
 8001d96:	4a1a      	ldr	r2, [pc, #104]	; (8001e00 <receiveUARTpacket+0x100>)
 8001d98:	fb82 1203 	smull	r1, r2, r2, r3
 8001d9c:	441a      	add	r2, r3
 8001d9e:	11d2      	asrs	r2, r2, #7
 8001da0:	17db      	asrs	r3, r3, #31
 8001da2:	1ad2      	subs	r2, r2, r3
 8001da4:	4b15      	ldr	r3, [pc, #84]	; (8001dfc <receiveUARTpacket+0xfc>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	635a      	str	r2, [r3, #52]	; 0x34

	  //Set intensity for MAX9744 with I2C
	  //uint8_t tmp[] = {sound_intensity};
	  //HAL_I2C_Master_Transmit(&hi2c2, 0b10010010, tmp, 1, 1);
	  i2cFlag = 1;
 8001daa:	4b16      	ldr	r3, [pc, #88]	; (8001e04 <receiveUARTpacket+0x104>)
 8001dac:	2201      	movs	r2, #1
 8001dae:	701a      	strb	r2, [r3, #0]

	  //Set frequency for PWM controlling light intensity
	  htim4.Instance->PSC = (htim3.Instance->PSC)/LIGHT_INTENSITY_PWM_MULTIPLIER;
 8001db0:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <receiveUARTpacket+0xfc>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001db6:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <receiveUARTpacket+0x108>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4914      	ldr	r1, [pc, #80]	; (8001e0c <receiveUARTpacket+0x10c>)
 8001dbc:	fba1 1202 	umull	r1, r2, r1, r2
 8001dc0:	0992      	lsrs	r2, r2, #6
 8001dc2:	629a      	str	r2, [r3, #40]	; 0x28

	  // Start DAC timer
	  HAL_TIM_Base_Start(&htim2);
 8001dc4:	4803      	ldr	r0, [pc, #12]	; (8001dd4 <receiveUARTpacket+0xd4>)
 8001dc6:	f002 fc67 	bl	8004698 <HAL_TIM_Base_Start>
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000094 	.word	0x20000094
 8001dd4:	2000015c 	.word	0x2000015c
 8001dd8:	20000280 	.word	0x20000280
 8001ddc:	20000289 	.word	0x20000289
 8001de0:	20000008 	.word	0x20000008
 8001de4:	20000004 	.word	0x20000004
 8001de8:	20000288 	.word	0x20000288
 8001dec:	2000028a 	.word	0x2000028a
 8001df0:	2000028b 	.word	0x2000028b
 8001df4:	2000028c 	.word	0x2000028c
 8001df8:	000668a0 	.word	0x000668a0
 8001dfc:	200001a4 	.word	0x200001a4
 8001e00:	80808081 	.word	0x80808081
 8001e04:	2000028d 	.word	0x2000028d
 8001e08:	200001ec 	.word	0x200001ec
 8001e0c:	10624dd3 	.word	0x10624dd3

08001e10 <init_waves>:
//

#include "../../Inc/init.h"
#include "../../Inc/waves.h"

void init_waves(unsigned int amplitude){
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
    calcsin(amplitude);
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f000 f80d 	bl	8001e38 <calcsin>
    calcsaw(amplitude);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f878 	bl	8001f14 <calcsaw>
    calctri(amplitude);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f000 f8b1 	bl	8001f8c <calctri>
    calcsquare(amplitude);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f918 	bl	8002060 <calcsquare>
}
 8001e30:	bf00      	nop
 8001e32:	3708      	adds	r7, #8
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <calcsin>:
unsigned int square_val[N_SAMPLES];
unsigned int empty[N_SAMPLES] = {0};


void calcsin (unsigned int amplitude)
{
 8001e38:	b5b0      	push	{r4, r5, r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
    for (int i=0; i<N_SAMPLES; i++)
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	e04f      	b.n	8001ee6 <calcsin+0xae>
    {
        sine_val[i] = ((float)amplitude/255)*((sin(i*2*PI/N_SAMPLES) + 1)*(4096/2));
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	ee07 3a90 	vmov	s15, r3
 8001e4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e50:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001f00 <calcsin+0xc8>
 8001e54:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001e58:	ee16 0a90 	vmov	r0, s13
 8001e5c:	f7fe fb6c 	bl	8000538 <__aeabi_f2d>
 8001e60:	4604      	mov	r4, r0
 8001e62:	460d      	mov	r5, r1
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7fe fb53 	bl	8000514 <__aeabi_i2d>
 8001e6e:	a322      	add	r3, pc, #136	; (adr r3, 8001ef8 <calcsin+0xc0>)
 8001e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e74:	f7fe fbb8 	bl	80005e8 <__aeabi_dmul>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4610      	mov	r0, r2
 8001e7e:	4619      	mov	r1, r3
 8001e80:	f04f 0200 	mov.w	r2, #0
 8001e84:	4b1f      	ldr	r3, [pc, #124]	; (8001f04 <calcsin+0xcc>)
 8001e86:	f7fe fcd9 	bl	800083c <__aeabi_ddiv>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	ec43 2b17 	vmov	d7, r2, r3
 8001e92:	eeb0 0a47 	vmov.f32	s0, s14
 8001e96:	eef0 0a67 	vmov.f32	s1, s15
 8001e9a:	f005 fb01 	bl	80074a0 <sin>
 8001e9e:	ec51 0b10 	vmov	r0, r1, d0
 8001ea2:	f04f 0200 	mov.w	r2, #0
 8001ea6:	4b18      	ldr	r3, [pc, #96]	; (8001f08 <calcsin+0xd0>)
 8001ea8:	f7fe f9e8 	bl	800027c <__adddf3>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	f04f 0200 	mov.w	r2, #0
 8001eb8:	4b14      	ldr	r3, [pc, #80]	; (8001f0c <calcsin+0xd4>)
 8001eba:	f7fe fb95 	bl	80005e8 <__aeabi_dmul>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	4620      	mov	r0, r4
 8001ec4:	4629      	mov	r1, r5
 8001ec6:	f7fe fb8f 	bl	80005e8 <__aeabi_dmul>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	460b      	mov	r3, r1
 8001ece:	4610      	mov	r0, r2
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	f7fe fe4b 	bl	8000b6c <__aeabi_d2uiz>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	490d      	ldr	r1, [pc, #52]	; (8001f10 <calcsin+0xd8>)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i=0; i<N_SAMPLES; i++)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2b63      	cmp	r3, #99	; 0x63
 8001eea:	ddac      	ble.n	8001e46 <calcsin+0xe>
    }
}
 8001eec:	bf00      	nop
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	4d12d84a 	.word	0x4d12d84a
 8001efc:	400921fb 	.word	0x400921fb
 8001f00:	437f0000 	.word	0x437f0000
 8001f04:	40590000 	.word	0x40590000
 8001f08:	3ff00000 	.word	0x3ff00000
 8001f0c:	40a00000 	.word	0x40a00000
 8001f10:	20000290 	.word	0x20000290

08001f14 <calcsaw>:

void calcsaw (unsigned int amplitude)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
    for (int j=0; j<N_SAMPLES; j++)
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	e022      	b.n	8001f68 <calcsaw+0x54>
    {
        saw_val[j] = ((float)amplitude/255)*((float)j/N_SAMPLES)*(4096);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	ee07 3a90 	vmov	s15, r3
 8001f28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f2c:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001f7c <calcsaw+0x68>
 8001f30:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	ee07 3a90 	vmov	s15, r3
 8001f3a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f3e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8001f80 <calcsaw+0x6c>
 8001f42:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f4a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8001f84 <calcsaw+0x70>
 8001f4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f56:	ee17 1a90 	vmov	r1, s15
 8001f5a:	4a0b      	ldr	r2, [pc, #44]	; (8001f88 <calcsaw+0x74>)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int j=0; j<N_SAMPLES; j++)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	3301      	adds	r3, #1
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2b63      	cmp	r3, #99	; 0x63
 8001f6c:	ddd9      	ble.n	8001f22 <calcsaw+0xe>
    }
}
 8001f6e:	bf00      	nop
 8001f70:	bf00      	nop
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	437f0000 	.word	0x437f0000
 8001f80:	42c80000 	.word	0x42c80000
 8001f84:	45800000 	.word	0x45800000
 8001f88:	20000420 	.word	0x20000420

08001f8c <calctri>:

void calctri (unsigned int amplitude)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
    for (int k=0; k<N_SAMPLES/2; k++)
 8001f94:	2300      	movs	r3, #0
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	e022      	b.n	8001fe0 <calctri+0x54>
    {
        tri_val[k] = ((float)amplitude/255)*((float)k/(N_SAMPLES/2))*(4095);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	ee07 3a90 	vmov	s15, r3
 8001fa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fa4:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8002050 <calctri+0xc4>
 8001fa8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	ee07 3a90 	vmov	s15, r3
 8001fb2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001fb6:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8002054 <calctri+0xc8>
 8001fba:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fc2:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002058 <calctri+0xcc>
 8001fc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001fce:	ee17 1a90 	vmov	r1, s15
 8001fd2:	4a22      	ldr	r2, [pc, #136]	; (800205c <calctri+0xd0>)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int k=0; k<N_SAMPLES/2; k++)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2b31      	cmp	r3, #49	; 0x31
 8001fe4:	ddd9      	ble.n	8001f9a <calctri+0xe>
    }
    for (int k=N_SAMPLES/2; k<N_SAMPLES; k++)
 8001fe6:	2332      	movs	r3, #50	; 0x32
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	e027      	b.n	800203c <calctri+0xb0>
    {
        tri_val[k] = ((float)amplitude/255)*(1-((float)(k-(N_SAMPLES/2)))/(N_SAMPLES/2))*(4095);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	ee07 3a90 	vmov	s15, r3
 8001ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ff6:	eddf 6a16 	vldr	s13, [pc, #88]	; 8002050 <calctri+0xc4>
 8001ffa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	3b32      	subs	r3, #50	; 0x32
 8002002:	ee07 3a90 	vmov	s15, r3
 8002006:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800200a:	ed9f 6a12 	vldr	s12, [pc, #72]	; 8002054 <calctri+0xc8>
 800200e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002012:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002016:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800201a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002058 <calctri+0xcc>
 8002022:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002026:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800202a:	ee17 1a90 	vmov	r1, s15
 800202e:	4a0b      	ldr	r2, [pc, #44]	; (800205c <calctri+0xd0>)
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int k=N_SAMPLES/2; k<N_SAMPLES; k++)
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	3301      	adds	r3, #1
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	2b63      	cmp	r3, #99	; 0x63
 8002040:	ddd4      	ble.n	8001fec <calctri+0x60>
    }
}
 8002042:	bf00      	nop
 8002044:	bf00      	nop
 8002046:	3714      	adds	r7, #20
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	437f0000 	.word	0x437f0000
 8002054:	42480000 	.word	0x42480000
 8002058:	457ff000 	.word	0x457ff000
 800205c:	200005b0 	.word	0x200005b0

08002060 <calcsquare>:

void calcsquare (unsigned int amplitude)
{
 8002060:	b480      	push	{r7}
 8002062:	b085      	sub	sp, #20
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
    for (int h=0; h<N_SAMPLES/2; h++)
 8002068:	2300      	movs	r3, #0
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	e017      	b.n	800209e <calcsquare+0x3e>
    {
        square_val[h] = ((float)amplitude/255)*4095;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	ee07 3a90 	vmov	s15, r3
 8002074:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002078:	eddf 6a15 	vldr	s13, [pc, #84]	; 80020d0 <calcsquare+0x70>
 800207c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002080:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80020d4 <calcsquare+0x74>
 8002084:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002088:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800208c:	ee17 1a90 	vmov	r1, s15
 8002090:	4a11      	ldr	r2, [pc, #68]	; (80020d8 <calcsquare+0x78>)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int h=0; h<N_SAMPLES/2; h++)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	3301      	adds	r3, #1
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2b31      	cmp	r3, #49	; 0x31
 80020a2:	dde4      	ble.n	800206e <calcsquare+0xe>
    }
    for (int h=N_SAMPLES/2; h<N_SAMPLES; h++)
 80020a4:	2332      	movs	r3, #50	; 0x32
 80020a6:	60bb      	str	r3, [r7, #8]
 80020a8:	e007      	b.n	80020ba <calcsquare+0x5a>
    {
        square_val[h] = 0;
 80020aa:	4a0b      	ldr	r2, [pc, #44]	; (80020d8 <calcsquare+0x78>)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	2100      	movs	r1, #0
 80020b0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int h=N_SAMPLES/2; h<N_SAMPLES; h++)
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	3301      	adds	r3, #1
 80020b8:	60bb      	str	r3, [r7, #8]
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	2b63      	cmp	r3, #99	; 0x63
 80020be:	ddf4      	ble.n	80020aa <calcsquare+0x4a>
    }
}
 80020c0:	bf00      	nop
 80020c2:	bf00      	nop
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	437f0000 	.word	0x437f0000
 80020d4:	457ff000 	.word	0x457ff000
 80020d8:	20000740 	.word	0x20000740

080020dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002114 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020e0:	480d      	ldr	r0, [pc, #52]	; (8002118 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020e2:	490e      	ldr	r1, [pc, #56]	; (800211c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020e4:	4a0e      	ldr	r2, [pc, #56]	; (8002120 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020e8:	e002      	b.n	80020f0 <LoopCopyDataInit>

080020ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ee:	3304      	adds	r3, #4

080020f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020f4:	d3f9      	bcc.n	80020ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020f6:	4a0b      	ldr	r2, [pc, #44]	; (8002124 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020f8:	4c0b      	ldr	r4, [pc, #44]	; (8002128 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020fc:	e001      	b.n	8002102 <LoopFillZerobss>

080020fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002100:	3204      	adds	r2, #4

08002102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002102:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002104:	d3fb      	bcc.n	80020fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002106:	f7ff fde9 	bl	8001cdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800210a:	f004 f909 	bl	8006320 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800210e:	f7fe ff7f 	bl	8001010 <main>
  bx  lr    
 8002112:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002114:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002118:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800211c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002120:	080088b0 	.word	0x080088b0
  ldr r2, =_sbss
 8002124:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002128:	200008e4 	.word	0x200008e4

0800212c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800212c:	e7fe      	b.n	800212c <ADC_IRQHandler>
	...

08002130 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002134:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <HAL_Init+0x40>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a0d      	ldr	r2, [pc, #52]	; (8002170 <HAL_Init+0x40>)
 800213a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800213e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <HAL_Init+0x40>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a0a      	ldr	r2, [pc, #40]	; (8002170 <HAL_Init+0x40>)
 8002146:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800214a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800214c:	4b08      	ldr	r3, [pc, #32]	; (8002170 <HAL_Init+0x40>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a07      	ldr	r2, [pc, #28]	; (8002170 <HAL_Init+0x40>)
 8002152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002156:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002158:	2003      	movs	r0, #3
 800215a:	f000 f94f 	bl	80023fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800215e:	200f      	movs	r0, #15
 8002160:	f000 f808 	bl	8002174 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002164:	f7ff fa9a 	bl	800169c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40023c00 	.word	0x40023c00

08002174 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800217c:	4b12      	ldr	r3, [pc, #72]	; (80021c8 <HAL_InitTick+0x54>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	4b12      	ldr	r3, [pc, #72]	; (80021cc <HAL_InitTick+0x58>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	4619      	mov	r1, r3
 8002186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800218a:	fbb3 f3f1 	udiv	r3, r3, r1
 800218e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002192:	4618      	mov	r0, r3
 8002194:	f000 f967 	bl	8002466 <HAL_SYSTICK_Config>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e00e      	b.n	80021c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2b0f      	cmp	r3, #15
 80021a6:	d80a      	bhi.n	80021be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021a8:	2200      	movs	r2, #0
 80021aa:	6879      	ldr	r1, [r7, #4]
 80021ac:	f04f 30ff 	mov.w	r0, #4294967295
 80021b0:	f000 f92f 	bl	8002412 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021b4:	4a06      	ldr	r2, [pc, #24]	; (80021d0 <HAL_InitTick+0x5c>)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
 80021bc:	e000      	b.n	80021c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	20000000 	.word	0x20000000
 80021cc:	20000010 	.word	0x20000010
 80021d0:	2000000c 	.word	0x2000000c

080021d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021d8:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <HAL_IncTick+0x20>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	461a      	mov	r2, r3
 80021de:	4b06      	ldr	r3, [pc, #24]	; (80021f8 <HAL_IncTick+0x24>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4413      	add	r3, r2
 80021e4:	4a04      	ldr	r2, [pc, #16]	; (80021f8 <HAL_IncTick+0x24>)
 80021e6:	6013      	str	r3, [r2, #0]
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	20000010 	.word	0x20000010
 80021f8:	200008d0 	.word	0x200008d0

080021fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002200:	4b03      	ldr	r3, [pc, #12]	; (8002210 <HAL_GetTick+0x14>)
 8002202:	681b      	ldr	r3, [r3, #0]
}
 8002204:	4618      	mov	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	200008d0 	.word	0x200008d0

08002214 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800221c:	f7ff ffee 	bl	80021fc <HAL_GetTick>
 8002220:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800222c:	d005      	beq.n	800223a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800222e:	4b0a      	ldr	r3, [pc, #40]	; (8002258 <HAL_Delay+0x44>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	461a      	mov	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	4413      	add	r3, r2
 8002238:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800223a:	bf00      	nop
 800223c:	f7ff ffde 	bl	80021fc <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	68fa      	ldr	r2, [r7, #12]
 8002248:	429a      	cmp	r2, r3
 800224a:	d8f7      	bhi.n	800223c <HAL_Delay+0x28>
  {
  }
}
 800224c:	bf00      	nop
 800224e:	bf00      	nop
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000010 	.word	0x20000010

0800225c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800226c:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <__NVIC_SetPriorityGrouping+0x44>)
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002278:	4013      	ands	r3, r2
 800227a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002284:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800228c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800228e:	4a04      	ldr	r2, [pc, #16]	; (80022a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	60d3      	str	r3, [r2, #12]
}
 8002294:	bf00      	nop
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr
 80022a0:	e000ed00 	.word	0xe000ed00

080022a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022a8:	4b04      	ldr	r3, [pc, #16]	; (80022bc <__NVIC_GetPriorityGrouping+0x18>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	0a1b      	lsrs	r3, r3, #8
 80022ae:	f003 0307 	and.w	r3, r3, #7
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4603      	mov	r3, r0
 80022c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	db0b      	blt.n	80022ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022d2:	79fb      	ldrb	r3, [r7, #7]
 80022d4:	f003 021f 	and.w	r2, r3, #31
 80022d8:	4907      	ldr	r1, [pc, #28]	; (80022f8 <__NVIC_EnableIRQ+0x38>)
 80022da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022de:	095b      	lsrs	r3, r3, #5
 80022e0:	2001      	movs	r0, #1
 80022e2:	fa00 f202 	lsl.w	r2, r0, r2
 80022e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	e000e100 	.word	0xe000e100

080022fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	6039      	str	r1, [r7, #0]
 8002306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230c:	2b00      	cmp	r3, #0
 800230e:	db0a      	blt.n	8002326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	b2da      	uxtb	r2, r3
 8002314:	490c      	ldr	r1, [pc, #48]	; (8002348 <__NVIC_SetPriority+0x4c>)
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	0112      	lsls	r2, r2, #4
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	440b      	add	r3, r1
 8002320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002324:	e00a      	b.n	800233c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	b2da      	uxtb	r2, r3
 800232a:	4908      	ldr	r1, [pc, #32]	; (800234c <__NVIC_SetPriority+0x50>)
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	3b04      	subs	r3, #4
 8002334:	0112      	lsls	r2, r2, #4
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	440b      	add	r3, r1
 800233a:	761a      	strb	r2, [r3, #24]
}
 800233c:	bf00      	nop
 800233e:	370c      	adds	r7, #12
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr
 8002348:	e000e100 	.word	0xe000e100
 800234c:	e000ed00 	.word	0xe000ed00

08002350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002350:	b480      	push	{r7}
 8002352:	b089      	sub	sp, #36	; 0x24
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	f1c3 0307 	rsb	r3, r3, #7
 800236a:	2b04      	cmp	r3, #4
 800236c:	bf28      	it	cs
 800236e:	2304      	movcs	r3, #4
 8002370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	3304      	adds	r3, #4
 8002376:	2b06      	cmp	r3, #6
 8002378:	d902      	bls.n	8002380 <NVIC_EncodePriority+0x30>
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	3b03      	subs	r3, #3
 800237e:	e000      	b.n	8002382 <NVIC_EncodePriority+0x32>
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002384:	f04f 32ff 	mov.w	r2, #4294967295
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43da      	mvns	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	401a      	ands	r2, r3
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002398:	f04f 31ff 	mov.w	r1, #4294967295
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	fa01 f303 	lsl.w	r3, r1, r3
 80023a2:	43d9      	mvns	r1, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a8:	4313      	orrs	r3, r2
         );
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3724      	adds	r7, #36	; 0x24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
	...

080023b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023c8:	d301      	bcc.n	80023ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ca:	2301      	movs	r3, #1
 80023cc:	e00f      	b.n	80023ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ce:	4a0a      	ldr	r2, [pc, #40]	; (80023f8 <SysTick_Config+0x40>)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023d6:	210f      	movs	r1, #15
 80023d8:	f04f 30ff 	mov.w	r0, #4294967295
 80023dc:	f7ff ff8e 	bl	80022fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e0:	4b05      	ldr	r3, [pc, #20]	; (80023f8 <SysTick_Config+0x40>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023e6:	4b04      	ldr	r3, [pc, #16]	; (80023f8 <SysTick_Config+0x40>)
 80023e8:	2207      	movs	r2, #7
 80023ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	e000e010 	.word	0xe000e010

080023fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7ff ff29 	bl	800225c <__NVIC_SetPriorityGrouping>
}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002412:	b580      	push	{r7, lr}
 8002414:	b086      	sub	sp, #24
 8002416:	af00      	add	r7, sp, #0
 8002418:	4603      	mov	r3, r0
 800241a:	60b9      	str	r1, [r7, #8]
 800241c:	607a      	str	r2, [r7, #4]
 800241e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002424:	f7ff ff3e 	bl	80022a4 <__NVIC_GetPriorityGrouping>
 8002428:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	68b9      	ldr	r1, [r7, #8]
 800242e:	6978      	ldr	r0, [r7, #20]
 8002430:	f7ff ff8e 	bl	8002350 <NVIC_EncodePriority>
 8002434:	4602      	mov	r2, r0
 8002436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800243a:	4611      	mov	r1, r2
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff ff5d 	bl	80022fc <__NVIC_SetPriority>
}
 8002442:	bf00      	nop
 8002444:	3718      	adds	r7, #24
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	4603      	mov	r3, r0
 8002452:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff ff31 	bl	80022c0 <__NVIC_EnableIRQ>
}
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f7ff ffa2 	bl	80023b8 <SysTick_Config>
 8002474:	4603      	mov	r3, r0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e014      	b.n	80024ba <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	791b      	ldrb	r3, [r3, #4]
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d105      	bne.n	80024a6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7ff f929 	bl	80016f8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2202      	movs	r2, #2
 80024aa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2201      	movs	r2, #1
 80024b6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
 80024d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024d2:	2300      	movs	r3, #0
 80024d4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 80024d6:	2300      	movs	r3, #0
 80024d8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	795b      	ldrb	r3, [r3, #5]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d101      	bne.n	80024e6 <HAL_DAC_Start_DMA+0x22>
 80024e2:	2302      	movs	r3, #2
 80024e4:	e0ab      	b.n	800263e <HAL_DAC_Start_DMA+0x17a>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2201      	movs	r2, #1
 80024ea:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2202      	movs	r2, #2
 80024f0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d12f      	bne.n	8002558 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	4a52      	ldr	r2, [pc, #328]	; (8002648 <HAL_DAC_Start_DMA+0x184>)
 80024fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	4a51      	ldr	r2, [pc, #324]	; (800264c <HAL_DAC_Start_DMA+0x188>)
 8002506:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	4a50      	ldr	r2, [pc, #320]	; (8002650 <HAL_DAC_Start_DMA+0x18c>)
 800250e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800251e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8002520:	6a3b      	ldr	r3, [r7, #32]
 8002522:	2b08      	cmp	r3, #8
 8002524:	d013      	beq.n	800254e <HAL_DAC_Start_DMA+0x8a>
 8002526:	6a3b      	ldr	r3, [r7, #32]
 8002528:	2b08      	cmp	r3, #8
 800252a:	d845      	bhi.n	80025b8 <HAL_DAC_Start_DMA+0xf4>
 800252c:	6a3b      	ldr	r3, [r7, #32]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_DAC_Start_DMA+0x76>
 8002532:	6a3b      	ldr	r3, [r7, #32]
 8002534:	2b04      	cmp	r3, #4
 8002536:	d005      	beq.n	8002544 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002538:	e03e      	b.n	80025b8 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	3308      	adds	r3, #8
 8002540:	613b      	str	r3, [r7, #16]
        break;
 8002542:	e03c      	b.n	80025be <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	330c      	adds	r3, #12
 800254a:	613b      	str	r3, [r7, #16]
        break;
 800254c:	e037      	b.n	80025be <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	3310      	adds	r3, #16
 8002554:	613b      	str	r3, [r7, #16]
        break;
 8002556:	e032      	b.n	80025be <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	4a3d      	ldr	r2, [pc, #244]	; (8002654 <HAL_DAC_Start_DMA+0x190>)
 800255e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	4a3c      	ldr	r2, [pc, #240]	; (8002658 <HAL_DAC_Start_DMA+0x194>)
 8002566:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	4a3b      	ldr	r2, [pc, #236]	; (800265c <HAL_DAC_Start_DMA+0x198>)
 800256e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800257e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8002580:	6a3b      	ldr	r3, [r7, #32]
 8002582:	2b08      	cmp	r3, #8
 8002584:	d013      	beq.n	80025ae <HAL_DAC_Start_DMA+0xea>
 8002586:	6a3b      	ldr	r3, [r7, #32]
 8002588:	2b08      	cmp	r3, #8
 800258a:	d817      	bhi.n	80025bc <HAL_DAC_Start_DMA+0xf8>
 800258c:	6a3b      	ldr	r3, [r7, #32]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_DAC_Start_DMA+0xd6>
 8002592:	6a3b      	ldr	r3, [r7, #32]
 8002594:	2b04      	cmp	r3, #4
 8002596:	d005      	beq.n	80025a4 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002598:	e010      	b.n	80025bc <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	3314      	adds	r3, #20
 80025a0:	613b      	str	r3, [r7, #16]
        break;
 80025a2:	e00c      	b.n	80025be <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	3318      	adds	r3, #24
 80025aa:	613b      	str	r3, [r7, #16]
        break;
 80025ac:	e007      	b.n	80025be <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	331c      	adds	r3, #28
 80025b4:	613b      	str	r3, [r7, #16]
        break;
 80025b6:	e002      	b.n	80025be <HAL_DAC_Start_DMA+0xfa>
        break;
 80025b8:	bf00      	nop
 80025ba:	e000      	b.n	80025be <HAL_DAC_Start_DMA+0xfa>
        break;
 80025bc:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d111      	bne.n	80025e8 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025d2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6898      	ldr	r0, [r3, #8]
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	f000 fa2d 	bl	8002a3c <HAL_DMA_Start_IT>
 80025e2:	4603      	mov	r3, r0
 80025e4:	75fb      	strb	r3, [r7, #23]
 80025e6:	e010      	b.n	800260a <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80025f6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	68d8      	ldr	r0, [r3, #12]
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	693a      	ldr	r2, [r7, #16]
 8002602:	f000 fa1b 	bl	8002a3c <HAL_DMA_Start_IT>
 8002606:	4603      	mov	r3, r0
 8002608:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8002610:	7dfb      	ldrb	r3, [r7, #23]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10c      	bne.n	8002630 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	6819      	ldr	r1, [r3, #0]
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	f003 0310 	and.w	r3, r3, #16
 8002622:	2201      	movs	r2, #1
 8002624:	409a      	lsls	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	601a      	str	r2, [r3, #0]
 800262e:	e005      	b.n	800263c <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	f043 0204 	orr.w	r2, r3, #4
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800263c:	7dfb      	ldrb	r3, [r7, #23]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	080027cb 	.word	0x080027cb
 800264c:	080027ed 	.word	0x080027ed
 8002650:	08002809 	.word	0x08002809
 8002654:	08002873 	.word	0x08002873
 8002658:	08002895 	.word	0x08002895
 800265c:	080028b1 	.word	0x080028b1

08002660 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b082      	sub	sp, #8
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6819      	ldr	r1, [r3, #0]
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	f003 0310 	and.w	r3, r3, #16
 8002676:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43da      	mvns	r2, r3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	400a      	ands	r2, r1
 8002686:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6819      	ldr	r1, [r3, #0]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	f003 0310 	and.w	r3, r3, #16
 8002694:	2201      	movs	r2, #1
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43da      	mvns	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	400a      	ands	r2, r1
 80026a2:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10d      	bne.n	80026c6 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f000 fa1c 	bl	8002aec <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	e00c      	b.n	80026e0 <HAL_DAC_Stop_DMA+0x80>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 fa0e 	bl	8002aec <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80026de:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3708      	adds	r7, #8
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800272c:	b480      	push	{r7}
 800272e:	b087      	sub	sp, #28
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	795b      	ldrb	r3, [r3, #5]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d101      	bne.n	8002744 <HAL_DAC_ConfigChannel+0x18>
 8002740:	2302      	movs	r3, #2
 8002742:	e03c      	b.n	80027be <HAL_DAC_ConfigChannel+0x92>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	2201      	movs	r2, #1
 8002748:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2202      	movs	r2, #2
 800274e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f003 0310 	and.w	r3, r3, #16
 800275e:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	43db      	mvns	r3, r3
 8002768:	697a      	ldr	r2, [r7, #20]
 800276a:	4013      	ands	r3, r2
 800276c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	4313      	orrs	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f003 0310 	and.w	r3, r3, #16
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	fa02 f303 	lsl.w	r3, r2, r3
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	4313      	orrs	r3, r2
 800278a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6819      	ldr	r1, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f003 0310 	and.w	r3, r3, #16
 80027a0:	22c0      	movs	r2, #192	; 0xc0
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43da      	mvns	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	400a      	ands	r2, r1
 80027ae:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2201      	movs	r2, #1
 80027b4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	371c      	adds	r7, #28
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b084      	sub	sp, #16
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d6:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f7ff ff89 	bl	80026f0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2201      	movs	r2, #1
 80027e2:	711a      	strb	r2, [r3, #4]
}
 80027e4:	bf00      	nop
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}

080027ec <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f7ff ff82 	bl	8002704 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002800:	bf00      	nop
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002814:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	691b      	ldr	r3, [r3, #16]
 800281a:	f043 0204 	orr.w	r2, r3, #4
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f7ff ff78 	bl	8002718 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2201      	movs	r2, #1
 800282c:	711a      	strb	r2, [r3, #4]
}
 800282e:	bf00      	nop
 8002830:	3710      	adds	r7, #16
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr

0800285e <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002872:	b580      	push	{r7, lr}
 8002874:	b084      	sub	sp, #16
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8002880:	68f8      	ldr	r0, [r7, #12]
 8002882:	f7ff ffd8 	bl	8002836 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2201      	movs	r2, #1
 800288a:	711a      	strb	r2, [r3, #4]
}
 800288c:	bf00      	nop
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a0:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f7ff ffd1 	bl	800284a <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80028a8:	bf00      	nop
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028bc:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	f043 0204 	orr.w	r2, r3, #4
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f7ff ffc7 	bl	800285e <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2201      	movs	r2, #1
 80028d4:	711a      	strb	r2, [r3, #4]
}
 80028d6:	bf00      	nop
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
	...

080028e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80028ec:	f7ff fc86 	bl	80021fc <HAL_GetTick>
 80028f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e099      	b.n	8002a30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2202      	movs	r2, #2
 8002900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 0201 	bic.w	r2, r2, #1
 800291a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800291c:	e00f      	b.n	800293e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800291e:	f7ff fc6d 	bl	80021fc <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b05      	cmp	r3, #5
 800292a:	d908      	bls.n	800293e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2220      	movs	r2, #32
 8002930:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2203      	movs	r2, #3
 8002936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e078      	b.n	8002a30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1e8      	bne.n	800291e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	4b38      	ldr	r3, [pc, #224]	; (8002a38 <HAL_DMA_Init+0x158>)
 8002958:	4013      	ands	r3, r2
 800295a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800296a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002976:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002982:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	4313      	orrs	r3, r2
 800298e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	2b04      	cmp	r3, #4
 8002996:	d107      	bne.n	80029a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a0:	4313      	orrs	r3, r2
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	697a      	ldr	r2, [r7, #20]
 80029ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	f023 0307 	bic.w	r3, r3, #7
 80029be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d117      	bne.n	8002a02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	4313      	orrs	r3, r2
 80029da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00e      	beq.n	8002a02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 fb01 	bl	8002fec <DMA_CheckFifoParam>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d008      	beq.n	8002a02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2240      	movs	r2, #64	; 0x40
 80029f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80029fe:	2301      	movs	r3, #1
 8002a00:	e016      	b.n	8002a30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	697a      	ldr	r2, [r7, #20]
 8002a08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 fab8 	bl	8002f80 <DMA_CalcBaseAndBitshift>
 8002a10:	4603      	mov	r3, r0
 8002a12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a18:	223f      	movs	r2, #63	; 0x3f
 8002a1a:	409a      	lsls	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a2e:	2300      	movs	r3, #0
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3718      	adds	r7, #24
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	f010803f 	.word	0xf010803f

08002a3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b086      	sub	sp, #24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
 8002a48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a52:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d101      	bne.n	8002a62 <HAL_DMA_Start_IT+0x26>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	e040      	b.n	8002ae4 <HAL_DMA_Start_IT+0xa8>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d12f      	bne.n	8002ad6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	2202      	movs	r2, #2
 8002a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	68b9      	ldr	r1, [r7, #8]
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 fa4a 	bl	8002f24 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a94:	223f      	movs	r2, #63	; 0x3f
 8002a96:	409a      	lsls	r2, r3
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f042 0216 	orr.w	r2, r2, #22
 8002aaa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d007      	beq.n	8002ac4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f042 0208 	orr.w	r2, r2, #8
 8002ac2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 0201 	orr.w	r2, r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	e005      	b.n	8002ae2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002ade:	2302      	movs	r3, #2
 8002ae0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3718      	adds	r7, #24
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}

08002aec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002afa:	f7ff fb7f 	bl	80021fc <HAL_GetTick>
 8002afe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d008      	beq.n	8002b1e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2280      	movs	r2, #128	; 0x80
 8002b10:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e052      	b.n	8002bc4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0216 	bic.w	r2, r2, #22
 8002b2c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	695a      	ldr	r2, [r3, #20]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b3c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d103      	bne.n	8002b4e <HAL_DMA_Abort+0x62>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d007      	beq.n	8002b5e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0208 	bic.w	r2, r2, #8
 8002b5c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0201 	bic.w	r2, r2, #1
 8002b6c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b6e:	e013      	b.n	8002b98 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b70:	f7ff fb44 	bl	80021fc <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b05      	cmp	r3, #5
 8002b7c:	d90c      	bls.n	8002b98 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2220      	movs	r2, #32
 8002b82:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2203      	movs	r2, #3
 8002b88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e015      	b.n	8002bc4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1e4      	bne.n	8002b70 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002baa:	223f      	movs	r2, #63	; 0x3f
 8002bac:	409a      	lsls	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d004      	beq.n	8002bea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2280      	movs	r2, #128	; 0x80
 8002be4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e00c      	b.n	8002c04 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2205      	movs	r2, #5
 8002bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 0201 	bic.w	r2, r2, #1
 8002c00:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c1c:	4b8e      	ldr	r3, [pc, #568]	; (8002e58 <HAL_DMA_IRQHandler+0x248>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a8e      	ldr	r2, [pc, #568]	; (8002e5c <HAL_DMA_IRQHandler+0x24c>)
 8002c22:	fba2 2303 	umull	r2, r3, r2, r3
 8002c26:	0a9b      	lsrs	r3, r3, #10
 8002c28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c3a:	2208      	movs	r2, #8
 8002c3c:	409a      	lsls	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	4013      	ands	r3, r2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d01a      	beq.n	8002c7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d013      	beq.n	8002c7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 0204 	bic.w	r2, r2, #4
 8002c62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c68:	2208      	movs	r2, #8
 8002c6a:	409a      	lsls	r2, r3
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c74:	f043 0201 	orr.w	r2, r3, #1
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c80:	2201      	movs	r2, #1
 8002c82:	409a      	lsls	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4013      	ands	r3, r2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d012      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	695b      	ldr	r3, [r3, #20]
 8002c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00b      	beq.n	8002cb2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	409a      	lsls	r2, r3
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002caa:	f043 0202 	orr.w	r2, r3, #2
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb6:	2204      	movs	r2, #4
 8002cb8:	409a      	lsls	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d012      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0302 	and.w	r3, r3, #2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00b      	beq.n	8002ce8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd4:	2204      	movs	r2, #4
 8002cd6:	409a      	lsls	r2, r3
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ce0:	f043 0204 	orr.w	r2, r3, #4
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cec:	2210      	movs	r2, #16
 8002cee:	409a      	lsls	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d043      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0308 	and.w	r3, r3, #8
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d03c      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0a:	2210      	movs	r2, #16
 8002d0c:	409a      	lsls	r2, r3
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d018      	beq.n	8002d52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d108      	bne.n	8002d40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d024      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	4798      	blx	r3
 8002d3e:	e01f      	b.n	8002d80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d01b      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	4798      	blx	r3
 8002d50:	e016      	b.n	8002d80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d107      	bne.n	8002d70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0208 	bic.w	r2, r2, #8
 8002d6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d003      	beq.n	8002d80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d84:	2220      	movs	r2, #32
 8002d86:	409a      	lsls	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 808f 	beq.w	8002eb0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0310 	and.w	r3, r3, #16
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 8087 	beq.w	8002eb0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da6:	2220      	movs	r2, #32
 8002da8:	409a      	lsls	r2, r3
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	2b05      	cmp	r3, #5
 8002db8:	d136      	bne.n	8002e28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0216 	bic.w	r2, r2, #22
 8002dc8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	695a      	ldr	r2, [r3, #20]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002dd8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d103      	bne.n	8002dea <HAL_DMA_IRQHandler+0x1da>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d007      	beq.n	8002dfa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0208 	bic.w	r2, r2, #8
 8002df8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dfe:	223f      	movs	r2, #63	; 0x3f
 8002e00:	409a      	lsls	r2, r3
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2200      	movs	r2, #0
 8002e12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d07e      	beq.n	8002f1c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	4798      	blx	r3
        }
        return;
 8002e26:	e079      	b.n	8002f1c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d01d      	beq.n	8002e72 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10d      	bne.n	8002e60 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d031      	beq.n	8002eb0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	4798      	blx	r3
 8002e54:	e02c      	b.n	8002eb0 <HAL_DMA_IRQHandler+0x2a0>
 8002e56:	bf00      	nop
 8002e58:	20000000 	.word	0x20000000
 8002e5c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d023      	beq.n	8002eb0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	4798      	blx	r3
 8002e70:	e01e      	b.n	8002eb0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d10f      	bne.n	8002ea0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f022 0210 	bic.w	r2, r2, #16
 8002e8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d003      	beq.n	8002eb0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d032      	beq.n	8002f1e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d022      	beq.n	8002f0a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2205      	movs	r2, #5
 8002ec8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 0201 	bic.w	r2, r2, #1
 8002eda:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	3301      	adds	r3, #1
 8002ee0:	60bb      	str	r3, [r7, #8]
 8002ee2:	697a      	ldr	r2, [r7, #20]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d307      	bcc.n	8002ef8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f2      	bne.n	8002edc <HAL_DMA_IRQHandler+0x2cc>
 8002ef6:	e000      	b.n	8002efa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ef8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d005      	beq.n	8002f1e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	4798      	blx	r3
 8002f1a:	e000      	b.n	8002f1e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f1c:	bf00      	nop
    }
  }
}
 8002f1e:	3718      	adds	r7, #24
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
 8002f30:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f40:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	2b40      	cmp	r3, #64	; 0x40
 8002f50:	d108      	bne.n	8002f64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f62:	e007      	b.n	8002f74 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	60da      	str	r2, [r3, #12]
}
 8002f74:	bf00      	nop
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	3b10      	subs	r3, #16
 8002f90:	4a14      	ldr	r2, [pc, #80]	; (8002fe4 <DMA_CalcBaseAndBitshift+0x64>)
 8002f92:	fba2 2303 	umull	r2, r3, r2, r3
 8002f96:	091b      	lsrs	r3, r3, #4
 8002f98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f9a:	4a13      	ldr	r2, [pc, #76]	; (8002fe8 <DMA_CalcBaseAndBitshift+0x68>)
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2b03      	cmp	r3, #3
 8002fac:	d909      	bls.n	8002fc2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002fb6:	f023 0303 	bic.w	r3, r3, #3
 8002fba:	1d1a      	adds	r2, r3, #4
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	659a      	str	r2, [r3, #88]	; 0x58
 8002fc0:	e007      	b.n	8002fd2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002fca:	f023 0303 	bic.w	r3, r3, #3
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	aaaaaaab 	.word	0xaaaaaaab
 8002fe8:	08008578 	.word	0x08008578

08002fec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d11f      	bne.n	8003046 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	2b03      	cmp	r3, #3
 800300a:	d856      	bhi.n	80030ba <DMA_CheckFifoParam+0xce>
 800300c:	a201      	add	r2, pc, #4	; (adr r2, 8003014 <DMA_CheckFifoParam+0x28>)
 800300e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003012:	bf00      	nop
 8003014:	08003025 	.word	0x08003025
 8003018:	08003037 	.word	0x08003037
 800301c:	08003025 	.word	0x08003025
 8003020:	080030bb 	.word	0x080030bb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003028:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d046      	beq.n	80030be <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003034:	e043      	b.n	80030be <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800303e:	d140      	bne.n	80030c2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003044:	e03d      	b.n	80030c2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800304e:	d121      	bne.n	8003094 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	2b03      	cmp	r3, #3
 8003054:	d837      	bhi.n	80030c6 <DMA_CheckFifoParam+0xda>
 8003056:	a201      	add	r2, pc, #4	; (adr r2, 800305c <DMA_CheckFifoParam+0x70>)
 8003058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305c:	0800306d 	.word	0x0800306d
 8003060:	08003073 	.word	0x08003073
 8003064:	0800306d 	.word	0x0800306d
 8003068:	08003085 	.word	0x08003085
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	73fb      	strb	r3, [r7, #15]
      break;
 8003070:	e030      	b.n	80030d4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003076:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d025      	beq.n	80030ca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003082:	e022      	b.n	80030ca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003088:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800308c:	d11f      	bne.n	80030ce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003092:	e01c      	b.n	80030ce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	2b02      	cmp	r3, #2
 8003098:	d903      	bls.n	80030a2 <DMA_CheckFifoParam+0xb6>
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	2b03      	cmp	r3, #3
 800309e:	d003      	beq.n	80030a8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030a0:	e018      	b.n	80030d4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	73fb      	strb	r3, [r7, #15]
      break;
 80030a6:	e015      	b.n	80030d4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00e      	beq.n	80030d2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	73fb      	strb	r3, [r7, #15]
      break;
 80030b8:	e00b      	b.n	80030d2 <DMA_CheckFifoParam+0xe6>
      break;
 80030ba:	bf00      	nop
 80030bc:	e00a      	b.n	80030d4 <DMA_CheckFifoParam+0xe8>
      break;
 80030be:	bf00      	nop
 80030c0:	e008      	b.n	80030d4 <DMA_CheckFifoParam+0xe8>
      break;
 80030c2:	bf00      	nop
 80030c4:	e006      	b.n	80030d4 <DMA_CheckFifoParam+0xe8>
      break;
 80030c6:	bf00      	nop
 80030c8:	e004      	b.n	80030d4 <DMA_CheckFifoParam+0xe8>
      break;
 80030ca:	bf00      	nop
 80030cc:	e002      	b.n	80030d4 <DMA_CheckFifoParam+0xe8>
      break;   
 80030ce:	bf00      	nop
 80030d0:	e000      	b.n	80030d4 <DMA_CheckFifoParam+0xe8>
      break;
 80030d2:	bf00      	nop
    }
  } 
  
  return status; 
 80030d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop

080030e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b089      	sub	sp, #36	; 0x24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030fa:	2300      	movs	r3, #0
 80030fc:	61fb      	str	r3, [r7, #28]
 80030fe:	e16b      	b.n	80033d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003100:	2201      	movs	r2, #1
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	4013      	ands	r3, r2
 8003112:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	429a      	cmp	r2, r3
 800311a:	f040 815a 	bne.w	80033d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	2b01      	cmp	r3, #1
 8003128:	d005      	beq.n	8003136 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003132:	2b02      	cmp	r3, #2
 8003134:	d130      	bne.n	8003198 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	2203      	movs	r2, #3
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43db      	mvns	r3, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4013      	ands	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	4313      	orrs	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800316c:	2201      	movs	r2, #1
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	43db      	mvns	r3, r3
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	4013      	ands	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	091b      	lsrs	r3, r3, #4
 8003182:	f003 0201 	and.w	r2, r3, #1
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	4313      	orrs	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	f003 0303 	and.w	r3, r3, #3
 80031a0:	2b03      	cmp	r3, #3
 80031a2:	d017      	beq.n	80031d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	2203      	movs	r2, #3
 80031b0:	fa02 f303 	lsl.w	r3, r2, r3
 80031b4:	43db      	mvns	r3, r3
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4013      	ands	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 0303 	and.w	r3, r3, #3
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d123      	bne.n	8003228 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	08da      	lsrs	r2, r3, #3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	3208      	adds	r2, #8
 80031e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	220f      	movs	r2, #15
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	43db      	mvns	r3, r3
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4013      	ands	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	691a      	ldr	r2, [r3, #16]
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4313      	orrs	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	08da      	lsrs	r2, r3, #3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	3208      	adds	r2, #8
 8003222:	69b9      	ldr	r1, [r7, #24]
 8003224:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	2203      	movs	r2, #3
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	43db      	mvns	r3, r3
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	4013      	ands	r3, r2
 800323e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f003 0203 	and.w	r2, r3, #3
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	4313      	orrs	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 80b4 	beq.w	80033d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	4b60      	ldr	r3, [pc, #384]	; (80033f0 <HAL_GPIO_Init+0x30c>)
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	4a5f      	ldr	r2, [pc, #380]	; (80033f0 <HAL_GPIO_Init+0x30c>)
 8003274:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003278:	6453      	str	r3, [r2, #68]	; 0x44
 800327a:	4b5d      	ldr	r3, [pc, #372]	; (80033f0 <HAL_GPIO_Init+0x30c>)
 800327c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003286:	4a5b      	ldr	r2, [pc, #364]	; (80033f4 <HAL_GPIO_Init+0x310>)
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	089b      	lsrs	r3, r3, #2
 800328c:	3302      	adds	r3, #2
 800328e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003292:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	f003 0303 	and.w	r3, r3, #3
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	220f      	movs	r2, #15
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	43db      	mvns	r3, r3
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	4013      	ands	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a52      	ldr	r2, [pc, #328]	; (80033f8 <HAL_GPIO_Init+0x314>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d02b      	beq.n	800330a <HAL_GPIO_Init+0x226>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a51      	ldr	r2, [pc, #324]	; (80033fc <HAL_GPIO_Init+0x318>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d025      	beq.n	8003306 <HAL_GPIO_Init+0x222>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a50      	ldr	r2, [pc, #320]	; (8003400 <HAL_GPIO_Init+0x31c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d01f      	beq.n	8003302 <HAL_GPIO_Init+0x21e>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a4f      	ldr	r2, [pc, #316]	; (8003404 <HAL_GPIO_Init+0x320>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d019      	beq.n	80032fe <HAL_GPIO_Init+0x21a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a4e      	ldr	r2, [pc, #312]	; (8003408 <HAL_GPIO_Init+0x324>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d013      	beq.n	80032fa <HAL_GPIO_Init+0x216>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a4d      	ldr	r2, [pc, #308]	; (800340c <HAL_GPIO_Init+0x328>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d00d      	beq.n	80032f6 <HAL_GPIO_Init+0x212>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a4c      	ldr	r2, [pc, #304]	; (8003410 <HAL_GPIO_Init+0x32c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d007      	beq.n	80032f2 <HAL_GPIO_Init+0x20e>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a4b      	ldr	r2, [pc, #300]	; (8003414 <HAL_GPIO_Init+0x330>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d101      	bne.n	80032ee <HAL_GPIO_Init+0x20a>
 80032ea:	2307      	movs	r3, #7
 80032ec:	e00e      	b.n	800330c <HAL_GPIO_Init+0x228>
 80032ee:	2308      	movs	r3, #8
 80032f0:	e00c      	b.n	800330c <HAL_GPIO_Init+0x228>
 80032f2:	2306      	movs	r3, #6
 80032f4:	e00a      	b.n	800330c <HAL_GPIO_Init+0x228>
 80032f6:	2305      	movs	r3, #5
 80032f8:	e008      	b.n	800330c <HAL_GPIO_Init+0x228>
 80032fa:	2304      	movs	r3, #4
 80032fc:	e006      	b.n	800330c <HAL_GPIO_Init+0x228>
 80032fe:	2303      	movs	r3, #3
 8003300:	e004      	b.n	800330c <HAL_GPIO_Init+0x228>
 8003302:	2302      	movs	r3, #2
 8003304:	e002      	b.n	800330c <HAL_GPIO_Init+0x228>
 8003306:	2301      	movs	r3, #1
 8003308:	e000      	b.n	800330c <HAL_GPIO_Init+0x228>
 800330a:	2300      	movs	r3, #0
 800330c:	69fa      	ldr	r2, [r7, #28]
 800330e:	f002 0203 	and.w	r2, r2, #3
 8003312:	0092      	lsls	r2, r2, #2
 8003314:	4093      	lsls	r3, r2
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	4313      	orrs	r3, r2
 800331a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800331c:	4935      	ldr	r1, [pc, #212]	; (80033f4 <HAL_GPIO_Init+0x310>)
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	089b      	lsrs	r3, r3, #2
 8003322:	3302      	adds	r3, #2
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800332a:	4b3b      	ldr	r3, [pc, #236]	; (8003418 <HAL_GPIO_Init+0x334>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	43db      	mvns	r3, r3
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	4013      	ands	r3, r2
 8003338:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	4313      	orrs	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800334e:	4a32      	ldr	r2, [pc, #200]	; (8003418 <HAL_GPIO_Init+0x334>)
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003354:	4b30      	ldr	r3, [pc, #192]	; (8003418 <HAL_GPIO_Init+0x334>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	43db      	mvns	r3, r3
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	4013      	ands	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	4313      	orrs	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003378:	4a27      	ldr	r2, [pc, #156]	; (8003418 <HAL_GPIO_Init+0x334>)
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800337e:	4b26      	ldr	r3, [pc, #152]	; (8003418 <HAL_GPIO_Init+0x334>)
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	43db      	mvns	r3, r3
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	4013      	ands	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	4313      	orrs	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033a2:	4a1d      	ldr	r2, [pc, #116]	; (8003418 <HAL_GPIO_Init+0x334>)
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033a8:	4b1b      	ldr	r3, [pc, #108]	; (8003418 <HAL_GPIO_Init+0x334>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	43db      	mvns	r3, r3
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	4013      	ands	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d003      	beq.n	80033cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80033c4:	69ba      	ldr	r2, [r7, #24]
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033cc:	4a12      	ldr	r2, [pc, #72]	; (8003418 <HAL_GPIO_Init+0x334>)
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	3301      	adds	r3, #1
 80033d6:	61fb      	str	r3, [r7, #28]
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	2b0f      	cmp	r3, #15
 80033dc:	f67f ae90 	bls.w	8003100 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033e0:	bf00      	nop
 80033e2:	bf00      	nop
 80033e4:	3724      	adds	r7, #36	; 0x24
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40023800 	.word	0x40023800
 80033f4:	40013800 	.word	0x40013800
 80033f8:	40020000 	.word	0x40020000
 80033fc:	40020400 	.word	0x40020400
 8003400:	40020800 	.word	0x40020800
 8003404:	40020c00 	.word	0x40020c00
 8003408:	40021000 	.word	0x40021000
 800340c:	40021400 	.word	0x40021400
 8003410:	40021800 	.word	0x40021800
 8003414:	40021c00 	.word	0x40021c00
 8003418:	40013c00 	.word	0x40013c00

0800341c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800341c:	b480      	push	{r7}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691a      	ldr	r2, [r3, #16]
 800342c:	887b      	ldrh	r3, [r7, #2]
 800342e:	4013      	ands	r3, r2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d002      	beq.n	800343a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003434:	2301      	movs	r3, #1
 8003436:	73fb      	strb	r3, [r7, #15]
 8003438:	e001      	b.n	800343e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800343a:	2300      	movs	r3, #0
 800343c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800343e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003440:	4618      	mov	r0, r3
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	460b      	mov	r3, r1
 8003456:	807b      	strh	r3, [r7, #2]
 8003458:	4613      	mov	r3, r2
 800345a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800345c:	787b      	ldrb	r3, [r7, #1]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003462:	887a      	ldrh	r2, [r7, #2]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003468:	e003      	b.n	8003472 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800346a:	887b      	ldrh	r3, [r7, #2]
 800346c:	041a      	lsls	r2, r3, #16
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	619a      	str	r2, [r3, #24]
}
 8003472:	bf00      	nop
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
	...

08003480 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	4603      	mov	r3, r0
 8003488:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800348a:	4b08      	ldr	r3, [pc, #32]	; (80034ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800348c:	695a      	ldr	r2, [r3, #20]
 800348e:	88fb      	ldrh	r3, [r7, #6]
 8003490:	4013      	ands	r3, r2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d006      	beq.n	80034a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003496:	4a05      	ldr	r2, [pc, #20]	; (80034ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003498:	88fb      	ldrh	r3, [r7, #6]
 800349a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800349c:	88fb      	ldrh	r3, [r7, #6]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7fd fd18 	bl	8000ed4 <HAL_GPIO_EXTI_Callback>
  }
}
 80034a4:	bf00      	nop
 80034a6:	3708      	adds	r7, #8
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40013c00 	.word	0x40013c00

080034b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e12b      	b.n	800371a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fe f990 	bl	80017fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2224      	movs	r2, #36	; 0x24
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0201 	bic.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003502:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003512:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003514:	f001 f848 	bl	80045a8 <HAL_RCC_GetPCLK1Freq>
 8003518:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	4a81      	ldr	r2, [pc, #516]	; (8003724 <HAL_I2C_Init+0x274>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d807      	bhi.n	8003534 <HAL_I2C_Init+0x84>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4a80      	ldr	r2, [pc, #512]	; (8003728 <HAL_I2C_Init+0x278>)
 8003528:	4293      	cmp	r3, r2
 800352a:	bf94      	ite	ls
 800352c:	2301      	movls	r3, #1
 800352e:	2300      	movhi	r3, #0
 8003530:	b2db      	uxtb	r3, r3
 8003532:	e006      	b.n	8003542 <HAL_I2C_Init+0x92>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4a7d      	ldr	r2, [pc, #500]	; (800372c <HAL_I2C_Init+0x27c>)
 8003538:	4293      	cmp	r3, r2
 800353a:	bf94      	ite	ls
 800353c:	2301      	movls	r3, #1
 800353e:	2300      	movhi	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e0e7      	b.n	800371a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	4a78      	ldr	r2, [pc, #480]	; (8003730 <HAL_I2C_Init+0x280>)
 800354e:	fba2 2303 	umull	r2, r3, r2, r3
 8003552:	0c9b      	lsrs	r3, r3, #18
 8003554:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	430a      	orrs	r2, r1
 8003568:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	4a6a      	ldr	r2, [pc, #424]	; (8003724 <HAL_I2C_Init+0x274>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d802      	bhi.n	8003584 <HAL_I2C_Init+0xd4>
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	3301      	adds	r3, #1
 8003582:	e009      	b.n	8003598 <HAL_I2C_Init+0xe8>
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800358a:	fb02 f303 	mul.w	r3, r2, r3
 800358e:	4a69      	ldr	r2, [pc, #420]	; (8003734 <HAL_I2C_Init+0x284>)
 8003590:	fba2 2303 	umull	r2, r3, r2, r3
 8003594:	099b      	lsrs	r3, r3, #6
 8003596:	3301      	adds	r3, #1
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6812      	ldr	r2, [r2, #0]
 800359c:	430b      	orrs	r3, r1
 800359e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80035aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	495c      	ldr	r1, [pc, #368]	; (8003724 <HAL_I2C_Init+0x274>)
 80035b4:	428b      	cmp	r3, r1
 80035b6:	d819      	bhi.n	80035ec <HAL_I2C_Init+0x13c>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	1e59      	subs	r1, r3, #1
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80035c6:	1c59      	adds	r1, r3, #1
 80035c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80035cc:	400b      	ands	r3, r1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <HAL_I2C_Init+0x138>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	1e59      	subs	r1, r3, #1
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80035e0:	3301      	adds	r3, #1
 80035e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e6:	e051      	b.n	800368c <HAL_I2C_Init+0x1dc>
 80035e8:	2304      	movs	r3, #4
 80035ea:	e04f      	b.n	800368c <HAL_I2C_Init+0x1dc>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d111      	bne.n	8003618 <HAL_I2C_Init+0x168>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	1e58      	subs	r0, r3, #1
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6859      	ldr	r1, [r3, #4]
 80035fc:	460b      	mov	r3, r1
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	440b      	add	r3, r1
 8003602:	fbb0 f3f3 	udiv	r3, r0, r3
 8003606:	3301      	adds	r3, #1
 8003608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800360c:	2b00      	cmp	r3, #0
 800360e:	bf0c      	ite	eq
 8003610:	2301      	moveq	r3, #1
 8003612:	2300      	movne	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	e012      	b.n	800363e <HAL_I2C_Init+0x18e>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	1e58      	subs	r0, r3, #1
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6859      	ldr	r1, [r3, #4]
 8003620:	460b      	mov	r3, r1
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	0099      	lsls	r1, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	fbb0 f3f3 	udiv	r3, r0, r3
 800362e:	3301      	adds	r3, #1
 8003630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003634:	2b00      	cmp	r3, #0
 8003636:	bf0c      	ite	eq
 8003638:	2301      	moveq	r3, #1
 800363a:	2300      	movne	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <HAL_I2C_Init+0x196>
 8003642:	2301      	movs	r3, #1
 8003644:	e022      	b.n	800368c <HAL_I2C_Init+0x1dc>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10e      	bne.n	800366c <HAL_I2C_Init+0x1bc>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	1e58      	subs	r0, r3, #1
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6859      	ldr	r1, [r3, #4]
 8003656:	460b      	mov	r3, r1
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	440b      	add	r3, r1
 800365c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003660:	3301      	adds	r3, #1
 8003662:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800366a:	e00f      	b.n	800368c <HAL_I2C_Init+0x1dc>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	1e58      	subs	r0, r3, #1
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6859      	ldr	r1, [r3, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	0099      	lsls	r1, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003682:	3301      	adds	r3, #1
 8003684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003688:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800368c:	6879      	ldr	r1, [r7, #4]
 800368e:	6809      	ldr	r1, [r1, #0]
 8003690:	4313      	orrs	r3, r2
 8003692:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69da      	ldr	r2, [r3, #28]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80036ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6911      	ldr	r1, [r2, #16]
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	68d2      	ldr	r2, [r2, #12]
 80036c6:	4311      	orrs	r1, r2
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6812      	ldr	r2, [r2, #0]
 80036cc:	430b      	orrs	r3, r1
 80036ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	695a      	ldr	r2, [r3, #20]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0201 	orr.w	r2, r2, #1
 80036fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2220      	movs	r2, #32
 8003706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	000186a0 	.word	0x000186a0
 8003728:	001e847f 	.word	0x001e847f
 800372c:	003d08ff 	.word	0x003d08ff
 8003730:	431bde83 	.word	0x431bde83
 8003734:	10624dd3 	.word	0x10624dd3

08003738 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b088      	sub	sp, #32
 800373c:	af02      	add	r7, sp, #8
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	607a      	str	r2, [r7, #4]
 8003742:	461a      	mov	r2, r3
 8003744:	460b      	mov	r3, r1
 8003746:	817b      	strh	r3, [r7, #10]
 8003748:	4613      	mov	r3, r2
 800374a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800374c:	f7fe fd56 	bl	80021fc <HAL_GetTick>
 8003750:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b20      	cmp	r3, #32
 800375c:	f040 80e0 	bne.w	8003920 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	2319      	movs	r3, #25
 8003766:	2201      	movs	r2, #1
 8003768:	4970      	ldr	r1, [pc, #448]	; (800392c <HAL_I2C_Master_Transmit+0x1f4>)
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f000 f964 	bl	8003a38 <I2C_WaitOnFlagUntilTimeout>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003776:	2302      	movs	r3, #2
 8003778:	e0d3      	b.n	8003922 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_I2C_Master_Transmit+0x50>
 8003784:	2302      	movs	r3, #2
 8003786:	e0cc      	b.n	8003922 <HAL_I2C_Master_Transmit+0x1ea>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b01      	cmp	r3, #1
 800379c:	d007      	beq.n	80037ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f042 0201 	orr.w	r2, r2, #1
 80037ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2221      	movs	r2, #33	; 0x21
 80037c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2210      	movs	r2, #16
 80037ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	893a      	ldrh	r2, [r7, #8]
 80037de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	4a50      	ldr	r2, [pc, #320]	; (8003930 <HAL_I2C_Master_Transmit+0x1f8>)
 80037ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80037f0:	8979      	ldrh	r1, [r7, #10]
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	6a3a      	ldr	r2, [r7, #32]
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 f89c 	bl	8003934 <I2C_MasterRequestWrite>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e08d      	b.n	8003922 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003806:	2300      	movs	r3, #0
 8003808:	613b      	str	r3, [r7, #16]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	613b      	str	r3, [r7, #16]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	613b      	str	r3, [r7, #16]
 800381a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800381c:	e066      	b.n	80038ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	6a39      	ldr	r1, [r7, #32]
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 f9de 	bl	8003be4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00d      	beq.n	800384a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	2b04      	cmp	r3, #4
 8003834:	d107      	bne.n	8003846 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003844:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e06b      	b.n	8003922 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	781a      	ldrb	r2, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	1c5a      	adds	r2, r3, #1
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003864:	b29b      	uxth	r3, r3
 8003866:	3b01      	subs	r3, #1
 8003868:	b29a      	uxth	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003872:	3b01      	subs	r3, #1
 8003874:	b29a      	uxth	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	2b04      	cmp	r3, #4
 8003886:	d11b      	bne.n	80038c0 <HAL_I2C_Master_Transmit+0x188>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800388c:	2b00      	cmp	r3, #0
 800388e:	d017      	beq.n	80038c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	781a      	ldrb	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a0:	1c5a      	adds	r2, r3, #1
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	3b01      	subs	r3, #1
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	6a39      	ldr	r1, [r7, #32]
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f000 f9ce 	bl	8003c66 <I2C_WaitOnBTFFlagUntilTimeout>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00d      	beq.n	80038ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	2b04      	cmp	r3, #4
 80038d6:	d107      	bne.n	80038e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e01a      	b.n	8003922 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d194      	bne.n	800381e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003902:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800391c:	2300      	movs	r3, #0
 800391e:	e000      	b.n	8003922 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003920:	2302      	movs	r3, #2
  }
}
 8003922:	4618      	mov	r0, r3
 8003924:	3718      	adds	r7, #24
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	00100002 	.word	0x00100002
 8003930:	ffff0000 	.word	0xffff0000

08003934 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b088      	sub	sp, #32
 8003938:	af02      	add	r7, sp, #8
 800393a:	60f8      	str	r0, [r7, #12]
 800393c:	607a      	str	r2, [r7, #4]
 800393e:	603b      	str	r3, [r7, #0]
 8003940:	460b      	mov	r3, r1
 8003942:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003948:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	2b08      	cmp	r3, #8
 800394e:	d006      	beq.n	800395e <I2C_MasterRequestWrite+0x2a>
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d003      	beq.n	800395e <I2C_MasterRequestWrite+0x2a>
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800395c:	d108      	bne.n	8003970 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800396c:	601a      	str	r2, [r3, #0]
 800396e:	e00b      	b.n	8003988 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003974:	2b12      	cmp	r3, #18
 8003976:	d107      	bne.n	8003988 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003986:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003994:	68f8      	ldr	r0, [r7, #12]
 8003996:	f000 f84f 	bl	8003a38 <I2C_WaitOnFlagUntilTimeout>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00d      	beq.n	80039bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ae:	d103      	bne.n	80039b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e035      	b.n	8003a28 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039c4:	d108      	bne.n	80039d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039c6:	897b      	ldrh	r3, [r7, #10]
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	461a      	mov	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039d4:	611a      	str	r2, [r3, #16]
 80039d6:	e01b      	b.n	8003a10 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80039d8:	897b      	ldrh	r3, [r7, #10]
 80039da:	11db      	asrs	r3, r3, #7
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	f003 0306 	and.w	r3, r3, #6
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	f063 030f 	orn	r3, r3, #15
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	490e      	ldr	r1, [pc, #56]	; (8003a30 <I2C_MasterRequestWrite+0xfc>)
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f000 f875 	bl	8003ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e010      	b.n	8003a28 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a06:	897b      	ldrh	r3, [r7, #10]
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	4907      	ldr	r1, [pc, #28]	; (8003a34 <I2C_MasterRequestWrite+0x100>)
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f000 f865 	bl	8003ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e000      	b.n	8003a28 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3718      	adds	r7, #24
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	00010008 	.word	0x00010008
 8003a34:	00010002 	.word	0x00010002

08003a38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	603b      	str	r3, [r7, #0]
 8003a44:	4613      	mov	r3, r2
 8003a46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a48:	e025      	b.n	8003a96 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a50:	d021      	beq.n	8003a96 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a52:	f7fe fbd3 	bl	80021fc <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d302      	bcc.n	8003a68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d116      	bne.n	8003a96 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2220      	movs	r2, #32
 8003a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a82:	f043 0220 	orr.w	r2, r3, #32
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e023      	b.n	8003ade <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	0c1b      	lsrs	r3, r3, #16
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d10d      	bne.n	8003abc <I2C_WaitOnFlagUntilTimeout+0x84>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	43da      	mvns	r2, r3
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	bf0c      	ite	eq
 8003ab2:	2301      	moveq	r3, #1
 8003ab4:	2300      	movne	r3, #0
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	461a      	mov	r2, r3
 8003aba:	e00c      	b.n	8003ad6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	43da      	mvns	r2, r3
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	bf0c      	ite	eq
 8003ace:	2301      	moveq	r3, #1
 8003ad0:	2300      	movne	r3, #0
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	79fb      	ldrb	r3, [r7, #7]
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d0b6      	beq.n	8003a4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003adc:	2300      	movs	r3, #0
}
 8003ade:	4618      	mov	r0, r3
 8003ae0:	3710      	adds	r7, #16
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bd80      	pop	{r7, pc}

08003ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b084      	sub	sp, #16
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	60f8      	str	r0, [r7, #12]
 8003aee:	60b9      	str	r1, [r7, #8]
 8003af0:	607a      	str	r2, [r7, #4]
 8003af2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003af4:	e051      	b.n	8003b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	695b      	ldr	r3, [r3, #20]
 8003afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b04:	d123      	bne.n	8003b4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b14:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b1e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	f043 0204 	orr.w	r2, r3, #4
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e046      	b.n	8003bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b54:	d021      	beq.n	8003b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b56:	f7fe fb51 	bl	80021fc <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	687a      	ldr	r2, [r7, #4]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d302      	bcc.n	8003b6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d116      	bne.n	8003b9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2220      	movs	r2, #32
 8003b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b86:	f043 0220 	orr.w	r2, r3, #32
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e020      	b.n	8003bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	0c1b      	lsrs	r3, r3, #16
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d10c      	bne.n	8003bbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	43da      	mvns	r2, r3
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	4013      	ands	r3, r2
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	bf14      	ite	ne
 8003bb6:	2301      	movne	r3, #1
 8003bb8:	2300      	moveq	r3, #0
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	e00b      	b.n	8003bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	699b      	ldr	r3, [r3, #24]
 8003bc4:	43da      	mvns	r2, r3
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	bf14      	ite	ne
 8003bd0:	2301      	movne	r3, #1
 8003bd2:	2300      	moveq	r3, #0
 8003bd4:	b2db      	uxtb	r3, r3
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d18d      	bne.n	8003af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bf0:	e02d      	b.n	8003c4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f000 f878 	bl	8003ce8 <I2C_IsAcknowledgeFailed>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e02d      	b.n	8003c5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c08:	d021      	beq.n	8003c4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c0a:	f7fe faf7 	bl	80021fc <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d302      	bcc.n	8003c20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d116      	bne.n	8003c4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3a:	f043 0220 	orr.w	r2, r3, #32
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e007      	b.n	8003c5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	695b      	ldr	r3, [r3, #20]
 8003c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c58:	2b80      	cmp	r3, #128	; 0x80
 8003c5a:	d1ca      	bne.n	8003bf2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b084      	sub	sp, #16
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	60f8      	str	r0, [r7, #12]
 8003c6e:	60b9      	str	r1, [r7, #8]
 8003c70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c72:	e02d      	b.n	8003cd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 f837 	bl	8003ce8 <I2C_IsAcknowledgeFailed>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e02d      	b.n	8003ce0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c8a:	d021      	beq.n	8003cd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c8c:	f7fe fab6 	bl	80021fc <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d302      	bcc.n	8003ca2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d116      	bne.n	8003cd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2220      	movs	r2, #32
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbc:	f043 0220 	orr.w	r2, r3, #32
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e007      	b.n	8003ce0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	695b      	ldr	r3, [r3, #20]
 8003cd6:	f003 0304 	and.w	r3, r3, #4
 8003cda:	2b04      	cmp	r3, #4
 8003cdc:	d1ca      	bne.n	8003c74 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	695b      	ldr	r3, [r3, #20]
 8003cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cfe:	d11b      	bne.n	8003d38 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d08:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d24:	f043 0204 	orr.w	r2, r3, #4
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e000      	b.n	8003d3a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
	...

08003d48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e267      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d075      	beq.n	8003e52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d66:	4b88      	ldr	r3, [pc, #544]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 030c 	and.w	r3, r3, #12
 8003d6e:	2b04      	cmp	r3, #4
 8003d70:	d00c      	beq.n	8003d8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d72:	4b85      	ldr	r3, [pc, #532]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d7a:	2b08      	cmp	r3, #8
 8003d7c:	d112      	bne.n	8003da4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d7e:	4b82      	ldr	r3, [pc, #520]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d8a:	d10b      	bne.n	8003da4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d8c:	4b7e      	ldr	r3, [pc, #504]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d05b      	beq.n	8003e50 <HAL_RCC_OscConfig+0x108>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d157      	bne.n	8003e50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e242      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dac:	d106      	bne.n	8003dbc <HAL_RCC_OscConfig+0x74>
 8003dae:	4b76      	ldr	r3, [pc, #472]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a75      	ldr	r2, [pc, #468]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db8:	6013      	str	r3, [r2, #0]
 8003dba:	e01d      	b.n	8003df8 <HAL_RCC_OscConfig+0xb0>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dc4:	d10c      	bne.n	8003de0 <HAL_RCC_OscConfig+0x98>
 8003dc6:	4b70      	ldr	r3, [pc, #448]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a6f      	ldr	r2, [pc, #444]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003dcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003dd0:	6013      	str	r3, [r2, #0]
 8003dd2:	4b6d      	ldr	r3, [pc, #436]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a6c      	ldr	r2, [pc, #432]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ddc:	6013      	str	r3, [r2, #0]
 8003dde:	e00b      	b.n	8003df8 <HAL_RCC_OscConfig+0xb0>
 8003de0:	4b69      	ldr	r3, [pc, #420]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a68      	ldr	r2, [pc, #416]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003de6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dea:	6013      	str	r3, [r2, #0]
 8003dec:	4b66      	ldr	r3, [pc, #408]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a65      	ldr	r2, [pc, #404]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003df2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003df6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d013      	beq.n	8003e28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e00:	f7fe f9fc 	bl	80021fc <HAL_GetTick>
 8003e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e06:	e008      	b.n	8003e1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e08:	f7fe f9f8 	bl	80021fc <HAL_GetTick>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	2b64      	cmp	r3, #100	; 0x64
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e207      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e1a:	4b5b      	ldr	r3, [pc, #364]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0f0      	beq.n	8003e08 <HAL_RCC_OscConfig+0xc0>
 8003e26:	e014      	b.n	8003e52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e28:	f7fe f9e8 	bl	80021fc <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e30:	f7fe f9e4 	bl	80021fc <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b64      	cmp	r3, #100	; 0x64
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e1f3      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e42:	4b51      	ldr	r3, [pc, #324]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1f0      	bne.n	8003e30 <HAL_RCC_OscConfig+0xe8>
 8003e4e:	e000      	b.n	8003e52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d063      	beq.n	8003f26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e5e:	4b4a      	ldr	r3, [pc, #296]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 030c 	and.w	r3, r3, #12
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00b      	beq.n	8003e82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e6a:	4b47      	ldr	r3, [pc, #284]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e72:	2b08      	cmp	r3, #8
 8003e74:	d11c      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e76:	4b44      	ldr	r3, [pc, #272]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d116      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e82:	4b41      	ldr	r3, [pc, #260]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d005      	beq.n	8003e9a <HAL_RCC_OscConfig+0x152>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d001      	beq.n	8003e9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e1c7      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e9a:	4b3b      	ldr	r3, [pc, #236]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	4937      	ldr	r1, [pc, #220]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eae:	e03a      	b.n	8003f26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d020      	beq.n	8003efa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eb8:	4b34      	ldr	r3, [pc, #208]	; (8003f8c <HAL_RCC_OscConfig+0x244>)
 8003eba:	2201      	movs	r2, #1
 8003ebc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ebe:	f7fe f99d 	bl	80021fc <HAL_GetTick>
 8003ec2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ec4:	e008      	b.n	8003ed8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ec6:	f7fe f999 	bl	80021fc <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d901      	bls.n	8003ed8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	e1a8      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed8:	4b2b      	ldr	r3, [pc, #172]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d0f0      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ee4:	4b28      	ldr	r3, [pc, #160]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	00db      	lsls	r3, r3, #3
 8003ef2:	4925      	ldr	r1, [pc, #148]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	600b      	str	r3, [r1, #0]
 8003ef8:	e015      	b.n	8003f26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003efa:	4b24      	ldr	r3, [pc, #144]	; (8003f8c <HAL_RCC_OscConfig+0x244>)
 8003efc:	2200      	movs	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f00:	f7fe f97c 	bl	80021fc <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f08:	f7fe f978 	bl	80021fc <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e187      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f1a:	4b1b      	ldr	r3, [pc, #108]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1f0      	bne.n	8003f08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0308 	and.w	r3, r3, #8
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d036      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d016      	beq.n	8003f68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f3a:	4b15      	ldr	r3, [pc, #84]	; (8003f90 <HAL_RCC_OscConfig+0x248>)
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f40:	f7fe f95c 	bl	80021fc <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f48:	f7fe f958 	bl	80021fc <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b02      	cmp	r3, #2
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e167      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f5a:	4b0b      	ldr	r3, [pc, #44]	; (8003f88 <HAL_RCC_OscConfig+0x240>)
 8003f5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0f0      	beq.n	8003f48 <HAL_RCC_OscConfig+0x200>
 8003f66:	e01b      	b.n	8003fa0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f68:	4b09      	ldr	r3, [pc, #36]	; (8003f90 <HAL_RCC_OscConfig+0x248>)
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f6e:	f7fe f945 	bl	80021fc <HAL_GetTick>
 8003f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f74:	e00e      	b.n	8003f94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f76:	f7fe f941 	bl	80021fc <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d907      	bls.n	8003f94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f84:	2303      	movs	r3, #3
 8003f86:	e150      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
 8003f88:	40023800 	.word	0x40023800
 8003f8c:	42470000 	.word	0x42470000
 8003f90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f94:	4b88      	ldr	r3, [pc, #544]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 8003f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1ea      	bne.n	8003f76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 8097 	beq.w	80040dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fb2:	4b81      	ldr	r3, [pc, #516]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 8003fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10f      	bne.n	8003fde <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	60bb      	str	r3, [r7, #8]
 8003fc2:	4b7d      	ldr	r3, [pc, #500]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	4a7c      	ldr	r2, [pc, #496]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 8003fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8003fce:	4b7a      	ldr	r3, [pc, #488]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd6:	60bb      	str	r3, [r7, #8]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fde:	4b77      	ldr	r3, [pc, #476]	; (80041bc <HAL_RCC_OscConfig+0x474>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d118      	bne.n	800401c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fea:	4b74      	ldr	r3, [pc, #464]	; (80041bc <HAL_RCC_OscConfig+0x474>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a73      	ldr	r2, [pc, #460]	; (80041bc <HAL_RCC_OscConfig+0x474>)
 8003ff0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ff4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ff6:	f7fe f901 	bl	80021fc <HAL_GetTick>
 8003ffa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ffc:	e008      	b.n	8004010 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ffe:	f7fe f8fd 	bl	80021fc <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e10c      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004010:	4b6a      	ldr	r3, [pc, #424]	; (80041bc <HAL_RCC_OscConfig+0x474>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004018:	2b00      	cmp	r3, #0
 800401a:	d0f0      	beq.n	8003ffe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d106      	bne.n	8004032 <HAL_RCC_OscConfig+0x2ea>
 8004024:	4b64      	ldr	r3, [pc, #400]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 8004026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004028:	4a63      	ldr	r2, [pc, #396]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 800402a:	f043 0301 	orr.w	r3, r3, #1
 800402e:	6713      	str	r3, [r2, #112]	; 0x70
 8004030:	e01c      	b.n	800406c <HAL_RCC_OscConfig+0x324>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	2b05      	cmp	r3, #5
 8004038:	d10c      	bne.n	8004054 <HAL_RCC_OscConfig+0x30c>
 800403a:	4b5f      	ldr	r3, [pc, #380]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 800403c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403e:	4a5e      	ldr	r2, [pc, #376]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 8004040:	f043 0304 	orr.w	r3, r3, #4
 8004044:	6713      	str	r3, [r2, #112]	; 0x70
 8004046:	4b5c      	ldr	r3, [pc, #368]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 8004048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800404a:	4a5b      	ldr	r2, [pc, #364]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 800404c:	f043 0301 	orr.w	r3, r3, #1
 8004050:	6713      	str	r3, [r2, #112]	; 0x70
 8004052:	e00b      	b.n	800406c <HAL_RCC_OscConfig+0x324>
 8004054:	4b58      	ldr	r3, [pc, #352]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 8004056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004058:	4a57      	ldr	r2, [pc, #348]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 800405a:	f023 0301 	bic.w	r3, r3, #1
 800405e:	6713      	str	r3, [r2, #112]	; 0x70
 8004060:	4b55      	ldr	r3, [pc, #340]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 8004062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004064:	4a54      	ldr	r2, [pc, #336]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 8004066:	f023 0304 	bic.w	r3, r3, #4
 800406a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d015      	beq.n	80040a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004074:	f7fe f8c2 	bl	80021fc <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800407a:	e00a      	b.n	8004092 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800407c:	f7fe f8be 	bl	80021fc <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	f241 3288 	movw	r2, #5000	; 0x1388
 800408a:	4293      	cmp	r3, r2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e0cb      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004092:	4b49      	ldr	r3, [pc, #292]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 8004094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0ee      	beq.n	800407c <HAL_RCC_OscConfig+0x334>
 800409e:	e014      	b.n	80040ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040a0:	f7fe f8ac 	bl	80021fc <HAL_GetTick>
 80040a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040a6:	e00a      	b.n	80040be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040a8:	f7fe f8a8 	bl	80021fc <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e0b5      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040be:	4b3e      	ldr	r3, [pc, #248]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 80040c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1ee      	bne.n	80040a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040ca:	7dfb      	ldrb	r3, [r7, #23]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d105      	bne.n	80040dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040d0:	4b39      	ldr	r3, [pc, #228]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 80040d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d4:	4a38      	ldr	r2, [pc, #224]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 80040d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 80a1 	beq.w	8004228 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040e6:	4b34      	ldr	r3, [pc, #208]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f003 030c 	and.w	r3, r3, #12
 80040ee:	2b08      	cmp	r3, #8
 80040f0:	d05c      	beq.n	80041ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d141      	bne.n	800417e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040fa:	4b31      	ldr	r3, [pc, #196]	; (80041c0 <HAL_RCC_OscConfig+0x478>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004100:	f7fe f87c 	bl	80021fc <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004108:	f7fe f878 	bl	80021fc <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e087      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800411a:	4b27      	ldr	r3, [pc, #156]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f0      	bne.n	8004108 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	69da      	ldr	r2, [r3, #28]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	431a      	orrs	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	019b      	lsls	r3, r3, #6
 8004136:	431a      	orrs	r2, r3
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413c:	085b      	lsrs	r3, r3, #1
 800413e:	3b01      	subs	r3, #1
 8004140:	041b      	lsls	r3, r3, #16
 8004142:	431a      	orrs	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004148:	061b      	lsls	r3, r3, #24
 800414a:	491b      	ldr	r1, [pc, #108]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 800414c:	4313      	orrs	r3, r2
 800414e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004150:	4b1b      	ldr	r3, [pc, #108]	; (80041c0 <HAL_RCC_OscConfig+0x478>)
 8004152:	2201      	movs	r2, #1
 8004154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004156:	f7fe f851 	bl	80021fc <HAL_GetTick>
 800415a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800415c:	e008      	b.n	8004170 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800415e:	f7fe f84d 	bl	80021fc <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b02      	cmp	r3, #2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e05c      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004170:	4b11      	ldr	r3, [pc, #68]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d0f0      	beq.n	800415e <HAL_RCC_OscConfig+0x416>
 800417c:	e054      	b.n	8004228 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800417e:	4b10      	ldr	r3, [pc, #64]	; (80041c0 <HAL_RCC_OscConfig+0x478>)
 8004180:	2200      	movs	r2, #0
 8004182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004184:	f7fe f83a 	bl	80021fc <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800418c:	f7fe f836 	bl	80021fc <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e045      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800419e:	4b06      	ldr	r3, [pc, #24]	; (80041b8 <HAL_RCC_OscConfig+0x470>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1f0      	bne.n	800418c <HAL_RCC_OscConfig+0x444>
 80041aa:	e03d      	b.n	8004228 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d107      	bne.n	80041c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e038      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
 80041b8:	40023800 	.word	0x40023800
 80041bc:	40007000 	.word	0x40007000
 80041c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041c4:	4b1b      	ldr	r3, [pc, #108]	; (8004234 <HAL_RCC_OscConfig+0x4ec>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d028      	beq.n	8004224 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041dc:	429a      	cmp	r2, r3
 80041de:	d121      	bne.n	8004224 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d11a      	bne.n	8004224 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041f4:	4013      	ands	r3, r2
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d111      	bne.n	8004224 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420a:	085b      	lsrs	r3, r3, #1
 800420c:	3b01      	subs	r3, #1
 800420e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004210:	429a      	cmp	r2, r3
 8004212:	d107      	bne.n	8004224 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800421e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004220:	429a      	cmp	r2, r3
 8004222:	d001      	beq.n	8004228 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e000      	b.n	800422a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3718      	adds	r7, #24
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	40023800 	.word	0x40023800

08004238 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e0cc      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800424c:	4b68      	ldr	r3, [pc, #416]	; (80043f0 <HAL_RCC_ClockConfig+0x1b8>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0307 	and.w	r3, r3, #7
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	429a      	cmp	r2, r3
 8004258:	d90c      	bls.n	8004274 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800425a:	4b65      	ldr	r3, [pc, #404]	; (80043f0 <HAL_RCC_ClockConfig+0x1b8>)
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004262:	4b63      	ldr	r3, [pc, #396]	; (80043f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0307 	and.w	r3, r3, #7
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	429a      	cmp	r2, r3
 800426e:	d001      	beq.n	8004274 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e0b8      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b00      	cmp	r3, #0
 800427e:	d020      	beq.n	80042c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	2b00      	cmp	r3, #0
 800428a:	d005      	beq.n	8004298 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800428c:	4b59      	ldr	r3, [pc, #356]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	4a58      	ldr	r2, [pc, #352]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004292:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004296:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0308 	and.w	r3, r3, #8
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d005      	beq.n	80042b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042a4:	4b53      	ldr	r3, [pc, #332]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	4a52      	ldr	r2, [pc, #328]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 80042aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042b0:	4b50      	ldr	r3, [pc, #320]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	494d      	ldr	r1, [pc, #308]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d044      	beq.n	8004358 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d107      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042d6:	4b47      	ldr	r3, [pc, #284]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d119      	bne.n	8004316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e07f      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d003      	beq.n	80042f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042f2:	2b03      	cmp	r3, #3
 80042f4:	d107      	bne.n	8004306 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042f6:	4b3f      	ldr	r3, [pc, #252]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d109      	bne.n	8004316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e06f      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004306:	4b3b      	ldr	r3, [pc, #236]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e067      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004316:	4b37      	ldr	r3, [pc, #220]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f023 0203 	bic.w	r2, r3, #3
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	4934      	ldr	r1, [pc, #208]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004324:	4313      	orrs	r3, r2
 8004326:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004328:	f7fd ff68 	bl	80021fc <HAL_GetTick>
 800432c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800432e:	e00a      	b.n	8004346 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004330:	f7fd ff64 	bl	80021fc <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	f241 3288 	movw	r2, #5000	; 0x1388
 800433e:	4293      	cmp	r3, r2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e04f      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004346:	4b2b      	ldr	r3, [pc, #172]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 020c 	and.w	r2, r3, #12
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	429a      	cmp	r2, r3
 8004356:	d1eb      	bne.n	8004330 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004358:	4b25      	ldr	r3, [pc, #148]	; (80043f0 <HAL_RCC_ClockConfig+0x1b8>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0307 	and.w	r3, r3, #7
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	429a      	cmp	r2, r3
 8004364:	d20c      	bcs.n	8004380 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004366:	4b22      	ldr	r3, [pc, #136]	; (80043f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800436e:	4b20      	ldr	r3, [pc, #128]	; (80043f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0307 	and.w	r3, r3, #7
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	429a      	cmp	r2, r3
 800437a:	d001      	beq.n	8004380 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e032      	b.n	80043e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0304 	and.w	r3, r3, #4
 8004388:	2b00      	cmp	r3, #0
 800438a:	d008      	beq.n	800439e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800438c:	4b19      	ldr	r3, [pc, #100]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	4916      	ldr	r1, [pc, #88]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 800439a:	4313      	orrs	r3, r2
 800439c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d009      	beq.n	80043be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043aa:	4b12      	ldr	r3, [pc, #72]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	490e      	ldr	r1, [pc, #56]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80043be:	f000 f821 	bl	8004404 <HAL_RCC_GetSysClockFreq>
 80043c2:	4602      	mov	r2, r0
 80043c4:	4b0b      	ldr	r3, [pc, #44]	; (80043f4 <HAL_RCC_ClockConfig+0x1bc>)
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	091b      	lsrs	r3, r3, #4
 80043ca:	f003 030f 	and.w	r3, r3, #15
 80043ce:	490a      	ldr	r1, [pc, #40]	; (80043f8 <HAL_RCC_ClockConfig+0x1c0>)
 80043d0:	5ccb      	ldrb	r3, [r1, r3]
 80043d2:	fa22 f303 	lsr.w	r3, r2, r3
 80043d6:	4a09      	ldr	r2, [pc, #36]	; (80043fc <HAL_RCC_ClockConfig+0x1c4>)
 80043d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043da:	4b09      	ldr	r3, [pc, #36]	; (8004400 <HAL_RCC_ClockConfig+0x1c8>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4618      	mov	r0, r3
 80043e0:	f7fd fec8 	bl	8002174 <HAL_InitTick>

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	40023c00 	.word	0x40023c00
 80043f4:	40023800 	.word	0x40023800
 80043f8:	08008560 	.word	0x08008560
 80043fc:	20000000 	.word	0x20000000
 8004400:	2000000c 	.word	0x2000000c

08004404 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004408:	b090      	sub	sp, #64	; 0x40
 800440a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800440c:	2300      	movs	r3, #0
 800440e:	637b      	str	r3, [r7, #52]	; 0x34
 8004410:	2300      	movs	r3, #0
 8004412:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004414:	2300      	movs	r3, #0
 8004416:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004418:	2300      	movs	r3, #0
 800441a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800441c:	4b59      	ldr	r3, [pc, #356]	; (8004584 <HAL_RCC_GetSysClockFreq+0x180>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f003 030c 	and.w	r3, r3, #12
 8004424:	2b08      	cmp	r3, #8
 8004426:	d00d      	beq.n	8004444 <HAL_RCC_GetSysClockFreq+0x40>
 8004428:	2b08      	cmp	r3, #8
 800442a:	f200 80a1 	bhi.w	8004570 <HAL_RCC_GetSysClockFreq+0x16c>
 800442e:	2b00      	cmp	r3, #0
 8004430:	d002      	beq.n	8004438 <HAL_RCC_GetSysClockFreq+0x34>
 8004432:	2b04      	cmp	r3, #4
 8004434:	d003      	beq.n	800443e <HAL_RCC_GetSysClockFreq+0x3a>
 8004436:	e09b      	b.n	8004570 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004438:	4b53      	ldr	r3, [pc, #332]	; (8004588 <HAL_RCC_GetSysClockFreq+0x184>)
 800443a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800443c:	e09b      	b.n	8004576 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800443e:	4b53      	ldr	r3, [pc, #332]	; (800458c <HAL_RCC_GetSysClockFreq+0x188>)
 8004440:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004442:	e098      	b.n	8004576 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004444:	4b4f      	ldr	r3, [pc, #316]	; (8004584 <HAL_RCC_GetSysClockFreq+0x180>)
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800444c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800444e:	4b4d      	ldr	r3, [pc, #308]	; (8004584 <HAL_RCC_GetSysClockFreq+0x180>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d028      	beq.n	80044ac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800445a:	4b4a      	ldr	r3, [pc, #296]	; (8004584 <HAL_RCC_GetSysClockFreq+0x180>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	099b      	lsrs	r3, r3, #6
 8004460:	2200      	movs	r2, #0
 8004462:	623b      	str	r3, [r7, #32]
 8004464:	627a      	str	r2, [r7, #36]	; 0x24
 8004466:	6a3b      	ldr	r3, [r7, #32]
 8004468:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800446c:	2100      	movs	r1, #0
 800446e:	4b47      	ldr	r3, [pc, #284]	; (800458c <HAL_RCC_GetSysClockFreq+0x188>)
 8004470:	fb03 f201 	mul.w	r2, r3, r1
 8004474:	2300      	movs	r3, #0
 8004476:	fb00 f303 	mul.w	r3, r0, r3
 800447a:	4413      	add	r3, r2
 800447c:	4a43      	ldr	r2, [pc, #268]	; (800458c <HAL_RCC_GetSysClockFreq+0x188>)
 800447e:	fba0 1202 	umull	r1, r2, r0, r2
 8004482:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004484:	460a      	mov	r2, r1
 8004486:	62ba      	str	r2, [r7, #40]	; 0x28
 8004488:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800448a:	4413      	add	r3, r2
 800448c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800448e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004490:	2200      	movs	r2, #0
 8004492:	61bb      	str	r3, [r7, #24]
 8004494:	61fa      	str	r2, [r7, #28]
 8004496:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800449a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800449e:	f7fc fb85 	bl	8000bac <__aeabi_uldivmod>
 80044a2:	4602      	mov	r2, r0
 80044a4:	460b      	mov	r3, r1
 80044a6:	4613      	mov	r3, r2
 80044a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044aa:	e053      	b.n	8004554 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ac:	4b35      	ldr	r3, [pc, #212]	; (8004584 <HAL_RCC_GetSysClockFreq+0x180>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	099b      	lsrs	r3, r3, #6
 80044b2:	2200      	movs	r2, #0
 80044b4:	613b      	str	r3, [r7, #16]
 80044b6:	617a      	str	r2, [r7, #20]
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80044be:	f04f 0b00 	mov.w	fp, #0
 80044c2:	4652      	mov	r2, sl
 80044c4:	465b      	mov	r3, fp
 80044c6:	f04f 0000 	mov.w	r0, #0
 80044ca:	f04f 0100 	mov.w	r1, #0
 80044ce:	0159      	lsls	r1, r3, #5
 80044d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044d4:	0150      	lsls	r0, r2, #5
 80044d6:	4602      	mov	r2, r0
 80044d8:	460b      	mov	r3, r1
 80044da:	ebb2 080a 	subs.w	r8, r2, sl
 80044de:	eb63 090b 	sbc.w	r9, r3, fp
 80044e2:	f04f 0200 	mov.w	r2, #0
 80044e6:	f04f 0300 	mov.w	r3, #0
 80044ea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80044ee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80044f2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80044f6:	ebb2 0408 	subs.w	r4, r2, r8
 80044fa:	eb63 0509 	sbc.w	r5, r3, r9
 80044fe:	f04f 0200 	mov.w	r2, #0
 8004502:	f04f 0300 	mov.w	r3, #0
 8004506:	00eb      	lsls	r3, r5, #3
 8004508:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800450c:	00e2      	lsls	r2, r4, #3
 800450e:	4614      	mov	r4, r2
 8004510:	461d      	mov	r5, r3
 8004512:	eb14 030a 	adds.w	r3, r4, sl
 8004516:	603b      	str	r3, [r7, #0]
 8004518:	eb45 030b 	adc.w	r3, r5, fp
 800451c:	607b      	str	r3, [r7, #4]
 800451e:	f04f 0200 	mov.w	r2, #0
 8004522:	f04f 0300 	mov.w	r3, #0
 8004526:	e9d7 4500 	ldrd	r4, r5, [r7]
 800452a:	4629      	mov	r1, r5
 800452c:	028b      	lsls	r3, r1, #10
 800452e:	4621      	mov	r1, r4
 8004530:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004534:	4621      	mov	r1, r4
 8004536:	028a      	lsls	r2, r1, #10
 8004538:	4610      	mov	r0, r2
 800453a:	4619      	mov	r1, r3
 800453c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800453e:	2200      	movs	r2, #0
 8004540:	60bb      	str	r3, [r7, #8]
 8004542:	60fa      	str	r2, [r7, #12]
 8004544:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004548:	f7fc fb30 	bl	8000bac <__aeabi_uldivmod>
 800454c:	4602      	mov	r2, r0
 800454e:	460b      	mov	r3, r1
 8004550:	4613      	mov	r3, r2
 8004552:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004554:	4b0b      	ldr	r3, [pc, #44]	; (8004584 <HAL_RCC_GetSysClockFreq+0x180>)
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	0c1b      	lsrs	r3, r3, #16
 800455a:	f003 0303 	and.w	r3, r3, #3
 800455e:	3301      	adds	r3, #1
 8004560:	005b      	lsls	r3, r3, #1
 8004562:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004564:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004568:	fbb2 f3f3 	udiv	r3, r2, r3
 800456c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800456e:	e002      	b.n	8004576 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004570:	4b05      	ldr	r3, [pc, #20]	; (8004588 <HAL_RCC_GetSysClockFreq+0x184>)
 8004572:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004574:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004578:	4618      	mov	r0, r3
 800457a:	3740      	adds	r7, #64	; 0x40
 800457c:	46bd      	mov	sp, r7
 800457e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004582:	bf00      	nop
 8004584:	40023800 	.word	0x40023800
 8004588:	00f42400 	.word	0x00f42400
 800458c:	017d7840 	.word	0x017d7840

08004590 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004594:	4b03      	ldr	r3, [pc, #12]	; (80045a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004596:	681b      	ldr	r3, [r3, #0]
}
 8004598:	4618      	mov	r0, r3
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	20000000 	.word	0x20000000

080045a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045ac:	f7ff fff0 	bl	8004590 <HAL_RCC_GetHCLKFreq>
 80045b0:	4602      	mov	r2, r0
 80045b2:	4b05      	ldr	r3, [pc, #20]	; (80045c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	0a9b      	lsrs	r3, r3, #10
 80045b8:	f003 0307 	and.w	r3, r3, #7
 80045bc:	4903      	ldr	r1, [pc, #12]	; (80045cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80045be:	5ccb      	ldrb	r3, [r1, r3]
 80045c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	40023800 	.word	0x40023800
 80045cc:	08008570 	.word	0x08008570

080045d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80045d4:	f7ff ffdc 	bl	8004590 <HAL_RCC_GetHCLKFreq>
 80045d8:	4602      	mov	r2, r0
 80045da:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	0b5b      	lsrs	r3, r3, #13
 80045e0:	f003 0307 	and.w	r3, r3, #7
 80045e4:	4903      	ldr	r1, [pc, #12]	; (80045f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045e6:	5ccb      	ldrb	r3, [r1, r3]
 80045e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	40023800 	.word	0x40023800
 80045f4:	08008570 	.word	0x08008570

080045f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e041      	b.n	800468e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d106      	bne.n	8004624 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2200      	movs	r2, #0
 800461a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f7fd f934 	bl	800188c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2202      	movs	r2, #2
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	3304      	adds	r3, #4
 8004634:	4619      	mov	r1, r3
 8004636:	4610      	mov	r0, r2
 8004638:	f000 fb68 	bl	8004d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
	...

08004698 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d001      	beq.n	80046b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e046      	b.n	800473e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a23      	ldr	r2, [pc, #140]	; (800474c <HAL_TIM_Base_Start+0xb4>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d022      	beq.n	8004708 <HAL_TIM_Base_Start+0x70>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ca:	d01d      	beq.n	8004708 <HAL_TIM_Base_Start+0x70>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a1f      	ldr	r2, [pc, #124]	; (8004750 <HAL_TIM_Base_Start+0xb8>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d018      	beq.n	8004708 <HAL_TIM_Base_Start+0x70>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a1e      	ldr	r2, [pc, #120]	; (8004754 <HAL_TIM_Base_Start+0xbc>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d013      	beq.n	8004708 <HAL_TIM_Base_Start+0x70>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a1c      	ldr	r2, [pc, #112]	; (8004758 <HAL_TIM_Base_Start+0xc0>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d00e      	beq.n	8004708 <HAL_TIM_Base_Start+0x70>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a1b      	ldr	r2, [pc, #108]	; (800475c <HAL_TIM_Base_Start+0xc4>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d009      	beq.n	8004708 <HAL_TIM_Base_Start+0x70>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a19      	ldr	r2, [pc, #100]	; (8004760 <HAL_TIM_Base_Start+0xc8>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d004      	beq.n	8004708 <HAL_TIM_Base_Start+0x70>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a18      	ldr	r2, [pc, #96]	; (8004764 <HAL_TIM_Base_Start+0xcc>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d111      	bne.n	800472c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f003 0307 	and.w	r3, r3, #7
 8004712:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2b06      	cmp	r3, #6
 8004718:	d010      	beq.n	800473c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f042 0201 	orr.w	r2, r2, #1
 8004728:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800472a:	e007      	b.n	800473c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0201 	orr.w	r2, r2, #1
 800473a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	40010000 	.word	0x40010000
 8004750:	40000400 	.word	0x40000400
 8004754:	40000800 	.word	0x40000800
 8004758:	40000c00 	.word	0x40000c00
 800475c:	40010400 	.word	0x40010400
 8004760:	40014000 	.word	0x40014000
 8004764:	40001800 	.word	0x40001800

08004768 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6a1a      	ldr	r2, [r3, #32]
 8004776:	f241 1311 	movw	r3, #4369	; 0x1111
 800477a:	4013      	ands	r3, r2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10f      	bne.n	80047a0 <HAL_TIM_Base_Stop+0x38>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6a1a      	ldr	r2, [r3, #32]
 8004786:	f240 4344 	movw	r3, #1092	; 0x444
 800478a:	4013      	ands	r3, r2
 800478c:	2b00      	cmp	r3, #0
 800478e:	d107      	bne.n	80047a0 <HAL_TIM_Base_Stop+0x38>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0201 	bic.w	r2, r2, #1
 800479e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	370c      	adds	r7, #12
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr

080047b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b082      	sub	sp, #8
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d101      	bne.n	80047c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e041      	b.n	800484c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d106      	bne.n	80047e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 f839 	bl	8004854 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2202      	movs	r2, #2
 80047e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	3304      	adds	r3, #4
 80047f2:	4619      	mov	r1, r3
 80047f4:	4610      	mov	r0, r2
 80047f6:	f000 fa89 	bl	8004d0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2201      	movs	r2, #1
 80047fe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2201      	movs	r2, #1
 8004826:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3708      	adds	r7, #8
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d109      	bne.n	800488c <HAL_TIM_PWM_Start+0x24>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b01      	cmp	r3, #1
 8004882:	bf14      	ite	ne
 8004884:	2301      	movne	r3, #1
 8004886:	2300      	moveq	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	e022      	b.n	80048d2 <HAL_TIM_PWM_Start+0x6a>
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	2b04      	cmp	r3, #4
 8004890:	d109      	bne.n	80048a6 <HAL_TIM_PWM_Start+0x3e>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b01      	cmp	r3, #1
 800489c:	bf14      	ite	ne
 800489e:	2301      	movne	r3, #1
 80048a0:	2300      	moveq	r3, #0
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	e015      	b.n	80048d2 <HAL_TIM_PWM_Start+0x6a>
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	2b08      	cmp	r3, #8
 80048aa:	d109      	bne.n	80048c0 <HAL_TIM_PWM_Start+0x58>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	bf14      	ite	ne
 80048b8:	2301      	movne	r3, #1
 80048ba:	2300      	moveq	r3, #0
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	e008      	b.n	80048d2 <HAL_TIM_PWM_Start+0x6a>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	bf14      	ite	ne
 80048cc:	2301      	movne	r3, #1
 80048ce:	2300      	moveq	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e07c      	b.n	80049d4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d104      	bne.n	80048ea <HAL_TIM_PWM_Start+0x82>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2202      	movs	r2, #2
 80048e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048e8:	e013      	b.n	8004912 <HAL_TIM_PWM_Start+0xaa>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b04      	cmp	r3, #4
 80048ee:	d104      	bne.n	80048fa <HAL_TIM_PWM_Start+0x92>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048f8:	e00b      	b.n	8004912 <HAL_TIM_PWM_Start+0xaa>
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	d104      	bne.n	800490a <HAL_TIM_PWM_Start+0xa2>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2202      	movs	r2, #2
 8004904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004908:	e003      	b.n	8004912 <HAL_TIM_PWM_Start+0xaa>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2202      	movs	r2, #2
 800490e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2201      	movs	r2, #1
 8004918:	6839      	ldr	r1, [r7, #0]
 800491a:	4618      	mov	r0, r3
 800491c:	f000 fce0 	bl	80052e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a2d      	ldr	r2, [pc, #180]	; (80049dc <HAL_TIM_PWM_Start+0x174>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d004      	beq.n	8004934 <HAL_TIM_PWM_Start+0xcc>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a2c      	ldr	r2, [pc, #176]	; (80049e0 <HAL_TIM_PWM_Start+0x178>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d101      	bne.n	8004938 <HAL_TIM_PWM_Start+0xd0>
 8004934:	2301      	movs	r3, #1
 8004936:	e000      	b.n	800493a <HAL_TIM_PWM_Start+0xd2>
 8004938:	2300      	movs	r3, #0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d007      	beq.n	800494e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800494c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a22      	ldr	r2, [pc, #136]	; (80049dc <HAL_TIM_PWM_Start+0x174>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d022      	beq.n	800499e <HAL_TIM_PWM_Start+0x136>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004960:	d01d      	beq.n	800499e <HAL_TIM_PWM_Start+0x136>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a1f      	ldr	r2, [pc, #124]	; (80049e4 <HAL_TIM_PWM_Start+0x17c>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d018      	beq.n	800499e <HAL_TIM_PWM_Start+0x136>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a1d      	ldr	r2, [pc, #116]	; (80049e8 <HAL_TIM_PWM_Start+0x180>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d013      	beq.n	800499e <HAL_TIM_PWM_Start+0x136>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a1c      	ldr	r2, [pc, #112]	; (80049ec <HAL_TIM_PWM_Start+0x184>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d00e      	beq.n	800499e <HAL_TIM_PWM_Start+0x136>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a16      	ldr	r2, [pc, #88]	; (80049e0 <HAL_TIM_PWM_Start+0x178>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d009      	beq.n	800499e <HAL_TIM_PWM_Start+0x136>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a18      	ldr	r2, [pc, #96]	; (80049f0 <HAL_TIM_PWM_Start+0x188>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d004      	beq.n	800499e <HAL_TIM_PWM_Start+0x136>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a16      	ldr	r2, [pc, #88]	; (80049f4 <HAL_TIM_PWM_Start+0x18c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d111      	bne.n	80049c2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	f003 0307 	and.w	r3, r3, #7
 80049a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2b06      	cmp	r3, #6
 80049ae:	d010      	beq.n	80049d2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f042 0201 	orr.w	r2, r2, #1
 80049be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c0:	e007      	b.n	80049d2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f042 0201 	orr.w	r2, r2, #1
 80049d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	40010000 	.word	0x40010000
 80049e0:	40010400 	.word	0x40010400
 80049e4:	40000400 	.word	0x40000400
 80049e8:	40000800 	.word	0x40000800
 80049ec:	40000c00 	.word	0x40000c00
 80049f0:	40014000 	.word	0x40014000
 80049f4:	40001800 	.word	0x40001800

080049f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b086      	sub	sp, #24
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a04:	2300      	movs	r3, #0
 8004a06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d101      	bne.n	8004a16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a12:	2302      	movs	r3, #2
 8004a14:	e0ae      	b.n	8004b74 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2b0c      	cmp	r3, #12
 8004a22:	f200 809f 	bhi.w	8004b64 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a26:	a201      	add	r2, pc, #4	; (adr r2, 8004a2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2c:	08004a61 	.word	0x08004a61
 8004a30:	08004b65 	.word	0x08004b65
 8004a34:	08004b65 	.word	0x08004b65
 8004a38:	08004b65 	.word	0x08004b65
 8004a3c:	08004aa1 	.word	0x08004aa1
 8004a40:	08004b65 	.word	0x08004b65
 8004a44:	08004b65 	.word	0x08004b65
 8004a48:	08004b65 	.word	0x08004b65
 8004a4c:	08004ae3 	.word	0x08004ae3
 8004a50:	08004b65 	.word	0x08004b65
 8004a54:	08004b65 	.word	0x08004b65
 8004a58:	08004b65 	.word	0x08004b65
 8004a5c:	08004b23 	.word	0x08004b23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68b9      	ldr	r1, [r7, #8]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f000 f9f0 	bl	8004e4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	699a      	ldr	r2, [r3, #24]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f042 0208 	orr.w	r2, r2, #8
 8004a7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699a      	ldr	r2, [r3, #24]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f022 0204 	bic.w	r2, r2, #4
 8004a8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6999      	ldr	r1, [r3, #24]
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	691a      	ldr	r2, [r3, #16]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	430a      	orrs	r2, r1
 8004a9c:	619a      	str	r2, [r3, #24]
      break;
 8004a9e:	e064      	b.n	8004b6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68b9      	ldr	r1, [r7, #8]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 fa40 	bl	8004f2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699a      	ldr	r2, [r3, #24]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	699a      	ldr	r2, [r3, #24]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004aca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6999      	ldr	r1, [r3, #24]
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	021a      	lsls	r2, r3, #8
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	430a      	orrs	r2, r1
 8004ade:	619a      	str	r2, [r3, #24]
      break;
 8004ae0:	e043      	b.n	8004b6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68b9      	ldr	r1, [r7, #8]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f000 fa95 	bl	8005018 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	69da      	ldr	r2, [r3, #28]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f042 0208 	orr.w	r2, r2, #8
 8004afc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	69da      	ldr	r2, [r3, #28]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 0204 	bic.w	r2, r2, #4
 8004b0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	69d9      	ldr	r1, [r3, #28]
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	691a      	ldr	r2, [r3, #16]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	61da      	str	r2, [r3, #28]
      break;
 8004b20:	e023      	b.n	8004b6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68b9      	ldr	r1, [r7, #8]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f000 fae9 	bl	8005100 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	69da      	ldr	r2, [r3, #28]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	69da      	ldr	r2, [r3, #28]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	69d9      	ldr	r1, [r3, #28]
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	021a      	lsls	r2, r3, #8
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	430a      	orrs	r2, r1
 8004b60:	61da      	str	r2, [r3, #28]
      break;
 8004b62:	e002      	b.n	8004b6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	75fb      	strb	r3, [r7, #23]
      break;
 8004b68:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3718      	adds	r7, #24
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b86:	2300      	movs	r3, #0
 8004b88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d101      	bne.n	8004b98 <HAL_TIM_ConfigClockSource+0x1c>
 8004b94:	2302      	movs	r3, #2
 8004b96:	e0b4      	b.n	8004d02 <HAL_TIM_ConfigClockSource+0x186>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004bb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bbe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bd0:	d03e      	beq.n	8004c50 <HAL_TIM_ConfigClockSource+0xd4>
 8004bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bd6:	f200 8087 	bhi.w	8004ce8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bde:	f000 8086 	beq.w	8004cee <HAL_TIM_ConfigClockSource+0x172>
 8004be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004be6:	d87f      	bhi.n	8004ce8 <HAL_TIM_ConfigClockSource+0x16c>
 8004be8:	2b70      	cmp	r3, #112	; 0x70
 8004bea:	d01a      	beq.n	8004c22 <HAL_TIM_ConfigClockSource+0xa6>
 8004bec:	2b70      	cmp	r3, #112	; 0x70
 8004bee:	d87b      	bhi.n	8004ce8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bf0:	2b60      	cmp	r3, #96	; 0x60
 8004bf2:	d050      	beq.n	8004c96 <HAL_TIM_ConfigClockSource+0x11a>
 8004bf4:	2b60      	cmp	r3, #96	; 0x60
 8004bf6:	d877      	bhi.n	8004ce8 <HAL_TIM_ConfigClockSource+0x16c>
 8004bf8:	2b50      	cmp	r3, #80	; 0x50
 8004bfa:	d03c      	beq.n	8004c76 <HAL_TIM_ConfigClockSource+0xfa>
 8004bfc:	2b50      	cmp	r3, #80	; 0x50
 8004bfe:	d873      	bhi.n	8004ce8 <HAL_TIM_ConfigClockSource+0x16c>
 8004c00:	2b40      	cmp	r3, #64	; 0x40
 8004c02:	d058      	beq.n	8004cb6 <HAL_TIM_ConfigClockSource+0x13a>
 8004c04:	2b40      	cmp	r3, #64	; 0x40
 8004c06:	d86f      	bhi.n	8004ce8 <HAL_TIM_ConfigClockSource+0x16c>
 8004c08:	2b30      	cmp	r3, #48	; 0x30
 8004c0a:	d064      	beq.n	8004cd6 <HAL_TIM_ConfigClockSource+0x15a>
 8004c0c:	2b30      	cmp	r3, #48	; 0x30
 8004c0e:	d86b      	bhi.n	8004ce8 <HAL_TIM_ConfigClockSource+0x16c>
 8004c10:	2b20      	cmp	r3, #32
 8004c12:	d060      	beq.n	8004cd6 <HAL_TIM_ConfigClockSource+0x15a>
 8004c14:	2b20      	cmp	r3, #32
 8004c16:	d867      	bhi.n	8004ce8 <HAL_TIM_ConfigClockSource+0x16c>
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d05c      	beq.n	8004cd6 <HAL_TIM_ConfigClockSource+0x15a>
 8004c1c:	2b10      	cmp	r3, #16
 8004c1e:	d05a      	beq.n	8004cd6 <HAL_TIM_ConfigClockSource+0x15a>
 8004c20:	e062      	b.n	8004ce8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6818      	ldr	r0, [r3, #0]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	6899      	ldr	r1, [r3, #8]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	685a      	ldr	r2, [r3, #4]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f000 fb35 	bl	80052a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	609a      	str	r2, [r3, #8]
      break;
 8004c4e:	e04f      	b.n	8004cf0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6818      	ldr	r0, [r3, #0]
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	6899      	ldr	r1, [r3, #8]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	f000 fb1e 	bl	80052a0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689a      	ldr	r2, [r3, #8]
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c72:	609a      	str	r2, [r3, #8]
      break;
 8004c74:	e03c      	b.n	8004cf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6818      	ldr	r0, [r3, #0]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	6859      	ldr	r1, [r3, #4]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	461a      	mov	r2, r3
 8004c84:	f000 fa92 	bl	80051ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2150      	movs	r1, #80	; 0x50
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f000 faeb 	bl	800526a <TIM_ITRx_SetConfig>
      break;
 8004c94:	e02c      	b.n	8004cf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6818      	ldr	r0, [r3, #0]
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	6859      	ldr	r1, [r3, #4]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	f000 fab1 	bl	800520a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2160      	movs	r1, #96	; 0x60
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 fadb 	bl	800526a <TIM_ITRx_SetConfig>
      break;
 8004cb4:	e01c      	b.n	8004cf0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6818      	ldr	r0, [r3, #0]
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	6859      	ldr	r1, [r3, #4]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	f000 fa72 	bl	80051ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2140      	movs	r1, #64	; 0x40
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 facb 	bl	800526a <TIM_ITRx_SetConfig>
      break;
 8004cd4:	e00c      	b.n	8004cf0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4619      	mov	r1, r3
 8004ce0:	4610      	mov	r0, r2
 8004ce2:	f000 fac2 	bl	800526a <TIM_ITRx_SetConfig>
      break;
 8004ce6:	e003      	b.n	8004cf0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	73fb      	strb	r3, [r7, #15]
      break;
 8004cec:	e000      	b.n	8004cf0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004cee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
	...

08004d0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a40      	ldr	r2, [pc, #256]	; (8004e20 <TIM_Base_SetConfig+0x114>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d013      	beq.n	8004d4c <TIM_Base_SetConfig+0x40>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d2a:	d00f      	beq.n	8004d4c <TIM_Base_SetConfig+0x40>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a3d      	ldr	r2, [pc, #244]	; (8004e24 <TIM_Base_SetConfig+0x118>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d00b      	beq.n	8004d4c <TIM_Base_SetConfig+0x40>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a3c      	ldr	r2, [pc, #240]	; (8004e28 <TIM_Base_SetConfig+0x11c>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d007      	beq.n	8004d4c <TIM_Base_SetConfig+0x40>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a3b      	ldr	r2, [pc, #236]	; (8004e2c <TIM_Base_SetConfig+0x120>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d003      	beq.n	8004d4c <TIM_Base_SetConfig+0x40>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a3a      	ldr	r2, [pc, #232]	; (8004e30 <TIM_Base_SetConfig+0x124>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d108      	bne.n	8004d5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a2f      	ldr	r2, [pc, #188]	; (8004e20 <TIM_Base_SetConfig+0x114>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d02b      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d6c:	d027      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a2c      	ldr	r2, [pc, #176]	; (8004e24 <TIM_Base_SetConfig+0x118>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d023      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a2b      	ldr	r2, [pc, #172]	; (8004e28 <TIM_Base_SetConfig+0x11c>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d01f      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a2a      	ldr	r2, [pc, #168]	; (8004e2c <TIM_Base_SetConfig+0x120>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d01b      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	4a29      	ldr	r2, [pc, #164]	; (8004e30 <TIM_Base_SetConfig+0x124>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d017      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a28      	ldr	r2, [pc, #160]	; (8004e34 <TIM_Base_SetConfig+0x128>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d013      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a27      	ldr	r2, [pc, #156]	; (8004e38 <TIM_Base_SetConfig+0x12c>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d00f      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	4a26      	ldr	r2, [pc, #152]	; (8004e3c <TIM_Base_SetConfig+0x130>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d00b      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a25      	ldr	r2, [pc, #148]	; (8004e40 <TIM_Base_SetConfig+0x134>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d007      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a24      	ldr	r2, [pc, #144]	; (8004e44 <TIM_Base_SetConfig+0x138>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d003      	beq.n	8004dbe <TIM_Base_SetConfig+0xb2>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a23      	ldr	r2, [pc, #140]	; (8004e48 <TIM_Base_SetConfig+0x13c>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d108      	bne.n	8004dd0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a0a      	ldr	r2, [pc, #40]	; (8004e20 <TIM_Base_SetConfig+0x114>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d003      	beq.n	8004e04 <TIM_Base_SetConfig+0xf8>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a0c      	ldr	r2, [pc, #48]	; (8004e30 <TIM_Base_SetConfig+0x124>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d103      	bne.n	8004e0c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	691a      	ldr	r2, [r3, #16]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	615a      	str	r2, [r3, #20]
}
 8004e12:	bf00      	nop
 8004e14:	3714      	adds	r7, #20
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
 8004e1e:	bf00      	nop
 8004e20:	40010000 	.word	0x40010000
 8004e24:	40000400 	.word	0x40000400
 8004e28:	40000800 	.word	0x40000800
 8004e2c:	40000c00 	.word	0x40000c00
 8004e30:	40010400 	.word	0x40010400
 8004e34:	40014000 	.word	0x40014000
 8004e38:	40014400 	.word	0x40014400
 8004e3c:	40014800 	.word	0x40014800
 8004e40:	40001800 	.word	0x40001800
 8004e44:	40001c00 	.word	0x40001c00
 8004e48:	40002000 	.word	0x40002000

08004e4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b087      	sub	sp, #28
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	f023 0201 	bic.w	r2, r3, #1
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a1b      	ldr	r3, [r3, #32]
 8004e66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f023 0303 	bic.w	r3, r3, #3
 8004e82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	f023 0302 	bic.w	r3, r3, #2
 8004e94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	697a      	ldr	r2, [r7, #20]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a20      	ldr	r2, [pc, #128]	; (8004f24 <TIM_OC1_SetConfig+0xd8>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d003      	beq.n	8004eb0 <TIM_OC1_SetConfig+0x64>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a1f      	ldr	r2, [pc, #124]	; (8004f28 <TIM_OC1_SetConfig+0xdc>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d10c      	bne.n	8004eca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	f023 0308 	bic.w	r3, r3, #8
 8004eb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f023 0304 	bic.w	r3, r3, #4
 8004ec8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a15      	ldr	r2, [pc, #84]	; (8004f24 <TIM_OC1_SetConfig+0xd8>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d003      	beq.n	8004eda <TIM_OC1_SetConfig+0x8e>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a14      	ldr	r2, [pc, #80]	; (8004f28 <TIM_OC1_SetConfig+0xdc>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d111      	bne.n	8004efe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ee0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ee8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	695b      	ldr	r3, [r3, #20]
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	699b      	ldr	r3, [r3, #24]
 8004ef8:	693a      	ldr	r2, [r7, #16]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	693a      	ldr	r2, [r7, #16]
 8004f02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	621a      	str	r2, [r3, #32]
}
 8004f18:	bf00      	nop
 8004f1a:	371c      	adds	r7, #28
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr
 8004f24:	40010000 	.word	0x40010000
 8004f28:	40010400 	.word	0x40010400

08004f2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b087      	sub	sp, #28
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	f023 0210 	bic.w	r2, r3, #16
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	021b      	lsls	r3, r3, #8
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	f023 0320 	bic.w	r3, r3, #32
 8004f76:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	011b      	lsls	r3, r3, #4
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a22      	ldr	r2, [pc, #136]	; (8005010 <TIM_OC2_SetConfig+0xe4>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d003      	beq.n	8004f94 <TIM_OC2_SetConfig+0x68>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a21      	ldr	r2, [pc, #132]	; (8005014 <TIM_OC2_SetConfig+0xe8>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d10d      	bne.n	8004fb0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	011b      	lsls	r3, r3, #4
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004fa8:	697b      	ldr	r3, [r7, #20]
 8004faa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a17      	ldr	r2, [pc, #92]	; (8005010 <TIM_OC2_SetConfig+0xe4>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d003      	beq.n	8004fc0 <TIM_OC2_SetConfig+0x94>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a16      	ldr	r2, [pc, #88]	; (8005014 <TIM_OC2_SetConfig+0xe8>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d113      	bne.n	8004fe8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004fce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	621a      	str	r2, [r3, #32]
}
 8005002:	bf00      	nop
 8005004:	371c      	adds	r7, #28
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	40010000 	.word	0x40010000
 8005014:	40010400 	.word	0x40010400

08005018 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005018:	b480      	push	{r7}
 800501a:	b087      	sub	sp, #28
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	69db      	ldr	r3, [r3, #28]
 800503e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f023 0303 	bic.w	r3, r3, #3
 800504e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	4313      	orrs	r3, r2
 8005058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005060:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	021b      	lsls	r3, r3, #8
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	4313      	orrs	r3, r2
 800506c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a21      	ldr	r2, [pc, #132]	; (80050f8 <TIM_OC3_SetConfig+0xe0>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d003      	beq.n	800507e <TIM_OC3_SetConfig+0x66>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a20      	ldr	r2, [pc, #128]	; (80050fc <TIM_OC3_SetConfig+0xe4>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d10d      	bne.n	800509a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005084:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	021b      	lsls	r3, r3, #8
 800508c:	697a      	ldr	r2, [r7, #20]
 800508e:	4313      	orrs	r3, r2
 8005090:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005098:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a16      	ldr	r2, [pc, #88]	; (80050f8 <TIM_OC3_SetConfig+0xe0>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d003      	beq.n	80050aa <TIM_OC3_SetConfig+0x92>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a15      	ldr	r2, [pc, #84]	; (80050fc <TIM_OC3_SetConfig+0xe4>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d113      	bne.n	80050d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	695b      	ldr	r3, [r3, #20]
 80050be:	011b      	lsls	r3, r3, #4
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	011b      	lsls	r3, r3, #4
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	621a      	str	r2, [r3, #32]
}
 80050ec:	bf00      	nop
 80050ee:	371c      	adds	r7, #28
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr
 80050f8:	40010000 	.word	0x40010000
 80050fc:	40010400 	.word	0x40010400

08005100 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005100:	b480      	push	{r7}
 8005102:	b087      	sub	sp, #28
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a1b      	ldr	r3, [r3, #32]
 800510e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	69db      	ldr	r3, [r3, #28]
 8005126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800512e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005136:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	021b      	lsls	r3, r3, #8
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	4313      	orrs	r3, r2
 8005142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800514a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	031b      	lsls	r3, r3, #12
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	4313      	orrs	r3, r2
 8005156:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a12      	ldr	r2, [pc, #72]	; (80051a4 <TIM_OC4_SetConfig+0xa4>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d003      	beq.n	8005168 <TIM_OC4_SetConfig+0x68>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a11      	ldr	r2, [pc, #68]	; (80051a8 <TIM_OC4_SetConfig+0xa8>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d109      	bne.n	800517c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800516e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	019b      	lsls	r3, r3, #6
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	4313      	orrs	r3, r2
 800517a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	685a      	ldr	r2, [r3, #4]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	621a      	str	r2, [r3, #32]
}
 8005196:	bf00      	nop
 8005198:	371c      	adds	r7, #28
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	40010000 	.word	0x40010000
 80051a8:	40010400 	.word	0x40010400

080051ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	f023 0201 	bic.w	r2, r3, #1
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	011b      	lsls	r3, r3, #4
 80051dc:	693a      	ldr	r2, [r7, #16]
 80051de:	4313      	orrs	r3, r2
 80051e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f023 030a 	bic.w	r3, r3, #10
 80051e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	697a      	ldr	r2, [r7, #20]
 80051fc:	621a      	str	r2, [r3, #32]
}
 80051fe:	bf00      	nop
 8005200:	371c      	adds	r7, #28
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr

0800520a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800520a:	b480      	push	{r7}
 800520c:	b087      	sub	sp, #28
 800520e:	af00      	add	r7, sp, #0
 8005210:	60f8      	str	r0, [r7, #12]
 8005212:	60b9      	str	r1, [r7, #8]
 8005214:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6a1b      	ldr	r3, [r3, #32]
 800521a:	f023 0210 	bic.w	r2, r3, #16
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6a1b      	ldr	r3, [r3, #32]
 800522c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005234:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	031b      	lsls	r3, r3, #12
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	4313      	orrs	r3, r2
 800523e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005246:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	011b      	lsls	r3, r3, #4
 800524c:	693a      	ldr	r2, [r7, #16]
 800524e:	4313      	orrs	r3, r2
 8005250:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	697a      	ldr	r2, [r7, #20]
 8005256:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	621a      	str	r2, [r3, #32]
}
 800525e:	bf00      	nop
 8005260:	371c      	adds	r7, #28
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800526a:	b480      	push	{r7}
 800526c:	b085      	sub	sp, #20
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
 8005272:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005280:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005282:	683a      	ldr	r2, [r7, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4313      	orrs	r3, r2
 8005288:	f043 0307 	orr.w	r3, r3, #7
 800528c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	609a      	str	r2, [r3, #8]
}
 8005294:	bf00      	nop
 8005296:	3714      	adds	r7, #20
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b087      	sub	sp, #28
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	607a      	str	r2, [r7, #4]
 80052ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052ba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	021a      	lsls	r2, r3, #8
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	431a      	orrs	r2, r3
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	609a      	str	r2, [r3, #8]
}
 80052d4:	bf00      	nop
 80052d6:	371c      	adds	r7, #28
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b087      	sub	sp, #28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	f003 031f 	and.w	r3, r3, #31
 80052f2:	2201      	movs	r2, #1
 80052f4:	fa02 f303 	lsl.w	r3, r2, r3
 80052f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6a1a      	ldr	r2, [r3, #32]
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	43db      	mvns	r3, r3
 8005302:	401a      	ands	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6a1a      	ldr	r2, [r3, #32]
 800530c:	68bb      	ldr	r3, [r7, #8]
 800530e:	f003 031f 	and.w	r3, r3, #31
 8005312:	6879      	ldr	r1, [r7, #4]
 8005314:	fa01 f303 	lsl.w	r3, r1, r3
 8005318:	431a      	orrs	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	621a      	str	r2, [r3, #32]
}
 800531e:	bf00      	nop
 8005320:	371c      	adds	r7, #28
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr
	...

0800532c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800532c:	b480      	push	{r7}
 800532e:	b085      	sub	sp, #20
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800533c:	2b01      	cmp	r3, #1
 800533e:	d101      	bne.n	8005344 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005340:	2302      	movs	r3, #2
 8005342:	e05a      	b.n	80053fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800536a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	4313      	orrs	r3, r2
 8005374:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a21      	ldr	r2, [pc, #132]	; (8005408 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d022      	beq.n	80053ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005390:	d01d      	beq.n	80053ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a1d      	ldr	r2, [pc, #116]	; (800540c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d018      	beq.n	80053ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a1b      	ldr	r2, [pc, #108]	; (8005410 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d013      	beq.n	80053ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a1a      	ldr	r2, [pc, #104]	; (8005414 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d00e      	beq.n	80053ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a18      	ldr	r2, [pc, #96]	; (8005418 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d009      	beq.n	80053ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a17      	ldr	r2, [pc, #92]	; (800541c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d004      	beq.n	80053ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a15      	ldr	r2, [pc, #84]	; (8005420 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d10c      	bne.n	80053e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	68ba      	ldr	r2, [r7, #8]
 80053dc:	4313      	orrs	r3, r2
 80053de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68ba      	ldr	r2, [r7, #8]
 80053e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3714      	adds	r7, #20
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	40010000 	.word	0x40010000
 800540c:	40000400 	.word	0x40000400
 8005410:	40000800 	.word	0x40000800
 8005414:	40000c00 	.word	0x40000c00
 8005418:	40010400 	.word	0x40010400
 800541c:	40014000 	.word	0x40014000
 8005420:	40001800 	.word	0x40001800

08005424 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d101      	bne.n	8005436 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	e03f      	b.n	80054b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800543c:	b2db      	uxtb	r3, r3
 800543e:	2b00      	cmp	r3, #0
 8005440:	d106      	bne.n	8005450 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f7fc fae2 	bl	8001a14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2224      	movs	r2, #36	; 0x24
 8005454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68da      	ldr	r2, [r3, #12]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005466:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 fcdf 	bl	8005e2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	691a      	ldr	r2, [r3, #16]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800547c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	695a      	ldr	r2, [r3, #20]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800548c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68da      	ldr	r2, [r3, #12]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800549c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2220      	movs	r2, #32
 80054a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2220      	movs	r2, #32
 80054b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3708      	adds	r7, #8
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b084      	sub	sp, #16
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	60f8      	str	r0, [r7, #12]
 80054c6:	60b9      	str	r1, [r7, #8]
 80054c8:	4613      	mov	r3, r2
 80054ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b20      	cmp	r3, #32
 80054d6:	d11d      	bne.n	8005514 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d002      	beq.n	80054e4 <HAL_UART_Receive_IT+0x26>
 80054de:	88fb      	ldrh	r3, [r7, #6]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d101      	bne.n	80054e8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e016      	b.n	8005516 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d101      	bne.n	80054f6 <HAL_UART_Receive_IT+0x38>
 80054f2:	2302      	movs	r3, #2
 80054f4:	e00f      	b.n	8005516 <HAL_UART_Receive_IT+0x58>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005504:	88fb      	ldrh	r3, [r7, #6]
 8005506:	461a      	mov	r2, r3
 8005508:	68b9      	ldr	r1, [r7, #8]
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f000 fab6 	bl	8005a7c <UART_Start_Receive_IT>
 8005510:	4603      	mov	r3, r0
 8005512:	e000      	b.n	8005516 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005514:	2302      	movs	r3, #2
  }
}
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
	...

08005520 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b0ba      	sub	sp, #232	; 0xe8
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005546:	2300      	movs	r3, #0
 8005548:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800554c:	2300      	movs	r3, #0
 800554e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005556:	f003 030f 	and.w	r3, r3, #15
 800555a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800555e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005562:	2b00      	cmp	r3, #0
 8005564:	d10f      	bne.n	8005586 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800556a:	f003 0320 	and.w	r3, r3, #32
 800556e:	2b00      	cmp	r3, #0
 8005570:	d009      	beq.n	8005586 <HAL_UART_IRQHandler+0x66>
 8005572:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005576:	f003 0320 	and.w	r3, r3, #32
 800557a:	2b00      	cmp	r3, #0
 800557c:	d003      	beq.n	8005586 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 fb99 	bl	8005cb6 <UART_Receive_IT>
      return;
 8005584:	e256      	b.n	8005a34 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005586:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800558a:	2b00      	cmp	r3, #0
 800558c:	f000 80de 	beq.w	800574c <HAL_UART_IRQHandler+0x22c>
 8005590:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005594:	f003 0301 	and.w	r3, r3, #1
 8005598:	2b00      	cmp	r3, #0
 800559a:	d106      	bne.n	80055aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800559c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 80d1 	beq.w	800574c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055ae:	f003 0301 	and.w	r3, r3, #1
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00b      	beq.n	80055ce <HAL_UART_IRQHandler+0xae>
 80055b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d005      	beq.n	80055ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c6:	f043 0201 	orr.w	r2, r3, #1
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055d2:	f003 0304 	and.w	r3, r3, #4
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00b      	beq.n	80055f2 <HAL_UART_IRQHandler+0xd2>
 80055da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d005      	beq.n	80055f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ea:	f043 0202 	orr.w	r2, r3, #2
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055f6:	f003 0302 	and.w	r3, r3, #2
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00b      	beq.n	8005616 <HAL_UART_IRQHandler+0xf6>
 80055fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	d005      	beq.n	8005616 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560e:	f043 0204 	orr.w	r2, r3, #4
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800561a:	f003 0308 	and.w	r3, r3, #8
 800561e:	2b00      	cmp	r3, #0
 8005620:	d011      	beq.n	8005646 <HAL_UART_IRQHandler+0x126>
 8005622:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005626:	f003 0320 	and.w	r3, r3, #32
 800562a:	2b00      	cmp	r3, #0
 800562c:	d105      	bne.n	800563a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800562e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b00      	cmp	r3, #0
 8005638:	d005      	beq.n	8005646 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563e:	f043 0208 	orr.w	r2, r3, #8
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564a:	2b00      	cmp	r3, #0
 800564c:	f000 81ed 	beq.w	8005a2a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005654:	f003 0320 	and.w	r3, r3, #32
 8005658:	2b00      	cmp	r3, #0
 800565a:	d008      	beq.n	800566e <HAL_UART_IRQHandler+0x14e>
 800565c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005660:	f003 0320 	and.w	r3, r3, #32
 8005664:	2b00      	cmp	r3, #0
 8005666:	d002      	beq.n	800566e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 fb24 	bl	8005cb6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005678:	2b40      	cmp	r3, #64	; 0x40
 800567a:	bf0c      	ite	eq
 800567c:	2301      	moveq	r3, #1
 800567e:	2300      	movne	r3, #0
 8005680:	b2db      	uxtb	r3, r3
 8005682:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568a:	f003 0308 	and.w	r3, r3, #8
 800568e:	2b00      	cmp	r3, #0
 8005690:	d103      	bne.n	800569a <HAL_UART_IRQHandler+0x17a>
 8005692:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005696:	2b00      	cmp	r3, #0
 8005698:	d04f      	beq.n	800573a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 fa2c 	bl	8005af8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056aa:	2b40      	cmp	r3, #64	; 0x40
 80056ac:	d141      	bne.n	8005732 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	3314      	adds	r3, #20
 80056b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056bc:	e853 3f00 	ldrex	r3, [r3]
 80056c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80056c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3314      	adds	r3, #20
 80056d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80056da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80056de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80056e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80056ea:	e841 2300 	strex	r3, r2, [r1]
 80056ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80056f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1d9      	bne.n	80056ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d013      	beq.n	800572a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005706:	4a7d      	ldr	r2, [pc, #500]	; (80058fc <HAL_UART_IRQHandler+0x3dc>)
 8005708:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570e:	4618      	mov	r0, r3
 8005710:	f7fd fa5c 	bl	8002bcc <HAL_DMA_Abort_IT>
 8005714:	4603      	mov	r3, r0
 8005716:	2b00      	cmp	r3, #0
 8005718:	d016      	beq.n	8005748 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005724:	4610      	mov	r0, r2
 8005726:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005728:	e00e      	b.n	8005748 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 f990 	bl	8005a50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005730:	e00a      	b.n	8005748 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f98c 	bl	8005a50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005738:	e006      	b.n	8005748 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f988 	bl	8005a50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005746:	e170      	b.n	8005a2a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005748:	bf00      	nop
    return;
 800574a:	e16e      	b.n	8005a2a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005750:	2b01      	cmp	r3, #1
 8005752:	f040 814a 	bne.w	80059ea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800575a:	f003 0310 	and.w	r3, r3, #16
 800575e:	2b00      	cmp	r3, #0
 8005760:	f000 8143 	beq.w	80059ea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005768:	f003 0310 	and.w	r3, r3, #16
 800576c:	2b00      	cmp	r3, #0
 800576e:	f000 813c 	beq.w	80059ea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005772:	2300      	movs	r3, #0
 8005774:	60bb      	str	r3, [r7, #8]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	60bb      	str	r3, [r7, #8]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	60bb      	str	r3, [r7, #8]
 8005786:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005792:	2b40      	cmp	r3, #64	; 0x40
 8005794:	f040 80b4 	bne.w	8005900 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80057a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f000 8140 	beq.w	8005a2e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057b6:	429a      	cmp	r2, r3
 80057b8:	f080 8139 	bcs.w	8005a2e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ce:	f000 8088 	beq.w	80058e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	330c      	adds	r3, #12
 80057d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057e0:	e853 3f00 	ldrex	r3, [r3]
 80057e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80057e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	330c      	adds	r3, #12
 80057fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80057fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005802:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005806:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800580a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800580e:	e841 2300 	strex	r3, r2, [r1]
 8005812:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005816:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1d9      	bne.n	80057d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	3314      	adds	r3, #20
 8005824:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005826:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005828:	e853 3f00 	ldrex	r3, [r3]
 800582c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800582e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005830:	f023 0301 	bic.w	r3, r3, #1
 8005834:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	3314      	adds	r3, #20
 800583e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005842:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005846:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005848:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800584a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800584e:	e841 2300 	strex	r3, r2, [r1]
 8005852:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005854:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1e1      	bne.n	800581e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	3314      	adds	r3, #20
 8005860:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005862:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005864:	e853 3f00 	ldrex	r3, [r3]
 8005868:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800586a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800586c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005870:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	3314      	adds	r3, #20
 800587a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800587e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005880:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005882:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005884:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005886:	e841 2300 	strex	r3, r2, [r1]
 800588a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800588c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1e3      	bne.n	800585a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2220      	movs	r2, #32
 8005896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	330c      	adds	r3, #12
 80058a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058aa:	e853 3f00 	ldrex	r3, [r3]
 80058ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058b2:	f023 0310 	bic.w	r3, r3, #16
 80058b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	330c      	adds	r3, #12
 80058c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80058c4:	65ba      	str	r2, [r7, #88]	; 0x58
 80058c6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058cc:	e841 2300 	strex	r3, r2, [r1]
 80058d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d1e3      	bne.n	80058a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058dc:	4618      	mov	r0, r3
 80058de:	f7fd f905 	bl	8002aec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	1ad3      	subs	r3, r2, r3
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	4619      	mov	r1, r3
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f8b6 	bl	8005a64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058f8:	e099      	b.n	8005a2e <HAL_UART_IRQHandler+0x50e>
 80058fa:	bf00      	nop
 80058fc:	08005bbf 	.word	0x08005bbf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005908:	b29b      	uxth	r3, r3
 800590a:	1ad3      	subs	r3, r2, r3
 800590c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005914:	b29b      	uxth	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	f000 808b 	beq.w	8005a32 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800591c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005920:	2b00      	cmp	r3, #0
 8005922:	f000 8086 	beq.w	8005a32 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	330c      	adds	r3, #12
 800592c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800592e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005930:	e853 3f00 	ldrex	r3, [r3]
 8005934:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005938:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800593c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	330c      	adds	r3, #12
 8005946:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800594a:	647a      	str	r2, [r7, #68]	; 0x44
 800594c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800594e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005950:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005952:	e841 2300 	strex	r3, r2, [r1]
 8005956:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800595a:	2b00      	cmp	r3, #0
 800595c:	d1e3      	bne.n	8005926 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	3314      	adds	r3, #20
 8005964:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005968:	e853 3f00 	ldrex	r3, [r3]
 800596c:	623b      	str	r3, [r7, #32]
   return(result);
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	f023 0301 	bic.w	r3, r3, #1
 8005974:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3314      	adds	r3, #20
 800597e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005982:	633a      	str	r2, [r7, #48]	; 0x30
 8005984:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005986:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800598a:	e841 2300 	strex	r3, r2, [r1]
 800598e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1e3      	bne.n	800595e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2220      	movs	r2, #32
 800599a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	330c      	adds	r3, #12
 80059aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	e853 3f00 	ldrex	r3, [r3]
 80059b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f023 0310 	bic.w	r3, r3, #16
 80059ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	330c      	adds	r3, #12
 80059c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80059c8:	61fa      	str	r2, [r7, #28]
 80059ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059cc:	69b9      	ldr	r1, [r7, #24]
 80059ce:	69fa      	ldr	r2, [r7, #28]
 80059d0:	e841 2300 	strex	r3, r2, [r1]
 80059d4:	617b      	str	r3, [r7, #20]
   return(result);
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d1e3      	bne.n	80059a4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059e0:	4619      	mov	r1, r3
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f83e 	bl	8005a64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059e8:	e023      	b.n	8005a32 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80059ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d009      	beq.n	8005a0a <HAL_UART_IRQHandler+0x4ea>
 80059f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f8ef 	bl	8005be6 <UART_Transmit_IT>
    return;
 8005a08:	e014      	b.n	8005a34 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00e      	beq.n	8005a34 <HAL_UART_IRQHandler+0x514>
 8005a16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d008      	beq.n	8005a34 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f000 f92f 	bl	8005c86 <UART_EndTransmit_IT>
    return;
 8005a28:	e004      	b.n	8005a34 <HAL_UART_IRQHandler+0x514>
    return;
 8005a2a:	bf00      	nop
 8005a2c:	e002      	b.n	8005a34 <HAL_UART_IRQHandler+0x514>
      return;
 8005a2e:	bf00      	nop
 8005a30:	e000      	b.n	8005a34 <HAL_UART_IRQHandler+0x514>
      return;
 8005a32:	bf00      	nop
  }
}
 8005a34:	37e8      	adds	r7, #232	; 0xe8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop

08005a3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a70:	bf00      	nop
 8005a72:	370c      	adds	r7, #12
 8005a74:	46bd      	mov	sp, r7
 8005a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7a:	4770      	bx	lr

08005a7c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	4613      	mov	r3, r2
 8005a88:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	68ba      	ldr	r2, [r7, #8]
 8005a8e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	88fa      	ldrh	r2, [r7, #6]
 8005a94:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	88fa      	ldrh	r2, [r7, #6]
 8005a9a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2222      	movs	r2, #34	; 0x22
 8005aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d007      	beq.n	8005aca <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68da      	ldr	r2, [r3, #12]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ac8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	695a      	ldr	r2, [r3, #20]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f042 0201 	orr.w	r2, r2, #1
 8005ad8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68da      	ldr	r2, [r3, #12]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f042 0220 	orr.w	r2, r2, #32
 8005ae8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3714      	adds	r7, #20
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005af8:	b480      	push	{r7}
 8005afa:	b095      	sub	sp, #84	; 0x54
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	330c      	adds	r3, #12
 8005b06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b0a:	e853 3f00 	ldrex	r3, [r3]
 8005b0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	330c      	adds	r3, #12
 8005b1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b20:	643a      	str	r2, [r7, #64]	; 0x40
 8005b22:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b28:	e841 2300 	strex	r3, r2, [r1]
 8005b2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1e5      	bne.n	8005b00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	3314      	adds	r3, #20
 8005b3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3c:	6a3b      	ldr	r3, [r7, #32]
 8005b3e:	e853 3f00 	ldrex	r3, [r3]
 8005b42:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	f023 0301 	bic.w	r3, r3, #1
 8005b4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	3314      	adds	r3, #20
 8005b52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b5c:	e841 2300 	strex	r3, r2, [r1]
 8005b60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1e5      	bne.n	8005b34 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d119      	bne.n	8005ba4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	330c      	adds	r3, #12
 8005b76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	e853 3f00 	ldrex	r3, [r3]
 8005b7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	f023 0310 	bic.w	r3, r3, #16
 8005b86:	647b      	str	r3, [r7, #68]	; 0x44
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	330c      	adds	r3, #12
 8005b8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b90:	61ba      	str	r2, [r7, #24]
 8005b92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b94:	6979      	ldr	r1, [r7, #20]
 8005b96:	69ba      	ldr	r2, [r7, #24]
 8005b98:	e841 2300 	strex	r3, r2, [r1]
 8005b9c:	613b      	str	r3, [r7, #16]
   return(result);
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1e5      	bne.n	8005b70 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005bb2:	bf00      	nop
 8005bb4:	3754      	adds	r7, #84	; 0x54
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b084      	sub	sp, #16
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f7ff ff39 	bl	8005a50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bde:	bf00      	nop
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b085      	sub	sp, #20
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b21      	cmp	r3, #33	; 0x21
 8005bf8:	d13e      	bne.n	8005c78 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c02:	d114      	bne.n	8005c2e <UART_Transmit_IT+0x48>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d110      	bne.n	8005c2e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a1b      	ldr	r3, [r3, #32]
 8005c10:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	461a      	mov	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c20:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6a1b      	ldr	r3, [r3, #32]
 8005c26:	1c9a      	adds	r2, r3, #2
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	621a      	str	r2, [r3, #32]
 8005c2c:	e008      	b.n	8005c40 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a1b      	ldr	r3, [r3, #32]
 8005c32:	1c59      	adds	r1, r3, #1
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	6211      	str	r1, [r2, #32]
 8005c38:	781a      	ldrb	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	3b01      	subs	r3, #1
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10f      	bne.n	8005c74 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68da      	ldr	r2, [r3, #12]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c62:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68da      	ldr	r2, [r3, #12]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c72:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c74:	2300      	movs	r3, #0
 8005c76:	e000      	b.n	8005c7a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c78:	2302      	movs	r3, #2
  }
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3714      	adds	r7, #20
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr

08005c86 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c86:	b580      	push	{r7, lr}
 8005c88:	b082      	sub	sp, #8
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68da      	ldr	r2, [r3, #12]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c9c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2220      	movs	r2, #32
 8005ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f7ff fec8 	bl	8005a3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <UART_Receive_IT>:
  * @retval HAL status
  */
//int buffer_counter = 0;

static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b08c      	sub	sp, #48	; 0x30
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	2b22      	cmp	r3, #34	; 0x22
 8005cc8:	f040 80ab 	bne.w	8005e22 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cd4:	d117      	bne.n	8005d06 <UART_Receive_IT+0x50>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d113      	bne.n	8005d06 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cfe:	1c9a      	adds	r2, r3, #2
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	629a      	str	r2, [r3, #40]	; 0x28
 8005d04:	e026      	b.n	8005d54 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d18:	d007      	beq.n	8005d2a <UART_Receive_IT+0x74>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d10a      	bne.n	8005d38 <UART_Receive_IT+0x82>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d106      	bne.n	8005d38 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	b2da      	uxtb	r2, r3
 8005d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d34:	701a      	strb	r2, [r3, #0]
 8005d36:	e008      	b.n	8005d4a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d44:	b2da      	uxtb	r2, r3
 8005d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d48:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4e:	1c5a      	adds	r2, r3, #1
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	629a      	str	r2, [r3, #40]	; 0x28
//    	  huart->pRxBuffPtr -= buffer_counter;
//    	  buffer_counter = 0;
//      }
    }

    if (--huart->RxXferCount == 0U)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	4619      	mov	r1, r3
 8005d62:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d15a      	bne.n	8005e1e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	68da      	ldr	r2, [r3, #12]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f022 0220 	bic.w	r2, r2, #32
 8005d76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68da      	ldr	r2, [r3, #12]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	695a      	ldr	r2, [r3, #20]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f022 0201 	bic.w	r2, r2, #1
 8005d96:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d135      	bne.n	8005e14 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	330c      	adds	r3, #12
 8005db4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	e853 3f00 	ldrex	r3, [r3]
 8005dbc:	613b      	str	r3, [r7, #16]
   return(result);
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	f023 0310 	bic.w	r3, r3, #16
 8005dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	330c      	adds	r3, #12
 8005dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dce:	623a      	str	r2, [r7, #32]
 8005dd0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd2:	69f9      	ldr	r1, [r7, #28]
 8005dd4:	6a3a      	ldr	r2, [r7, #32]
 8005dd6:	e841 2300 	strex	r3, r2, [r1]
 8005dda:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d1e5      	bne.n	8005dae <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0310 	and.w	r3, r3, #16
 8005dec:	2b10      	cmp	r3, #16
 8005dee:	d10a      	bne.n	8005e06 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005df0:	2300      	movs	r3, #0
 8005df2:	60fb      	str	r3, [r7, #12]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	60fb      	str	r3, [r7, #12]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	60fb      	str	r3, [r7, #12]
 8005e04:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f7ff fe29 	bl	8005a64 <HAL_UARTEx_RxEventCallback>
 8005e12:	e002      	b.n	8005e1a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	f7fb f84b 	bl	8000eb0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	e002      	b.n	8005e24 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	e000      	b.n	8005e24 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005e22:	2302      	movs	r3, #2
  }
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3730      	adds	r7, #48	; 0x30
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}

08005e2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e30:	b0c0      	sub	sp, #256	; 0x100
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e48:	68d9      	ldr	r1, [r3, #12]
 8005e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	ea40 0301 	orr.w	r3, r0, r1
 8005e54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e5a:	689a      	ldr	r2, [r3, #8]
 8005e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	431a      	orrs	r2, r3
 8005e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	431a      	orrs	r2, r3
 8005e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e84:	f021 010c 	bic.w	r1, r1, #12
 8005e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e92:	430b      	orrs	r3, r1
 8005e94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea6:	6999      	ldr	r1, [r3, #24]
 8005ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	ea40 0301 	orr.w	r3, r0, r1
 8005eb2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	4b8f      	ldr	r3, [pc, #572]	; (80060f8 <UART_SetConfig+0x2cc>)
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d005      	beq.n	8005ecc <UART_SetConfig+0xa0>
 8005ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	4b8d      	ldr	r3, [pc, #564]	; (80060fc <UART_SetConfig+0x2d0>)
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d104      	bne.n	8005ed6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ecc:	f7fe fb80 	bl	80045d0 <HAL_RCC_GetPCLK2Freq>
 8005ed0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005ed4:	e003      	b.n	8005ede <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ed6:	f7fe fb67 	bl	80045a8 <HAL_RCC_GetPCLK1Freq>
 8005eda:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee2:	69db      	ldr	r3, [r3, #28]
 8005ee4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ee8:	f040 810c 	bne.w	8006104 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005eec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ef6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005efa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005efe:	4622      	mov	r2, r4
 8005f00:	462b      	mov	r3, r5
 8005f02:	1891      	adds	r1, r2, r2
 8005f04:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f06:	415b      	adcs	r3, r3
 8005f08:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005f0e:	4621      	mov	r1, r4
 8005f10:	eb12 0801 	adds.w	r8, r2, r1
 8005f14:	4629      	mov	r1, r5
 8005f16:	eb43 0901 	adc.w	r9, r3, r1
 8005f1a:	f04f 0200 	mov.w	r2, #0
 8005f1e:	f04f 0300 	mov.w	r3, #0
 8005f22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f2e:	4690      	mov	r8, r2
 8005f30:	4699      	mov	r9, r3
 8005f32:	4623      	mov	r3, r4
 8005f34:	eb18 0303 	adds.w	r3, r8, r3
 8005f38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f3c:	462b      	mov	r3, r5
 8005f3e:	eb49 0303 	adc.w	r3, r9, r3
 8005f42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f52:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005f56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	18db      	adds	r3, r3, r3
 8005f5e:	653b      	str	r3, [r7, #80]	; 0x50
 8005f60:	4613      	mov	r3, r2
 8005f62:	eb42 0303 	adc.w	r3, r2, r3
 8005f66:	657b      	str	r3, [r7, #84]	; 0x54
 8005f68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005f6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005f70:	f7fa fe1c 	bl	8000bac <__aeabi_uldivmod>
 8005f74:	4602      	mov	r2, r0
 8005f76:	460b      	mov	r3, r1
 8005f78:	4b61      	ldr	r3, [pc, #388]	; (8006100 <UART_SetConfig+0x2d4>)
 8005f7a:	fba3 2302 	umull	r2, r3, r3, r2
 8005f7e:	095b      	lsrs	r3, r3, #5
 8005f80:	011c      	lsls	r4, r3, #4
 8005f82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f86:	2200      	movs	r2, #0
 8005f88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f8c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005f90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005f94:	4642      	mov	r2, r8
 8005f96:	464b      	mov	r3, r9
 8005f98:	1891      	adds	r1, r2, r2
 8005f9a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005f9c:	415b      	adcs	r3, r3
 8005f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fa0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005fa4:	4641      	mov	r1, r8
 8005fa6:	eb12 0a01 	adds.w	sl, r2, r1
 8005faa:	4649      	mov	r1, r9
 8005fac:	eb43 0b01 	adc.w	fp, r3, r1
 8005fb0:	f04f 0200 	mov.w	r2, #0
 8005fb4:	f04f 0300 	mov.w	r3, #0
 8005fb8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005fbc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005fc0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fc4:	4692      	mov	sl, r2
 8005fc6:	469b      	mov	fp, r3
 8005fc8:	4643      	mov	r3, r8
 8005fca:	eb1a 0303 	adds.w	r3, sl, r3
 8005fce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fd2:	464b      	mov	r3, r9
 8005fd4:	eb4b 0303 	adc.w	r3, fp, r3
 8005fd8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fe8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005fec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	18db      	adds	r3, r3, r3
 8005ff4:	643b      	str	r3, [r7, #64]	; 0x40
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	eb42 0303 	adc.w	r3, r2, r3
 8005ffc:	647b      	str	r3, [r7, #68]	; 0x44
 8005ffe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006002:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006006:	f7fa fdd1 	bl	8000bac <__aeabi_uldivmod>
 800600a:	4602      	mov	r2, r0
 800600c:	460b      	mov	r3, r1
 800600e:	4611      	mov	r1, r2
 8006010:	4b3b      	ldr	r3, [pc, #236]	; (8006100 <UART_SetConfig+0x2d4>)
 8006012:	fba3 2301 	umull	r2, r3, r3, r1
 8006016:	095b      	lsrs	r3, r3, #5
 8006018:	2264      	movs	r2, #100	; 0x64
 800601a:	fb02 f303 	mul.w	r3, r2, r3
 800601e:	1acb      	subs	r3, r1, r3
 8006020:	00db      	lsls	r3, r3, #3
 8006022:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006026:	4b36      	ldr	r3, [pc, #216]	; (8006100 <UART_SetConfig+0x2d4>)
 8006028:	fba3 2302 	umull	r2, r3, r3, r2
 800602c:	095b      	lsrs	r3, r3, #5
 800602e:	005b      	lsls	r3, r3, #1
 8006030:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006034:	441c      	add	r4, r3
 8006036:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800603a:	2200      	movs	r2, #0
 800603c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006040:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006044:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006048:	4642      	mov	r2, r8
 800604a:	464b      	mov	r3, r9
 800604c:	1891      	adds	r1, r2, r2
 800604e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006050:	415b      	adcs	r3, r3
 8006052:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006054:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006058:	4641      	mov	r1, r8
 800605a:	1851      	adds	r1, r2, r1
 800605c:	6339      	str	r1, [r7, #48]	; 0x30
 800605e:	4649      	mov	r1, r9
 8006060:	414b      	adcs	r3, r1
 8006062:	637b      	str	r3, [r7, #52]	; 0x34
 8006064:	f04f 0200 	mov.w	r2, #0
 8006068:	f04f 0300 	mov.w	r3, #0
 800606c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006070:	4659      	mov	r1, fp
 8006072:	00cb      	lsls	r3, r1, #3
 8006074:	4651      	mov	r1, sl
 8006076:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800607a:	4651      	mov	r1, sl
 800607c:	00ca      	lsls	r2, r1, #3
 800607e:	4610      	mov	r0, r2
 8006080:	4619      	mov	r1, r3
 8006082:	4603      	mov	r3, r0
 8006084:	4642      	mov	r2, r8
 8006086:	189b      	adds	r3, r3, r2
 8006088:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800608c:	464b      	mov	r3, r9
 800608e:	460a      	mov	r2, r1
 8006090:	eb42 0303 	adc.w	r3, r2, r3
 8006094:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80060a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80060a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80060ac:	460b      	mov	r3, r1
 80060ae:	18db      	adds	r3, r3, r3
 80060b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80060b2:	4613      	mov	r3, r2
 80060b4:	eb42 0303 	adc.w	r3, r2, r3
 80060b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80060be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80060c2:	f7fa fd73 	bl	8000bac <__aeabi_uldivmod>
 80060c6:	4602      	mov	r2, r0
 80060c8:	460b      	mov	r3, r1
 80060ca:	4b0d      	ldr	r3, [pc, #52]	; (8006100 <UART_SetConfig+0x2d4>)
 80060cc:	fba3 1302 	umull	r1, r3, r3, r2
 80060d0:	095b      	lsrs	r3, r3, #5
 80060d2:	2164      	movs	r1, #100	; 0x64
 80060d4:	fb01 f303 	mul.w	r3, r1, r3
 80060d8:	1ad3      	subs	r3, r2, r3
 80060da:	00db      	lsls	r3, r3, #3
 80060dc:	3332      	adds	r3, #50	; 0x32
 80060de:	4a08      	ldr	r2, [pc, #32]	; (8006100 <UART_SetConfig+0x2d4>)
 80060e0:	fba2 2303 	umull	r2, r3, r2, r3
 80060e4:	095b      	lsrs	r3, r3, #5
 80060e6:	f003 0207 	and.w	r2, r3, #7
 80060ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4422      	add	r2, r4
 80060f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80060f4:	e105      	b.n	8006302 <UART_SetConfig+0x4d6>
 80060f6:	bf00      	nop
 80060f8:	40011000 	.word	0x40011000
 80060fc:	40011400 	.word	0x40011400
 8006100:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006104:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006108:	2200      	movs	r2, #0
 800610a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800610e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006112:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006116:	4642      	mov	r2, r8
 8006118:	464b      	mov	r3, r9
 800611a:	1891      	adds	r1, r2, r2
 800611c:	6239      	str	r1, [r7, #32]
 800611e:	415b      	adcs	r3, r3
 8006120:	627b      	str	r3, [r7, #36]	; 0x24
 8006122:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006126:	4641      	mov	r1, r8
 8006128:	1854      	adds	r4, r2, r1
 800612a:	4649      	mov	r1, r9
 800612c:	eb43 0501 	adc.w	r5, r3, r1
 8006130:	f04f 0200 	mov.w	r2, #0
 8006134:	f04f 0300 	mov.w	r3, #0
 8006138:	00eb      	lsls	r3, r5, #3
 800613a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800613e:	00e2      	lsls	r2, r4, #3
 8006140:	4614      	mov	r4, r2
 8006142:	461d      	mov	r5, r3
 8006144:	4643      	mov	r3, r8
 8006146:	18e3      	adds	r3, r4, r3
 8006148:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800614c:	464b      	mov	r3, r9
 800614e:	eb45 0303 	adc.w	r3, r5, r3
 8006152:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006162:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006166:	f04f 0200 	mov.w	r2, #0
 800616a:	f04f 0300 	mov.w	r3, #0
 800616e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006172:	4629      	mov	r1, r5
 8006174:	008b      	lsls	r3, r1, #2
 8006176:	4621      	mov	r1, r4
 8006178:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800617c:	4621      	mov	r1, r4
 800617e:	008a      	lsls	r2, r1, #2
 8006180:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006184:	f7fa fd12 	bl	8000bac <__aeabi_uldivmod>
 8006188:	4602      	mov	r2, r0
 800618a:	460b      	mov	r3, r1
 800618c:	4b60      	ldr	r3, [pc, #384]	; (8006310 <UART_SetConfig+0x4e4>)
 800618e:	fba3 2302 	umull	r2, r3, r3, r2
 8006192:	095b      	lsrs	r3, r3, #5
 8006194:	011c      	lsls	r4, r3, #4
 8006196:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800619a:	2200      	movs	r2, #0
 800619c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80061a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80061a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80061a8:	4642      	mov	r2, r8
 80061aa:	464b      	mov	r3, r9
 80061ac:	1891      	adds	r1, r2, r2
 80061ae:	61b9      	str	r1, [r7, #24]
 80061b0:	415b      	adcs	r3, r3
 80061b2:	61fb      	str	r3, [r7, #28]
 80061b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061b8:	4641      	mov	r1, r8
 80061ba:	1851      	adds	r1, r2, r1
 80061bc:	6139      	str	r1, [r7, #16]
 80061be:	4649      	mov	r1, r9
 80061c0:	414b      	adcs	r3, r1
 80061c2:	617b      	str	r3, [r7, #20]
 80061c4:	f04f 0200 	mov.w	r2, #0
 80061c8:	f04f 0300 	mov.w	r3, #0
 80061cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80061d0:	4659      	mov	r1, fp
 80061d2:	00cb      	lsls	r3, r1, #3
 80061d4:	4651      	mov	r1, sl
 80061d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061da:	4651      	mov	r1, sl
 80061dc:	00ca      	lsls	r2, r1, #3
 80061de:	4610      	mov	r0, r2
 80061e0:	4619      	mov	r1, r3
 80061e2:	4603      	mov	r3, r0
 80061e4:	4642      	mov	r2, r8
 80061e6:	189b      	adds	r3, r3, r2
 80061e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80061ec:	464b      	mov	r3, r9
 80061ee:	460a      	mov	r2, r1
 80061f0:	eb42 0303 	adc.w	r3, r2, r3
 80061f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80061f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	67bb      	str	r3, [r7, #120]	; 0x78
 8006202:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006204:	f04f 0200 	mov.w	r2, #0
 8006208:	f04f 0300 	mov.w	r3, #0
 800620c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006210:	4649      	mov	r1, r9
 8006212:	008b      	lsls	r3, r1, #2
 8006214:	4641      	mov	r1, r8
 8006216:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800621a:	4641      	mov	r1, r8
 800621c:	008a      	lsls	r2, r1, #2
 800621e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006222:	f7fa fcc3 	bl	8000bac <__aeabi_uldivmod>
 8006226:	4602      	mov	r2, r0
 8006228:	460b      	mov	r3, r1
 800622a:	4b39      	ldr	r3, [pc, #228]	; (8006310 <UART_SetConfig+0x4e4>)
 800622c:	fba3 1302 	umull	r1, r3, r3, r2
 8006230:	095b      	lsrs	r3, r3, #5
 8006232:	2164      	movs	r1, #100	; 0x64
 8006234:	fb01 f303 	mul.w	r3, r1, r3
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	011b      	lsls	r3, r3, #4
 800623c:	3332      	adds	r3, #50	; 0x32
 800623e:	4a34      	ldr	r2, [pc, #208]	; (8006310 <UART_SetConfig+0x4e4>)
 8006240:	fba2 2303 	umull	r2, r3, r2, r3
 8006244:	095b      	lsrs	r3, r3, #5
 8006246:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800624a:	441c      	add	r4, r3
 800624c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006250:	2200      	movs	r2, #0
 8006252:	673b      	str	r3, [r7, #112]	; 0x70
 8006254:	677a      	str	r2, [r7, #116]	; 0x74
 8006256:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800625a:	4642      	mov	r2, r8
 800625c:	464b      	mov	r3, r9
 800625e:	1891      	adds	r1, r2, r2
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	415b      	adcs	r3, r3
 8006264:	60fb      	str	r3, [r7, #12]
 8006266:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800626a:	4641      	mov	r1, r8
 800626c:	1851      	adds	r1, r2, r1
 800626e:	6039      	str	r1, [r7, #0]
 8006270:	4649      	mov	r1, r9
 8006272:	414b      	adcs	r3, r1
 8006274:	607b      	str	r3, [r7, #4]
 8006276:	f04f 0200 	mov.w	r2, #0
 800627a:	f04f 0300 	mov.w	r3, #0
 800627e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006282:	4659      	mov	r1, fp
 8006284:	00cb      	lsls	r3, r1, #3
 8006286:	4651      	mov	r1, sl
 8006288:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800628c:	4651      	mov	r1, sl
 800628e:	00ca      	lsls	r2, r1, #3
 8006290:	4610      	mov	r0, r2
 8006292:	4619      	mov	r1, r3
 8006294:	4603      	mov	r3, r0
 8006296:	4642      	mov	r2, r8
 8006298:	189b      	adds	r3, r3, r2
 800629a:	66bb      	str	r3, [r7, #104]	; 0x68
 800629c:	464b      	mov	r3, r9
 800629e:	460a      	mov	r2, r1
 80062a0:	eb42 0303 	adc.w	r3, r2, r3
 80062a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80062a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	663b      	str	r3, [r7, #96]	; 0x60
 80062b0:	667a      	str	r2, [r7, #100]	; 0x64
 80062b2:	f04f 0200 	mov.w	r2, #0
 80062b6:	f04f 0300 	mov.w	r3, #0
 80062ba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80062be:	4649      	mov	r1, r9
 80062c0:	008b      	lsls	r3, r1, #2
 80062c2:	4641      	mov	r1, r8
 80062c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062c8:	4641      	mov	r1, r8
 80062ca:	008a      	lsls	r2, r1, #2
 80062cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80062d0:	f7fa fc6c 	bl	8000bac <__aeabi_uldivmod>
 80062d4:	4602      	mov	r2, r0
 80062d6:	460b      	mov	r3, r1
 80062d8:	4b0d      	ldr	r3, [pc, #52]	; (8006310 <UART_SetConfig+0x4e4>)
 80062da:	fba3 1302 	umull	r1, r3, r3, r2
 80062de:	095b      	lsrs	r3, r3, #5
 80062e0:	2164      	movs	r1, #100	; 0x64
 80062e2:	fb01 f303 	mul.w	r3, r1, r3
 80062e6:	1ad3      	subs	r3, r2, r3
 80062e8:	011b      	lsls	r3, r3, #4
 80062ea:	3332      	adds	r3, #50	; 0x32
 80062ec:	4a08      	ldr	r2, [pc, #32]	; (8006310 <UART_SetConfig+0x4e4>)
 80062ee:	fba2 2303 	umull	r2, r3, r2, r3
 80062f2:	095b      	lsrs	r3, r3, #5
 80062f4:	f003 020f 	and.w	r2, r3, #15
 80062f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4422      	add	r2, r4
 8006300:	609a      	str	r2, [r3, #8]
}
 8006302:	bf00      	nop
 8006304:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006308:	46bd      	mov	sp, r7
 800630a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800630e:	bf00      	nop
 8006310:	51eb851f 	.word	0x51eb851f

08006314 <__errno>:
 8006314:	4b01      	ldr	r3, [pc, #4]	; (800631c <__errno+0x8>)
 8006316:	6818      	ldr	r0, [r3, #0]
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	20000014 	.word	0x20000014

08006320 <__libc_init_array>:
 8006320:	b570      	push	{r4, r5, r6, lr}
 8006322:	4d0d      	ldr	r5, [pc, #52]	; (8006358 <__libc_init_array+0x38>)
 8006324:	4c0d      	ldr	r4, [pc, #52]	; (800635c <__libc_init_array+0x3c>)
 8006326:	1b64      	subs	r4, r4, r5
 8006328:	10a4      	asrs	r4, r4, #2
 800632a:	2600      	movs	r6, #0
 800632c:	42a6      	cmp	r6, r4
 800632e:	d109      	bne.n	8006344 <__libc_init_array+0x24>
 8006330:	4d0b      	ldr	r5, [pc, #44]	; (8006360 <__libc_init_array+0x40>)
 8006332:	4c0c      	ldr	r4, [pc, #48]	; (8006364 <__libc_init_array+0x44>)
 8006334:	f002 f906 	bl	8008544 <_init>
 8006338:	1b64      	subs	r4, r4, r5
 800633a:	10a4      	asrs	r4, r4, #2
 800633c:	2600      	movs	r6, #0
 800633e:	42a6      	cmp	r6, r4
 8006340:	d105      	bne.n	800634e <__libc_init_array+0x2e>
 8006342:	bd70      	pop	{r4, r5, r6, pc}
 8006344:	f855 3b04 	ldr.w	r3, [r5], #4
 8006348:	4798      	blx	r3
 800634a:	3601      	adds	r6, #1
 800634c:	e7ee      	b.n	800632c <__libc_init_array+0xc>
 800634e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006352:	4798      	blx	r3
 8006354:	3601      	adds	r6, #1
 8006356:	e7f2      	b.n	800633e <__libc_init_array+0x1e>
 8006358:	080088a8 	.word	0x080088a8
 800635c:	080088a8 	.word	0x080088a8
 8006360:	080088a8 	.word	0x080088a8
 8006364:	080088ac 	.word	0x080088ac

08006368 <memset>:
 8006368:	4402      	add	r2, r0
 800636a:	4603      	mov	r3, r0
 800636c:	4293      	cmp	r3, r2
 800636e:	d100      	bne.n	8006372 <memset+0xa>
 8006370:	4770      	bx	lr
 8006372:	f803 1b01 	strb.w	r1, [r3], #1
 8006376:	e7f9      	b.n	800636c <memset+0x4>

08006378 <srand>:
 8006378:	b538      	push	{r3, r4, r5, lr}
 800637a:	4b10      	ldr	r3, [pc, #64]	; (80063bc <srand+0x44>)
 800637c:	681d      	ldr	r5, [r3, #0]
 800637e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8006380:	4604      	mov	r4, r0
 8006382:	b9b3      	cbnz	r3, 80063b2 <srand+0x3a>
 8006384:	2018      	movs	r0, #24
 8006386:	f000 f8bf 	bl	8006508 <malloc>
 800638a:	4602      	mov	r2, r0
 800638c:	63a8      	str	r0, [r5, #56]	; 0x38
 800638e:	b920      	cbnz	r0, 800639a <srand+0x22>
 8006390:	4b0b      	ldr	r3, [pc, #44]	; (80063c0 <srand+0x48>)
 8006392:	480c      	ldr	r0, [pc, #48]	; (80063c4 <srand+0x4c>)
 8006394:	2142      	movs	r1, #66	; 0x42
 8006396:	f000 f875 	bl	8006484 <__assert_func>
 800639a:	490b      	ldr	r1, [pc, #44]	; (80063c8 <srand+0x50>)
 800639c:	4b0b      	ldr	r3, [pc, #44]	; (80063cc <srand+0x54>)
 800639e:	e9c0 1300 	strd	r1, r3, [r0]
 80063a2:	4b0b      	ldr	r3, [pc, #44]	; (80063d0 <srand+0x58>)
 80063a4:	6083      	str	r3, [r0, #8]
 80063a6:	230b      	movs	r3, #11
 80063a8:	8183      	strh	r3, [r0, #12]
 80063aa:	2100      	movs	r1, #0
 80063ac:	2001      	movs	r0, #1
 80063ae:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80063b2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80063b4:	2200      	movs	r2, #0
 80063b6:	611c      	str	r4, [r3, #16]
 80063b8:	615a      	str	r2, [r3, #20]
 80063ba:	bd38      	pop	{r3, r4, r5, pc}
 80063bc:	20000014 	.word	0x20000014
 80063c0:	08008584 	.word	0x08008584
 80063c4:	0800859b 	.word	0x0800859b
 80063c8:	abcd330e 	.word	0xabcd330e
 80063cc:	e66d1234 	.word	0xe66d1234
 80063d0:	0005deec 	.word	0x0005deec

080063d4 <rand>:
 80063d4:	4b16      	ldr	r3, [pc, #88]	; (8006430 <rand+0x5c>)
 80063d6:	b510      	push	{r4, lr}
 80063d8:	681c      	ldr	r4, [r3, #0]
 80063da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80063dc:	b9b3      	cbnz	r3, 800640c <rand+0x38>
 80063de:	2018      	movs	r0, #24
 80063e0:	f000 f892 	bl	8006508 <malloc>
 80063e4:	63a0      	str	r0, [r4, #56]	; 0x38
 80063e6:	b928      	cbnz	r0, 80063f4 <rand+0x20>
 80063e8:	4602      	mov	r2, r0
 80063ea:	4b12      	ldr	r3, [pc, #72]	; (8006434 <rand+0x60>)
 80063ec:	4812      	ldr	r0, [pc, #72]	; (8006438 <rand+0x64>)
 80063ee:	214e      	movs	r1, #78	; 0x4e
 80063f0:	f000 f848 	bl	8006484 <__assert_func>
 80063f4:	4a11      	ldr	r2, [pc, #68]	; (800643c <rand+0x68>)
 80063f6:	4b12      	ldr	r3, [pc, #72]	; (8006440 <rand+0x6c>)
 80063f8:	e9c0 2300 	strd	r2, r3, [r0]
 80063fc:	4b11      	ldr	r3, [pc, #68]	; (8006444 <rand+0x70>)
 80063fe:	6083      	str	r3, [r0, #8]
 8006400:	230b      	movs	r3, #11
 8006402:	8183      	strh	r3, [r0, #12]
 8006404:	2201      	movs	r2, #1
 8006406:	2300      	movs	r3, #0
 8006408:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800640c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800640e:	4a0e      	ldr	r2, [pc, #56]	; (8006448 <rand+0x74>)
 8006410:	6920      	ldr	r0, [r4, #16]
 8006412:	6963      	ldr	r3, [r4, #20]
 8006414:	490d      	ldr	r1, [pc, #52]	; (800644c <rand+0x78>)
 8006416:	4342      	muls	r2, r0
 8006418:	fb01 2203 	mla	r2, r1, r3, r2
 800641c:	fba0 0101 	umull	r0, r1, r0, r1
 8006420:	1c43      	adds	r3, r0, #1
 8006422:	eb42 0001 	adc.w	r0, r2, r1
 8006426:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800642a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800642e:	bd10      	pop	{r4, pc}
 8006430:	20000014 	.word	0x20000014
 8006434:	08008584 	.word	0x08008584
 8006438:	0800859b 	.word	0x0800859b
 800643c:	abcd330e 	.word	0xabcd330e
 8006440:	e66d1234 	.word	0xe66d1234
 8006444:	0005deec 	.word	0x0005deec
 8006448:	5851f42d 	.word	0x5851f42d
 800644c:	4c957f2d 	.word	0x4c957f2d

08006450 <time>:
 8006450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006452:	4b0b      	ldr	r3, [pc, #44]	; (8006480 <time+0x30>)
 8006454:	2200      	movs	r2, #0
 8006456:	4669      	mov	r1, sp
 8006458:	4604      	mov	r4, r0
 800645a:	6818      	ldr	r0, [r3, #0]
 800645c:	f000 f842 	bl	80064e4 <_gettimeofday_r>
 8006460:	2800      	cmp	r0, #0
 8006462:	bfbe      	ittt	lt
 8006464:	f04f 32ff 	movlt.w	r2, #4294967295
 8006468:	f04f 33ff 	movlt.w	r3, #4294967295
 800646c:	e9cd 2300 	strdlt	r2, r3, [sp]
 8006470:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006474:	b10c      	cbz	r4, 800647a <time+0x2a>
 8006476:	e9c4 0100 	strd	r0, r1, [r4]
 800647a:	b004      	add	sp, #16
 800647c:	bd10      	pop	{r4, pc}
 800647e:	bf00      	nop
 8006480:	20000014 	.word	0x20000014

08006484 <__assert_func>:
 8006484:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006486:	4614      	mov	r4, r2
 8006488:	461a      	mov	r2, r3
 800648a:	4b09      	ldr	r3, [pc, #36]	; (80064b0 <__assert_func+0x2c>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4605      	mov	r5, r0
 8006490:	68d8      	ldr	r0, [r3, #12]
 8006492:	b14c      	cbz	r4, 80064a8 <__assert_func+0x24>
 8006494:	4b07      	ldr	r3, [pc, #28]	; (80064b4 <__assert_func+0x30>)
 8006496:	9100      	str	r1, [sp, #0]
 8006498:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800649c:	4906      	ldr	r1, [pc, #24]	; (80064b8 <__assert_func+0x34>)
 800649e:	462b      	mov	r3, r5
 80064a0:	f000 f80e 	bl	80064c0 <fiprintf>
 80064a4:	f000 fcd6 	bl	8006e54 <abort>
 80064a8:	4b04      	ldr	r3, [pc, #16]	; (80064bc <__assert_func+0x38>)
 80064aa:	461c      	mov	r4, r3
 80064ac:	e7f3      	b.n	8006496 <__assert_func+0x12>
 80064ae:	bf00      	nop
 80064b0:	20000014 	.word	0x20000014
 80064b4:	080085f6 	.word	0x080085f6
 80064b8:	08008603 	.word	0x08008603
 80064bc:	08008631 	.word	0x08008631

080064c0 <fiprintf>:
 80064c0:	b40e      	push	{r1, r2, r3}
 80064c2:	b503      	push	{r0, r1, lr}
 80064c4:	4601      	mov	r1, r0
 80064c6:	ab03      	add	r3, sp, #12
 80064c8:	4805      	ldr	r0, [pc, #20]	; (80064e0 <fiprintf+0x20>)
 80064ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80064ce:	6800      	ldr	r0, [r0, #0]
 80064d0:	9301      	str	r3, [sp, #4]
 80064d2:	f000 f92b 	bl	800672c <_vfiprintf_r>
 80064d6:	b002      	add	sp, #8
 80064d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80064dc:	b003      	add	sp, #12
 80064de:	4770      	bx	lr
 80064e0:	20000014 	.word	0x20000014

080064e4 <_gettimeofday_r>:
 80064e4:	b538      	push	{r3, r4, r5, lr}
 80064e6:	4d07      	ldr	r5, [pc, #28]	; (8006504 <_gettimeofday_r+0x20>)
 80064e8:	2300      	movs	r3, #0
 80064ea:	4604      	mov	r4, r0
 80064ec:	4608      	mov	r0, r1
 80064ee:	4611      	mov	r1, r2
 80064f0:	602b      	str	r3, [r5, #0]
 80064f2:	f002 f81f 	bl	8008534 <_gettimeofday>
 80064f6:	1c43      	adds	r3, r0, #1
 80064f8:	d102      	bne.n	8006500 <_gettimeofday_r+0x1c>
 80064fa:	682b      	ldr	r3, [r5, #0]
 80064fc:	b103      	cbz	r3, 8006500 <_gettimeofday_r+0x1c>
 80064fe:	6023      	str	r3, [r4, #0]
 8006500:	bd38      	pop	{r3, r4, r5, pc}
 8006502:	bf00      	nop
 8006504:	200008dc 	.word	0x200008dc

08006508 <malloc>:
 8006508:	4b02      	ldr	r3, [pc, #8]	; (8006514 <malloc+0xc>)
 800650a:	4601      	mov	r1, r0
 800650c:	6818      	ldr	r0, [r3, #0]
 800650e:	f000 b86f 	b.w	80065f0 <_malloc_r>
 8006512:	bf00      	nop
 8006514:	20000014 	.word	0x20000014

08006518 <_free_r>:
 8006518:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800651a:	2900      	cmp	r1, #0
 800651c:	d044      	beq.n	80065a8 <_free_r+0x90>
 800651e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006522:	9001      	str	r0, [sp, #4]
 8006524:	2b00      	cmp	r3, #0
 8006526:	f1a1 0404 	sub.w	r4, r1, #4
 800652a:	bfb8      	it	lt
 800652c:	18e4      	addlt	r4, r4, r3
 800652e:	f000 feb9 	bl	80072a4 <__malloc_lock>
 8006532:	4a1e      	ldr	r2, [pc, #120]	; (80065ac <_free_r+0x94>)
 8006534:	9801      	ldr	r0, [sp, #4]
 8006536:	6813      	ldr	r3, [r2, #0]
 8006538:	b933      	cbnz	r3, 8006548 <_free_r+0x30>
 800653a:	6063      	str	r3, [r4, #4]
 800653c:	6014      	str	r4, [r2, #0]
 800653e:	b003      	add	sp, #12
 8006540:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006544:	f000 beb4 	b.w	80072b0 <__malloc_unlock>
 8006548:	42a3      	cmp	r3, r4
 800654a:	d908      	bls.n	800655e <_free_r+0x46>
 800654c:	6825      	ldr	r5, [r4, #0]
 800654e:	1961      	adds	r1, r4, r5
 8006550:	428b      	cmp	r3, r1
 8006552:	bf01      	itttt	eq
 8006554:	6819      	ldreq	r1, [r3, #0]
 8006556:	685b      	ldreq	r3, [r3, #4]
 8006558:	1949      	addeq	r1, r1, r5
 800655a:	6021      	streq	r1, [r4, #0]
 800655c:	e7ed      	b.n	800653a <_free_r+0x22>
 800655e:	461a      	mov	r2, r3
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	b10b      	cbz	r3, 8006568 <_free_r+0x50>
 8006564:	42a3      	cmp	r3, r4
 8006566:	d9fa      	bls.n	800655e <_free_r+0x46>
 8006568:	6811      	ldr	r1, [r2, #0]
 800656a:	1855      	adds	r5, r2, r1
 800656c:	42a5      	cmp	r5, r4
 800656e:	d10b      	bne.n	8006588 <_free_r+0x70>
 8006570:	6824      	ldr	r4, [r4, #0]
 8006572:	4421      	add	r1, r4
 8006574:	1854      	adds	r4, r2, r1
 8006576:	42a3      	cmp	r3, r4
 8006578:	6011      	str	r1, [r2, #0]
 800657a:	d1e0      	bne.n	800653e <_free_r+0x26>
 800657c:	681c      	ldr	r4, [r3, #0]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	6053      	str	r3, [r2, #4]
 8006582:	4421      	add	r1, r4
 8006584:	6011      	str	r1, [r2, #0]
 8006586:	e7da      	b.n	800653e <_free_r+0x26>
 8006588:	d902      	bls.n	8006590 <_free_r+0x78>
 800658a:	230c      	movs	r3, #12
 800658c:	6003      	str	r3, [r0, #0]
 800658e:	e7d6      	b.n	800653e <_free_r+0x26>
 8006590:	6825      	ldr	r5, [r4, #0]
 8006592:	1961      	adds	r1, r4, r5
 8006594:	428b      	cmp	r3, r1
 8006596:	bf04      	itt	eq
 8006598:	6819      	ldreq	r1, [r3, #0]
 800659a:	685b      	ldreq	r3, [r3, #4]
 800659c:	6063      	str	r3, [r4, #4]
 800659e:	bf04      	itt	eq
 80065a0:	1949      	addeq	r1, r1, r5
 80065a2:	6021      	streq	r1, [r4, #0]
 80065a4:	6054      	str	r4, [r2, #4]
 80065a6:	e7ca      	b.n	800653e <_free_r+0x26>
 80065a8:	b003      	add	sp, #12
 80065aa:	bd30      	pop	{r4, r5, pc}
 80065ac:	200008d4 	.word	0x200008d4

080065b0 <sbrk_aligned>:
 80065b0:	b570      	push	{r4, r5, r6, lr}
 80065b2:	4e0e      	ldr	r6, [pc, #56]	; (80065ec <sbrk_aligned+0x3c>)
 80065b4:	460c      	mov	r4, r1
 80065b6:	6831      	ldr	r1, [r6, #0]
 80065b8:	4605      	mov	r5, r0
 80065ba:	b911      	cbnz	r1, 80065c2 <sbrk_aligned+0x12>
 80065bc:	f000 fb7a 	bl	8006cb4 <_sbrk_r>
 80065c0:	6030      	str	r0, [r6, #0]
 80065c2:	4621      	mov	r1, r4
 80065c4:	4628      	mov	r0, r5
 80065c6:	f000 fb75 	bl	8006cb4 <_sbrk_r>
 80065ca:	1c43      	adds	r3, r0, #1
 80065cc:	d00a      	beq.n	80065e4 <sbrk_aligned+0x34>
 80065ce:	1cc4      	adds	r4, r0, #3
 80065d0:	f024 0403 	bic.w	r4, r4, #3
 80065d4:	42a0      	cmp	r0, r4
 80065d6:	d007      	beq.n	80065e8 <sbrk_aligned+0x38>
 80065d8:	1a21      	subs	r1, r4, r0
 80065da:	4628      	mov	r0, r5
 80065dc:	f000 fb6a 	bl	8006cb4 <_sbrk_r>
 80065e0:	3001      	adds	r0, #1
 80065e2:	d101      	bne.n	80065e8 <sbrk_aligned+0x38>
 80065e4:	f04f 34ff 	mov.w	r4, #4294967295
 80065e8:	4620      	mov	r0, r4
 80065ea:	bd70      	pop	{r4, r5, r6, pc}
 80065ec:	200008d8 	.word	0x200008d8

080065f0 <_malloc_r>:
 80065f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065f4:	1ccd      	adds	r5, r1, #3
 80065f6:	f025 0503 	bic.w	r5, r5, #3
 80065fa:	3508      	adds	r5, #8
 80065fc:	2d0c      	cmp	r5, #12
 80065fe:	bf38      	it	cc
 8006600:	250c      	movcc	r5, #12
 8006602:	2d00      	cmp	r5, #0
 8006604:	4607      	mov	r7, r0
 8006606:	db01      	blt.n	800660c <_malloc_r+0x1c>
 8006608:	42a9      	cmp	r1, r5
 800660a:	d905      	bls.n	8006618 <_malloc_r+0x28>
 800660c:	230c      	movs	r3, #12
 800660e:	603b      	str	r3, [r7, #0]
 8006610:	2600      	movs	r6, #0
 8006612:	4630      	mov	r0, r6
 8006614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006618:	4e2e      	ldr	r6, [pc, #184]	; (80066d4 <_malloc_r+0xe4>)
 800661a:	f000 fe43 	bl	80072a4 <__malloc_lock>
 800661e:	6833      	ldr	r3, [r6, #0]
 8006620:	461c      	mov	r4, r3
 8006622:	bb34      	cbnz	r4, 8006672 <_malloc_r+0x82>
 8006624:	4629      	mov	r1, r5
 8006626:	4638      	mov	r0, r7
 8006628:	f7ff ffc2 	bl	80065b0 <sbrk_aligned>
 800662c:	1c43      	adds	r3, r0, #1
 800662e:	4604      	mov	r4, r0
 8006630:	d14d      	bne.n	80066ce <_malloc_r+0xde>
 8006632:	6834      	ldr	r4, [r6, #0]
 8006634:	4626      	mov	r6, r4
 8006636:	2e00      	cmp	r6, #0
 8006638:	d140      	bne.n	80066bc <_malloc_r+0xcc>
 800663a:	6823      	ldr	r3, [r4, #0]
 800663c:	4631      	mov	r1, r6
 800663e:	4638      	mov	r0, r7
 8006640:	eb04 0803 	add.w	r8, r4, r3
 8006644:	f000 fb36 	bl	8006cb4 <_sbrk_r>
 8006648:	4580      	cmp	r8, r0
 800664a:	d13a      	bne.n	80066c2 <_malloc_r+0xd2>
 800664c:	6821      	ldr	r1, [r4, #0]
 800664e:	3503      	adds	r5, #3
 8006650:	1a6d      	subs	r5, r5, r1
 8006652:	f025 0503 	bic.w	r5, r5, #3
 8006656:	3508      	adds	r5, #8
 8006658:	2d0c      	cmp	r5, #12
 800665a:	bf38      	it	cc
 800665c:	250c      	movcc	r5, #12
 800665e:	4629      	mov	r1, r5
 8006660:	4638      	mov	r0, r7
 8006662:	f7ff ffa5 	bl	80065b0 <sbrk_aligned>
 8006666:	3001      	adds	r0, #1
 8006668:	d02b      	beq.n	80066c2 <_malloc_r+0xd2>
 800666a:	6823      	ldr	r3, [r4, #0]
 800666c:	442b      	add	r3, r5
 800666e:	6023      	str	r3, [r4, #0]
 8006670:	e00e      	b.n	8006690 <_malloc_r+0xa0>
 8006672:	6822      	ldr	r2, [r4, #0]
 8006674:	1b52      	subs	r2, r2, r5
 8006676:	d41e      	bmi.n	80066b6 <_malloc_r+0xc6>
 8006678:	2a0b      	cmp	r2, #11
 800667a:	d916      	bls.n	80066aa <_malloc_r+0xba>
 800667c:	1961      	adds	r1, r4, r5
 800667e:	42a3      	cmp	r3, r4
 8006680:	6025      	str	r5, [r4, #0]
 8006682:	bf18      	it	ne
 8006684:	6059      	strne	r1, [r3, #4]
 8006686:	6863      	ldr	r3, [r4, #4]
 8006688:	bf08      	it	eq
 800668a:	6031      	streq	r1, [r6, #0]
 800668c:	5162      	str	r2, [r4, r5]
 800668e:	604b      	str	r3, [r1, #4]
 8006690:	4638      	mov	r0, r7
 8006692:	f104 060b 	add.w	r6, r4, #11
 8006696:	f000 fe0b 	bl	80072b0 <__malloc_unlock>
 800669a:	f026 0607 	bic.w	r6, r6, #7
 800669e:	1d23      	adds	r3, r4, #4
 80066a0:	1af2      	subs	r2, r6, r3
 80066a2:	d0b6      	beq.n	8006612 <_malloc_r+0x22>
 80066a4:	1b9b      	subs	r3, r3, r6
 80066a6:	50a3      	str	r3, [r4, r2]
 80066a8:	e7b3      	b.n	8006612 <_malloc_r+0x22>
 80066aa:	6862      	ldr	r2, [r4, #4]
 80066ac:	42a3      	cmp	r3, r4
 80066ae:	bf0c      	ite	eq
 80066b0:	6032      	streq	r2, [r6, #0]
 80066b2:	605a      	strne	r2, [r3, #4]
 80066b4:	e7ec      	b.n	8006690 <_malloc_r+0xa0>
 80066b6:	4623      	mov	r3, r4
 80066b8:	6864      	ldr	r4, [r4, #4]
 80066ba:	e7b2      	b.n	8006622 <_malloc_r+0x32>
 80066bc:	4634      	mov	r4, r6
 80066be:	6876      	ldr	r6, [r6, #4]
 80066c0:	e7b9      	b.n	8006636 <_malloc_r+0x46>
 80066c2:	230c      	movs	r3, #12
 80066c4:	603b      	str	r3, [r7, #0]
 80066c6:	4638      	mov	r0, r7
 80066c8:	f000 fdf2 	bl	80072b0 <__malloc_unlock>
 80066cc:	e7a1      	b.n	8006612 <_malloc_r+0x22>
 80066ce:	6025      	str	r5, [r4, #0]
 80066d0:	e7de      	b.n	8006690 <_malloc_r+0xa0>
 80066d2:	bf00      	nop
 80066d4:	200008d4 	.word	0x200008d4

080066d8 <__sfputc_r>:
 80066d8:	6893      	ldr	r3, [r2, #8]
 80066da:	3b01      	subs	r3, #1
 80066dc:	2b00      	cmp	r3, #0
 80066de:	b410      	push	{r4}
 80066e0:	6093      	str	r3, [r2, #8]
 80066e2:	da08      	bge.n	80066f6 <__sfputc_r+0x1e>
 80066e4:	6994      	ldr	r4, [r2, #24]
 80066e6:	42a3      	cmp	r3, r4
 80066e8:	db01      	blt.n	80066ee <__sfputc_r+0x16>
 80066ea:	290a      	cmp	r1, #10
 80066ec:	d103      	bne.n	80066f6 <__sfputc_r+0x1e>
 80066ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066f2:	f000 baef 	b.w	8006cd4 <__swbuf_r>
 80066f6:	6813      	ldr	r3, [r2, #0]
 80066f8:	1c58      	adds	r0, r3, #1
 80066fa:	6010      	str	r0, [r2, #0]
 80066fc:	7019      	strb	r1, [r3, #0]
 80066fe:	4608      	mov	r0, r1
 8006700:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006704:	4770      	bx	lr

08006706 <__sfputs_r>:
 8006706:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006708:	4606      	mov	r6, r0
 800670a:	460f      	mov	r7, r1
 800670c:	4614      	mov	r4, r2
 800670e:	18d5      	adds	r5, r2, r3
 8006710:	42ac      	cmp	r4, r5
 8006712:	d101      	bne.n	8006718 <__sfputs_r+0x12>
 8006714:	2000      	movs	r0, #0
 8006716:	e007      	b.n	8006728 <__sfputs_r+0x22>
 8006718:	f814 1b01 	ldrb.w	r1, [r4], #1
 800671c:	463a      	mov	r2, r7
 800671e:	4630      	mov	r0, r6
 8006720:	f7ff ffda 	bl	80066d8 <__sfputc_r>
 8006724:	1c43      	adds	r3, r0, #1
 8006726:	d1f3      	bne.n	8006710 <__sfputs_r+0xa>
 8006728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800672c <_vfiprintf_r>:
 800672c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006730:	460d      	mov	r5, r1
 8006732:	b09d      	sub	sp, #116	; 0x74
 8006734:	4614      	mov	r4, r2
 8006736:	4698      	mov	r8, r3
 8006738:	4606      	mov	r6, r0
 800673a:	b118      	cbz	r0, 8006744 <_vfiprintf_r+0x18>
 800673c:	6983      	ldr	r3, [r0, #24]
 800673e:	b90b      	cbnz	r3, 8006744 <_vfiprintf_r+0x18>
 8006740:	f000 fcaa 	bl	8007098 <__sinit>
 8006744:	4b89      	ldr	r3, [pc, #548]	; (800696c <_vfiprintf_r+0x240>)
 8006746:	429d      	cmp	r5, r3
 8006748:	d11b      	bne.n	8006782 <_vfiprintf_r+0x56>
 800674a:	6875      	ldr	r5, [r6, #4]
 800674c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800674e:	07d9      	lsls	r1, r3, #31
 8006750:	d405      	bmi.n	800675e <_vfiprintf_r+0x32>
 8006752:	89ab      	ldrh	r3, [r5, #12]
 8006754:	059a      	lsls	r2, r3, #22
 8006756:	d402      	bmi.n	800675e <_vfiprintf_r+0x32>
 8006758:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800675a:	f000 fd3b 	bl	80071d4 <__retarget_lock_acquire_recursive>
 800675e:	89ab      	ldrh	r3, [r5, #12]
 8006760:	071b      	lsls	r3, r3, #28
 8006762:	d501      	bpl.n	8006768 <_vfiprintf_r+0x3c>
 8006764:	692b      	ldr	r3, [r5, #16]
 8006766:	b9eb      	cbnz	r3, 80067a4 <_vfiprintf_r+0x78>
 8006768:	4629      	mov	r1, r5
 800676a:	4630      	mov	r0, r6
 800676c:	f000 fb04 	bl	8006d78 <__swsetup_r>
 8006770:	b1c0      	cbz	r0, 80067a4 <_vfiprintf_r+0x78>
 8006772:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006774:	07dc      	lsls	r4, r3, #31
 8006776:	d50e      	bpl.n	8006796 <_vfiprintf_r+0x6a>
 8006778:	f04f 30ff 	mov.w	r0, #4294967295
 800677c:	b01d      	add	sp, #116	; 0x74
 800677e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006782:	4b7b      	ldr	r3, [pc, #492]	; (8006970 <_vfiprintf_r+0x244>)
 8006784:	429d      	cmp	r5, r3
 8006786:	d101      	bne.n	800678c <_vfiprintf_r+0x60>
 8006788:	68b5      	ldr	r5, [r6, #8]
 800678a:	e7df      	b.n	800674c <_vfiprintf_r+0x20>
 800678c:	4b79      	ldr	r3, [pc, #484]	; (8006974 <_vfiprintf_r+0x248>)
 800678e:	429d      	cmp	r5, r3
 8006790:	bf08      	it	eq
 8006792:	68f5      	ldreq	r5, [r6, #12]
 8006794:	e7da      	b.n	800674c <_vfiprintf_r+0x20>
 8006796:	89ab      	ldrh	r3, [r5, #12]
 8006798:	0598      	lsls	r0, r3, #22
 800679a:	d4ed      	bmi.n	8006778 <_vfiprintf_r+0x4c>
 800679c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800679e:	f000 fd1a 	bl	80071d6 <__retarget_lock_release_recursive>
 80067a2:	e7e9      	b.n	8006778 <_vfiprintf_r+0x4c>
 80067a4:	2300      	movs	r3, #0
 80067a6:	9309      	str	r3, [sp, #36]	; 0x24
 80067a8:	2320      	movs	r3, #32
 80067aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80067b2:	2330      	movs	r3, #48	; 0x30
 80067b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006978 <_vfiprintf_r+0x24c>
 80067b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067bc:	f04f 0901 	mov.w	r9, #1
 80067c0:	4623      	mov	r3, r4
 80067c2:	469a      	mov	sl, r3
 80067c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067c8:	b10a      	cbz	r2, 80067ce <_vfiprintf_r+0xa2>
 80067ca:	2a25      	cmp	r2, #37	; 0x25
 80067cc:	d1f9      	bne.n	80067c2 <_vfiprintf_r+0x96>
 80067ce:	ebba 0b04 	subs.w	fp, sl, r4
 80067d2:	d00b      	beq.n	80067ec <_vfiprintf_r+0xc0>
 80067d4:	465b      	mov	r3, fp
 80067d6:	4622      	mov	r2, r4
 80067d8:	4629      	mov	r1, r5
 80067da:	4630      	mov	r0, r6
 80067dc:	f7ff ff93 	bl	8006706 <__sfputs_r>
 80067e0:	3001      	adds	r0, #1
 80067e2:	f000 80aa 	beq.w	800693a <_vfiprintf_r+0x20e>
 80067e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067e8:	445a      	add	r2, fp
 80067ea:	9209      	str	r2, [sp, #36]	; 0x24
 80067ec:	f89a 3000 	ldrb.w	r3, [sl]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f000 80a2 	beq.w	800693a <_vfiprintf_r+0x20e>
 80067f6:	2300      	movs	r3, #0
 80067f8:	f04f 32ff 	mov.w	r2, #4294967295
 80067fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006800:	f10a 0a01 	add.w	sl, sl, #1
 8006804:	9304      	str	r3, [sp, #16]
 8006806:	9307      	str	r3, [sp, #28]
 8006808:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800680c:	931a      	str	r3, [sp, #104]	; 0x68
 800680e:	4654      	mov	r4, sl
 8006810:	2205      	movs	r2, #5
 8006812:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006816:	4858      	ldr	r0, [pc, #352]	; (8006978 <_vfiprintf_r+0x24c>)
 8006818:	f7f9 fcda 	bl	80001d0 <memchr>
 800681c:	9a04      	ldr	r2, [sp, #16]
 800681e:	b9d8      	cbnz	r0, 8006858 <_vfiprintf_r+0x12c>
 8006820:	06d1      	lsls	r1, r2, #27
 8006822:	bf44      	itt	mi
 8006824:	2320      	movmi	r3, #32
 8006826:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800682a:	0713      	lsls	r3, r2, #28
 800682c:	bf44      	itt	mi
 800682e:	232b      	movmi	r3, #43	; 0x2b
 8006830:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006834:	f89a 3000 	ldrb.w	r3, [sl]
 8006838:	2b2a      	cmp	r3, #42	; 0x2a
 800683a:	d015      	beq.n	8006868 <_vfiprintf_r+0x13c>
 800683c:	9a07      	ldr	r2, [sp, #28]
 800683e:	4654      	mov	r4, sl
 8006840:	2000      	movs	r0, #0
 8006842:	f04f 0c0a 	mov.w	ip, #10
 8006846:	4621      	mov	r1, r4
 8006848:	f811 3b01 	ldrb.w	r3, [r1], #1
 800684c:	3b30      	subs	r3, #48	; 0x30
 800684e:	2b09      	cmp	r3, #9
 8006850:	d94e      	bls.n	80068f0 <_vfiprintf_r+0x1c4>
 8006852:	b1b0      	cbz	r0, 8006882 <_vfiprintf_r+0x156>
 8006854:	9207      	str	r2, [sp, #28]
 8006856:	e014      	b.n	8006882 <_vfiprintf_r+0x156>
 8006858:	eba0 0308 	sub.w	r3, r0, r8
 800685c:	fa09 f303 	lsl.w	r3, r9, r3
 8006860:	4313      	orrs	r3, r2
 8006862:	9304      	str	r3, [sp, #16]
 8006864:	46a2      	mov	sl, r4
 8006866:	e7d2      	b.n	800680e <_vfiprintf_r+0xe2>
 8006868:	9b03      	ldr	r3, [sp, #12]
 800686a:	1d19      	adds	r1, r3, #4
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	9103      	str	r1, [sp, #12]
 8006870:	2b00      	cmp	r3, #0
 8006872:	bfbb      	ittet	lt
 8006874:	425b      	neglt	r3, r3
 8006876:	f042 0202 	orrlt.w	r2, r2, #2
 800687a:	9307      	strge	r3, [sp, #28]
 800687c:	9307      	strlt	r3, [sp, #28]
 800687e:	bfb8      	it	lt
 8006880:	9204      	strlt	r2, [sp, #16]
 8006882:	7823      	ldrb	r3, [r4, #0]
 8006884:	2b2e      	cmp	r3, #46	; 0x2e
 8006886:	d10c      	bne.n	80068a2 <_vfiprintf_r+0x176>
 8006888:	7863      	ldrb	r3, [r4, #1]
 800688a:	2b2a      	cmp	r3, #42	; 0x2a
 800688c:	d135      	bne.n	80068fa <_vfiprintf_r+0x1ce>
 800688e:	9b03      	ldr	r3, [sp, #12]
 8006890:	1d1a      	adds	r2, r3, #4
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	9203      	str	r2, [sp, #12]
 8006896:	2b00      	cmp	r3, #0
 8006898:	bfb8      	it	lt
 800689a:	f04f 33ff 	movlt.w	r3, #4294967295
 800689e:	3402      	adds	r4, #2
 80068a0:	9305      	str	r3, [sp, #20]
 80068a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006988 <_vfiprintf_r+0x25c>
 80068a6:	7821      	ldrb	r1, [r4, #0]
 80068a8:	2203      	movs	r2, #3
 80068aa:	4650      	mov	r0, sl
 80068ac:	f7f9 fc90 	bl	80001d0 <memchr>
 80068b0:	b140      	cbz	r0, 80068c4 <_vfiprintf_r+0x198>
 80068b2:	2340      	movs	r3, #64	; 0x40
 80068b4:	eba0 000a 	sub.w	r0, r0, sl
 80068b8:	fa03 f000 	lsl.w	r0, r3, r0
 80068bc:	9b04      	ldr	r3, [sp, #16]
 80068be:	4303      	orrs	r3, r0
 80068c0:	3401      	adds	r4, #1
 80068c2:	9304      	str	r3, [sp, #16]
 80068c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068c8:	482c      	ldr	r0, [pc, #176]	; (800697c <_vfiprintf_r+0x250>)
 80068ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068ce:	2206      	movs	r2, #6
 80068d0:	f7f9 fc7e 	bl	80001d0 <memchr>
 80068d4:	2800      	cmp	r0, #0
 80068d6:	d03f      	beq.n	8006958 <_vfiprintf_r+0x22c>
 80068d8:	4b29      	ldr	r3, [pc, #164]	; (8006980 <_vfiprintf_r+0x254>)
 80068da:	bb1b      	cbnz	r3, 8006924 <_vfiprintf_r+0x1f8>
 80068dc:	9b03      	ldr	r3, [sp, #12]
 80068de:	3307      	adds	r3, #7
 80068e0:	f023 0307 	bic.w	r3, r3, #7
 80068e4:	3308      	adds	r3, #8
 80068e6:	9303      	str	r3, [sp, #12]
 80068e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068ea:	443b      	add	r3, r7
 80068ec:	9309      	str	r3, [sp, #36]	; 0x24
 80068ee:	e767      	b.n	80067c0 <_vfiprintf_r+0x94>
 80068f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80068f4:	460c      	mov	r4, r1
 80068f6:	2001      	movs	r0, #1
 80068f8:	e7a5      	b.n	8006846 <_vfiprintf_r+0x11a>
 80068fa:	2300      	movs	r3, #0
 80068fc:	3401      	adds	r4, #1
 80068fe:	9305      	str	r3, [sp, #20]
 8006900:	4619      	mov	r1, r3
 8006902:	f04f 0c0a 	mov.w	ip, #10
 8006906:	4620      	mov	r0, r4
 8006908:	f810 2b01 	ldrb.w	r2, [r0], #1
 800690c:	3a30      	subs	r2, #48	; 0x30
 800690e:	2a09      	cmp	r2, #9
 8006910:	d903      	bls.n	800691a <_vfiprintf_r+0x1ee>
 8006912:	2b00      	cmp	r3, #0
 8006914:	d0c5      	beq.n	80068a2 <_vfiprintf_r+0x176>
 8006916:	9105      	str	r1, [sp, #20]
 8006918:	e7c3      	b.n	80068a2 <_vfiprintf_r+0x176>
 800691a:	fb0c 2101 	mla	r1, ip, r1, r2
 800691e:	4604      	mov	r4, r0
 8006920:	2301      	movs	r3, #1
 8006922:	e7f0      	b.n	8006906 <_vfiprintf_r+0x1da>
 8006924:	ab03      	add	r3, sp, #12
 8006926:	9300      	str	r3, [sp, #0]
 8006928:	462a      	mov	r2, r5
 800692a:	4b16      	ldr	r3, [pc, #88]	; (8006984 <_vfiprintf_r+0x258>)
 800692c:	a904      	add	r1, sp, #16
 800692e:	4630      	mov	r0, r6
 8006930:	f3af 8000 	nop.w
 8006934:	4607      	mov	r7, r0
 8006936:	1c78      	adds	r0, r7, #1
 8006938:	d1d6      	bne.n	80068e8 <_vfiprintf_r+0x1bc>
 800693a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800693c:	07d9      	lsls	r1, r3, #31
 800693e:	d405      	bmi.n	800694c <_vfiprintf_r+0x220>
 8006940:	89ab      	ldrh	r3, [r5, #12]
 8006942:	059a      	lsls	r2, r3, #22
 8006944:	d402      	bmi.n	800694c <_vfiprintf_r+0x220>
 8006946:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006948:	f000 fc45 	bl	80071d6 <__retarget_lock_release_recursive>
 800694c:	89ab      	ldrh	r3, [r5, #12]
 800694e:	065b      	lsls	r3, r3, #25
 8006950:	f53f af12 	bmi.w	8006778 <_vfiprintf_r+0x4c>
 8006954:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006956:	e711      	b.n	800677c <_vfiprintf_r+0x50>
 8006958:	ab03      	add	r3, sp, #12
 800695a:	9300      	str	r3, [sp, #0]
 800695c:	462a      	mov	r2, r5
 800695e:	4b09      	ldr	r3, [pc, #36]	; (8006984 <_vfiprintf_r+0x258>)
 8006960:	a904      	add	r1, sp, #16
 8006962:	4630      	mov	r0, r6
 8006964:	f000 f880 	bl	8006a68 <_printf_i>
 8006968:	e7e4      	b.n	8006934 <_vfiprintf_r+0x208>
 800696a:	bf00      	nop
 800696c:	08008688 	.word	0x08008688
 8006970:	080086a8 	.word	0x080086a8
 8006974:	08008668 	.word	0x08008668
 8006978:	08008632 	.word	0x08008632
 800697c:	0800863c 	.word	0x0800863c
 8006980:	00000000 	.word	0x00000000
 8006984:	08006707 	.word	0x08006707
 8006988:	08008638 	.word	0x08008638

0800698c <_printf_common>:
 800698c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006990:	4616      	mov	r6, r2
 8006992:	4699      	mov	r9, r3
 8006994:	688a      	ldr	r2, [r1, #8]
 8006996:	690b      	ldr	r3, [r1, #16]
 8006998:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800699c:	4293      	cmp	r3, r2
 800699e:	bfb8      	it	lt
 80069a0:	4613      	movlt	r3, r2
 80069a2:	6033      	str	r3, [r6, #0]
 80069a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069a8:	4607      	mov	r7, r0
 80069aa:	460c      	mov	r4, r1
 80069ac:	b10a      	cbz	r2, 80069b2 <_printf_common+0x26>
 80069ae:	3301      	adds	r3, #1
 80069b0:	6033      	str	r3, [r6, #0]
 80069b2:	6823      	ldr	r3, [r4, #0]
 80069b4:	0699      	lsls	r1, r3, #26
 80069b6:	bf42      	ittt	mi
 80069b8:	6833      	ldrmi	r3, [r6, #0]
 80069ba:	3302      	addmi	r3, #2
 80069bc:	6033      	strmi	r3, [r6, #0]
 80069be:	6825      	ldr	r5, [r4, #0]
 80069c0:	f015 0506 	ands.w	r5, r5, #6
 80069c4:	d106      	bne.n	80069d4 <_printf_common+0x48>
 80069c6:	f104 0a19 	add.w	sl, r4, #25
 80069ca:	68e3      	ldr	r3, [r4, #12]
 80069cc:	6832      	ldr	r2, [r6, #0]
 80069ce:	1a9b      	subs	r3, r3, r2
 80069d0:	42ab      	cmp	r3, r5
 80069d2:	dc26      	bgt.n	8006a22 <_printf_common+0x96>
 80069d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80069d8:	1e13      	subs	r3, r2, #0
 80069da:	6822      	ldr	r2, [r4, #0]
 80069dc:	bf18      	it	ne
 80069de:	2301      	movne	r3, #1
 80069e0:	0692      	lsls	r2, r2, #26
 80069e2:	d42b      	bmi.n	8006a3c <_printf_common+0xb0>
 80069e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069e8:	4649      	mov	r1, r9
 80069ea:	4638      	mov	r0, r7
 80069ec:	47c0      	blx	r8
 80069ee:	3001      	adds	r0, #1
 80069f0:	d01e      	beq.n	8006a30 <_printf_common+0xa4>
 80069f2:	6823      	ldr	r3, [r4, #0]
 80069f4:	68e5      	ldr	r5, [r4, #12]
 80069f6:	6832      	ldr	r2, [r6, #0]
 80069f8:	f003 0306 	and.w	r3, r3, #6
 80069fc:	2b04      	cmp	r3, #4
 80069fe:	bf08      	it	eq
 8006a00:	1aad      	subeq	r5, r5, r2
 8006a02:	68a3      	ldr	r3, [r4, #8]
 8006a04:	6922      	ldr	r2, [r4, #16]
 8006a06:	bf0c      	ite	eq
 8006a08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a0c:	2500      	movne	r5, #0
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	bfc4      	itt	gt
 8006a12:	1a9b      	subgt	r3, r3, r2
 8006a14:	18ed      	addgt	r5, r5, r3
 8006a16:	2600      	movs	r6, #0
 8006a18:	341a      	adds	r4, #26
 8006a1a:	42b5      	cmp	r5, r6
 8006a1c:	d11a      	bne.n	8006a54 <_printf_common+0xc8>
 8006a1e:	2000      	movs	r0, #0
 8006a20:	e008      	b.n	8006a34 <_printf_common+0xa8>
 8006a22:	2301      	movs	r3, #1
 8006a24:	4652      	mov	r2, sl
 8006a26:	4649      	mov	r1, r9
 8006a28:	4638      	mov	r0, r7
 8006a2a:	47c0      	blx	r8
 8006a2c:	3001      	adds	r0, #1
 8006a2e:	d103      	bne.n	8006a38 <_printf_common+0xac>
 8006a30:	f04f 30ff 	mov.w	r0, #4294967295
 8006a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a38:	3501      	adds	r5, #1
 8006a3a:	e7c6      	b.n	80069ca <_printf_common+0x3e>
 8006a3c:	18e1      	adds	r1, r4, r3
 8006a3e:	1c5a      	adds	r2, r3, #1
 8006a40:	2030      	movs	r0, #48	; 0x30
 8006a42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a46:	4422      	add	r2, r4
 8006a48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a50:	3302      	adds	r3, #2
 8006a52:	e7c7      	b.n	80069e4 <_printf_common+0x58>
 8006a54:	2301      	movs	r3, #1
 8006a56:	4622      	mov	r2, r4
 8006a58:	4649      	mov	r1, r9
 8006a5a:	4638      	mov	r0, r7
 8006a5c:	47c0      	blx	r8
 8006a5e:	3001      	adds	r0, #1
 8006a60:	d0e6      	beq.n	8006a30 <_printf_common+0xa4>
 8006a62:	3601      	adds	r6, #1
 8006a64:	e7d9      	b.n	8006a1a <_printf_common+0x8e>
	...

08006a68 <_printf_i>:
 8006a68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a6c:	7e0f      	ldrb	r7, [r1, #24]
 8006a6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006a70:	2f78      	cmp	r7, #120	; 0x78
 8006a72:	4691      	mov	r9, r2
 8006a74:	4680      	mov	r8, r0
 8006a76:	460c      	mov	r4, r1
 8006a78:	469a      	mov	sl, r3
 8006a7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006a7e:	d807      	bhi.n	8006a90 <_printf_i+0x28>
 8006a80:	2f62      	cmp	r7, #98	; 0x62
 8006a82:	d80a      	bhi.n	8006a9a <_printf_i+0x32>
 8006a84:	2f00      	cmp	r7, #0
 8006a86:	f000 80d8 	beq.w	8006c3a <_printf_i+0x1d2>
 8006a8a:	2f58      	cmp	r7, #88	; 0x58
 8006a8c:	f000 80a3 	beq.w	8006bd6 <_printf_i+0x16e>
 8006a90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006a98:	e03a      	b.n	8006b10 <_printf_i+0xa8>
 8006a9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006a9e:	2b15      	cmp	r3, #21
 8006aa0:	d8f6      	bhi.n	8006a90 <_printf_i+0x28>
 8006aa2:	a101      	add	r1, pc, #4	; (adr r1, 8006aa8 <_printf_i+0x40>)
 8006aa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006aa8:	08006b01 	.word	0x08006b01
 8006aac:	08006b15 	.word	0x08006b15
 8006ab0:	08006a91 	.word	0x08006a91
 8006ab4:	08006a91 	.word	0x08006a91
 8006ab8:	08006a91 	.word	0x08006a91
 8006abc:	08006a91 	.word	0x08006a91
 8006ac0:	08006b15 	.word	0x08006b15
 8006ac4:	08006a91 	.word	0x08006a91
 8006ac8:	08006a91 	.word	0x08006a91
 8006acc:	08006a91 	.word	0x08006a91
 8006ad0:	08006a91 	.word	0x08006a91
 8006ad4:	08006c21 	.word	0x08006c21
 8006ad8:	08006b45 	.word	0x08006b45
 8006adc:	08006c03 	.word	0x08006c03
 8006ae0:	08006a91 	.word	0x08006a91
 8006ae4:	08006a91 	.word	0x08006a91
 8006ae8:	08006c43 	.word	0x08006c43
 8006aec:	08006a91 	.word	0x08006a91
 8006af0:	08006b45 	.word	0x08006b45
 8006af4:	08006a91 	.word	0x08006a91
 8006af8:	08006a91 	.word	0x08006a91
 8006afc:	08006c0b 	.word	0x08006c0b
 8006b00:	682b      	ldr	r3, [r5, #0]
 8006b02:	1d1a      	adds	r2, r3, #4
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	602a      	str	r2, [r5, #0]
 8006b08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b10:	2301      	movs	r3, #1
 8006b12:	e0a3      	b.n	8006c5c <_printf_i+0x1f4>
 8006b14:	6820      	ldr	r0, [r4, #0]
 8006b16:	6829      	ldr	r1, [r5, #0]
 8006b18:	0606      	lsls	r6, r0, #24
 8006b1a:	f101 0304 	add.w	r3, r1, #4
 8006b1e:	d50a      	bpl.n	8006b36 <_printf_i+0xce>
 8006b20:	680e      	ldr	r6, [r1, #0]
 8006b22:	602b      	str	r3, [r5, #0]
 8006b24:	2e00      	cmp	r6, #0
 8006b26:	da03      	bge.n	8006b30 <_printf_i+0xc8>
 8006b28:	232d      	movs	r3, #45	; 0x2d
 8006b2a:	4276      	negs	r6, r6
 8006b2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b30:	485e      	ldr	r0, [pc, #376]	; (8006cac <_printf_i+0x244>)
 8006b32:	230a      	movs	r3, #10
 8006b34:	e019      	b.n	8006b6a <_printf_i+0x102>
 8006b36:	680e      	ldr	r6, [r1, #0]
 8006b38:	602b      	str	r3, [r5, #0]
 8006b3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006b3e:	bf18      	it	ne
 8006b40:	b236      	sxthne	r6, r6
 8006b42:	e7ef      	b.n	8006b24 <_printf_i+0xbc>
 8006b44:	682b      	ldr	r3, [r5, #0]
 8006b46:	6820      	ldr	r0, [r4, #0]
 8006b48:	1d19      	adds	r1, r3, #4
 8006b4a:	6029      	str	r1, [r5, #0]
 8006b4c:	0601      	lsls	r1, r0, #24
 8006b4e:	d501      	bpl.n	8006b54 <_printf_i+0xec>
 8006b50:	681e      	ldr	r6, [r3, #0]
 8006b52:	e002      	b.n	8006b5a <_printf_i+0xf2>
 8006b54:	0646      	lsls	r6, r0, #25
 8006b56:	d5fb      	bpl.n	8006b50 <_printf_i+0xe8>
 8006b58:	881e      	ldrh	r6, [r3, #0]
 8006b5a:	4854      	ldr	r0, [pc, #336]	; (8006cac <_printf_i+0x244>)
 8006b5c:	2f6f      	cmp	r7, #111	; 0x6f
 8006b5e:	bf0c      	ite	eq
 8006b60:	2308      	moveq	r3, #8
 8006b62:	230a      	movne	r3, #10
 8006b64:	2100      	movs	r1, #0
 8006b66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b6a:	6865      	ldr	r5, [r4, #4]
 8006b6c:	60a5      	str	r5, [r4, #8]
 8006b6e:	2d00      	cmp	r5, #0
 8006b70:	bfa2      	ittt	ge
 8006b72:	6821      	ldrge	r1, [r4, #0]
 8006b74:	f021 0104 	bicge.w	r1, r1, #4
 8006b78:	6021      	strge	r1, [r4, #0]
 8006b7a:	b90e      	cbnz	r6, 8006b80 <_printf_i+0x118>
 8006b7c:	2d00      	cmp	r5, #0
 8006b7e:	d04d      	beq.n	8006c1c <_printf_i+0x1b4>
 8006b80:	4615      	mov	r5, r2
 8006b82:	fbb6 f1f3 	udiv	r1, r6, r3
 8006b86:	fb03 6711 	mls	r7, r3, r1, r6
 8006b8a:	5dc7      	ldrb	r7, [r0, r7]
 8006b8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006b90:	4637      	mov	r7, r6
 8006b92:	42bb      	cmp	r3, r7
 8006b94:	460e      	mov	r6, r1
 8006b96:	d9f4      	bls.n	8006b82 <_printf_i+0x11a>
 8006b98:	2b08      	cmp	r3, #8
 8006b9a:	d10b      	bne.n	8006bb4 <_printf_i+0x14c>
 8006b9c:	6823      	ldr	r3, [r4, #0]
 8006b9e:	07de      	lsls	r6, r3, #31
 8006ba0:	d508      	bpl.n	8006bb4 <_printf_i+0x14c>
 8006ba2:	6923      	ldr	r3, [r4, #16]
 8006ba4:	6861      	ldr	r1, [r4, #4]
 8006ba6:	4299      	cmp	r1, r3
 8006ba8:	bfde      	ittt	le
 8006baa:	2330      	movle	r3, #48	; 0x30
 8006bac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006bb0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006bb4:	1b52      	subs	r2, r2, r5
 8006bb6:	6122      	str	r2, [r4, #16]
 8006bb8:	f8cd a000 	str.w	sl, [sp]
 8006bbc:	464b      	mov	r3, r9
 8006bbe:	aa03      	add	r2, sp, #12
 8006bc0:	4621      	mov	r1, r4
 8006bc2:	4640      	mov	r0, r8
 8006bc4:	f7ff fee2 	bl	800698c <_printf_common>
 8006bc8:	3001      	adds	r0, #1
 8006bca:	d14c      	bne.n	8006c66 <_printf_i+0x1fe>
 8006bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd0:	b004      	add	sp, #16
 8006bd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bd6:	4835      	ldr	r0, [pc, #212]	; (8006cac <_printf_i+0x244>)
 8006bd8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006bdc:	6829      	ldr	r1, [r5, #0]
 8006bde:	6823      	ldr	r3, [r4, #0]
 8006be0:	f851 6b04 	ldr.w	r6, [r1], #4
 8006be4:	6029      	str	r1, [r5, #0]
 8006be6:	061d      	lsls	r5, r3, #24
 8006be8:	d514      	bpl.n	8006c14 <_printf_i+0x1ac>
 8006bea:	07df      	lsls	r7, r3, #31
 8006bec:	bf44      	itt	mi
 8006bee:	f043 0320 	orrmi.w	r3, r3, #32
 8006bf2:	6023      	strmi	r3, [r4, #0]
 8006bf4:	b91e      	cbnz	r6, 8006bfe <_printf_i+0x196>
 8006bf6:	6823      	ldr	r3, [r4, #0]
 8006bf8:	f023 0320 	bic.w	r3, r3, #32
 8006bfc:	6023      	str	r3, [r4, #0]
 8006bfe:	2310      	movs	r3, #16
 8006c00:	e7b0      	b.n	8006b64 <_printf_i+0xfc>
 8006c02:	6823      	ldr	r3, [r4, #0]
 8006c04:	f043 0320 	orr.w	r3, r3, #32
 8006c08:	6023      	str	r3, [r4, #0]
 8006c0a:	2378      	movs	r3, #120	; 0x78
 8006c0c:	4828      	ldr	r0, [pc, #160]	; (8006cb0 <_printf_i+0x248>)
 8006c0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c12:	e7e3      	b.n	8006bdc <_printf_i+0x174>
 8006c14:	0659      	lsls	r1, r3, #25
 8006c16:	bf48      	it	mi
 8006c18:	b2b6      	uxthmi	r6, r6
 8006c1a:	e7e6      	b.n	8006bea <_printf_i+0x182>
 8006c1c:	4615      	mov	r5, r2
 8006c1e:	e7bb      	b.n	8006b98 <_printf_i+0x130>
 8006c20:	682b      	ldr	r3, [r5, #0]
 8006c22:	6826      	ldr	r6, [r4, #0]
 8006c24:	6961      	ldr	r1, [r4, #20]
 8006c26:	1d18      	adds	r0, r3, #4
 8006c28:	6028      	str	r0, [r5, #0]
 8006c2a:	0635      	lsls	r5, r6, #24
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	d501      	bpl.n	8006c34 <_printf_i+0x1cc>
 8006c30:	6019      	str	r1, [r3, #0]
 8006c32:	e002      	b.n	8006c3a <_printf_i+0x1d2>
 8006c34:	0670      	lsls	r0, r6, #25
 8006c36:	d5fb      	bpl.n	8006c30 <_printf_i+0x1c8>
 8006c38:	8019      	strh	r1, [r3, #0]
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	6123      	str	r3, [r4, #16]
 8006c3e:	4615      	mov	r5, r2
 8006c40:	e7ba      	b.n	8006bb8 <_printf_i+0x150>
 8006c42:	682b      	ldr	r3, [r5, #0]
 8006c44:	1d1a      	adds	r2, r3, #4
 8006c46:	602a      	str	r2, [r5, #0]
 8006c48:	681d      	ldr	r5, [r3, #0]
 8006c4a:	6862      	ldr	r2, [r4, #4]
 8006c4c:	2100      	movs	r1, #0
 8006c4e:	4628      	mov	r0, r5
 8006c50:	f7f9 fabe 	bl	80001d0 <memchr>
 8006c54:	b108      	cbz	r0, 8006c5a <_printf_i+0x1f2>
 8006c56:	1b40      	subs	r0, r0, r5
 8006c58:	6060      	str	r0, [r4, #4]
 8006c5a:	6863      	ldr	r3, [r4, #4]
 8006c5c:	6123      	str	r3, [r4, #16]
 8006c5e:	2300      	movs	r3, #0
 8006c60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c64:	e7a8      	b.n	8006bb8 <_printf_i+0x150>
 8006c66:	6923      	ldr	r3, [r4, #16]
 8006c68:	462a      	mov	r2, r5
 8006c6a:	4649      	mov	r1, r9
 8006c6c:	4640      	mov	r0, r8
 8006c6e:	47d0      	blx	sl
 8006c70:	3001      	adds	r0, #1
 8006c72:	d0ab      	beq.n	8006bcc <_printf_i+0x164>
 8006c74:	6823      	ldr	r3, [r4, #0]
 8006c76:	079b      	lsls	r3, r3, #30
 8006c78:	d413      	bmi.n	8006ca2 <_printf_i+0x23a>
 8006c7a:	68e0      	ldr	r0, [r4, #12]
 8006c7c:	9b03      	ldr	r3, [sp, #12]
 8006c7e:	4298      	cmp	r0, r3
 8006c80:	bfb8      	it	lt
 8006c82:	4618      	movlt	r0, r3
 8006c84:	e7a4      	b.n	8006bd0 <_printf_i+0x168>
 8006c86:	2301      	movs	r3, #1
 8006c88:	4632      	mov	r2, r6
 8006c8a:	4649      	mov	r1, r9
 8006c8c:	4640      	mov	r0, r8
 8006c8e:	47d0      	blx	sl
 8006c90:	3001      	adds	r0, #1
 8006c92:	d09b      	beq.n	8006bcc <_printf_i+0x164>
 8006c94:	3501      	adds	r5, #1
 8006c96:	68e3      	ldr	r3, [r4, #12]
 8006c98:	9903      	ldr	r1, [sp, #12]
 8006c9a:	1a5b      	subs	r3, r3, r1
 8006c9c:	42ab      	cmp	r3, r5
 8006c9e:	dcf2      	bgt.n	8006c86 <_printf_i+0x21e>
 8006ca0:	e7eb      	b.n	8006c7a <_printf_i+0x212>
 8006ca2:	2500      	movs	r5, #0
 8006ca4:	f104 0619 	add.w	r6, r4, #25
 8006ca8:	e7f5      	b.n	8006c96 <_printf_i+0x22e>
 8006caa:	bf00      	nop
 8006cac:	08008643 	.word	0x08008643
 8006cb0:	08008654 	.word	0x08008654

08006cb4 <_sbrk_r>:
 8006cb4:	b538      	push	{r3, r4, r5, lr}
 8006cb6:	4d06      	ldr	r5, [pc, #24]	; (8006cd0 <_sbrk_r+0x1c>)
 8006cb8:	2300      	movs	r3, #0
 8006cba:	4604      	mov	r4, r0
 8006cbc:	4608      	mov	r0, r1
 8006cbe:	602b      	str	r3, [r5, #0]
 8006cc0:	f7fa ffd6 	bl	8001c70 <_sbrk>
 8006cc4:	1c43      	adds	r3, r0, #1
 8006cc6:	d102      	bne.n	8006cce <_sbrk_r+0x1a>
 8006cc8:	682b      	ldr	r3, [r5, #0]
 8006cca:	b103      	cbz	r3, 8006cce <_sbrk_r+0x1a>
 8006ccc:	6023      	str	r3, [r4, #0]
 8006cce:	bd38      	pop	{r3, r4, r5, pc}
 8006cd0:	200008dc 	.word	0x200008dc

08006cd4 <__swbuf_r>:
 8006cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd6:	460e      	mov	r6, r1
 8006cd8:	4614      	mov	r4, r2
 8006cda:	4605      	mov	r5, r0
 8006cdc:	b118      	cbz	r0, 8006ce6 <__swbuf_r+0x12>
 8006cde:	6983      	ldr	r3, [r0, #24]
 8006ce0:	b90b      	cbnz	r3, 8006ce6 <__swbuf_r+0x12>
 8006ce2:	f000 f9d9 	bl	8007098 <__sinit>
 8006ce6:	4b21      	ldr	r3, [pc, #132]	; (8006d6c <__swbuf_r+0x98>)
 8006ce8:	429c      	cmp	r4, r3
 8006cea:	d12b      	bne.n	8006d44 <__swbuf_r+0x70>
 8006cec:	686c      	ldr	r4, [r5, #4]
 8006cee:	69a3      	ldr	r3, [r4, #24]
 8006cf0:	60a3      	str	r3, [r4, #8]
 8006cf2:	89a3      	ldrh	r3, [r4, #12]
 8006cf4:	071a      	lsls	r2, r3, #28
 8006cf6:	d52f      	bpl.n	8006d58 <__swbuf_r+0x84>
 8006cf8:	6923      	ldr	r3, [r4, #16]
 8006cfa:	b36b      	cbz	r3, 8006d58 <__swbuf_r+0x84>
 8006cfc:	6923      	ldr	r3, [r4, #16]
 8006cfe:	6820      	ldr	r0, [r4, #0]
 8006d00:	1ac0      	subs	r0, r0, r3
 8006d02:	6963      	ldr	r3, [r4, #20]
 8006d04:	b2f6      	uxtb	r6, r6
 8006d06:	4283      	cmp	r3, r0
 8006d08:	4637      	mov	r7, r6
 8006d0a:	dc04      	bgt.n	8006d16 <__swbuf_r+0x42>
 8006d0c:	4621      	mov	r1, r4
 8006d0e:	4628      	mov	r0, r5
 8006d10:	f000 f92e 	bl	8006f70 <_fflush_r>
 8006d14:	bb30      	cbnz	r0, 8006d64 <__swbuf_r+0x90>
 8006d16:	68a3      	ldr	r3, [r4, #8]
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	60a3      	str	r3, [r4, #8]
 8006d1c:	6823      	ldr	r3, [r4, #0]
 8006d1e:	1c5a      	adds	r2, r3, #1
 8006d20:	6022      	str	r2, [r4, #0]
 8006d22:	701e      	strb	r6, [r3, #0]
 8006d24:	6963      	ldr	r3, [r4, #20]
 8006d26:	3001      	adds	r0, #1
 8006d28:	4283      	cmp	r3, r0
 8006d2a:	d004      	beq.n	8006d36 <__swbuf_r+0x62>
 8006d2c:	89a3      	ldrh	r3, [r4, #12]
 8006d2e:	07db      	lsls	r3, r3, #31
 8006d30:	d506      	bpl.n	8006d40 <__swbuf_r+0x6c>
 8006d32:	2e0a      	cmp	r6, #10
 8006d34:	d104      	bne.n	8006d40 <__swbuf_r+0x6c>
 8006d36:	4621      	mov	r1, r4
 8006d38:	4628      	mov	r0, r5
 8006d3a:	f000 f919 	bl	8006f70 <_fflush_r>
 8006d3e:	b988      	cbnz	r0, 8006d64 <__swbuf_r+0x90>
 8006d40:	4638      	mov	r0, r7
 8006d42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d44:	4b0a      	ldr	r3, [pc, #40]	; (8006d70 <__swbuf_r+0x9c>)
 8006d46:	429c      	cmp	r4, r3
 8006d48:	d101      	bne.n	8006d4e <__swbuf_r+0x7a>
 8006d4a:	68ac      	ldr	r4, [r5, #8]
 8006d4c:	e7cf      	b.n	8006cee <__swbuf_r+0x1a>
 8006d4e:	4b09      	ldr	r3, [pc, #36]	; (8006d74 <__swbuf_r+0xa0>)
 8006d50:	429c      	cmp	r4, r3
 8006d52:	bf08      	it	eq
 8006d54:	68ec      	ldreq	r4, [r5, #12]
 8006d56:	e7ca      	b.n	8006cee <__swbuf_r+0x1a>
 8006d58:	4621      	mov	r1, r4
 8006d5a:	4628      	mov	r0, r5
 8006d5c:	f000 f80c 	bl	8006d78 <__swsetup_r>
 8006d60:	2800      	cmp	r0, #0
 8006d62:	d0cb      	beq.n	8006cfc <__swbuf_r+0x28>
 8006d64:	f04f 37ff 	mov.w	r7, #4294967295
 8006d68:	e7ea      	b.n	8006d40 <__swbuf_r+0x6c>
 8006d6a:	bf00      	nop
 8006d6c:	08008688 	.word	0x08008688
 8006d70:	080086a8 	.word	0x080086a8
 8006d74:	08008668 	.word	0x08008668

08006d78 <__swsetup_r>:
 8006d78:	4b32      	ldr	r3, [pc, #200]	; (8006e44 <__swsetup_r+0xcc>)
 8006d7a:	b570      	push	{r4, r5, r6, lr}
 8006d7c:	681d      	ldr	r5, [r3, #0]
 8006d7e:	4606      	mov	r6, r0
 8006d80:	460c      	mov	r4, r1
 8006d82:	b125      	cbz	r5, 8006d8e <__swsetup_r+0x16>
 8006d84:	69ab      	ldr	r3, [r5, #24]
 8006d86:	b913      	cbnz	r3, 8006d8e <__swsetup_r+0x16>
 8006d88:	4628      	mov	r0, r5
 8006d8a:	f000 f985 	bl	8007098 <__sinit>
 8006d8e:	4b2e      	ldr	r3, [pc, #184]	; (8006e48 <__swsetup_r+0xd0>)
 8006d90:	429c      	cmp	r4, r3
 8006d92:	d10f      	bne.n	8006db4 <__swsetup_r+0x3c>
 8006d94:	686c      	ldr	r4, [r5, #4]
 8006d96:	89a3      	ldrh	r3, [r4, #12]
 8006d98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d9c:	0719      	lsls	r1, r3, #28
 8006d9e:	d42c      	bmi.n	8006dfa <__swsetup_r+0x82>
 8006da0:	06dd      	lsls	r5, r3, #27
 8006da2:	d411      	bmi.n	8006dc8 <__swsetup_r+0x50>
 8006da4:	2309      	movs	r3, #9
 8006da6:	6033      	str	r3, [r6, #0]
 8006da8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006dac:	81a3      	strh	r3, [r4, #12]
 8006dae:	f04f 30ff 	mov.w	r0, #4294967295
 8006db2:	e03e      	b.n	8006e32 <__swsetup_r+0xba>
 8006db4:	4b25      	ldr	r3, [pc, #148]	; (8006e4c <__swsetup_r+0xd4>)
 8006db6:	429c      	cmp	r4, r3
 8006db8:	d101      	bne.n	8006dbe <__swsetup_r+0x46>
 8006dba:	68ac      	ldr	r4, [r5, #8]
 8006dbc:	e7eb      	b.n	8006d96 <__swsetup_r+0x1e>
 8006dbe:	4b24      	ldr	r3, [pc, #144]	; (8006e50 <__swsetup_r+0xd8>)
 8006dc0:	429c      	cmp	r4, r3
 8006dc2:	bf08      	it	eq
 8006dc4:	68ec      	ldreq	r4, [r5, #12]
 8006dc6:	e7e6      	b.n	8006d96 <__swsetup_r+0x1e>
 8006dc8:	0758      	lsls	r0, r3, #29
 8006dca:	d512      	bpl.n	8006df2 <__swsetup_r+0x7a>
 8006dcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006dce:	b141      	cbz	r1, 8006de2 <__swsetup_r+0x6a>
 8006dd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006dd4:	4299      	cmp	r1, r3
 8006dd6:	d002      	beq.n	8006dde <__swsetup_r+0x66>
 8006dd8:	4630      	mov	r0, r6
 8006dda:	f7ff fb9d 	bl	8006518 <_free_r>
 8006dde:	2300      	movs	r3, #0
 8006de0:	6363      	str	r3, [r4, #52]	; 0x34
 8006de2:	89a3      	ldrh	r3, [r4, #12]
 8006de4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006de8:	81a3      	strh	r3, [r4, #12]
 8006dea:	2300      	movs	r3, #0
 8006dec:	6063      	str	r3, [r4, #4]
 8006dee:	6923      	ldr	r3, [r4, #16]
 8006df0:	6023      	str	r3, [r4, #0]
 8006df2:	89a3      	ldrh	r3, [r4, #12]
 8006df4:	f043 0308 	orr.w	r3, r3, #8
 8006df8:	81a3      	strh	r3, [r4, #12]
 8006dfa:	6923      	ldr	r3, [r4, #16]
 8006dfc:	b94b      	cbnz	r3, 8006e12 <__swsetup_r+0x9a>
 8006dfe:	89a3      	ldrh	r3, [r4, #12]
 8006e00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e08:	d003      	beq.n	8006e12 <__swsetup_r+0x9a>
 8006e0a:	4621      	mov	r1, r4
 8006e0c:	4630      	mov	r0, r6
 8006e0e:	f000 fa09 	bl	8007224 <__smakebuf_r>
 8006e12:	89a0      	ldrh	r0, [r4, #12]
 8006e14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006e18:	f010 0301 	ands.w	r3, r0, #1
 8006e1c:	d00a      	beq.n	8006e34 <__swsetup_r+0xbc>
 8006e1e:	2300      	movs	r3, #0
 8006e20:	60a3      	str	r3, [r4, #8]
 8006e22:	6963      	ldr	r3, [r4, #20]
 8006e24:	425b      	negs	r3, r3
 8006e26:	61a3      	str	r3, [r4, #24]
 8006e28:	6923      	ldr	r3, [r4, #16]
 8006e2a:	b943      	cbnz	r3, 8006e3e <__swsetup_r+0xc6>
 8006e2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006e30:	d1ba      	bne.n	8006da8 <__swsetup_r+0x30>
 8006e32:	bd70      	pop	{r4, r5, r6, pc}
 8006e34:	0781      	lsls	r1, r0, #30
 8006e36:	bf58      	it	pl
 8006e38:	6963      	ldrpl	r3, [r4, #20]
 8006e3a:	60a3      	str	r3, [r4, #8]
 8006e3c:	e7f4      	b.n	8006e28 <__swsetup_r+0xb0>
 8006e3e:	2000      	movs	r0, #0
 8006e40:	e7f7      	b.n	8006e32 <__swsetup_r+0xba>
 8006e42:	bf00      	nop
 8006e44:	20000014 	.word	0x20000014
 8006e48:	08008688 	.word	0x08008688
 8006e4c:	080086a8 	.word	0x080086a8
 8006e50:	08008668 	.word	0x08008668

08006e54 <abort>:
 8006e54:	b508      	push	{r3, lr}
 8006e56:	2006      	movs	r0, #6
 8006e58:	f000 fa58 	bl	800730c <raise>
 8006e5c:	2001      	movs	r0, #1
 8006e5e:	f7fa fe8f 	bl	8001b80 <_exit>
	...

08006e64 <__sflush_r>:
 8006e64:	898a      	ldrh	r2, [r1, #12]
 8006e66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e6a:	4605      	mov	r5, r0
 8006e6c:	0710      	lsls	r0, r2, #28
 8006e6e:	460c      	mov	r4, r1
 8006e70:	d458      	bmi.n	8006f24 <__sflush_r+0xc0>
 8006e72:	684b      	ldr	r3, [r1, #4]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	dc05      	bgt.n	8006e84 <__sflush_r+0x20>
 8006e78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	dc02      	bgt.n	8006e84 <__sflush_r+0x20>
 8006e7e:	2000      	movs	r0, #0
 8006e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e86:	2e00      	cmp	r6, #0
 8006e88:	d0f9      	beq.n	8006e7e <__sflush_r+0x1a>
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e90:	682f      	ldr	r7, [r5, #0]
 8006e92:	602b      	str	r3, [r5, #0]
 8006e94:	d032      	beq.n	8006efc <__sflush_r+0x98>
 8006e96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e98:	89a3      	ldrh	r3, [r4, #12]
 8006e9a:	075a      	lsls	r2, r3, #29
 8006e9c:	d505      	bpl.n	8006eaa <__sflush_r+0x46>
 8006e9e:	6863      	ldr	r3, [r4, #4]
 8006ea0:	1ac0      	subs	r0, r0, r3
 8006ea2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ea4:	b10b      	cbz	r3, 8006eaa <__sflush_r+0x46>
 8006ea6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ea8:	1ac0      	subs	r0, r0, r3
 8006eaa:	2300      	movs	r3, #0
 8006eac:	4602      	mov	r2, r0
 8006eae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006eb0:	6a21      	ldr	r1, [r4, #32]
 8006eb2:	4628      	mov	r0, r5
 8006eb4:	47b0      	blx	r6
 8006eb6:	1c43      	adds	r3, r0, #1
 8006eb8:	89a3      	ldrh	r3, [r4, #12]
 8006eba:	d106      	bne.n	8006eca <__sflush_r+0x66>
 8006ebc:	6829      	ldr	r1, [r5, #0]
 8006ebe:	291d      	cmp	r1, #29
 8006ec0:	d82c      	bhi.n	8006f1c <__sflush_r+0xb8>
 8006ec2:	4a2a      	ldr	r2, [pc, #168]	; (8006f6c <__sflush_r+0x108>)
 8006ec4:	40ca      	lsrs	r2, r1
 8006ec6:	07d6      	lsls	r6, r2, #31
 8006ec8:	d528      	bpl.n	8006f1c <__sflush_r+0xb8>
 8006eca:	2200      	movs	r2, #0
 8006ecc:	6062      	str	r2, [r4, #4]
 8006ece:	04d9      	lsls	r1, r3, #19
 8006ed0:	6922      	ldr	r2, [r4, #16]
 8006ed2:	6022      	str	r2, [r4, #0]
 8006ed4:	d504      	bpl.n	8006ee0 <__sflush_r+0x7c>
 8006ed6:	1c42      	adds	r2, r0, #1
 8006ed8:	d101      	bne.n	8006ede <__sflush_r+0x7a>
 8006eda:	682b      	ldr	r3, [r5, #0]
 8006edc:	b903      	cbnz	r3, 8006ee0 <__sflush_r+0x7c>
 8006ede:	6560      	str	r0, [r4, #84]	; 0x54
 8006ee0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ee2:	602f      	str	r7, [r5, #0]
 8006ee4:	2900      	cmp	r1, #0
 8006ee6:	d0ca      	beq.n	8006e7e <__sflush_r+0x1a>
 8006ee8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006eec:	4299      	cmp	r1, r3
 8006eee:	d002      	beq.n	8006ef6 <__sflush_r+0x92>
 8006ef0:	4628      	mov	r0, r5
 8006ef2:	f7ff fb11 	bl	8006518 <_free_r>
 8006ef6:	2000      	movs	r0, #0
 8006ef8:	6360      	str	r0, [r4, #52]	; 0x34
 8006efa:	e7c1      	b.n	8006e80 <__sflush_r+0x1c>
 8006efc:	6a21      	ldr	r1, [r4, #32]
 8006efe:	2301      	movs	r3, #1
 8006f00:	4628      	mov	r0, r5
 8006f02:	47b0      	blx	r6
 8006f04:	1c41      	adds	r1, r0, #1
 8006f06:	d1c7      	bne.n	8006e98 <__sflush_r+0x34>
 8006f08:	682b      	ldr	r3, [r5, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d0c4      	beq.n	8006e98 <__sflush_r+0x34>
 8006f0e:	2b1d      	cmp	r3, #29
 8006f10:	d001      	beq.n	8006f16 <__sflush_r+0xb2>
 8006f12:	2b16      	cmp	r3, #22
 8006f14:	d101      	bne.n	8006f1a <__sflush_r+0xb6>
 8006f16:	602f      	str	r7, [r5, #0]
 8006f18:	e7b1      	b.n	8006e7e <__sflush_r+0x1a>
 8006f1a:	89a3      	ldrh	r3, [r4, #12]
 8006f1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f20:	81a3      	strh	r3, [r4, #12]
 8006f22:	e7ad      	b.n	8006e80 <__sflush_r+0x1c>
 8006f24:	690f      	ldr	r7, [r1, #16]
 8006f26:	2f00      	cmp	r7, #0
 8006f28:	d0a9      	beq.n	8006e7e <__sflush_r+0x1a>
 8006f2a:	0793      	lsls	r3, r2, #30
 8006f2c:	680e      	ldr	r6, [r1, #0]
 8006f2e:	bf08      	it	eq
 8006f30:	694b      	ldreq	r3, [r1, #20]
 8006f32:	600f      	str	r7, [r1, #0]
 8006f34:	bf18      	it	ne
 8006f36:	2300      	movne	r3, #0
 8006f38:	eba6 0807 	sub.w	r8, r6, r7
 8006f3c:	608b      	str	r3, [r1, #8]
 8006f3e:	f1b8 0f00 	cmp.w	r8, #0
 8006f42:	dd9c      	ble.n	8006e7e <__sflush_r+0x1a>
 8006f44:	6a21      	ldr	r1, [r4, #32]
 8006f46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006f48:	4643      	mov	r3, r8
 8006f4a:	463a      	mov	r2, r7
 8006f4c:	4628      	mov	r0, r5
 8006f4e:	47b0      	blx	r6
 8006f50:	2800      	cmp	r0, #0
 8006f52:	dc06      	bgt.n	8006f62 <__sflush_r+0xfe>
 8006f54:	89a3      	ldrh	r3, [r4, #12]
 8006f56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f5a:	81a3      	strh	r3, [r4, #12]
 8006f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006f60:	e78e      	b.n	8006e80 <__sflush_r+0x1c>
 8006f62:	4407      	add	r7, r0
 8006f64:	eba8 0800 	sub.w	r8, r8, r0
 8006f68:	e7e9      	b.n	8006f3e <__sflush_r+0xda>
 8006f6a:	bf00      	nop
 8006f6c:	20400001 	.word	0x20400001

08006f70 <_fflush_r>:
 8006f70:	b538      	push	{r3, r4, r5, lr}
 8006f72:	690b      	ldr	r3, [r1, #16]
 8006f74:	4605      	mov	r5, r0
 8006f76:	460c      	mov	r4, r1
 8006f78:	b913      	cbnz	r3, 8006f80 <_fflush_r+0x10>
 8006f7a:	2500      	movs	r5, #0
 8006f7c:	4628      	mov	r0, r5
 8006f7e:	bd38      	pop	{r3, r4, r5, pc}
 8006f80:	b118      	cbz	r0, 8006f8a <_fflush_r+0x1a>
 8006f82:	6983      	ldr	r3, [r0, #24]
 8006f84:	b90b      	cbnz	r3, 8006f8a <_fflush_r+0x1a>
 8006f86:	f000 f887 	bl	8007098 <__sinit>
 8006f8a:	4b14      	ldr	r3, [pc, #80]	; (8006fdc <_fflush_r+0x6c>)
 8006f8c:	429c      	cmp	r4, r3
 8006f8e:	d11b      	bne.n	8006fc8 <_fflush_r+0x58>
 8006f90:	686c      	ldr	r4, [r5, #4]
 8006f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d0ef      	beq.n	8006f7a <_fflush_r+0xa>
 8006f9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f9c:	07d0      	lsls	r0, r2, #31
 8006f9e:	d404      	bmi.n	8006faa <_fflush_r+0x3a>
 8006fa0:	0599      	lsls	r1, r3, #22
 8006fa2:	d402      	bmi.n	8006faa <_fflush_r+0x3a>
 8006fa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fa6:	f000 f915 	bl	80071d4 <__retarget_lock_acquire_recursive>
 8006faa:	4628      	mov	r0, r5
 8006fac:	4621      	mov	r1, r4
 8006fae:	f7ff ff59 	bl	8006e64 <__sflush_r>
 8006fb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006fb4:	07da      	lsls	r2, r3, #31
 8006fb6:	4605      	mov	r5, r0
 8006fb8:	d4e0      	bmi.n	8006f7c <_fflush_r+0xc>
 8006fba:	89a3      	ldrh	r3, [r4, #12]
 8006fbc:	059b      	lsls	r3, r3, #22
 8006fbe:	d4dd      	bmi.n	8006f7c <_fflush_r+0xc>
 8006fc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006fc2:	f000 f908 	bl	80071d6 <__retarget_lock_release_recursive>
 8006fc6:	e7d9      	b.n	8006f7c <_fflush_r+0xc>
 8006fc8:	4b05      	ldr	r3, [pc, #20]	; (8006fe0 <_fflush_r+0x70>)
 8006fca:	429c      	cmp	r4, r3
 8006fcc:	d101      	bne.n	8006fd2 <_fflush_r+0x62>
 8006fce:	68ac      	ldr	r4, [r5, #8]
 8006fd0:	e7df      	b.n	8006f92 <_fflush_r+0x22>
 8006fd2:	4b04      	ldr	r3, [pc, #16]	; (8006fe4 <_fflush_r+0x74>)
 8006fd4:	429c      	cmp	r4, r3
 8006fd6:	bf08      	it	eq
 8006fd8:	68ec      	ldreq	r4, [r5, #12]
 8006fda:	e7da      	b.n	8006f92 <_fflush_r+0x22>
 8006fdc:	08008688 	.word	0x08008688
 8006fe0:	080086a8 	.word	0x080086a8
 8006fe4:	08008668 	.word	0x08008668

08006fe8 <std>:
 8006fe8:	2300      	movs	r3, #0
 8006fea:	b510      	push	{r4, lr}
 8006fec:	4604      	mov	r4, r0
 8006fee:	e9c0 3300 	strd	r3, r3, [r0]
 8006ff2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ff6:	6083      	str	r3, [r0, #8]
 8006ff8:	8181      	strh	r1, [r0, #12]
 8006ffa:	6643      	str	r3, [r0, #100]	; 0x64
 8006ffc:	81c2      	strh	r2, [r0, #14]
 8006ffe:	6183      	str	r3, [r0, #24]
 8007000:	4619      	mov	r1, r3
 8007002:	2208      	movs	r2, #8
 8007004:	305c      	adds	r0, #92	; 0x5c
 8007006:	f7ff f9af 	bl	8006368 <memset>
 800700a:	4b05      	ldr	r3, [pc, #20]	; (8007020 <std+0x38>)
 800700c:	6263      	str	r3, [r4, #36]	; 0x24
 800700e:	4b05      	ldr	r3, [pc, #20]	; (8007024 <std+0x3c>)
 8007010:	62a3      	str	r3, [r4, #40]	; 0x28
 8007012:	4b05      	ldr	r3, [pc, #20]	; (8007028 <std+0x40>)
 8007014:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007016:	4b05      	ldr	r3, [pc, #20]	; (800702c <std+0x44>)
 8007018:	6224      	str	r4, [r4, #32]
 800701a:	6323      	str	r3, [r4, #48]	; 0x30
 800701c:	bd10      	pop	{r4, pc}
 800701e:	bf00      	nop
 8007020:	08007345 	.word	0x08007345
 8007024:	08007367 	.word	0x08007367
 8007028:	0800739f 	.word	0x0800739f
 800702c:	080073c3 	.word	0x080073c3

08007030 <_cleanup_r>:
 8007030:	4901      	ldr	r1, [pc, #4]	; (8007038 <_cleanup_r+0x8>)
 8007032:	f000 b8af 	b.w	8007194 <_fwalk_reent>
 8007036:	bf00      	nop
 8007038:	08006f71 	.word	0x08006f71

0800703c <__sfmoreglue>:
 800703c:	b570      	push	{r4, r5, r6, lr}
 800703e:	2268      	movs	r2, #104	; 0x68
 8007040:	1e4d      	subs	r5, r1, #1
 8007042:	4355      	muls	r5, r2
 8007044:	460e      	mov	r6, r1
 8007046:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800704a:	f7ff fad1 	bl	80065f0 <_malloc_r>
 800704e:	4604      	mov	r4, r0
 8007050:	b140      	cbz	r0, 8007064 <__sfmoreglue+0x28>
 8007052:	2100      	movs	r1, #0
 8007054:	e9c0 1600 	strd	r1, r6, [r0]
 8007058:	300c      	adds	r0, #12
 800705a:	60a0      	str	r0, [r4, #8]
 800705c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007060:	f7ff f982 	bl	8006368 <memset>
 8007064:	4620      	mov	r0, r4
 8007066:	bd70      	pop	{r4, r5, r6, pc}

08007068 <__sfp_lock_acquire>:
 8007068:	4801      	ldr	r0, [pc, #4]	; (8007070 <__sfp_lock_acquire+0x8>)
 800706a:	f000 b8b3 	b.w	80071d4 <__retarget_lock_acquire_recursive>
 800706e:	bf00      	nop
 8007070:	200008e1 	.word	0x200008e1

08007074 <__sfp_lock_release>:
 8007074:	4801      	ldr	r0, [pc, #4]	; (800707c <__sfp_lock_release+0x8>)
 8007076:	f000 b8ae 	b.w	80071d6 <__retarget_lock_release_recursive>
 800707a:	bf00      	nop
 800707c:	200008e1 	.word	0x200008e1

08007080 <__sinit_lock_acquire>:
 8007080:	4801      	ldr	r0, [pc, #4]	; (8007088 <__sinit_lock_acquire+0x8>)
 8007082:	f000 b8a7 	b.w	80071d4 <__retarget_lock_acquire_recursive>
 8007086:	bf00      	nop
 8007088:	200008e2 	.word	0x200008e2

0800708c <__sinit_lock_release>:
 800708c:	4801      	ldr	r0, [pc, #4]	; (8007094 <__sinit_lock_release+0x8>)
 800708e:	f000 b8a2 	b.w	80071d6 <__retarget_lock_release_recursive>
 8007092:	bf00      	nop
 8007094:	200008e2 	.word	0x200008e2

08007098 <__sinit>:
 8007098:	b510      	push	{r4, lr}
 800709a:	4604      	mov	r4, r0
 800709c:	f7ff fff0 	bl	8007080 <__sinit_lock_acquire>
 80070a0:	69a3      	ldr	r3, [r4, #24]
 80070a2:	b11b      	cbz	r3, 80070ac <__sinit+0x14>
 80070a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070a8:	f7ff bff0 	b.w	800708c <__sinit_lock_release>
 80070ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80070b0:	6523      	str	r3, [r4, #80]	; 0x50
 80070b2:	4b13      	ldr	r3, [pc, #76]	; (8007100 <__sinit+0x68>)
 80070b4:	4a13      	ldr	r2, [pc, #76]	; (8007104 <__sinit+0x6c>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80070ba:	42a3      	cmp	r3, r4
 80070bc:	bf04      	itt	eq
 80070be:	2301      	moveq	r3, #1
 80070c0:	61a3      	streq	r3, [r4, #24]
 80070c2:	4620      	mov	r0, r4
 80070c4:	f000 f820 	bl	8007108 <__sfp>
 80070c8:	6060      	str	r0, [r4, #4]
 80070ca:	4620      	mov	r0, r4
 80070cc:	f000 f81c 	bl	8007108 <__sfp>
 80070d0:	60a0      	str	r0, [r4, #8]
 80070d2:	4620      	mov	r0, r4
 80070d4:	f000 f818 	bl	8007108 <__sfp>
 80070d8:	2200      	movs	r2, #0
 80070da:	60e0      	str	r0, [r4, #12]
 80070dc:	2104      	movs	r1, #4
 80070de:	6860      	ldr	r0, [r4, #4]
 80070e0:	f7ff ff82 	bl	8006fe8 <std>
 80070e4:	68a0      	ldr	r0, [r4, #8]
 80070e6:	2201      	movs	r2, #1
 80070e8:	2109      	movs	r1, #9
 80070ea:	f7ff ff7d 	bl	8006fe8 <std>
 80070ee:	68e0      	ldr	r0, [r4, #12]
 80070f0:	2202      	movs	r2, #2
 80070f2:	2112      	movs	r1, #18
 80070f4:	f7ff ff78 	bl	8006fe8 <std>
 80070f8:	2301      	movs	r3, #1
 80070fa:	61a3      	str	r3, [r4, #24]
 80070fc:	e7d2      	b.n	80070a4 <__sinit+0xc>
 80070fe:	bf00      	nop
 8007100:	08008580 	.word	0x08008580
 8007104:	08007031 	.word	0x08007031

08007108 <__sfp>:
 8007108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800710a:	4607      	mov	r7, r0
 800710c:	f7ff ffac 	bl	8007068 <__sfp_lock_acquire>
 8007110:	4b1e      	ldr	r3, [pc, #120]	; (800718c <__sfp+0x84>)
 8007112:	681e      	ldr	r6, [r3, #0]
 8007114:	69b3      	ldr	r3, [r6, #24]
 8007116:	b913      	cbnz	r3, 800711e <__sfp+0x16>
 8007118:	4630      	mov	r0, r6
 800711a:	f7ff ffbd 	bl	8007098 <__sinit>
 800711e:	3648      	adds	r6, #72	; 0x48
 8007120:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007124:	3b01      	subs	r3, #1
 8007126:	d503      	bpl.n	8007130 <__sfp+0x28>
 8007128:	6833      	ldr	r3, [r6, #0]
 800712a:	b30b      	cbz	r3, 8007170 <__sfp+0x68>
 800712c:	6836      	ldr	r6, [r6, #0]
 800712e:	e7f7      	b.n	8007120 <__sfp+0x18>
 8007130:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007134:	b9d5      	cbnz	r5, 800716c <__sfp+0x64>
 8007136:	4b16      	ldr	r3, [pc, #88]	; (8007190 <__sfp+0x88>)
 8007138:	60e3      	str	r3, [r4, #12]
 800713a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800713e:	6665      	str	r5, [r4, #100]	; 0x64
 8007140:	f000 f847 	bl	80071d2 <__retarget_lock_init_recursive>
 8007144:	f7ff ff96 	bl	8007074 <__sfp_lock_release>
 8007148:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800714c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007150:	6025      	str	r5, [r4, #0]
 8007152:	61a5      	str	r5, [r4, #24]
 8007154:	2208      	movs	r2, #8
 8007156:	4629      	mov	r1, r5
 8007158:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800715c:	f7ff f904 	bl	8006368 <memset>
 8007160:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007164:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007168:	4620      	mov	r0, r4
 800716a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800716c:	3468      	adds	r4, #104	; 0x68
 800716e:	e7d9      	b.n	8007124 <__sfp+0x1c>
 8007170:	2104      	movs	r1, #4
 8007172:	4638      	mov	r0, r7
 8007174:	f7ff ff62 	bl	800703c <__sfmoreglue>
 8007178:	4604      	mov	r4, r0
 800717a:	6030      	str	r0, [r6, #0]
 800717c:	2800      	cmp	r0, #0
 800717e:	d1d5      	bne.n	800712c <__sfp+0x24>
 8007180:	f7ff ff78 	bl	8007074 <__sfp_lock_release>
 8007184:	230c      	movs	r3, #12
 8007186:	603b      	str	r3, [r7, #0]
 8007188:	e7ee      	b.n	8007168 <__sfp+0x60>
 800718a:	bf00      	nop
 800718c:	08008580 	.word	0x08008580
 8007190:	ffff0001 	.word	0xffff0001

08007194 <_fwalk_reent>:
 8007194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007198:	4606      	mov	r6, r0
 800719a:	4688      	mov	r8, r1
 800719c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80071a0:	2700      	movs	r7, #0
 80071a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80071a6:	f1b9 0901 	subs.w	r9, r9, #1
 80071aa:	d505      	bpl.n	80071b8 <_fwalk_reent+0x24>
 80071ac:	6824      	ldr	r4, [r4, #0]
 80071ae:	2c00      	cmp	r4, #0
 80071b0:	d1f7      	bne.n	80071a2 <_fwalk_reent+0xe>
 80071b2:	4638      	mov	r0, r7
 80071b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071b8:	89ab      	ldrh	r3, [r5, #12]
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d907      	bls.n	80071ce <_fwalk_reent+0x3a>
 80071be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071c2:	3301      	adds	r3, #1
 80071c4:	d003      	beq.n	80071ce <_fwalk_reent+0x3a>
 80071c6:	4629      	mov	r1, r5
 80071c8:	4630      	mov	r0, r6
 80071ca:	47c0      	blx	r8
 80071cc:	4307      	orrs	r7, r0
 80071ce:	3568      	adds	r5, #104	; 0x68
 80071d0:	e7e9      	b.n	80071a6 <_fwalk_reent+0x12>

080071d2 <__retarget_lock_init_recursive>:
 80071d2:	4770      	bx	lr

080071d4 <__retarget_lock_acquire_recursive>:
 80071d4:	4770      	bx	lr

080071d6 <__retarget_lock_release_recursive>:
 80071d6:	4770      	bx	lr

080071d8 <__swhatbuf_r>:
 80071d8:	b570      	push	{r4, r5, r6, lr}
 80071da:	460e      	mov	r6, r1
 80071dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071e0:	2900      	cmp	r1, #0
 80071e2:	b096      	sub	sp, #88	; 0x58
 80071e4:	4614      	mov	r4, r2
 80071e6:	461d      	mov	r5, r3
 80071e8:	da08      	bge.n	80071fc <__swhatbuf_r+0x24>
 80071ea:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80071ee:	2200      	movs	r2, #0
 80071f0:	602a      	str	r2, [r5, #0]
 80071f2:	061a      	lsls	r2, r3, #24
 80071f4:	d410      	bmi.n	8007218 <__swhatbuf_r+0x40>
 80071f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071fa:	e00e      	b.n	800721a <__swhatbuf_r+0x42>
 80071fc:	466a      	mov	r2, sp
 80071fe:	f000 f907 	bl	8007410 <_fstat_r>
 8007202:	2800      	cmp	r0, #0
 8007204:	dbf1      	blt.n	80071ea <__swhatbuf_r+0x12>
 8007206:	9a01      	ldr	r2, [sp, #4]
 8007208:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800720c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007210:	425a      	negs	r2, r3
 8007212:	415a      	adcs	r2, r3
 8007214:	602a      	str	r2, [r5, #0]
 8007216:	e7ee      	b.n	80071f6 <__swhatbuf_r+0x1e>
 8007218:	2340      	movs	r3, #64	; 0x40
 800721a:	2000      	movs	r0, #0
 800721c:	6023      	str	r3, [r4, #0]
 800721e:	b016      	add	sp, #88	; 0x58
 8007220:	bd70      	pop	{r4, r5, r6, pc}
	...

08007224 <__smakebuf_r>:
 8007224:	898b      	ldrh	r3, [r1, #12]
 8007226:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007228:	079d      	lsls	r5, r3, #30
 800722a:	4606      	mov	r6, r0
 800722c:	460c      	mov	r4, r1
 800722e:	d507      	bpl.n	8007240 <__smakebuf_r+0x1c>
 8007230:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007234:	6023      	str	r3, [r4, #0]
 8007236:	6123      	str	r3, [r4, #16]
 8007238:	2301      	movs	r3, #1
 800723a:	6163      	str	r3, [r4, #20]
 800723c:	b002      	add	sp, #8
 800723e:	bd70      	pop	{r4, r5, r6, pc}
 8007240:	ab01      	add	r3, sp, #4
 8007242:	466a      	mov	r2, sp
 8007244:	f7ff ffc8 	bl	80071d8 <__swhatbuf_r>
 8007248:	9900      	ldr	r1, [sp, #0]
 800724a:	4605      	mov	r5, r0
 800724c:	4630      	mov	r0, r6
 800724e:	f7ff f9cf 	bl	80065f0 <_malloc_r>
 8007252:	b948      	cbnz	r0, 8007268 <__smakebuf_r+0x44>
 8007254:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007258:	059a      	lsls	r2, r3, #22
 800725a:	d4ef      	bmi.n	800723c <__smakebuf_r+0x18>
 800725c:	f023 0303 	bic.w	r3, r3, #3
 8007260:	f043 0302 	orr.w	r3, r3, #2
 8007264:	81a3      	strh	r3, [r4, #12]
 8007266:	e7e3      	b.n	8007230 <__smakebuf_r+0xc>
 8007268:	4b0d      	ldr	r3, [pc, #52]	; (80072a0 <__smakebuf_r+0x7c>)
 800726a:	62b3      	str	r3, [r6, #40]	; 0x28
 800726c:	89a3      	ldrh	r3, [r4, #12]
 800726e:	6020      	str	r0, [r4, #0]
 8007270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007274:	81a3      	strh	r3, [r4, #12]
 8007276:	9b00      	ldr	r3, [sp, #0]
 8007278:	6163      	str	r3, [r4, #20]
 800727a:	9b01      	ldr	r3, [sp, #4]
 800727c:	6120      	str	r0, [r4, #16]
 800727e:	b15b      	cbz	r3, 8007298 <__smakebuf_r+0x74>
 8007280:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007284:	4630      	mov	r0, r6
 8007286:	f000 f8d5 	bl	8007434 <_isatty_r>
 800728a:	b128      	cbz	r0, 8007298 <__smakebuf_r+0x74>
 800728c:	89a3      	ldrh	r3, [r4, #12]
 800728e:	f023 0303 	bic.w	r3, r3, #3
 8007292:	f043 0301 	orr.w	r3, r3, #1
 8007296:	81a3      	strh	r3, [r4, #12]
 8007298:	89a0      	ldrh	r0, [r4, #12]
 800729a:	4305      	orrs	r5, r0
 800729c:	81a5      	strh	r5, [r4, #12]
 800729e:	e7cd      	b.n	800723c <__smakebuf_r+0x18>
 80072a0:	08007031 	.word	0x08007031

080072a4 <__malloc_lock>:
 80072a4:	4801      	ldr	r0, [pc, #4]	; (80072ac <__malloc_lock+0x8>)
 80072a6:	f7ff bf95 	b.w	80071d4 <__retarget_lock_acquire_recursive>
 80072aa:	bf00      	nop
 80072ac:	200008e0 	.word	0x200008e0

080072b0 <__malloc_unlock>:
 80072b0:	4801      	ldr	r0, [pc, #4]	; (80072b8 <__malloc_unlock+0x8>)
 80072b2:	f7ff bf90 	b.w	80071d6 <__retarget_lock_release_recursive>
 80072b6:	bf00      	nop
 80072b8:	200008e0 	.word	0x200008e0

080072bc <_raise_r>:
 80072bc:	291f      	cmp	r1, #31
 80072be:	b538      	push	{r3, r4, r5, lr}
 80072c0:	4604      	mov	r4, r0
 80072c2:	460d      	mov	r5, r1
 80072c4:	d904      	bls.n	80072d0 <_raise_r+0x14>
 80072c6:	2316      	movs	r3, #22
 80072c8:	6003      	str	r3, [r0, #0]
 80072ca:	f04f 30ff 	mov.w	r0, #4294967295
 80072ce:	bd38      	pop	{r3, r4, r5, pc}
 80072d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80072d2:	b112      	cbz	r2, 80072da <_raise_r+0x1e>
 80072d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80072d8:	b94b      	cbnz	r3, 80072ee <_raise_r+0x32>
 80072da:	4620      	mov	r0, r4
 80072dc:	f000 f830 	bl	8007340 <_getpid_r>
 80072e0:	462a      	mov	r2, r5
 80072e2:	4601      	mov	r1, r0
 80072e4:	4620      	mov	r0, r4
 80072e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072ea:	f000 b817 	b.w	800731c <_kill_r>
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d00a      	beq.n	8007308 <_raise_r+0x4c>
 80072f2:	1c59      	adds	r1, r3, #1
 80072f4:	d103      	bne.n	80072fe <_raise_r+0x42>
 80072f6:	2316      	movs	r3, #22
 80072f8:	6003      	str	r3, [r0, #0]
 80072fa:	2001      	movs	r0, #1
 80072fc:	e7e7      	b.n	80072ce <_raise_r+0x12>
 80072fe:	2400      	movs	r4, #0
 8007300:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007304:	4628      	mov	r0, r5
 8007306:	4798      	blx	r3
 8007308:	2000      	movs	r0, #0
 800730a:	e7e0      	b.n	80072ce <_raise_r+0x12>

0800730c <raise>:
 800730c:	4b02      	ldr	r3, [pc, #8]	; (8007318 <raise+0xc>)
 800730e:	4601      	mov	r1, r0
 8007310:	6818      	ldr	r0, [r3, #0]
 8007312:	f7ff bfd3 	b.w	80072bc <_raise_r>
 8007316:	bf00      	nop
 8007318:	20000014 	.word	0x20000014

0800731c <_kill_r>:
 800731c:	b538      	push	{r3, r4, r5, lr}
 800731e:	4d07      	ldr	r5, [pc, #28]	; (800733c <_kill_r+0x20>)
 8007320:	2300      	movs	r3, #0
 8007322:	4604      	mov	r4, r0
 8007324:	4608      	mov	r0, r1
 8007326:	4611      	mov	r1, r2
 8007328:	602b      	str	r3, [r5, #0]
 800732a:	f7fa fc19 	bl	8001b60 <_kill>
 800732e:	1c43      	adds	r3, r0, #1
 8007330:	d102      	bne.n	8007338 <_kill_r+0x1c>
 8007332:	682b      	ldr	r3, [r5, #0]
 8007334:	b103      	cbz	r3, 8007338 <_kill_r+0x1c>
 8007336:	6023      	str	r3, [r4, #0]
 8007338:	bd38      	pop	{r3, r4, r5, pc}
 800733a:	bf00      	nop
 800733c:	200008dc 	.word	0x200008dc

08007340 <_getpid_r>:
 8007340:	f7fa bc06 	b.w	8001b50 <_getpid>

08007344 <__sread>:
 8007344:	b510      	push	{r4, lr}
 8007346:	460c      	mov	r4, r1
 8007348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800734c:	f000 f894 	bl	8007478 <_read_r>
 8007350:	2800      	cmp	r0, #0
 8007352:	bfab      	itete	ge
 8007354:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007356:	89a3      	ldrhlt	r3, [r4, #12]
 8007358:	181b      	addge	r3, r3, r0
 800735a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800735e:	bfac      	ite	ge
 8007360:	6563      	strge	r3, [r4, #84]	; 0x54
 8007362:	81a3      	strhlt	r3, [r4, #12]
 8007364:	bd10      	pop	{r4, pc}

08007366 <__swrite>:
 8007366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800736a:	461f      	mov	r7, r3
 800736c:	898b      	ldrh	r3, [r1, #12]
 800736e:	05db      	lsls	r3, r3, #23
 8007370:	4605      	mov	r5, r0
 8007372:	460c      	mov	r4, r1
 8007374:	4616      	mov	r6, r2
 8007376:	d505      	bpl.n	8007384 <__swrite+0x1e>
 8007378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800737c:	2302      	movs	r3, #2
 800737e:	2200      	movs	r2, #0
 8007380:	f000 f868 	bl	8007454 <_lseek_r>
 8007384:	89a3      	ldrh	r3, [r4, #12]
 8007386:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800738a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800738e:	81a3      	strh	r3, [r4, #12]
 8007390:	4632      	mov	r2, r6
 8007392:	463b      	mov	r3, r7
 8007394:	4628      	mov	r0, r5
 8007396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800739a:	f000 b817 	b.w	80073cc <_write_r>

0800739e <__sseek>:
 800739e:	b510      	push	{r4, lr}
 80073a0:	460c      	mov	r4, r1
 80073a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073a6:	f000 f855 	bl	8007454 <_lseek_r>
 80073aa:	1c43      	adds	r3, r0, #1
 80073ac:	89a3      	ldrh	r3, [r4, #12]
 80073ae:	bf15      	itete	ne
 80073b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80073b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80073b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80073ba:	81a3      	strheq	r3, [r4, #12]
 80073bc:	bf18      	it	ne
 80073be:	81a3      	strhne	r3, [r4, #12]
 80073c0:	bd10      	pop	{r4, pc}

080073c2 <__sclose>:
 80073c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073c6:	f000 b813 	b.w	80073f0 <_close_r>
	...

080073cc <_write_r>:
 80073cc:	b538      	push	{r3, r4, r5, lr}
 80073ce:	4d07      	ldr	r5, [pc, #28]	; (80073ec <_write_r+0x20>)
 80073d0:	4604      	mov	r4, r0
 80073d2:	4608      	mov	r0, r1
 80073d4:	4611      	mov	r1, r2
 80073d6:	2200      	movs	r2, #0
 80073d8:	602a      	str	r2, [r5, #0]
 80073da:	461a      	mov	r2, r3
 80073dc:	f7fa fbf7 	bl	8001bce <_write>
 80073e0:	1c43      	adds	r3, r0, #1
 80073e2:	d102      	bne.n	80073ea <_write_r+0x1e>
 80073e4:	682b      	ldr	r3, [r5, #0]
 80073e6:	b103      	cbz	r3, 80073ea <_write_r+0x1e>
 80073e8:	6023      	str	r3, [r4, #0]
 80073ea:	bd38      	pop	{r3, r4, r5, pc}
 80073ec:	200008dc 	.word	0x200008dc

080073f0 <_close_r>:
 80073f0:	b538      	push	{r3, r4, r5, lr}
 80073f2:	4d06      	ldr	r5, [pc, #24]	; (800740c <_close_r+0x1c>)
 80073f4:	2300      	movs	r3, #0
 80073f6:	4604      	mov	r4, r0
 80073f8:	4608      	mov	r0, r1
 80073fa:	602b      	str	r3, [r5, #0]
 80073fc:	f7fa fc03 	bl	8001c06 <_close>
 8007400:	1c43      	adds	r3, r0, #1
 8007402:	d102      	bne.n	800740a <_close_r+0x1a>
 8007404:	682b      	ldr	r3, [r5, #0]
 8007406:	b103      	cbz	r3, 800740a <_close_r+0x1a>
 8007408:	6023      	str	r3, [r4, #0]
 800740a:	bd38      	pop	{r3, r4, r5, pc}
 800740c:	200008dc 	.word	0x200008dc

08007410 <_fstat_r>:
 8007410:	b538      	push	{r3, r4, r5, lr}
 8007412:	4d07      	ldr	r5, [pc, #28]	; (8007430 <_fstat_r+0x20>)
 8007414:	2300      	movs	r3, #0
 8007416:	4604      	mov	r4, r0
 8007418:	4608      	mov	r0, r1
 800741a:	4611      	mov	r1, r2
 800741c:	602b      	str	r3, [r5, #0]
 800741e:	f7fa fbfe 	bl	8001c1e <_fstat>
 8007422:	1c43      	adds	r3, r0, #1
 8007424:	d102      	bne.n	800742c <_fstat_r+0x1c>
 8007426:	682b      	ldr	r3, [r5, #0]
 8007428:	b103      	cbz	r3, 800742c <_fstat_r+0x1c>
 800742a:	6023      	str	r3, [r4, #0]
 800742c:	bd38      	pop	{r3, r4, r5, pc}
 800742e:	bf00      	nop
 8007430:	200008dc 	.word	0x200008dc

08007434 <_isatty_r>:
 8007434:	b538      	push	{r3, r4, r5, lr}
 8007436:	4d06      	ldr	r5, [pc, #24]	; (8007450 <_isatty_r+0x1c>)
 8007438:	2300      	movs	r3, #0
 800743a:	4604      	mov	r4, r0
 800743c:	4608      	mov	r0, r1
 800743e:	602b      	str	r3, [r5, #0]
 8007440:	f7fa fbfd 	bl	8001c3e <_isatty>
 8007444:	1c43      	adds	r3, r0, #1
 8007446:	d102      	bne.n	800744e <_isatty_r+0x1a>
 8007448:	682b      	ldr	r3, [r5, #0]
 800744a:	b103      	cbz	r3, 800744e <_isatty_r+0x1a>
 800744c:	6023      	str	r3, [r4, #0]
 800744e:	bd38      	pop	{r3, r4, r5, pc}
 8007450:	200008dc 	.word	0x200008dc

08007454 <_lseek_r>:
 8007454:	b538      	push	{r3, r4, r5, lr}
 8007456:	4d07      	ldr	r5, [pc, #28]	; (8007474 <_lseek_r+0x20>)
 8007458:	4604      	mov	r4, r0
 800745a:	4608      	mov	r0, r1
 800745c:	4611      	mov	r1, r2
 800745e:	2200      	movs	r2, #0
 8007460:	602a      	str	r2, [r5, #0]
 8007462:	461a      	mov	r2, r3
 8007464:	f7fa fbf6 	bl	8001c54 <_lseek>
 8007468:	1c43      	adds	r3, r0, #1
 800746a:	d102      	bne.n	8007472 <_lseek_r+0x1e>
 800746c:	682b      	ldr	r3, [r5, #0]
 800746e:	b103      	cbz	r3, 8007472 <_lseek_r+0x1e>
 8007470:	6023      	str	r3, [r4, #0]
 8007472:	bd38      	pop	{r3, r4, r5, pc}
 8007474:	200008dc 	.word	0x200008dc

08007478 <_read_r>:
 8007478:	b538      	push	{r3, r4, r5, lr}
 800747a:	4d07      	ldr	r5, [pc, #28]	; (8007498 <_read_r+0x20>)
 800747c:	4604      	mov	r4, r0
 800747e:	4608      	mov	r0, r1
 8007480:	4611      	mov	r1, r2
 8007482:	2200      	movs	r2, #0
 8007484:	602a      	str	r2, [r5, #0]
 8007486:	461a      	mov	r2, r3
 8007488:	f7fa fb84 	bl	8001b94 <_read>
 800748c:	1c43      	adds	r3, r0, #1
 800748e:	d102      	bne.n	8007496 <_read_r+0x1e>
 8007490:	682b      	ldr	r3, [r5, #0]
 8007492:	b103      	cbz	r3, 8007496 <_read_r+0x1e>
 8007494:	6023      	str	r3, [r4, #0]
 8007496:	bd38      	pop	{r3, r4, r5, pc}
 8007498:	200008dc 	.word	0x200008dc
 800749c:	00000000 	.word	0x00000000

080074a0 <sin>:
 80074a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80074a2:	ec53 2b10 	vmov	r2, r3, d0
 80074a6:	4828      	ldr	r0, [pc, #160]	; (8007548 <sin+0xa8>)
 80074a8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80074ac:	4281      	cmp	r1, r0
 80074ae:	dc07      	bgt.n	80074c0 <sin+0x20>
 80074b0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8007540 <sin+0xa0>
 80074b4:	2000      	movs	r0, #0
 80074b6:	b005      	add	sp, #20
 80074b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80074bc:	f000 be6c 	b.w	8008198 <__kernel_sin>
 80074c0:	4822      	ldr	r0, [pc, #136]	; (800754c <sin+0xac>)
 80074c2:	4281      	cmp	r1, r0
 80074c4:	dd09      	ble.n	80074da <sin+0x3a>
 80074c6:	ee10 0a10 	vmov	r0, s0
 80074ca:	4619      	mov	r1, r3
 80074cc:	f7f8 fed4 	bl	8000278 <__aeabi_dsub>
 80074d0:	ec41 0b10 	vmov	d0, r0, r1
 80074d4:	b005      	add	sp, #20
 80074d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80074da:	4668      	mov	r0, sp
 80074dc:	f000 f838 	bl	8007550 <__ieee754_rem_pio2>
 80074e0:	f000 0003 	and.w	r0, r0, #3
 80074e4:	2801      	cmp	r0, #1
 80074e6:	d00c      	beq.n	8007502 <sin+0x62>
 80074e8:	2802      	cmp	r0, #2
 80074ea:	d011      	beq.n	8007510 <sin+0x70>
 80074ec:	b9f0      	cbnz	r0, 800752c <sin+0x8c>
 80074ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 80074f2:	ed9d 0b00 	vldr	d0, [sp]
 80074f6:	2001      	movs	r0, #1
 80074f8:	f000 fe4e 	bl	8008198 <__kernel_sin>
 80074fc:	ec51 0b10 	vmov	r0, r1, d0
 8007500:	e7e6      	b.n	80074d0 <sin+0x30>
 8007502:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007506:	ed9d 0b00 	vldr	d0, [sp]
 800750a:	f000 fa2d 	bl	8007968 <__kernel_cos>
 800750e:	e7f5      	b.n	80074fc <sin+0x5c>
 8007510:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007514:	ed9d 0b00 	vldr	d0, [sp]
 8007518:	2001      	movs	r0, #1
 800751a:	f000 fe3d 	bl	8008198 <__kernel_sin>
 800751e:	ec53 2b10 	vmov	r2, r3, d0
 8007522:	ee10 0a10 	vmov	r0, s0
 8007526:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800752a:	e7d1      	b.n	80074d0 <sin+0x30>
 800752c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007530:	ed9d 0b00 	vldr	d0, [sp]
 8007534:	f000 fa18 	bl	8007968 <__kernel_cos>
 8007538:	e7f1      	b.n	800751e <sin+0x7e>
 800753a:	bf00      	nop
 800753c:	f3af 8000 	nop.w
	...
 8007548:	3fe921fb 	.word	0x3fe921fb
 800754c:	7fefffff 	.word	0x7fefffff

08007550 <__ieee754_rem_pio2>:
 8007550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007554:	ed2d 8b02 	vpush	{d8}
 8007558:	ec55 4b10 	vmov	r4, r5, d0
 800755c:	4bca      	ldr	r3, [pc, #808]	; (8007888 <__ieee754_rem_pio2+0x338>)
 800755e:	b08b      	sub	sp, #44	; 0x2c
 8007560:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007564:	4598      	cmp	r8, r3
 8007566:	4682      	mov	sl, r0
 8007568:	9502      	str	r5, [sp, #8]
 800756a:	dc08      	bgt.n	800757e <__ieee754_rem_pio2+0x2e>
 800756c:	2200      	movs	r2, #0
 800756e:	2300      	movs	r3, #0
 8007570:	ed80 0b00 	vstr	d0, [r0]
 8007574:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007578:	f04f 0b00 	mov.w	fp, #0
 800757c:	e028      	b.n	80075d0 <__ieee754_rem_pio2+0x80>
 800757e:	4bc3      	ldr	r3, [pc, #780]	; (800788c <__ieee754_rem_pio2+0x33c>)
 8007580:	4598      	cmp	r8, r3
 8007582:	dc78      	bgt.n	8007676 <__ieee754_rem_pio2+0x126>
 8007584:	9b02      	ldr	r3, [sp, #8]
 8007586:	4ec2      	ldr	r6, [pc, #776]	; (8007890 <__ieee754_rem_pio2+0x340>)
 8007588:	2b00      	cmp	r3, #0
 800758a:	ee10 0a10 	vmov	r0, s0
 800758e:	a3b0      	add	r3, pc, #704	; (adr r3, 8007850 <__ieee754_rem_pio2+0x300>)
 8007590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007594:	4629      	mov	r1, r5
 8007596:	dd39      	ble.n	800760c <__ieee754_rem_pio2+0xbc>
 8007598:	f7f8 fe6e 	bl	8000278 <__aeabi_dsub>
 800759c:	45b0      	cmp	r8, r6
 800759e:	4604      	mov	r4, r0
 80075a0:	460d      	mov	r5, r1
 80075a2:	d01b      	beq.n	80075dc <__ieee754_rem_pio2+0x8c>
 80075a4:	a3ac      	add	r3, pc, #688	; (adr r3, 8007858 <__ieee754_rem_pio2+0x308>)
 80075a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075aa:	f7f8 fe65 	bl	8000278 <__aeabi_dsub>
 80075ae:	4602      	mov	r2, r0
 80075b0:	460b      	mov	r3, r1
 80075b2:	e9ca 2300 	strd	r2, r3, [sl]
 80075b6:	4620      	mov	r0, r4
 80075b8:	4629      	mov	r1, r5
 80075ba:	f7f8 fe5d 	bl	8000278 <__aeabi_dsub>
 80075be:	a3a6      	add	r3, pc, #664	; (adr r3, 8007858 <__ieee754_rem_pio2+0x308>)
 80075c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c4:	f7f8 fe58 	bl	8000278 <__aeabi_dsub>
 80075c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80075cc:	f04f 0b01 	mov.w	fp, #1
 80075d0:	4658      	mov	r0, fp
 80075d2:	b00b      	add	sp, #44	; 0x2c
 80075d4:	ecbd 8b02 	vpop	{d8}
 80075d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075dc:	a3a0      	add	r3, pc, #640	; (adr r3, 8007860 <__ieee754_rem_pio2+0x310>)
 80075de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e2:	f7f8 fe49 	bl	8000278 <__aeabi_dsub>
 80075e6:	a3a0      	add	r3, pc, #640	; (adr r3, 8007868 <__ieee754_rem_pio2+0x318>)
 80075e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ec:	4604      	mov	r4, r0
 80075ee:	460d      	mov	r5, r1
 80075f0:	f7f8 fe42 	bl	8000278 <__aeabi_dsub>
 80075f4:	4602      	mov	r2, r0
 80075f6:	460b      	mov	r3, r1
 80075f8:	e9ca 2300 	strd	r2, r3, [sl]
 80075fc:	4620      	mov	r0, r4
 80075fe:	4629      	mov	r1, r5
 8007600:	f7f8 fe3a 	bl	8000278 <__aeabi_dsub>
 8007604:	a398      	add	r3, pc, #608	; (adr r3, 8007868 <__ieee754_rem_pio2+0x318>)
 8007606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760a:	e7db      	b.n	80075c4 <__ieee754_rem_pio2+0x74>
 800760c:	f7f8 fe36 	bl	800027c <__adddf3>
 8007610:	45b0      	cmp	r8, r6
 8007612:	4604      	mov	r4, r0
 8007614:	460d      	mov	r5, r1
 8007616:	d016      	beq.n	8007646 <__ieee754_rem_pio2+0xf6>
 8007618:	a38f      	add	r3, pc, #572	; (adr r3, 8007858 <__ieee754_rem_pio2+0x308>)
 800761a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761e:	f7f8 fe2d 	bl	800027c <__adddf3>
 8007622:	4602      	mov	r2, r0
 8007624:	460b      	mov	r3, r1
 8007626:	e9ca 2300 	strd	r2, r3, [sl]
 800762a:	4620      	mov	r0, r4
 800762c:	4629      	mov	r1, r5
 800762e:	f7f8 fe23 	bl	8000278 <__aeabi_dsub>
 8007632:	a389      	add	r3, pc, #548	; (adr r3, 8007858 <__ieee754_rem_pio2+0x308>)
 8007634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007638:	f7f8 fe20 	bl	800027c <__adddf3>
 800763c:	f04f 3bff 	mov.w	fp, #4294967295
 8007640:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007644:	e7c4      	b.n	80075d0 <__ieee754_rem_pio2+0x80>
 8007646:	a386      	add	r3, pc, #536	; (adr r3, 8007860 <__ieee754_rem_pio2+0x310>)
 8007648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800764c:	f7f8 fe16 	bl	800027c <__adddf3>
 8007650:	a385      	add	r3, pc, #532	; (adr r3, 8007868 <__ieee754_rem_pio2+0x318>)
 8007652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007656:	4604      	mov	r4, r0
 8007658:	460d      	mov	r5, r1
 800765a:	f7f8 fe0f 	bl	800027c <__adddf3>
 800765e:	4602      	mov	r2, r0
 8007660:	460b      	mov	r3, r1
 8007662:	e9ca 2300 	strd	r2, r3, [sl]
 8007666:	4620      	mov	r0, r4
 8007668:	4629      	mov	r1, r5
 800766a:	f7f8 fe05 	bl	8000278 <__aeabi_dsub>
 800766e:	a37e      	add	r3, pc, #504	; (adr r3, 8007868 <__ieee754_rem_pio2+0x318>)
 8007670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007674:	e7e0      	b.n	8007638 <__ieee754_rem_pio2+0xe8>
 8007676:	4b87      	ldr	r3, [pc, #540]	; (8007894 <__ieee754_rem_pio2+0x344>)
 8007678:	4598      	cmp	r8, r3
 800767a:	f300 80d9 	bgt.w	8007830 <__ieee754_rem_pio2+0x2e0>
 800767e:	f000 fe49 	bl	8008314 <fabs>
 8007682:	ec55 4b10 	vmov	r4, r5, d0
 8007686:	ee10 0a10 	vmov	r0, s0
 800768a:	a379      	add	r3, pc, #484	; (adr r3, 8007870 <__ieee754_rem_pio2+0x320>)
 800768c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007690:	4629      	mov	r1, r5
 8007692:	f7f8 ffa9 	bl	80005e8 <__aeabi_dmul>
 8007696:	4b80      	ldr	r3, [pc, #512]	; (8007898 <__ieee754_rem_pio2+0x348>)
 8007698:	2200      	movs	r2, #0
 800769a:	f7f8 fdef 	bl	800027c <__adddf3>
 800769e:	f7f9 fa3d 	bl	8000b1c <__aeabi_d2iz>
 80076a2:	4683      	mov	fp, r0
 80076a4:	f7f8 ff36 	bl	8000514 <__aeabi_i2d>
 80076a8:	4602      	mov	r2, r0
 80076aa:	460b      	mov	r3, r1
 80076ac:	ec43 2b18 	vmov	d8, r2, r3
 80076b0:	a367      	add	r3, pc, #412	; (adr r3, 8007850 <__ieee754_rem_pio2+0x300>)
 80076b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b6:	f7f8 ff97 	bl	80005e8 <__aeabi_dmul>
 80076ba:	4602      	mov	r2, r0
 80076bc:	460b      	mov	r3, r1
 80076be:	4620      	mov	r0, r4
 80076c0:	4629      	mov	r1, r5
 80076c2:	f7f8 fdd9 	bl	8000278 <__aeabi_dsub>
 80076c6:	a364      	add	r3, pc, #400	; (adr r3, 8007858 <__ieee754_rem_pio2+0x308>)
 80076c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076cc:	4606      	mov	r6, r0
 80076ce:	460f      	mov	r7, r1
 80076d0:	ec51 0b18 	vmov	r0, r1, d8
 80076d4:	f7f8 ff88 	bl	80005e8 <__aeabi_dmul>
 80076d8:	f1bb 0f1f 	cmp.w	fp, #31
 80076dc:	4604      	mov	r4, r0
 80076de:	460d      	mov	r5, r1
 80076e0:	dc0d      	bgt.n	80076fe <__ieee754_rem_pio2+0x1ae>
 80076e2:	4b6e      	ldr	r3, [pc, #440]	; (800789c <__ieee754_rem_pio2+0x34c>)
 80076e4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80076e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ec:	4543      	cmp	r3, r8
 80076ee:	d006      	beq.n	80076fe <__ieee754_rem_pio2+0x1ae>
 80076f0:	4622      	mov	r2, r4
 80076f2:	462b      	mov	r3, r5
 80076f4:	4630      	mov	r0, r6
 80076f6:	4639      	mov	r1, r7
 80076f8:	f7f8 fdbe 	bl	8000278 <__aeabi_dsub>
 80076fc:	e00f      	b.n	800771e <__ieee754_rem_pio2+0x1ce>
 80076fe:	462b      	mov	r3, r5
 8007700:	4622      	mov	r2, r4
 8007702:	4630      	mov	r0, r6
 8007704:	4639      	mov	r1, r7
 8007706:	f7f8 fdb7 	bl	8000278 <__aeabi_dsub>
 800770a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800770e:	9303      	str	r3, [sp, #12]
 8007710:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007714:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8007718:	f1b8 0f10 	cmp.w	r8, #16
 800771c:	dc02      	bgt.n	8007724 <__ieee754_rem_pio2+0x1d4>
 800771e:	e9ca 0100 	strd	r0, r1, [sl]
 8007722:	e039      	b.n	8007798 <__ieee754_rem_pio2+0x248>
 8007724:	a34e      	add	r3, pc, #312	; (adr r3, 8007860 <__ieee754_rem_pio2+0x310>)
 8007726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772a:	ec51 0b18 	vmov	r0, r1, d8
 800772e:	f7f8 ff5b 	bl	80005e8 <__aeabi_dmul>
 8007732:	4604      	mov	r4, r0
 8007734:	460d      	mov	r5, r1
 8007736:	4602      	mov	r2, r0
 8007738:	460b      	mov	r3, r1
 800773a:	4630      	mov	r0, r6
 800773c:	4639      	mov	r1, r7
 800773e:	f7f8 fd9b 	bl	8000278 <__aeabi_dsub>
 8007742:	4602      	mov	r2, r0
 8007744:	460b      	mov	r3, r1
 8007746:	4680      	mov	r8, r0
 8007748:	4689      	mov	r9, r1
 800774a:	4630      	mov	r0, r6
 800774c:	4639      	mov	r1, r7
 800774e:	f7f8 fd93 	bl	8000278 <__aeabi_dsub>
 8007752:	4622      	mov	r2, r4
 8007754:	462b      	mov	r3, r5
 8007756:	f7f8 fd8f 	bl	8000278 <__aeabi_dsub>
 800775a:	a343      	add	r3, pc, #268	; (adr r3, 8007868 <__ieee754_rem_pio2+0x318>)
 800775c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007760:	4604      	mov	r4, r0
 8007762:	460d      	mov	r5, r1
 8007764:	ec51 0b18 	vmov	r0, r1, d8
 8007768:	f7f8 ff3e 	bl	80005e8 <__aeabi_dmul>
 800776c:	4622      	mov	r2, r4
 800776e:	462b      	mov	r3, r5
 8007770:	f7f8 fd82 	bl	8000278 <__aeabi_dsub>
 8007774:	4602      	mov	r2, r0
 8007776:	460b      	mov	r3, r1
 8007778:	4604      	mov	r4, r0
 800777a:	460d      	mov	r5, r1
 800777c:	4640      	mov	r0, r8
 800777e:	4649      	mov	r1, r9
 8007780:	f7f8 fd7a 	bl	8000278 <__aeabi_dsub>
 8007784:	9a03      	ldr	r2, [sp, #12]
 8007786:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800778a:	1ad3      	subs	r3, r2, r3
 800778c:	2b31      	cmp	r3, #49	; 0x31
 800778e:	dc24      	bgt.n	80077da <__ieee754_rem_pio2+0x28a>
 8007790:	e9ca 0100 	strd	r0, r1, [sl]
 8007794:	4646      	mov	r6, r8
 8007796:	464f      	mov	r7, r9
 8007798:	e9da 8900 	ldrd	r8, r9, [sl]
 800779c:	4630      	mov	r0, r6
 800779e:	4642      	mov	r2, r8
 80077a0:	464b      	mov	r3, r9
 80077a2:	4639      	mov	r1, r7
 80077a4:	f7f8 fd68 	bl	8000278 <__aeabi_dsub>
 80077a8:	462b      	mov	r3, r5
 80077aa:	4622      	mov	r2, r4
 80077ac:	f7f8 fd64 	bl	8000278 <__aeabi_dsub>
 80077b0:	9b02      	ldr	r3, [sp, #8]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80077b8:	f6bf af0a 	bge.w	80075d0 <__ieee754_rem_pio2+0x80>
 80077bc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80077c0:	f8ca 3004 	str.w	r3, [sl, #4]
 80077c4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80077c8:	f8ca 8000 	str.w	r8, [sl]
 80077cc:	f8ca 0008 	str.w	r0, [sl, #8]
 80077d0:	f8ca 300c 	str.w	r3, [sl, #12]
 80077d4:	f1cb 0b00 	rsb	fp, fp, #0
 80077d8:	e6fa      	b.n	80075d0 <__ieee754_rem_pio2+0x80>
 80077da:	a327      	add	r3, pc, #156	; (adr r3, 8007878 <__ieee754_rem_pio2+0x328>)
 80077dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e0:	ec51 0b18 	vmov	r0, r1, d8
 80077e4:	f7f8 ff00 	bl	80005e8 <__aeabi_dmul>
 80077e8:	4604      	mov	r4, r0
 80077ea:	460d      	mov	r5, r1
 80077ec:	4602      	mov	r2, r0
 80077ee:	460b      	mov	r3, r1
 80077f0:	4640      	mov	r0, r8
 80077f2:	4649      	mov	r1, r9
 80077f4:	f7f8 fd40 	bl	8000278 <__aeabi_dsub>
 80077f8:	4602      	mov	r2, r0
 80077fa:	460b      	mov	r3, r1
 80077fc:	4606      	mov	r6, r0
 80077fe:	460f      	mov	r7, r1
 8007800:	4640      	mov	r0, r8
 8007802:	4649      	mov	r1, r9
 8007804:	f7f8 fd38 	bl	8000278 <__aeabi_dsub>
 8007808:	4622      	mov	r2, r4
 800780a:	462b      	mov	r3, r5
 800780c:	f7f8 fd34 	bl	8000278 <__aeabi_dsub>
 8007810:	a31b      	add	r3, pc, #108	; (adr r3, 8007880 <__ieee754_rem_pio2+0x330>)
 8007812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007816:	4604      	mov	r4, r0
 8007818:	460d      	mov	r5, r1
 800781a:	ec51 0b18 	vmov	r0, r1, d8
 800781e:	f7f8 fee3 	bl	80005e8 <__aeabi_dmul>
 8007822:	4622      	mov	r2, r4
 8007824:	462b      	mov	r3, r5
 8007826:	f7f8 fd27 	bl	8000278 <__aeabi_dsub>
 800782a:	4604      	mov	r4, r0
 800782c:	460d      	mov	r5, r1
 800782e:	e75f      	b.n	80076f0 <__ieee754_rem_pio2+0x1a0>
 8007830:	4b1b      	ldr	r3, [pc, #108]	; (80078a0 <__ieee754_rem_pio2+0x350>)
 8007832:	4598      	cmp	r8, r3
 8007834:	dd36      	ble.n	80078a4 <__ieee754_rem_pio2+0x354>
 8007836:	ee10 2a10 	vmov	r2, s0
 800783a:	462b      	mov	r3, r5
 800783c:	4620      	mov	r0, r4
 800783e:	4629      	mov	r1, r5
 8007840:	f7f8 fd1a 	bl	8000278 <__aeabi_dsub>
 8007844:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007848:	e9ca 0100 	strd	r0, r1, [sl]
 800784c:	e694      	b.n	8007578 <__ieee754_rem_pio2+0x28>
 800784e:	bf00      	nop
 8007850:	54400000 	.word	0x54400000
 8007854:	3ff921fb 	.word	0x3ff921fb
 8007858:	1a626331 	.word	0x1a626331
 800785c:	3dd0b461 	.word	0x3dd0b461
 8007860:	1a600000 	.word	0x1a600000
 8007864:	3dd0b461 	.word	0x3dd0b461
 8007868:	2e037073 	.word	0x2e037073
 800786c:	3ba3198a 	.word	0x3ba3198a
 8007870:	6dc9c883 	.word	0x6dc9c883
 8007874:	3fe45f30 	.word	0x3fe45f30
 8007878:	2e000000 	.word	0x2e000000
 800787c:	3ba3198a 	.word	0x3ba3198a
 8007880:	252049c1 	.word	0x252049c1
 8007884:	397b839a 	.word	0x397b839a
 8007888:	3fe921fb 	.word	0x3fe921fb
 800788c:	4002d97b 	.word	0x4002d97b
 8007890:	3ff921fb 	.word	0x3ff921fb
 8007894:	413921fb 	.word	0x413921fb
 8007898:	3fe00000 	.word	0x3fe00000
 800789c:	080086c8 	.word	0x080086c8
 80078a0:	7fefffff 	.word	0x7fefffff
 80078a4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80078a8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80078ac:	ee10 0a10 	vmov	r0, s0
 80078b0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 80078b4:	ee10 6a10 	vmov	r6, s0
 80078b8:	460f      	mov	r7, r1
 80078ba:	f7f9 f92f 	bl	8000b1c <__aeabi_d2iz>
 80078be:	f7f8 fe29 	bl	8000514 <__aeabi_i2d>
 80078c2:	4602      	mov	r2, r0
 80078c4:	460b      	mov	r3, r1
 80078c6:	4630      	mov	r0, r6
 80078c8:	4639      	mov	r1, r7
 80078ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80078ce:	f7f8 fcd3 	bl	8000278 <__aeabi_dsub>
 80078d2:	4b23      	ldr	r3, [pc, #140]	; (8007960 <__ieee754_rem_pio2+0x410>)
 80078d4:	2200      	movs	r2, #0
 80078d6:	f7f8 fe87 	bl	80005e8 <__aeabi_dmul>
 80078da:	460f      	mov	r7, r1
 80078dc:	4606      	mov	r6, r0
 80078de:	f7f9 f91d 	bl	8000b1c <__aeabi_d2iz>
 80078e2:	f7f8 fe17 	bl	8000514 <__aeabi_i2d>
 80078e6:	4602      	mov	r2, r0
 80078e8:	460b      	mov	r3, r1
 80078ea:	4630      	mov	r0, r6
 80078ec:	4639      	mov	r1, r7
 80078ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80078f2:	f7f8 fcc1 	bl	8000278 <__aeabi_dsub>
 80078f6:	4b1a      	ldr	r3, [pc, #104]	; (8007960 <__ieee754_rem_pio2+0x410>)
 80078f8:	2200      	movs	r2, #0
 80078fa:	f7f8 fe75 	bl	80005e8 <__aeabi_dmul>
 80078fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007902:	ad04      	add	r5, sp, #16
 8007904:	f04f 0803 	mov.w	r8, #3
 8007908:	46a9      	mov	r9, r5
 800790a:	2600      	movs	r6, #0
 800790c:	2700      	movs	r7, #0
 800790e:	4632      	mov	r2, r6
 8007910:	463b      	mov	r3, r7
 8007912:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8007916:	46c3      	mov	fp, r8
 8007918:	3d08      	subs	r5, #8
 800791a:	f108 38ff 	add.w	r8, r8, #4294967295
 800791e:	f7f9 f8cb 	bl	8000ab8 <__aeabi_dcmpeq>
 8007922:	2800      	cmp	r0, #0
 8007924:	d1f3      	bne.n	800790e <__ieee754_rem_pio2+0x3be>
 8007926:	4b0f      	ldr	r3, [pc, #60]	; (8007964 <__ieee754_rem_pio2+0x414>)
 8007928:	9301      	str	r3, [sp, #4]
 800792a:	2302      	movs	r3, #2
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	4622      	mov	r2, r4
 8007930:	465b      	mov	r3, fp
 8007932:	4651      	mov	r1, sl
 8007934:	4648      	mov	r0, r9
 8007936:	f000 f8df 	bl	8007af8 <__kernel_rem_pio2>
 800793a:	9b02      	ldr	r3, [sp, #8]
 800793c:	2b00      	cmp	r3, #0
 800793e:	4683      	mov	fp, r0
 8007940:	f6bf ae46 	bge.w	80075d0 <__ieee754_rem_pio2+0x80>
 8007944:	e9da 2100 	ldrd	r2, r1, [sl]
 8007948:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800794c:	e9ca 2300 	strd	r2, r3, [sl]
 8007950:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8007954:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007958:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800795c:	e73a      	b.n	80077d4 <__ieee754_rem_pio2+0x284>
 800795e:	bf00      	nop
 8007960:	41700000 	.word	0x41700000
 8007964:	08008748 	.word	0x08008748

08007968 <__kernel_cos>:
 8007968:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800796c:	ec57 6b10 	vmov	r6, r7, d0
 8007970:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007974:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007978:	ed8d 1b00 	vstr	d1, [sp]
 800797c:	da07      	bge.n	800798e <__kernel_cos+0x26>
 800797e:	ee10 0a10 	vmov	r0, s0
 8007982:	4639      	mov	r1, r7
 8007984:	f7f9 f8ca 	bl	8000b1c <__aeabi_d2iz>
 8007988:	2800      	cmp	r0, #0
 800798a:	f000 8088 	beq.w	8007a9e <__kernel_cos+0x136>
 800798e:	4632      	mov	r2, r6
 8007990:	463b      	mov	r3, r7
 8007992:	4630      	mov	r0, r6
 8007994:	4639      	mov	r1, r7
 8007996:	f7f8 fe27 	bl	80005e8 <__aeabi_dmul>
 800799a:	4b51      	ldr	r3, [pc, #324]	; (8007ae0 <__kernel_cos+0x178>)
 800799c:	2200      	movs	r2, #0
 800799e:	4604      	mov	r4, r0
 80079a0:	460d      	mov	r5, r1
 80079a2:	f7f8 fe21 	bl	80005e8 <__aeabi_dmul>
 80079a6:	a340      	add	r3, pc, #256	; (adr r3, 8007aa8 <__kernel_cos+0x140>)
 80079a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ac:	4682      	mov	sl, r0
 80079ae:	468b      	mov	fp, r1
 80079b0:	4620      	mov	r0, r4
 80079b2:	4629      	mov	r1, r5
 80079b4:	f7f8 fe18 	bl	80005e8 <__aeabi_dmul>
 80079b8:	a33d      	add	r3, pc, #244	; (adr r3, 8007ab0 <__kernel_cos+0x148>)
 80079ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079be:	f7f8 fc5d 	bl	800027c <__adddf3>
 80079c2:	4622      	mov	r2, r4
 80079c4:	462b      	mov	r3, r5
 80079c6:	f7f8 fe0f 	bl	80005e8 <__aeabi_dmul>
 80079ca:	a33b      	add	r3, pc, #236	; (adr r3, 8007ab8 <__kernel_cos+0x150>)
 80079cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079d0:	f7f8 fc52 	bl	8000278 <__aeabi_dsub>
 80079d4:	4622      	mov	r2, r4
 80079d6:	462b      	mov	r3, r5
 80079d8:	f7f8 fe06 	bl	80005e8 <__aeabi_dmul>
 80079dc:	a338      	add	r3, pc, #224	; (adr r3, 8007ac0 <__kernel_cos+0x158>)
 80079de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e2:	f7f8 fc4b 	bl	800027c <__adddf3>
 80079e6:	4622      	mov	r2, r4
 80079e8:	462b      	mov	r3, r5
 80079ea:	f7f8 fdfd 	bl	80005e8 <__aeabi_dmul>
 80079ee:	a336      	add	r3, pc, #216	; (adr r3, 8007ac8 <__kernel_cos+0x160>)
 80079f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f4:	f7f8 fc40 	bl	8000278 <__aeabi_dsub>
 80079f8:	4622      	mov	r2, r4
 80079fa:	462b      	mov	r3, r5
 80079fc:	f7f8 fdf4 	bl	80005e8 <__aeabi_dmul>
 8007a00:	a333      	add	r3, pc, #204	; (adr r3, 8007ad0 <__kernel_cos+0x168>)
 8007a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a06:	f7f8 fc39 	bl	800027c <__adddf3>
 8007a0a:	4622      	mov	r2, r4
 8007a0c:	462b      	mov	r3, r5
 8007a0e:	f7f8 fdeb 	bl	80005e8 <__aeabi_dmul>
 8007a12:	4622      	mov	r2, r4
 8007a14:	462b      	mov	r3, r5
 8007a16:	f7f8 fde7 	bl	80005e8 <__aeabi_dmul>
 8007a1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a1e:	4604      	mov	r4, r0
 8007a20:	460d      	mov	r5, r1
 8007a22:	4630      	mov	r0, r6
 8007a24:	4639      	mov	r1, r7
 8007a26:	f7f8 fddf 	bl	80005e8 <__aeabi_dmul>
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	4629      	mov	r1, r5
 8007a30:	4620      	mov	r0, r4
 8007a32:	f7f8 fc21 	bl	8000278 <__aeabi_dsub>
 8007a36:	4b2b      	ldr	r3, [pc, #172]	; (8007ae4 <__kernel_cos+0x17c>)
 8007a38:	4598      	cmp	r8, r3
 8007a3a:	4606      	mov	r6, r0
 8007a3c:	460f      	mov	r7, r1
 8007a3e:	dc10      	bgt.n	8007a62 <__kernel_cos+0xfa>
 8007a40:	4602      	mov	r2, r0
 8007a42:	460b      	mov	r3, r1
 8007a44:	4650      	mov	r0, sl
 8007a46:	4659      	mov	r1, fp
 8007a48:	f7f8 fc16 	bl	8000278 <__aeabi_dsub>
 8007a4c:	460b      	mov	r3, r1
 8007a4e:	4926      	ldr	r1, [pc, #152]	; (8007ae8 <__kernel_cos+0x180>)
 8007a50:	4602      	mov	r2, r0
 8007a52:	2000      	movs	r0, #0
 8007a54:	f7f8 fc10 	bl	8000278 <__aeabi_dsub>
 8007a58:	ec41 0b10 	vmov	d0, r0, r1
 8007a5c:	b003      	add	sp, #12
 8007a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a62:	4b22      	ldr	r3, [pc, #136]	; (8007aec <__kernel_cos+0x184>)
 8007a64:	4920      	ldr	r1, [pc, #128]	; (8007ae8 <__kernel_cos+0x180>)
 8007a66:	4598      	cmp	r8, r3
 8007a68:	bfcc      	ite	gt
 8007a6a:	4d21      	ldrgt	r5, [pc, #132]	; (8007af0 <__kernel_cos+0x188>)
 8007a6c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007a70:	2400      	movs	r4, #0
 8007a72:	4622      	mov	r2, r4
 8007a74:	462b      	mov	r3, r5
 8007a76:	2000      	movs	r0, #0
 8007a78:	f7f8 fbfe 	bl	8000278 <__aeabi_dsub>
 8007a7c:	4622      	mov	r2, r4
 8007a7e:	4680      	mov	r8, r0
 8007a80:	4689      	mov	r9, r1
 8007a82:	462b      	mov	r3, r5
 8007a84:	4650      	mov	r0, sl
 8007a86:	4659      	mov	r1, fp
 8007a88:	f7f8 fbf6 	bl	8000278 <__aeabi_dsub>
 8007a8c:	4632      	mov	r2, r6
 8007a8e:	463b      	mov	r3, r7
 8007a90:	f7f8 fbf2 	bl	8000278 <__aeabi_dsub>
 8007a94:	4602      	mov	r2, r0
 8007a96:	460b      	mov	r3, r1
 8007a98:	4640      	mov	r0, r8
 8007a9a:	4649      	mov	r1, r9
 8007a9c:	e7da      	b.n	8007a54 <__kernel_cos+0xec>
 8007a9e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007ad8 <__kernel_cos+0x170>
 8007aa2:	e7db      	b.n	8007a5c <__kernel_cos+0xf4>
 8007aa4:	f3af 8000 	nop.w
 8007aa8:	be8838d4 	.word	0xbe8838d4
 8007aac:	bda8fae9 	.word	0xbda8fae9
 8007ab0:	bdb4b1c4 	.word	0xbdb4b1c4
 8007ab4:	3e21ee9e 	.word	0x3e21ee9e
 8007ab8:	809c52ad 	.word	0x809c52ad
 8007abc:	3e927e4f 	.word	0x3e927e4f
 8007ac0:	19cb1590 	.word	0x19cb1590
 8007ac4:	3efa01a0 	.word	0x3efa01a0
 8007ac8:	16c15177 	.word	0x16c15177
 8007acc:	3f56c16c 	.word	0x3f56c16c
 8007ad0:	5555554c 	.word	0x5555554c
 8007ad4:	3fa55555 	.word	0x3fa55555
 8007ad8:	00000000 	.word	0x00000000
 8007adc:	3ff00000 	.word	0x3ff00000
 8007ae0:	3fe00000 	.word	0x3fe00000
 8007ae4:	3fd33332 	.word	0x3fd33332
 8007ae8:	3ff00000 	.word	0x3ff00000
 8007aec:	3fe90000 	.word	0x3fe90000
 8007af0:	3fd20000 	.word	0x3fd20000
 8007af4:	00000000 	.word	0x00000000

08007af8 <__kernel_rem_pio2>:
 8007af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007afc:	ed2d 8b02 	vpush	{d8}
 8007b00:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8007b04:	f112 0f14 	cmn.w	r2, #20
 8007b08:	9308      	str	r3, [sp, #32]
 8007b0a:	9101      	str	r1, [sp, #4]
 8007b0c:	4bc4      	ldr	r3, [pc, #784]	; (8007e20 <__kernel_rem_pio2+0x328>)
 8007b0e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8007b10:	900b      	str	r0, [sp, #44]	; 0x2c
 8007b12:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007b16:	9302      	str	r3, [sp, #8]
 8007b18:	9b08      	ldr	r3, [sp, #32]
 8007b1a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007b1e:	bfa8      	it	ge
 8007b20:	1ed4      	subge	r4, r2, #3
 8007b22:	9306      	str	r3, [sp, #24]
 8007b24:	bfb2      	itee	lt
 8007b26:	2400      	movlt	r4, #0
 8007b28:	2318      	movge	r3, #24
 8007b2a:	fb94 f4f3 	sdivge	r4, r4, r3
 8007b2e:	f06f 0317 	mvn.w	r3, #23
 8007b32:	fb04 3303 	mla	r3, r4, r3, r3
 8007b36:	eb03 0a02 	add.w	sl, r3, r2
 8007b3a:	9b02      	ldr	r3, [sp, #8]
 8007b3c:	9a06      	ldr	r2, [sp, #24]
 8007b3e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8007e10 <__kernel_rem_pio2+0x318>
 8007b42:	eb03 0802 	add.w	r8, r3, r2
 8007b46:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007b48:	1aa7      	subs	r7, r4, r2
 8007b4a:	ae22      	add	r6, sp, #136	; 0x88
 8007b4c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007b50:	2500      	movs	r5, #0
 8007b52:	4545      	cmp	r5, r8
 8007b54:	dd13      	ble.n	8007b7e <__kernel_rem_pio2+0x86>
 8007b56:	9b08      	ldr	r3, [sp, #32]
 8007b58:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8007e10 <__kernel_rem_pio2+0x318>
 8007b5c:	aa22      	add	r2, sp, #136	; 0x88
 8007b5e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007b62:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8007b66:	f04f 0800 	mov.w	r8, #0
 8007b6a:	9b02      	ldr	r3, [sp, #8]
 8007b6c:	4598      	cmp	r8, r3
 8007b6e:	dc2f      	bgt.n	8007bd0 <__kernel_rem_pio2+0xd8>
 8007b70:	ed8d 8b04 	vstr	d8, [sp, #16]
 8007b74:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8007b78:	462f      	mov	r7, r5
 8007b7a:	2600      	movs	r6, #0
 8007b7c:	e01b      	b.n	8007bb6 <__kernel_rem_pio2+0xbe>
 8007b7e:	42ef      	cmn	r7, r5
 8007b80:	d407      	bmi.n	8007b92 <__kernel_rem_pio2+0x9a>
 8007b82:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007b86:	f7f8 fcc5 	bl	8000514 <__aeabi_i2d>
 8007b8a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007b8e:	3501      	adds	r5, #1
 8007b90:	e7df      	b.n	8007b52 <__kernel_rem_pio2+0x5a>
 8007b92:	ec51 0b18 	vmov	r0, r1, d8
 8007b96:	e7f8      	b.n	8007b8a <__kernel_rem_pio2+0x92>
 8007b98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b9c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007ba0:	f7f8 fd22 	bl	80005e8 <__aeabi_dmul>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bac:	f7f8 fb66 	bl	800027c <__adddf3>
 8007bb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007bb4:	3601      	adds	r6, #1
 8007bb6:	9b06      	ldr	r3, [sp, #24]
 8007bb8:	429e      	cmp	r6, r3
 8007bba:	f1a7 0708 	sub.w	r7, r7, #8
 8007bbe:	ddeb      	ble.n	8007b98 <__kernel_rem_pio2+0xa0>
 8007bc0:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007bc4:	f108 0801 	add.w	r8, r8, #1
 8007bc8:	ecab 7b02 	vstmia	fp!, {d7}
 8007bcc:	3508      	adds	r5, #8
 8007bce:	e7cc      	b.n	8007b6a <__kernel_rem_pio2+0x72>
 8007bd0:	9b02      	ldr	r3, [sp, #8]
 8007bd2:	aa0e      	add	r2, sp, #56	; 0x38
 8007bd4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007bd8:	930d      	str	r3, [sp, #52]	; 0x34
 8007bda:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007bdc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007be0:	9c02      	ldr	r4, [sp, #8]
 8007be2:	930c      	str	r3, [sp, #48]	; 0x30
 8007be4:	00e3      	lsls	r3, r4, #3
 8007be6:	930a      	str	r3, [sp, #40]	; 0x28
 8007be8:	ab9a      	add	r3, sp, #616	; 0x268
 8007bea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007bee:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8007bf2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8007bf6:	ab72      	add	r3, sp, #456	; 0x1c8
 8007bf8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8007bfc:	46c3      	mov	fp, r8
 8007bfe:	46a1      	mov	r9, r4
 8007c00:	f1b9 0f00 	cmp.w	r9, #0
 8007c04:	f1a5 0508 	sub.w	r5, r5, #8
 8007c08:	dc77      	bgt.n	8007cfa <__kernel_rem_pio2+0x202>
 8007c0a:	ec47 6b10 	vmov	d0, r6, r7
 8007c0e:	4650      	mov	r0, sl
 8007c10:	f000 fc0a 	bl	8008428 <scalbn>
 8007c14:	ec57 6b10 	vmov	r6, r7, d0
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007c1e:	ee10 0a10 	vmov	r0, s0
 8007c22:	4639      	mov	r1, r7
 8007c24:	f7f8 fce0 	bl	80005e8 <__aeabi_dmul>
 8007c28:	ec41 0b10 	vmov	d0, r0, r1
 8007c2c:	f000 fb7c 	bl	8008328 <floor>
 8007c30:	4b7c      	ldr	r3, [pc, #496]	; (8007e24 <__kernel_rem_pio2+0x32c>)
 8007c32:	ec51 0b10 	vmov	r0, r1, d0
 8007c36:	2200      	movs	r2, #0
 8007c38:	f7f8 fcd6 	bl	80005e8 <__aeabi_dmul>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	460b      	mov	r3, r1
 8007c40:	4630      	mov	r0, r6
 8007c42:	4639      	mov	r1, r7
 8007c44:	f7f8 fb18 	bl	8000278 <__aeabi_dsub>
 8007c48:	460f      	mov	r7, r1
 8007c4a:	4606      	mov	r6, r0
 8007c4c:	f7f8 ff66 	bl	8000b1c <__aeabi_d2iz>
 8007c50:	9004      	str	r0, [sp, #16]
 8007c52:	f7f8 fc5f 	bl	8000514 <__aeabi_i2d>
 8007c56:	4602      	mov	r2, r0
 8007c58:	460b      	mov	r3, r1
 8007c5a:	4630      	mov	r0, r6
 8007c5c:	4639      	mov	r1, r7
 8007c5e:	f7f8 fb0b 	bl	8000278 <__aeabi_dsub>
 8007c62:	f1ba 0f00 	cmp.w	sl, #0
 8007c66:	4606      	mov	r6, r0
 8007c68:	460f      	mov	r7, r1
 8007c6a:	dd6d      	ble.n	8007d48 <__kernel_rem_pio2+0x250>
 8007c6c:	1e62      	subs	r2, r4, #1
 8007c6e:	ab0e      	add	r3, sp, #56	; 0x38
 8007c70:	9d04      	ldr	r5, [sp, #16]
 8007c72:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8007c76:	f1ca 0118 	rsb	r1, sl, #24
 8007c7a:	fa40 f301 	asr.w	r3, r0, r1
 8007c7e:	441d      	add	r5, r3
 8007c80:	408b      	lsls	r3, r1
 8007c82:	1ac0      	subs	r0, r0, r3
 8007c84:	ab0e      	add	r3, sp, #56	; 0x38
 8007c86:	9504      	str	r5, [sp, #16]
 8007c88:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007c8c:	f1ca 0317 	rsb	r3, sl, #23
 8007c90:	fa40 fb03 	asr.w	fp, r0, r3
 8007c94:	f1bb 0f00 	cmp.w	fp, #0
 8007c98:	dd65      	ble.n	8007d66 <__kernel_rem_pio2+0x26e>
 8007c9a:	9b04      	ldr	r3, [sp, #16]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	9304      	str	r3, [sp, #16]
 8007ca2:	4615      	mov	r5, r2
 8007ca4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007ca8:	4294      	cmp	r4, r2
 8007caa:	f300 809c 	bgt.w	8007de6 <__kernel_rem_pio2+0x2ee>
 8007cae:	f1ba 0f00 	cmp.w	sl, #0
 8007cb2:	dd07      	ble.n	8007cc4 <__kernel_rem_pio2+0x1cc>
 8007cb4:	f1ba 0f01 	cmp.w	sl, #1
 8007cb8:	f000 80c0 	beq.w	8007e3c <__kernel_rem_pio2+0x344>
 8007cbc:	f1ba 0f02 	cmp.w	sl, #2
 8007cc0:	f000 80c6 	beq.w	8007e50 <__kernel_rem_pio2+0x358>
 8007cc4:	f1bb 0f02 	cmp.w	fp, #2
 8007cc8:	d14d      	bne.n	8007d66 <__kernel_rem_pio2+0x26e>
 8007cca:	4632      	mov	r2, r6
 8007ccc:	463b      	mov	r3, r7
 8007cce:	4956      	ldr	r1, [pc, #344]	; (8007e28 <__kernel_rem_pio2+0x330>)
 8007cd0:	2000      	movs	r0, #0
 8007cd2:	f7f8 fad1 	bl	8000278 <__aeabi_dsub>
 8007cd6:	4606      	mov	r6, r0
 8007cd8:	460f      	mov	r7, r1
 8007cda:	2d00      	cmp	r5, #0
 8007cdc:	d043      	beq.n	8007d66 <__kernel_rem_pio2+0x26e>
 8007cde:	4650      	mov	r0, sl
 8007ce0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8007e18 <__kernel_rem_pio2+0x320>
 8007ce4:	f000 fba0 	bl	8008428 <scalbn>
 8007ce8:	4630      	mov	r0, r6
 8007cea:	4639      	mov	r1, r7
 8007cec:	ec53 2b10 	vmov	r2, r3, d0
 8007cf0:	f7f8 fac2 	bl	8000278 <__aeabi_dsub>
 8007cf4:	4606      	mov	r6, r0
 8007cf6:	460f      	mov	r7, r1
 8007cf8:	e035      	b.n	8007d66 <__kernel_rem_pio2+0x26e>
 8007cfa:	4b4c      	ldr	r3, [pc, #304]	; (8007e2c <__kernel_rem_pio2+0x334>)
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	4630      	mov	r0, r6
 8007d00:	4639      	mov	r1, r7
 8007d02:	f7f8 fc71 	bl	80005e8 <__aeabi_dmul>
 8007d06:	f7f8 ff09 	bl	8000b1c <__aeabi_d2iz>
 8007d0a:	f7f8 fc03 	bl	8000514 <__aeabi_i2d>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	460b      	mov	r3, r1
 8007d12:	ec43 2b18 	vmov	d8, r2, r3
 8007d16:	4b46      	ldr	r3, [pc, #280]	; (8007e30 <__kernel_rem_pio2+0x338>)
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f7f8 fc65 	bl	80005e8 <__aeabi_dmul>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	460b      	mov	r3, r1
 8007d22:	4630      	mov	r0, r6
 8007d24:	4639      	mov	r1, r7
 8007d26:	f7f8 faa7 	bl	8000278 <__aeabi_dsub>
 8007d2a:	f7f8 fef7 	bl	8000b1c <__aeabi_d2iz>
 8007d2e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007d32:	f84b 0b04 	str.w	r0, [fp], #4
 8007d36:	ec51 0b18 	vmov	r0, r1, d8
 8007d3a:	f7f8 fa9f 	bl	800027c <__adddf3>
 8007d3e:	f109 39ff 	add.w	r9, r9, #4294967295
 8007d42:	4606      	mov	r6, r0
 8007d44:	460f      	mov	r7, r1
 8007d46:	e75b      	b.n	8007c00 <__kernel_rem_pio2+0x108>
 8007d48:	d106      	bne.n	8007d58 <__kernel_rem_pio2+0x260>
 8007d4a:	1e63      	subs	r3, r4, #1
 8007d4c:	aa0e      	add	r2, sp, #56	; 0x38
 8007d4e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007d52:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8007d56:	e79d      	b.n	8007c94 <__kernel_rem_pio2+0x19c>
 8007d58:	4b36      	ldr	r3, [pc, #216]	; (8007e34 <__kernel_rem_pio2+0x33c>)
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f7f8 feca 	bl	8000af4 <__aeabi_dcmpge>
 8007d60:	2800      	cmp	r0, #0
 8007d62:	d13d      	bne.n	8007de0 <__kernel_rem_pio2+0x2e8>
 8007d64:	4683      	mov	fp, r0
 8007d66:	2200      	movs	r2, #0
 8007d68:	2300      	movs	r3, #0
 8007d6a:	4630      	mov	r0, r6
 8007d6c:	4639      	mov	r1, r7
 8007d6e:	f7f8 fea3 	bl	8000ab8 <__aeabi_dcmpeq>
 8007d72:	2800      	cmp	r0, #0
 8007d74:	f000 80c0 	beq.w	8007ef8 <__kernel_rem_pio2+0x400>
 8007d78:	1e65      	subs	r5, r4, #1
 8007d7a:	462b      	mov	r3, r5
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	9902      	ldr	r1, [sp, #8]
 8007d80:	428b      	cmp	r3, r1
 8007d82:	da6c      	bge.n	8007e5e <__kernel_rem_pio2+0x366>
 8007d84:	2a00      	cmp	r2, #0
 8007d86:	f000 8089 	beq.w	8007e9c <__kernel_rem_pio2+0x3a4>
 8007d8a:	ab0e      	add	r3, sp, #56	; 0x38
 8007d8c:	f1aa 0a18 	sub.w	sl, sl, #24
 8007d90:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f000 80ad 	beq.w	8007ef4 <__kernel_rem_pio2+0x3fc>
 8007d9a:	4650      	mov	r0, sl
 8007d9c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8007e18 <__kernel_rem_pio2+0x320>
 8007da0:	f000 fb42 	bl	8008428 <scalbn>
 8007da4:	ab9a      	add	r3, sp, #616	; 0x268
 8007da6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007daa:	ec57 6b10 	vmov	r6, r7, d0
 8007dae:	00ec      	lsls	r4, r5, #3
 8007db0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8007db4:	46aa      	mov	sl, r5
 8007db6:	f1ba 0f00 	cmp.w	sl, #0
 8007dba:	f280 80d6 	bge.w	8007f6a <__kernel_rem_pio2+0x472>
 8007dbe:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8007e10 <__kernel_rem_pio2+0x318>
 8007dc2:	462e      	mov	r6, r5
 8007dc4:	2e00      	cmp	r6, #0
 8007dc6:	f2c0 8104 	blt.w	8007fd2 <__kernel_rem_pio2+0x4da>
 8007dca:	ab72      	add	r3, sp, #456	; 0x1c8
 8007dcc:	ed8d 8b06 	vstr	d8, [sp, #24]
 8007dd0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8007e38 <__kernel_rem_pio2+0x340>
 8007dd4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8007dd8:	f04f 0800 	mov.w	r8, #0
 8007ddc:	1baf      	subs	r7, r5, r6
 8007dde:	e0ea      	b.n	8007fb6 <__kernel_rem_pio2+0x4be>
 8007de0:	f04f 0b02 	mov.w	fp, #2
 8007de4:	e759      	b.n	8007c9a <__kernel_rem_pio2+0x1a2>
 8007de6:	f8d8 3000 	ldr.w	r3, [r8]
 8007dea:	b955      	cbnz	r5, 8007e02 <__kernel_rem_pio2+0x30a>
 8007dec:	b123      	cbz	r3, 8007df8 <__kernel_rem_pio2+0x300>
 8007dee:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007df2:	f8c8 3000 	str.w	r3, [r8]
 8007df6:	2301      	movs	r3, #1
 8007df8:	3201      	adds	r2, #1
 8007dfa:	f108 0804 	add.w	r8, r8, #4
 8007dfe:	461d      	mov	r5, r3
 8007e00:	e752      	b.n	8007ca8 <__kernel_rem_pio2+0x1b0>
 8007e02:	1acb      	subs	r3, r1, r3
 8007e04:	f8c8 3000 	str.w	r3, [r8]
 8007e08:	462b      	mov	r3, r5
 8007e0a:	e7f5      	b.n	8007df8 <__kernel_rem_pio2+0x300>
 8007e0c:	f3af 8000 	nop.w
	...
 8007e1c:	3ff00000 	.word	0x3ff00000
 8007e20:	08008890 	.word	0x08008890
 8007e24:	40200000 	.word	0x40200000
 8007e28:	3ff00000 	.word	0x3ff00000
 8007e2c:	3e700000 	.word	0x3e700000
 8007e30:	41700000 	.word	0x41700000
 8007e34:	3fe00000 	.word	0x3fe00000
 8007e38:	08008850 	.word	0x08008850
 8007e3c:	1e62      	subs	r2, r4, #1
 8007e3e:	ab0e      	add	r3, sp, #56	; 0x38
 8007e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e44:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007e48:	a90e      	add	r1, sp, #56	; 0x38
 8007e4a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007e4e:	e739      	b.n	8007cc4 <__kernel_rem_pio2+0x1cc>
 8007e50:	1e62      	subs	r2, r4, #1
 8007e52:	ab0e      	add	r3, sp, #56	; 0x38
 8007e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e58:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007e5c:	e7f4      	b.n	8007e48 <__kernel_rem_pio2+0x350>
 8007e5e:	a90e      	add	r1, sp, #56	; 0x38
 8007e60:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007e64:	3b01      	subs	r3, #1
 8007e66:	430a      	orrs	r2, r1
 8007e68:	e789      	b.n	8007d7e <__kernel_rem_pio2+0x286>
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007e70:	2900      	cmp	r1, #0
 8007e72:	d0fa      	beq.n	8007e6a <__kernel_rem_pio2+0x372>
 8007e74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007e76:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8007e7a:	446a      	add	r2, sp
 8007e7c:	3a98      	subs	r2, #152	; 0x98
 8007e7e:	920a      	str	r2, [sp, #40]	; 0x28
 8007e80:	9a08      	ldr	r2, [sp, #32]
 8007e82:	18e3      	adds	r3, r4, r3
 8007e84:	18a5      	adds	r5, r4, r2
 8007e86:	aa22      	add	r2, sp, #136	; 0x88
 8007e88:	f104 0801 	add.w	r8, r4, #1
 8007e8c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8007e90:	9304      	str	r3, [sp, #16]
 8007e92:	9b04      	ldr	r3, [sp, #16]
 8007e94:	4543      	cmp	r3, r8
 8007e96:	da04      	bge.n	8007ea2 <__kernel_rem_pio2+0x3aa>
 8007e98:	461c      	mov	r4, r3
 8007e9a:	e6a3      	b.n	8007be4 <__kernel_rem_pio2+0xec>
 8007e9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	e7e4      	b.n	8007e6c <__kernel_rem_pio2+0x374>
 8007ea2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007ea4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007ea8:	f7f8 fb34 	bl	8000514 <__aeabi_i2d>
 8007eac:	e8e5 0102 	strd	r0, r1, [r5], #8
 8007eb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007eb2:	46ab      	mov	fp, r5
 8007eb4:	461c      	mov	r4, r3
 8007eb6:	f04f 0900 	mov.w	r9, #0
 8007eba:	2600      	movs	r6, #0
 8007ebc:	2700      	movs	r7, #0
 8007ebe:	9b06      	ldr	r3, [sp, #24]
 8007ec0:	4599      	cmp	r9, r3
 8007ec2:	dd06      	ble.n	8007ed2 <__kernel_rem_pio2+0x3da>
 8007ec4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ec6:	e8e3 6702 	strd	r6, r7, [r3], #8
 8007eca:	f108 0801 	add.w	r8, r8, #1
 8007ece:	930a      	str	r3, [sp, #40]	; 0x28
 8007ed0:	e7df      	b.n	8007e92 <__kernel_rem_pio2+0x39a>
 8007ed2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007ed6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007eda:	f7f8 fb85 	bl	80005e8 <__aeabi_dmul>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	4630      	mov	r0, r6
 8007ee4:	4639      	mov	r1, r7
 8007ee6:	f7f8 f9c9 	bl	800027c <__adddf3>
 8007eea:	f109 0901 	add.w	r9, r9, #1
 8007eee:	4606      	mov	r6, r0
 8007ef0:	460f      	mov	r7, r1
 8007ef2:	e7e4      	b.n	8007ebe <__kernel_rem_pio2+0x3c6>
 8007ef4:	3d01      	subs	r5, #1
 8007ef6:	e748      	b.n	8007d8a <__kernel_rem_pio2+0x292>
 8007ef8:	ec47 6b10 	vmov	d0, r6, r7
 8007efc:	f1ca 0000 	rsb	r0, sl, #0
 8007f00:	f000 fa92 	bl	8008428 <scalbn>
 8007f04:	ec57 6b10 	vmov	r6, r7, d0
 8007f08:	4ba0      	ldr	r3, [pc, #640]	; (800818c <__kernel_rem_pio2+0x694>)
 8007f0a:	ee10 0a10 	vmov	r0, s0
 8007f0e:	2200      	movs	r2, #0
 8007f10:	4639      	mov	r1, r7
 8007f12:	f7f8 fdef 	bl	8000af4 <__aeabi_dcmpge>
 8007f16:	b1f8      	cbz	r0, 8007f58 <__kernel_rem_pio2+0x460>
 8007f18:	4b9d      	ldr	r3, [pc, #628]	; (8008190 <__kernel_rem_pio2+0x698>)
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	4630      	mov	r0, r6
 8007f1e:	4639      	mov	r1, r7
 8007f20:	f7f8 fb62 	bl	80005e8 <__aeabi_dmul>
 8007f24:	f7f8 fdfa 	bl	8000b1c <__aeabi_d2iz>
 8007f28:	4680      	mov	r8, r0
 8007f2a:	f7f8 faf3 	bl	8000514 <__aeabi_i2d>
 8007f2e:	4b97      	ldr	r3, [pc, #604]	; (800818c <__kernel_rem_pio2+0x694>)
 8007f30:	2200      	movs	r2, #0
 8007f32:	f7f8 fb59 	bl	80005e8 <__aeabi_dmul>
 8007f36:	460b      	mov	r3, r1
 8007f38:	4602      	mov	r2, r0
 8007f3a:	4639      	mov	r1, r7
 8007f3c:	4630      	mov	r0, r6
 8007f3e:	f7f8 f99b 	bl	8000278 <__aeabi_dsub>
 8007f42:	f7f8 fdeb 	bl	8000b1c <__aeabi_d2iz>
 8007f46:	1c65      	adds	r5, r4, #1
 8007f48:	ab0e      	add	r3, sp, #56	; 0x38
 8007f4a:	f10a 0a18 	add.w	sl, sl, #24
 8007f4e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007f52:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007f56:	e720      	b.n	8007d9a <__kernel_rem_pio2+0x2a2>
 8007f58:	4630      	mov	r0, r6
 8007f5a:	4639      	mov	r1, r7
 8007f5c:	f7f8 fdde 	bl	8000b1c <__aeabi_d2iz>
 8007f60:	ab0e      	add	r3, sp, #56	; 0x38
 8007f62:	4625      	mov	r5, r4
 8007f64:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007f68:	e717      	b.n	8007d9a <__kernel_rem_pio2+0x2a2>
 8007f6a:	ab0e      	add	r3, sp, #56	; 0x38
 8007f6c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8007f70:	f7f8 fad0 	bl	8000514 <__aeabi_i2d>
 8007f74:	4632      	mov	r2, r6
 8007f76:	463b      	mov	r3, r7
 8007f78:	f7f8 fb36 	bl	80005e8 <__aeabi_dmul>
 8007f7c:	4b84      	ldr	r3, [pc, #528]	; (8008190 <__kernel_rem_pio2+0x698>)
 8007f7e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8007f82:	2200      	movs	r2, #0
 8007f84:	4630      	mov	r0, r6
 8007f86:	4639      	mov	r1, r7
 8007f88:	f7f8 fb2e 	bl	80005e8 <__aeabi_dmul>
 8007f8c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f90:	4606      	mov	r6, r0
 8007f92:	460f      	mov	r7, r1
 8007f94:	e70f      	b.n	8007db6 <__kernel_rem_pio2+0x2be>
 8007f96:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007f9a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8007f9e:	f7f8 fb23 	bl	80005e8 <__aeabi_dmul>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	460b      	mov	r3, r1
 8007fa6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007faa:	f7f8 f967 	bl	800027c <__adddf3>
 8007fae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007fb2:	f108 0801 	add.w	r8, r8, #1
 8007fb6:	9b02      	ldr	r3, [sp, #8]
 8007fb8:	4598      	cmp	r8, r3
 8007fba:	dc01      	bgt.n	8007fc0 <__kernel_rem_pio2+0x4c8>
 8007fbc:	45b8      	cmp	r8, r7
 8007fbe:	ddea      	ble.n	8007f96 <__kernel_rem_pio2+0x49e>
 8007fc0:	ed9d 7b06 	vldr	d7, [sp, #24]
 8007fc4:	ab4a      	add	r3, sp, #296	; 0x128
 8007fc6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007fca:	ed87 7b00 	vstr	d7, [r7]
 8007fce:	3e01      	subs	r6, #1
 8007fd0:	e6f8      	b.n	8007dc4 <__kernel_rem_pio2+0x2cc>
 8007fd2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007fd4:	2b02      	cmp	r3, #2
 8007fd6:	dc0b      	bgt.n	8007ff0 <__kernel_rem_pio2+0x4f8>
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	dc35      	bgt.n	8008048 <__kernel_rem_pio2+0x550>
 8007fdc:	d059      	beq.n	8008092 <__kernel_rem_pio2+0x59a>
 8007fde:	9b04      	ldr	r3, [sp, #16]
 8007fe0:	f003 0007 	and.w	r0, r3, #7
 8007fe4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007fe8:	ecbd 8b02 	vpop	{d8}
 8007fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ff0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007ff2:	2b03      	cmp	r3, #3
 8007ff4:	d1f3      	bne.n	8007fde <__kernel_rem_pio2+0x4e6>
 8007ff6:	ab4a      	add	r3, sp, #296	; 0x128
 8007ff8:	4423      	add	r3, r4
 8007ffa:	9306      	str	r3, [sp, #24]
 8007ffc:	461c      	mov	r4, r3
 8007ffe:	469a      	mov	sl, r3
 8008000:	9502      	str	r5, [sp, #8]
 8008002:	9b02      	ldr	r3, [sp, #8]
 8008004:	2b00      	cmp	r3, #0
 8008006:	f1aa 0a08 	sub.w	sl, sl, #8
 800800a:	dc6b      	bgt.n	80080e4 <__kernel_rem_pio2+0x5ec>
 800800c:	46aa      	mov	sl, r5
 800800e:	f1ba 0f01 	cmp.w	sl, #1
 8008012:	f1a4 0408 	sub.w	r4, r4, #8
 8008016:	f300 8085 	bgt.w	8008124 <__kernel_rem_pio2+0x62c>
 800801a:	9c06      	ldr	r4, [sp, #24]
 800801c:	2000      	movs	r0, #0
 800801e:	3408      	adds	r4, #8
 8008020:	2100      	movs	r1, #0
 8008022:	2d01      	cmp	r5, #1
 8008024:	f300 809d 	bgt.w	8008162 <__kernel_rem_pio2+0x66a>
 8008028:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800802c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8008030:	f1bb 0f00 	cmp.w	fp, #0
 8008034:	f040 809b 	bne.w	800816e <__kernel_rem_pio2+0x676>
 8008038:	9b01      	ldr	r3, [sp, #4]
 800803a:	e9c3 5600 	strd	r5, r6, [r3]
 800803e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8008042:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8008046:	e7ca      	b.n	8007fde <__kernel_rem_pio2+0x4e6>
 8008048:	3408      	adds	r4, #8
 800804a:	ab4a      	add	r3, sp, #296	; 0x128
 800804c:	441c      	add	r4, r3
 800804e:	462e      	mov	r6, r5
 8008050:	2000      	movs	r0, #0
 8008052:	2100      	movs	r1, #0
 8008054:	2e00      	cmp	r6, #0
 8008056:	da36      	bge.n	80080c6 <__kernel_rem_pio2+0x5ce>
 8008058:	f1bb 0f00 	cmp.w	fp, #0
 800805c:	d039      	beq.n	80080d2 <__kernel_rem_pio2+0x5da>
 800805e:	4602      	mov	r2, r0
 8008060:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008064:	9c01      	ldr	r4, [sp, #4]
 8008066:	e9c4 2300 	strd	r2, r3, [r4]
 800806a:	4602      	mov	r2, r0
 800806c:	460b      	mov	r3, r1
 800806e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8008072:	f7f8 f901 	bl	8000278 <__aeabi_dsub>
 8008076:	ae4c      	add	r6, sp, #304	; 0x130
 8008078:	2401      	movs	r4, #1
 800807a:	42a5      	cmp	r5, r4
 800807c:	da2c      	bge.n	80080d8 <__kernel_rem_pio2+0x5e0>
 800807e:	f1bb 0f00 	cmp.w	fp, #0
 8008082:	d002      	beq.n	800808a <__kernel_rem_pio2+0x592>
 8008084:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008088:	4619      	mov	r1, r3
 800808a:	9b01      	ldr	r3, [sp, #4]
 800808c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008090:	e7a5      	b.n	8007fde <__kernel_rem_pio2+0x4e6>
 8008092:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8008096:	eb0d 0403 	add.w	r4, sp, r3
 800809a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800809e:	2000      	movs	r0, #0
 80080a0:	2100      	movs	r1, #0
 80080a2:	2d00      	cmp	r5, #0
 80080a4:	da09      	bge.n	80080ba <__kernel_rem_pio2+0x5c2>
 80080a6:	f1bb 0f00 	cmp.w	fp, #0
 80080aa:	d002      	beq.n	80080b2 <__kernel_rem_pio2+0x5ba>
 80080ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80080b0:	4619      	mov	r1, r3
 80080b2:	9b01      	ldr	r3, [sp, #4]
 80080b4:	e9c3 0100 	strd	r0, r1, [r3]
 80080b8:	e791      	b.n	8007fde <__kernel_rem_pio2+0x4e6>
 80080ba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80080be:	f7f8 f8dd 	bl	800027c <__adddf3>
 80080c2:	3d01      	subs	r5, #1
 80080c4:	e7ed      	b.n	80080a2 <__kernel_rem_pio2+0x5aa>
 80080c6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80080ca:	f7f8 f8d7 	bl	800027c <__adddf3>
 80080ce:	3e01      	subs	r6, #1
 80080d0:	e7c0      	b.n	8008054 <__kernel_rem_pio2+0x55c>
 80080d2:	4602      	mov	r2, r0
 80080d4:	460b      	mov	r3, r1
 80080d6:	e7c5      	b.n	8008064 <__kernel_rem_pio2+0x56c>
 80080d8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80080dc:	f7f8 f8ce 	bl	800027c <__adddf3>
 80080e0:	3401      	adds	r4, #1
 80080e2:	e7ca      	b.n	800807a <__kernel_rem_pio2+0x582>
 80080e4:	e9da 8900 	ldrd	r8, r9, [sl]
 80080e8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80080ec:	9b02      	ldr	r3, [sp, #8]
 80080ee:	3b01      	subs	r3, #1
 80080f0:	9302      	str	r3, [sp, #8]
 80080f2:	4632      	mov	r2, r6
 80080f4:	463b      	mov	r3, r7
 80080f6:	4640      	mov	r0, r8
 80080f8:	4649      	mov	r1, r9
 80080fa:	f7f8 f8bf 	bl	800027c <__adddf3>
 80080fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008102:	4602      	mov	r2, r0
 8008104:	460b      	mov	r3, r1
 8008106:	4640      	mov	r0, r8
 8008108:	4649      	mov	r1, r9
 800810a:	f7f8 f8b5 	bl	8000278 <__aeabi_dsub>
 800810e:	4632      	mov	r2, r6
 8008110:	463b      	mov	r3, r7
 8008112:	f7f8 f8b3 	bl	800027c <__adddf3>
 8008116:	ed9d 7b08 	vldr	d7, [sp, #32]
 800811a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800811e:	ed8a 7b00 	vstr	d7, [sl]
 8008122:	e76e      	b.n	8008002 <__kernel_rem_pio2+0x50a>
 8008124:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008128:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800812c:	4640      	mov	r0, r8
 800812e:	4632      	mov	r2, r6
 8008130:	463b      	mov	r3, r7
 8008132:	4649      	mov	r1, r9
 8008134:	f7f8 f8a2 	bl	800027c <__adddf3>
 8008138:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800813c:	4602      	mov	r2, r0
 800813e:	460b      	mov	r3, r1
 8008140:	4640      	mov	r0, r8
 8008142:	4649      	mov	r1, r9
 8008144:	f7f8 f898 	bl	8000278 <__aeabi_dsub>
 8008148:	4632      	mov	r2, r6
 800814a:	463b      	mov	r3, r7
 800814c:	f7f8 f896 	bl	800027c <__adddf3>
 8008150:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008154:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008158:	ed84 7b00 	vstr	d7, [r4]
 800815c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008160:	e755      	b.n	800800e <__kernel_rem_pio2+0x516>
 8008162:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008166:	f7f8 f889 	bl	800027c <__adddf3>
 800816a:	3d01      	subs	r5, #1
 800816c:	e759      	b.n	8008022 <__kernel_rem_pio2+0x52a>
 800816e:	9b01      	ldr	r3, [sp, #4]
 8008170:	9a01      	ldr	r2, [sp, #4]
 8008172:	601d      	str	r5, [r3, #0]
 8008174:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8008178:	605c      	str	r4, [r3, #4]
 800817a:	609f      	str	r7, [r3, #8]
 800817c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8008180:	60d3      	str	r3, [r2, #12]
 8008182:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008186:	6110      	str	r0, [r2, #16]
 8008188:	6153      	str	r3, [r2, #20]
 800818a:	e728      	b.n	8007fde <__kernel_rem_pio2+0x4e6>
 800818c:	41700000 	.word	0x41700000
 8008190:	3e700000 	.word	0x3e700000
 8008194:	00000000 	.word	0x00000000

08008198 <__kernel_sin>:
 8008198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800819c:	ed2d 8b04 	vpush	{d8-d9}
 80081a0:	eeb0 8a41 	vmov.f32	s16, s2
 80081a4:	eef0 8a61 	vmov.f32	s17, s3
 80081a8:	ec55 4b10 	vmov	r4, r5, d0
 80081ac:	b083      	sub	sp, #12
 80081ae:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80081b2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80081b6:	9001      	str	r0, [sp, #4]
 80081b8:	da06      	bge.n	80081c8 <__kernel_sin+0x30>
 80081ba:	ee10 0a10 	vmov	r0, s0
 80081be:	4629      	mov	r1, r5
 80081c0:	f7f8 fcac 	bl	8000b1c <__aeabi_d2iz>
 80081c4:	2800      	cmp	r0, #0
 80081c6:	d051      	beq.n	800826c <__kernel_sin+0xd4>
 80081c8:	4622      	mov	r2, r4
 80081ca:	462b      	mov	r3, r5
 80081cc:	4620      	mov	r0, r4
 80081ce:	4629      	mov	r1, r5
 80081d0:	f7f8 fa0a 	bl	80005e8 <__aeabi_dmul>
 80081d4:	4682      	mov	sl, r0
 80081d6:	468b      	mov	fp, r1
 80081d8:	4602      	mov	r2, r0
 80081da:	460b      	mov	r3, r1
 80081dc:	4620      	mov	r0, r4
 80081de:	4629      	mov	r1, r5
 80081e0:	f7f8 fa02 	bl	80005e8 <__aeabi_dmul>
 80081e4:	a341      	add	r3, pc, #260	; (adr r3, 80082ec <__kernel_sin+0x154>)
 80081e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ea:	4680      	mov	r8, r0
 80081ec:	4689      	mov	r9, r1
 80081ee:	4650      	mov	r0, sl
 80081f0:	4659      	mov	r1, fp
 80081f2:	f7f8 f9f9 	bl	80005e8 <__aeabi_dmul>
 80081f6:	a33f      	add	r3, pc, #252	; (adr r3, 80082f4 <__kernel_sin+0x15c>)
 80081f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fc:	f7f8 f83c 	bl	8000278 <__aeabi_dsub>
 8008200:	4652      	mov	r2, sl
 8008202:	465b      	mov	r3, fp
 8008204:	f7f8 f9f0 	bl	80005e8 <__aeabi_dmul>
 8008208:	a33c      	add	r3, pc, #240	; (adr r3, 80082fc <__kernel_sin+0x164>)
 800820a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820e:	f7f8 f835 	bl	800027c <__adddf3>
 8008212:	4652      	mov	r2, sl
 8008214:	465b      	mov	r3, fp
 8008216:	f7f8 f9e7 	bl	80005e8 <__aeabi_dmul>
 800821a:	a33a      	add	r3, pc, #232	; (adr r3, 8008304 <__kernel_sin+0x16c>)
 800821c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008220:	f7f8 f82a 	bl	8000278 <__aeabi_dsub>
 8008224:	4652      	mov	r2, sl
 8008226:	465b      	mov	r3, fp
 8008228:	f7f8 f9de 	bl	80005e8 <__aeabi_dmul>
 800822c:	a337      	add	r3, pc, #220	; (adr r3, 800830c <__kernel_sin+0x174>)
 800822e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008232:	f7f8 f823 	bl	800027c <__adddf3>
 8008236:	9b01      	ldr	r3, [sp, #4]
 8008238:	4606      	mov	r6, r0
 800823a:	460f      	mov	r7, r1
 800823c:	b9eb      	cbnz	r3, 800827a <__kernel_sin+0xe2>
 800823e:	4602      	mov	r2, r0
 8008240:	460b      	mov	r3, r1
 8008242:	4650      	mov	r0, sl
 8008244:	4659      	mov	r1, fp
 8008246:	f7f8 f9cf 	bl	80005e8 <__aeabi_dmul>
 800824a:	a325      	add	r3, pc, #148	; (adr r3, 80082e0 <__kernel_sin+0x148>)
 800824c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008250:	f7f8 f812 	bl	8000278 <__aeabi_dsub>
 8008254:	4642      	mov	r2, r8
 8008256:	464b      	mov	r3, r9
 8008258:	f7f8 f9c6 	bl	80005e8 <__aeabi_dmul>
 800825c:	4602      	mov	r2, r0
 800825e:	460b      	mov	r3, r1
 8008260:	4620      	mov	r0, r4
 8008262:	4629      	mov	r1, r5
 8008264:	f7f8 f80a 	bl	800027c <__adddf3>
 8008268:	4604      	mov	r4, r0
 800826a:	460d      	mov	r5, r1
 800826c:	ec45 4b10 	vmov	d0, r4, r5
 8008270:	b003      	add	sp, #12
 8008272:	ecbd 8b04 	vpop	{d8-d9}
 8008276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800827a:	4b1b      	ldr	r3, [pc, #108]	; (80082e8 <__kernel_sin+0x150>)
 800827c:	ec51 0b18 	vmov	r0, r1, d8
 8008280:	2200      	movs	r2, #0
 8008282:	f7f8 f9b1 	bl	80005e8 <__aeabi_dmul>
 8008286:	4632      	mov	r2, r6
 8008288:	ec41 0b19 	vmov	d9, r0, r1
 800828c:	463b      	mov	r3, r7
 800828e:	4640      	mov	r0, r8
 8008290:	4649      	mov	r1, r9
 8008292:	f7f8 f9a9 	bl	80005e8 <__aeabi_dmul>
 8008296:	4602      	mov	r2, r0
 8008298:	460b      	mov	r3, r1
 800829a:	ec51 0b19 	vmov	r0, r1, d9
 800829e:	f7f7 ffeb 	bl	8000278 <__aeabi_dsub>
 80082a2:	4652      	mov	r2, sl
 80082a4:	465b      	mov	r3, fp
 80082a6:	f7f8 f99f 	bl	80005e8 <__aeabi_dmul>
 80082aa:	ec53 2b18 	vmov	r2, r3, d8
 80082ae:	f7f7 ffe3 	bl	8000278 <__aeabi_dsub>
 80082b2:	a30b      	add	r3, pc, #44	; (adr r3, 80082e0 <__kernel_sin+0x148>)
 80082b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b8:	4606      	mov	r6, r0
 80082ba:	460f      	mov	r7, r1
 80082bc:	4640      	mov	r0, r8
 80082be:	4649      	mov	r1, r9
 80082c0:	f7f8 f992 	bl	80005e8 <__aeabi_dmul>
 80082c4:	4602      	mov	r2, r0
 80082c6:	460b      	mov	r3, r1
 80082c8:	4630      	mov	r0, r6
 80082ca:	4639      	mov	r1, r7
 80082cc:	f7f7 ffd6 	bl	800027c <__adddf3>
 80082d0:	4602      	mov	r2, r0
 80082d2:	460b      	mov	r3, r1
 80082d4:	4620      	mov	r0, r4
 80082d6:	4629      	mov	r1, r5
 80082d8:	f7f7 ffce 	bl	8000278 <__aeabi_dsub>
 80082dc:	e7c4      	b.n	8008268 <__kernel_sin+0xd0>
 80082de:	bf00      	nop
 80082e0:	55555549 	.word	0x55555549
 80082e4:	3fc55555 	.word	0x3fc55555
 80082e8:	3fe00000 	.word	0x3fe00000
 80082ec:	5acfd57c 	.word	0x5acfd57c
 80082f0:	3de5d93a 	.word	0x3de5d93a
 80082f4:	8a2b9ceb 	.word	0x8a2b9ceb
 80082f8:	3e5ae5e6 	.word	0x3e5ae5e6
 80082fc:	57b1fe7d 	.word	0x57b1fe7d
 8008300:	3ec71de3 	.word	0x3ec71de3
 8008304:	19c161d5 	.word	0x19c161d5
 8008308:	3f2a01a0 	.word	0x3f2a01a0
 800830c:	1110f8a6 	.word	0x1110f8a6
 8008310:	3f811111 	.word	0x3f811111

08008314 <fabs>:
 8008314:	ec51 0b10 	vmov	r0, r1, d0
 8008318:	ee10 2a10 	vmov	r2, s0
 800831c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008320:	ec43 2b10 	vmov	d0, r2, r3
 8008324:	4770      	bx	lr
	...

08008328 <floor>:
 8008328:	ec51 0b10 	vmov	r0, r1, d0
 800832c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008330:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008334:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008338:	2e13      	cmp	r6, #19
 800833a:	ee10 5a10 	vmov	r5, s0
 800833e:	ee10 8a10 	vmov	r8, s0
 8008342:	460c      	mov	r4, r1
 8008344:	dc32      	bgt.n	80083ac <floor+0x84>
 8008346:	2e00      	cmp	r6, #0
 8008348:	da14      	bge.n	8008374 <floor+0x4c>
 800834a:	a333      	add	r3, pc, #204	; (adr r3, 8008418 <floor+0xf0>)
 800834c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008350:	f7f7 ff94 	bl	800027c <__adddf3>
 8008354:	2200      	movs	r2, #0
 8008356:	2300      	movs	r3, #0
 8008358:	f7f8 fbd6 	bl	8000b08 <__aeabi_dcmpgt>
 800835c:	b138      	cbz	r0, 800836e <floor+0x46>
 800835e:	2c00      	cmp	r4, #0
 8008360:	da57      	bge.n	8008412 <floor+0xea>
 8008362:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008366:	431d      	orrs	r5, r3
 8008368:	d001      	beq.n	800836e <floor+0x46>
 800836a:	4c2d      	ldr	r4, [pc, #180]	; (8008420 <floor+0xf8>)
 800836c:	2500      	movs	r5, #0
 800836e:	4621      	mov	r1, r4
 8008370:	4628      	mov	r0, r5
 8008372:	e025      	b.n	80083c0 <floor+0x98>
 8008374:	4f2b      	ldr	r7, [pc, #172]	; (8008424 <floor+0xfc>)
 8008376:	4137      	asrs	r7, r6
 8008378:	ea01 0307 	and.w	r3, r1, r7
 800837c:	4303      	orrs	r3, r0
 800837e:	d01f      	beq.n	80083c0 <floor+0x98>
 8008380:	a325      	add	r3, pc, #148	; (adr r3, 8008418 <floor+0xf0>)
 8008382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008386:	f7f7 ff79 	bl	800027c <__adddf3>
 800838a:	2200      	movs	r2, #0
 800838c:	2300      	movs	r3, #0
 800838e:	f7f8 fbbb 	bl	8000b08 <__aeabi_dcmpgt>
 8008392:	2800      	cmp	r0, #0
 8008394:	d0eb      	beq.n	800836e <floor+0x46>
 8008396:	2c00      	cmp	r4, #0
 8008398:	bfbe      	ittt	lt
 800839a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800839e:	fa43 f606 	asrlt.w	r6, r3, r6
 80083a2:	19a4      	addlt	r4, r4, r6
 80083a4:	ea24 0407 	bic.w	r4, r4, r7
 80083a8:	2500      	movs	r5, #0
 80083aa:	e7e0      	b.n	800836e <floor+0x46>
 80083ac:	2e33      	cmp	r6, #51	; 0x33
 80083ae:	dd0b      	ble.n	80083c8 <floor+0xa0>
 80083b0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80083b4:	d104      	bne.n	80083c0 <floor+0x98>
 80083b6:	ee10 2a10 	vmov	r2, s0
 80083ba:	460b      	mov	r3, r1
 80083bc:	f7f7 ff5e 	bl	800027c <__adddf3>
 80083c0:	ec41 0b10 	vmov	d0, r0, r1
 80083c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083c8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80083cc:	f04f 33ff 	mov.w	r3, #4294967295
 80083d0:	fa23 f707 	lsr.w	r7, r3, r7
 80083d4:	4207      	tst	r7, r0
 80083d6:	d0f3      	beq.n	80083c0 <floor+0x98>
 80083d8:	a30f      	add	r3, pc, #60	; (adr r3, 8008418 <floor+0xf0>)
 80083da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083de:	f7f7 ff4d 	bl	800027c <__adddf3>
 80083e2:	2200      	movs	r2, #0
 80083e4:	2300      	movs	r3, #0
 80083e6:	f7f8 fb8f 	bl	8000b08 <__aeabi_dcmpgt>
 80083ea:	2800      	cmp	r0, #0
 80083ec:	d0bf      	beq.n	800836e <floor+0x46>
 80083ee:	2c00      	cmp	r4, #0
 80083f0:	da02      	bge.n	80083f8 <floor+0xd0>
 80083f2:	2e14      	cmp	r6, #20
 80083f4:	d103      	bne.n	80083fe <floor+0xd6>
 80083f6:	3401      	adds	r4, #1
 80083f8:	ea25 0507 	bic.w	r5, r5, r7
 80083fc:	e7b7      	b.n	800836e <floor+0x46>
 80083fe:	2301      	movs	r3, #1
 8008400:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008404:	fa03 f606 	lsl.w	r6, r3, r6
 8008408:	4435      	add	r5, r6
 800840a:	4545      	cmp	r5, r8
 800840c:	bf38      	it	cc
 800840e:	18e4      	addcc	r4, r4, r3
 8008410:	e7f2      	b.n	80083f8 <floor+0xd0>
 8008412:	2500      	movs	r5, #0
 8008414:	462c      	mov	r4, r5
 8008416:	e7aa      	b.n	800836e <floor+0x46>
 8008418:	8800759c 	.word	0x8800759c
 800841c:	7e37e43c 	.word	0x7e37e43c
 8008420:	bff00000 	.word	0xbff00000
 8008424:	000fffff 	.word	0x000fffff

08008428 <scalbn>:
 8008428:	b570      	push	{r4, r5, r6, lr}
 800842a:	ec55 4b10 	vmov	r4, r5, d0
 800842e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008432:	4606      	mov	r6, r0
 8008434:	462b      	mov	r3, r5
 8008436:	b99a      	cbnz	r2, 8008460 <scalbn+0x38>
 8008438:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800843c:	4323      	orrs	r3, r4
 800843e:	d036      	beq.n	80084ae <scalbn+0x86>
 8008440:	4b39      	ldr	r3, [pc, #228]	; (8008528 <scalbn+0x100>)
 8008442:	4629      	mov	r1, r5
 8008444:	ee10 0a10 	vmov	r0, s0
 8008448:	2200      	movs	r2, #0
 800844a:	f7f8 f8cd 	bl	80005e8 <__aeabi_dmul>
 800844e:	4b37      	ldr	r3, [pc, #220]	; (800852c <scalbn+0x104>)
 8008450:	429e      	cmp	r6, r3
 8008452:	4604      	mov	r4, r0
 8008454:	460d      	mov	r5, r1
 8008456:	da10      	bge.n	800847a <scalbn+0x52>
 8008458:	a32b      	add	r3, pc, #172	; (adr r3, 8008508 <scalbn+0xe0>)
 800845a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845e:	e03a      	b.n	80084d6 <scalbn+0xae>
 8008460:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008464:	428a      	cmp	r2, r1
 8008466:	d10c      	bne.n	8008482 <scalbn+0x5a>
 8008468:	ee10 2a10 	vmov	r2, s0
 800846c:	4620      	mov	r0, r4
 800846e:	4629      	mov	r1, r5
 8008470:	f7f7 ff04 	bl	800027c <__adddf3>
 8008474:	4604      	mov	r4, r0
 8008476:	460d      	mov	r5, r1
 8008478:	e019      	b.n	80084ae <scalbn+0x86>
 800847a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800847e:	460b      	mov	r3, r1
 8008480:	3a36      	subs	r2, #54	; 0x36
 8008482:	4432      	add	r2, r6
 8008484:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008488:	428a      	cmp	r2, r1
 800848a:	dd08      	ble.n	800849e <scalbn+0x76>
 800848c:	2d00      	cmp	r5, #0
 800848e:	a120      	add	r1, pc, #128	; (adr r1, 8008510 <scalbn+0xe8>)
 8008490:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008494:	da1c      	bge.n	80084d0 <scalbn+0xa8>
 8008496:	a120      	add	r1, pc, #128	; (adr r1, 8008518 <scalbn+0xf0>)
 8008498:	e9d1 0100 	ldrd	r0, r1, [r1]
 800849c:	e018      	b.n	80084d0 <scalbn+0xa8>
 800849e:	2a00      	cmp	r2, #0
 80084a0:	dd08      	ble.n	80084b4 <scalbn+0x8c>
 80084a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80084a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80084aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80084ae:	ec45 4b10 	vmov	d0, r4, r5
 80084b2:	bd70      	pop	{r4, r5, r6, pc}
 80084b4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80084b8:	da19      	bge.n	80084ee <scalbn+0xc6>
 80084ba:	f24c 3350 	movw	r3, #50000	; 0xc350
 80084be:	429e      	cmp	r6, r3
 80084c0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80084c4:	dd0a      	ble.n	80084dc <scalbn+0xb4>
 80084c6:	a112      	add	r1, pc, #72	; (adr r1, 8008510 <scalbn+0xe8>)
 80084c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d1e2      	bne.n	8008496 <scalbn+0x6e>
 80084d0:	a30f      	add	r3, pc, #60	; (adr r3, 8008510 <scalbn+0xe8>)
 80084d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d6:	f7f8 f887 	bl	80005e8 <__aeabi_dmul>
 80084da:	e7cb      	b.n	8008474 <scalbn+0x4c>
 80084dc:	a10a      	add	r1, pc, #40	; (adr r1, 8008508 <scalbn+0xe0>)
 80084de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d0b8      	beq.n	8008458 <scalbn+0x30>
 80084e6:	a10e      	add	r1, pc, #56	; (adr r1, 8008520 <scalbn+0xf8>)
 80084e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084ec:	e7b4      	b.n	8008458 <scalbn+0x30>
 80084ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80084f2:	3236      	adds	r2, #54	; 0x36
 80084f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80084f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80084fc:	4620      	mov	r0, r4
 80084fe:	4b0c      	ldr	r3, [pc, #48]	; (8008530 <scalbn+0x108>)
 8008500:	2200      	movs	r2, #0
 8008502:	e7e8      	b.n	80084d6 <scalbn+0xae>
 8008504:	f3af 8000 	nop.w
 8008508:	c2f8f359 	.word	0xc2f8f359
 800850c:	01a56e1f 	.word	0x01a56e1f
 8008510:	8800759c 	.word	0x8800759c
 8008514:	7e37e43c 	.word	0x7e37e43c
 8008518:	8800759c 	.word	0x8800759c
 800851c:	fe37e43c 	.word	0xfe37e43c
 8008520:	c2f8f359 	.word	0xc2f8f359
 8008524:	81a56e1f 	.word	0x81a56e1f
 8008528:	43500000 	.word	0x43500000
 800852c:	ffff3cb0 	.word	0xffff3cb0
 8008530:	3c900000 	.word	0x3c900000

08008534 <_gettimeofday>:
 8008534:	4b02      	ldr	r3, [pc, #8]	; (8008540 <_gettimeofday+0xc>)
 8008536:	2258      	movs	r2, #88	; 0x58
 8008538:	601a      	str	r2, [r3, #0]
 800853a:	f04f 30ff 	mov.w	r0, #4294967295
 800853e:	4770      	bx	lr
 8008540:	200008dc 	.word	0x200008dc

08008544 <_init>:
 8008544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008546:	bf00      	nop
 8008548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800854a:	bc08      	pop	{r3}
 800854c:	469e      	mov	lr, r3
 800854e:	4770      	bx	lr

08008550 <_fini>:
 8008550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008552:	bf00      	nop
 8008554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008556:	bc08      	pop	{r3}
 8008558:	469e      	mov	lr, r3
 800855a:	4770      	bx	lr
