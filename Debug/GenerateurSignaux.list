
GenerateurSignaux.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d44  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08005ed0  08005ed0  00015ed0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060c8  080060c8  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  080060c8  080060c8  000160c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060d0  080060d0  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060d0  080060d0  000160d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060d4  080060d4  000160d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080060d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020020  2**0
                  CONTENTS
 10 .bss          00000764  20000020  20000020  00020020  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000784  20000784  00020020  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f46b  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002064  00000000  00000000  0002f4bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dc8  00000000  00000000  00031520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cf0  00000000  00000000  000322e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020acc  00000000  00000000  00032fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f552  00000000  00000000  00053aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbeee  00000000  00000000  00062ff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012eee4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d94  00000000  00000000  0012ef34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005eb4 	.word	0x08005eb4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08005eb4 	.word	0x08005eb4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_uldivmod>:
 8000b04:	b953      	cbnz	r3, 8000b1c <__aeabi_uldivmod+0x18>
 8000b06:	b94a      	cbnz	r2, 8000b1c <__aeabi_uldivmod+0x18>
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	bf08      	it	eq
 8000b0c:	2800      	cmpeq	r0, #0
 8000b0e:	bf1c      	itt	ne
 8000b10:	f04f 31ff 	movne.w	r1, #4294967295
 8000b14:	f04f 30ff 	movne.w	r0, #4294967295
 8000b18:	f000 b974 	b.w	8000e04 <__aeabi_idiv0>
 8000b1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b24:	f000 f806 	bl	8000b34 <__udivmoddi4>
 8000b28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b30:	b004      	add	sp, #16
 8000b32:	4770      	bx	lr

08000b34 <__udivmoddi4>:
 8000b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b38:	9d08      	ldr	r5, [sp, #32]
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	468e      	mov	lr, r1
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d14d      	bne.n	8000bde <__udivmoddi4+0xaa>
 8000b42:	428a      	cmp	r2, r1
 8000b44:	4694      	mov	ip, r2
 8000b46:	d969      	bls.n	8000c1c <__udivmoddi4+0xe8>
 8000b48:	fab2 f282 	clz	r2, r2
 8000b4c:	b152      	cbz	r2, 8000b64 <__udivmoddi4+0x30>
 8000b4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b52:	f1c2 0120 	rsb	r1, r2, #32
 8000b56:	fa20 f101 	lsr.w	r1, r0, r1
 8000b5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000b62:	4094      	lsls	r4, r2
 8000b64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b68:	0c21      	lsrs	r1, r4, #16
 8000b6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000b6e:	fa1f f78c 	uxth.w	r7, ip
 8000b72:	fb08 e316 	mls	r3, r8, r6, lr
 8000b76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b7a:	fb06 f107 	mul.w	r1, r6, r7
 8000b7e:	4299      	cmp	r1, r3
 8000b80:	d90a      	bls.n	8000b98 <__udivmoddi4+0x64>
 8000b82:	eb1c 0303 	adds.w	r3, ip, r3
 8000b86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b8a:	f080 811f 	bcs.w	8000dcc <__udivmoddi4+0x298>
 8000b8e:	4299      	cmp	r1, r3
 8000b90:	f240 811c 	bls.w	8000dcc <__udivmoddi4+0x298>
 8000b94:	3e02      	subs	r6, #2
 8000b96:	4463      	add	r3, ip
 8000b98:	1a5b      	subs	r3, r3, r1
 8000b9a:	b2a4      	uxth	r4, r4
 8000b9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ba0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ba4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ba8:	fb00 f707 	mul.w	r7, r0, r7
 8000bac:	42a7      	cmp	r7, r4
 8000bae:	d90a      	bls.n	8000bc6 <__udivmoddi4+0x92>
 8000bb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bb8:	f080 810a 	bcs.w	8000dd0 <__udivmoddi4+0x29c>
 8000bbc:	42a7      	cmp	r7, r4
 8000bbe:	f240 8107 	bls.w	8000dd0 <__udivmoddi4+0x29c>
 8000bc2:	4464      	add	r4, ip
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000bca:	1be4      	subs	r4, r4, r7
 8000bcc:	2600      	movs	r6, #0
 8000bce:	b11d      	cbz	r5, 8000bd8 <__udivmoddi4+0xa4>
 8000bd0:	40d4      	lsrs	r4, r2
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000bd8:	4631      	mov	r1, r6
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	428b      	cmp	r3, r1
 8000be0:	d909      	bls.n	8000bf6 <__udivmoddi4+0xc2>
 8000be2:	2d00      	cmp	r5, #0
 8000be4:	f000 80ef 	beq.w	8000dc6 <__udivmoddi4+0x292>
 8000be8:	2600      	movs	r6, #0
 8000bea:	e9c5 0100 	strd	r0, r1, [r5]
 8000bee:	4630      	mov	r0, r6
 8000bf0:	4631      	mov	r1, r6
 8000bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf6:	fab3 f683 	clz	r6, r3
 8000bfa:	2e00      	cmp	r6, #0
 8000bfc:	d14a      	bne.n	8000c94 <__udivmoddi4+0x160>
 8000bfe:	428b      	cmp	r3, r1
 8000c00:	d302      	bcc.n	8000c08 <__udivmoddi4+0xd4>
 8000c02:	4282      	cmp	r2, r0
 8000c04:	f200 80f9 	bhi.w	8000dfa <__udivmoddi4+0x2c6>
 8000c08:	1a84      	subs	r4, r0, r2
 8000c0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c0e:	2001      	movs	r0, #1
 8000c10:	469e      	mov	lr, r3
 8000c12:	2d00      	cmp	r5, #0
 8000c14:	d0e0      	beq.n	8000bd8 <__udivmoddi4+0xa4>
 8000c16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c1a:	e7dd      	b.n	8000bd8 <__udivmoddi4+0xa4>
 8000c1c:	b902      	cbnz	r2, 8000c20 <__udivmoddi4+0xec>
 8000c1e:	deff      	udf	#255	; 0xff
 8000c20:	fab2 f282 	clz	r2, r2
 8000c24:	2a00      	cmp	r2, #0
 8000c26:	f040 8092 	bne.w	8000d4e <__udivmoddi4+0x21a>
 8000c2a:	eba1 010c 	sub.w	r1, r1, ip
 8000c2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c32:	fa1f fe8c 	uxth.w	lr, ip
 8000c36:	2601      	movs	r6, #1
 8000c38:	0c20      	lsrs	r0, r4, #16
 8000c3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000c42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c46:	fb0e f003 	mul.w	r0, lr, r3
 8000c4a:	4288      	cmp	r0, r1
 8000c4c:	d908      	bls.n	8000c60 <__udivmoddi4+0x12c>
 8000c4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000c52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c56:	d202      	bcs.n	8000c5e <__udivmoddi4+0x12a>
 8000c58:	4288      	cmp	r0, r1
 8000c5a:	f200 80cb 	bhi.w	8000df4 <__udivmoddi4+0x2c0>
 8000c5e:	4643      	mov	r3, r8
 8000c60:	1a09      	subs	r1, r1, r0
 8000c62:	b2a4      	uxth	r4, r4
 8000c64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c68:	fb07 1110 	mls	r1, r7, r0, r1
 8000c6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c70:	fb0e fe00 	mul.w	lr, lr, r0
 8000c74:	45a6      	cmp	lr, r4
 8000c76:	d908      	bls.n	8000c8a <__udivmoddi4+0x156>
 8000c78:	eb1c 0404 	adds.w	r4, ip, r4
 8000c7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c80:	d202      	bcs.n	8000c88 <__udivmoddi4+0x154>
 8000c82:	45a6      	cmp	lr, r4
 8000c84:	f200 80bb 	bhi.w	8000dfe <__udivmoddi4+0x2ca>
 8000c88:	4608      	mov	r0, r1
 8000c8a:	eba4 040e 	sub.w	r4, r4, lr
 8000c8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c92:	e79c      	b.n	8000bce <__udivmoddi4+0x9a>
 8000c94:	f1c6 0720 	rsb	r7, r6, #32
 8000c98:	40b3      	lsls	r3, r6
 8000c9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ca2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ca6:	fa01 f306 	lsl.w	r3, r1, r6
 8000caa:	431c      	orrs	r4, r3
 8000cac:	40f9      	lsrs	r1, r7
 8000cae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000cb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cba:	0c20      	lsrs	r0, r4, #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fb09 1118 	mls	r1, r9, r8, r1
 8000cc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cc8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ccc:	4288      	cmp	r0, r1
 8000cce:	fa02 f206 	lsl.w	r2, r2, r6
 8000cd2:	d90b      	bls.n	8000cec <__udivmoddi4+0x1b8>
 8000cd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cdc:	f080 8088 	bcs.w	8000df0 <__udivmoddi4+0x2bc>
 8000ce0:	4288      	cmp	r0, r1
 8000ce2:	f240 8085 	bls.w	8000df0 <__udivmoddi4+0x2bc>
 8000ce6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cea:	4461      	add	r1, ip
 8000cec:	1a09      	subs	r1, r1, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cf4:	fb09 1110 	mls	r1, r9, r0, r1
 8000cf8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cfc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d00:	458e      	cmp	lr, r1
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x1e2>
 8000d04:	eb1c 0101 	adds.w	r1, ip, r1
 8000d08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d0c:	d26c      	bcs.n	8000de8 <__udivmoddi4+0x2b4>
 8000d0e:	458e      	cmp	lr, r1
 8000d10:	d96a      	bls.n	8000de8 <__udivmoddi4+0x2b4>
 8000d12:	3802      	subs	r0, #2
 8000d14:	4461      	add	r1, ip
 8000d16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d1e:	eba1 010e 	sub.w	r1, r1, lr
 8000d22:	42a1      	cmp	r1, r4
 8000d24:	46c8      	mov	r8, r9
 8000d26:	46a6      	mov	lr, r4
 8000d28:	d356      	bcc.n	8000dd8 <__udivmoddi4+0x2a4>
 8000d2a:	d053      	beq.n	8000dd4 <__udivmoddi4+0x2a0>
 8000d2c:	b15d      	cbz	r5, 8000d46 <__udivmoddi4+0x212>
 8000d2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000d32:	eb61 010e 	sbc.w	r1, r1, lr
 8000d36:	fa01 f707 	lsl.w	r7, r1, r7
 8000d3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000d3e:	40f1      	lsrs	r1, r6
 8000d40:	431f      	orrs	r7, r3
 8000d42:	e9c5 7100 	strd	r7, r1, [r5]
 8000d46:	2600      	movs	r6, #0
 8000d48:	4631      	mov	r1, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	40d8      	lsrs	r0, r3
 8000d54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d58:	fa21 f303 	lsr.w	r3, r1, r3
 8000d5c:	4091      	lsls	r1, r2
 8000d5e:	4301      	orrs	r1, r0
 8000d60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d64:	fa1f fe8c 	uxth.w	lr, ip
 8000d68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000d70:	0c0b      	lsrs	r3, r1, #16
 8000d72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d76:	fb00 f60e 	mul.w	r6, r0, lr
 8000d7a:	429e      	cmp	r6, r3
 8000d7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x260>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d8a:	d22f      	bcs.n	8000dec <__udivmoddi4+0x2b8>
 8000d8c:	429e      	cmp	r6, r3
 8000d8e:	d92d      	bls.n	8000dec <__udivmoddi4+0x2b8>
 8000d90:	3802      	subs	r0, #2
 8000d92:	4463      	add	r3, ip
 8000d94:	1b9b      	subs	r3, r3, r6
 8000d96:	b289      	uxth	r1, r1
 8000d98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000da0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da4:	fb06 f30e 	mul.w	r3, r6, lr
 8000da8:	428b      	cmp	r3, r1
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x28a>
 8000dac:	eb1c 0101 	adds.w	r1, ip, r1
 8000db0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000db4:	d216      	bcs.n	8000de4 <__udivmoddi4+0x2b0>
 8000db6:	428b      	cmp	r3, r1
 8000db8:	d914      	bls.n	8000de4 <__udivmoddi4+0x2b0>
 8000dba:	3e02      	subs	r6, #2
 8000dbc:	4461      	add	r1, ip
 8000dbe:	1ac9      	subs	r1, r1, r3
 8000dc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000dc4:	e738      	b.n	8000c38 <__udivmoddi4+0x104>
 8000dc6:	462e      	mov	r6, r5
 8000dc8:	4628      	mov	r0, r5
 8000dca:	e705      	b.n	8000bd8 <__udivmoddi4+0xa4>
 8000dcc:	4606      	mov	r6, r0
 8000dce:	e6e3      	b.n	8000b98 <__udivmoddi4+0x64>
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	e6f8      	b.n	8000bc6 <__udivmoddi4+0x92>
 8000dd4:	454b      	cmp	r3, r9
 8000dd6:	d2a9      	bcs.n	8000d2c <__udivmoddi4+0x1f8>
 8000dd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ddc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000de0:	3801      	subs	r0, #1
 8000de2:	e7a3      	b.n	8000d2c <__udivmoddi4+0x1f8>
 8000de4:	4646      	mov	r6, r8
 8000de6:	e7ea      	b.n	8000dbe <__udivmoddi4+0x28a>
 8000de8:	4620      	mov	r0, r4
 8000dea:	e794      	b.n	8000d16 <__udivmoddi4+0x1e2>
 8000dec:	4640      	mov	r0, r8
 8000dee:	e7d1      	b.n	8000d94 <__udivmoddi4+0x260>
 8000df0:	46d0      	mov	r8, sl
 8000df2:	e77b      	b.n	8000cec <__udivmoddi4+0x1b8>
 8000df4:	3b02      	subs	r3, #2
 8000df6:	4461      	add	r1, ip
 8000df8:	e732      	b.n	8000c60 <__udivmoddi4+0x12c>
 8000dfa:	4630      	mov	r0, r6
 8000dfc:	e709      	b.n	8000c12 <__udivmoddi4+0xde>
 8000dfe:	4464      	add	r4, ip
 8000e00:	3802      	subs	r0, #2
 8000e02:	e742      	b.n	8000c8a <__udivmoddi4+0x156>

08000e04 <__aeabi_idiv0>:
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop

08000e08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e0e:	f000 fcaf 	bl	8001770 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e12:	f000 f83b 	bl	8000e8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e16:	f000 f969 	bl	80010ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000e1a:	f000 f947 	bl	80010ac <MX_DMA_Init>
  MX_DAC_Init();
 8000e1e:	f000 f89d 	bl	8000f5c <MX_DAC_Init>
  MX_USART2_UART_Init();
 8000e22:	f000 f919 	bl	8001058 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000e26:	f000 f8c3 	bl	8000fb0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //Activate DAC
  //HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
  //HAL_DAC_Start_DMA(hdac, Channel, pData, Length, Alignment)
  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, (uint32_t*)tri_val, N_SAMPLES, DAC_ALIGN_12B_R);
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	2364      	movs	r3, #100	; 0x64
 8000e30:	4a10      	ldr	r2, [pc, #64]	; (8000e74 <main+0x6c>)
 8000e32:	2100      	movs	r1, #0
 8000e34:	4810      	ldr	r0, [pc, #64]	; (8000e78 <main+0x70>)
 8000e36:	f000 fe65 	bl	8001b04 <HAL_DAC_Start_DMA>

  //Activate timer for signal generator
  HAL_TIM_Base_Start(&htim2);
 8000e3a:	4810      	ldr	r0, [pc, #64]	; (8000e7c <main+0x74>)
 8000e3c:	f002 fb10 	bl	8003460 <HAL_TIM_Base_Start>

  //Calculate waveforms
  init_waves();
 8000e40:	f000 fb5e 	bl	8001500 <init_waves>

  //Activate UART RX
  HAL_UART_Receive_IT (&huart2, Rx_data, 10);
 8000e44:	220a      	movs	r2, #10
 8000e46:	490e      	ldr	r1, [pc, #56]	; (8000e80 <main+0x78>)
 8000e48:	480e      	ldr	r0, [pc, #56]	; (8000e84 <main+0x7c>)
 8000e4a:	f003 f81c 	bl	8003e86 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(1000);
 8000e4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e52:	f000 fcff 	bl	8001854 <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000e56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e5a:	480b      	ldr	r0, [pc, #44]	; (8000e88 <main+0x80>)
 8000e5c:	f001 fe3d 	bl	8002ada <HAL_GPIO_TogglePin>
    if(Rx_data[0] == 'a')
 8000e60:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <main+0x78>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b61      	cmp	r3, #97	; 0x61
 8000e66:	d1f2      	bne.n	8000e4e <main+0x46>
    	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000e68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e6c:	4806      	ldr	r0, [pc, #24]	; (8000e88 <main+0x80>)
 8000e6e:	f001 fe34 	bl	8002ada <HAL_GPIO_TogglePin>
    HAL_Delay(1000);
 8000e72:	e7ec      	b.n	8000e4e <main+0x46>
 8000e74:	20000460 	.word	0x20000460
 8000e78:	2000003c 	.word	0x2000003c
 8000e7c:	200000b0 	.word	0x200000b0
 8000e80:	2000013c 	.word	0x2000013c
 8000e84:	200000f8 	.word	0x200000f8
 8000e88:	40020c00 	.word	0x40020c00

08000e8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b094      	sub	sp, #80	; 0x50
 8000e90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e92:	f107 0320 	add.w	r3, r7, #32
 8000e96:	2230      	movs	r2, #48	; 0x30
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f003 ffb6 	bl	8004e0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ea0:	f107 030c 	add.w	r3, r7, #12
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60bb      	str	r3, [r7, #8]
 8000eb4:	4b27      	ldr	r3, [pc, #156]	; (8000f54 <SystemClock_Config+0xc8>)
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	4a26      	ldr	r2, [pc, #152]	; (8000f54 <SystemClock_Config+0xc8>)
 8000eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ebe:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec0:	4b24      	ldr	r3, [pc, #144]	; (8000f54 <SystemClock_Config+0xc8>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ecc:	2300      	movs	r3, #0
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	4b21      	ldr	r3, [pc, #132]	; (8000f58 <SystemClock_Config+0xcc>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a20      	ldr	r2, [pc, #128]	; (8000f58 <SystemClock_Config+0xcc>)
 8000ed6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eda:	6013      	str	r3, [r2, #0]
 8000edc:	4b1e      	ldr	r3, [pc, #120]	; (8000f58 <SystemClock_Config+0xcc>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eec:	2301      	movs	r3, #1
 8000eee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ef0:	2310      	movs	r3, #16
 8000ef2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000efc:	2308      	movs	r3, #8
 8000efe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000f00:	2354      	movs	r3, #84	; 0x54
 8000f02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f04:	2302      	movs	r3, #2
 8000f06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f08:	2304      	movs	r3, #4
 8000f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0c:	f107 0320 	add.w	r3, r7, #32
 8000f10:	4618      	mov	r0, r3
 8000f12:	f001 fdfd 	bl	8002b10 <HAL_RCC_OscConfig>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f1c:	f000 f938 	bl	8001190 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f20:	230f      	movs	r3, #15
 8000f22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f24:	2302      	movs	r3, #2
 8000f26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f36:	f107 030c 	add.w	r3, r7, #12
 8000f3a:	2102      	movs	r1, #2
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f002 f85f 	bl	8003000 <HAL_RCC_ClockConfig>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f48:	f000 f922 	bl	8001190 <Error_Handler>
  }
}
 8000f4c:	bf00      	nop
 8000f4e:	3750      	adds	r7, #80	; 0x50
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40007000 	.word	0x40007000

08000f5c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f62:	463b      	mov	r3, r7
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <MX_DAC_Init+0x4c>)
 8000f6c:	4a0f      	ldr	r2, [pc, #60]	; (8000fac <MX_DAC_Init+0x50>)
 8000f6e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000f70:	480d      	ldr	r0, [pc, #52]	; (8000fa8 <MX_DAC_Init+0x4c>)
 8000f72:	f000 fda4 	bl	8001abe <HAL_DAC_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000f7c:	f000 f908 	bl	8001190 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000f80:	2324      	movs	r3, #36	; 0x24
 8000f82:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f84:	2300      	movs	r3, #0
 8000f86:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f88:	463b      	mov	r3, r7
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4806      	ldr	r0, [pc, #24]	; (8000fa8 <MX_DAC_Init+0x4c>)
 8000f90:	f000 ff08 	bl	8001da4 <HAL_DAC_ConfigChannel>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000f9a:	f000 f8f9 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	2000003c 	.word	0x2000003c
 8000fac:	40007400 	.word	0x40007400

08000fb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fb6:	f107 0308 	add.w	r3, r7, #8
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fc4:	463b      	mov	r3, r7
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000fcc:	4b1f      	ldr	r3, [pc, #124]	; (800104c <MX_TIM2_Init+0x9c>)
 8000fce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000fd4:	4b1d      	ldr	r3, [pc, #116]	; (800104c <MX_TIM2_Init+0x9c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fda:	4b1c      	ldr	r3, [pc, #112]	; (800104c <MX_TIM2_Init+0x9c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = (84000000/N_SAMPLES) / frequence;
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <MX_TIM2_Init+0xa0>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a1b      	ldr	r2, [pc, #108]	; (8001054 <MX_TIM2_Init+0xa4>)
 8000fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fea:	4a18      	ldr	r2, [pc, #96]	; (800104c <MX_TIM2_Init+0x9c>)
 8000fec:	60d3      	str	r3, [r2, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fee:	4b17      	ldr	r3, [pc, #92]	; (800104c <MX_TIM2_Init+0x9c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff4:	4b15      	ldr	r3, [pc, #84]	; (800104c <MX_TIM2_Init+0x9c>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ffa:	4814      	ldr	r0, [pc, #80]	; (800104c <MX_TIM2_Init+0x9c>)
 8000ffc:	f002 f9e0 	bl	80033c0 <HAL_TIM_Base_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001006:	f000 f8c3 	bl	8001190 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800100a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800100e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001010:	f107 0308 	add.w	r3, r7, #8
 8001014:	4619      	mov	r1, r3
 8001016:	480d      	ldr	r0, [pc, #52]	; (800104c <MX_TIM2_Init+0x9c>)
 8001018:	f002 fb92 	bl	8003740 <HAL_TIM_ConfigClockSource>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001022:	f000 f8b5 	bl	8001190 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001026:	2320      	movs	r3, #32
 8001028:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800102a:	2300      	movs	r3, #0
 800102c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800102e:	463b      	mov	r3, r7
 8001030:	4619      	mov	r1, r3
 8001032:	4806      	ldr	r0, [pc, #24]	; (800104c <MX_TIM2_Init+0x9c>)
 8001034:	f002 fdb8 	bl	8003ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800103e:	f000 f8a7 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001042:	bf00      	nop
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	200000b0 	.word	0x200000b0
 8001050:	20000010 	.word	0x20000010
 8001054:	000cd140 	.word	0x000cd140

08001058 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_USART2_UART_Init+0x4c>)
 800105e:	4a12      	ldr	r2, [pc, #72]	; (80010a8 <MX_USART2_UART_Init+0x50>)
 8001060:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <MX_USART2_UART_Init+0x4c>)
 8001064:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001068:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <MX_USART2_UART_Init+0x4c>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <MX_USART2_UART_Init+0x4c>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <MX_USART2_UART_Init+0x4c>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800107c:	4b09      	ldr	r3, [pc, #36]	; (80010a4 <MX_USART2_UART_Init+0x4c>)
 800107e:	220c      	movs	r2, #12
 8001080:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001082:	4b08      	ldr	r3, [pc, #32]	; (80010a4 <MX_USART2_UART_Init+0x4c>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <MX_USART2_UART_Init+0x4c>)
 800108a:	2200      	movs	r2, #0
 800108c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800108e:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_USART2_UART_Init+0x4c>)
 8001090:	f002 fe1a 	bl	8003cc8 <HAL_UART_Init>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800109a:	f000 f879 	bl	8001190 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	200000f8 	.word	0x200000f8
 80010a8:	40004400 	.word	0x40004400

080010ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
 80010b6:	4b0c      	ldr	r3, [pc, #48]	; (80010e8 <MX_DMA_Init+0x3c>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a0b      	ldr	r2, [pc, #44]	; (80010e8 <MX_DMA_Init+0x3c>)
 80010bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <MX_DMA_Init+0x3c>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ca:	607b      	str	r3, [r7, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	2010      	movs	r0, #16
 80010d4:	f000 fcbd 	bl	8001a52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80010d8:	2010      	movs	r0, #16
 80010da:	f000 fcd6 	bl	8001a8a <HAL_NVIC_EnableIRQ>

}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800

080010ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b088      	sub	sp, #32
 80010f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f2:	f107 030c 	add.w	r3, r7, #12
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
 8001100:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	4b20      	ldr	r3, [pc, #128]	; (8001188 <MX_GPIO_Init+0x9c>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a1f      	ldr	r2, [pc, #124]	; (8001188 <MX_GPIO_Init+0x9c>)
 800110c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <MX_GPIO_Init+0x9c>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	4b19      	ldr	r3, [pc, #100]	; (8001188 <MX_GPIO_Init+0x9c>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a18      	ldr	r2, [pc, #96]	; (8001188 <MX_GPIO_Init+0x9c>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b16      	ldr	r3, [pc, #88]	; (8001188 <MX_GPIO_Init+0x9c>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	603b      	str	r3, [r7, #0]
 800113e:	4b12      	ldr	r3, [pc, #72]	; (8001188 <MX_GPIO_Init+0x9c>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a11      	ldr	r2, [pc, #68]	; (8001188 <MX_GPIO_Init+0x9c>)
 8001144:	f043 0308 	orr.w	r3, r3, #8
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <MX_GPIO_Init+0x9c>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0308 	and.w	r3, r3, #8
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_ROUGE_Pin|LED_BLEU_Pin, GPIO_PIN_RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800115c:	480b      	ldr	r0, [pc, #44]	; (800118c <MX_GPIO_Init+0xa0>)
 800115e:	f001 fca3 	bl	8002aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_ROUGE_Pin LED_BLEU_Pin */
  GPIO_InitStruct.Pin = LED_ROUGE_Pin|LED_BLEU_Pin;
 8001162:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001166:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001168:	2301      	movs	r3, #1
 800116a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001174:	f107 030c 	add.w	r3, r7, #12
 8001178:	4619      	mov	r1, r3
 800117a:	4804      	ldr	r0, [pc, #16]	; (800118c <MX_GPIO_Init+0xa0>)
 800117c:	f001 faf8 	bl	8002770 <HAL_GPIO_Init>

}
 8001180:	bf00      	nop
 8001182:	3720      	adds	r7, #32
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40023800 	.word	0x40023800
 800118c:	40020c00 	.word	0x40020c00

08001190 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001194:	b672      	cpsid	i
}
 8001196:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001198:	e7fe      	b.n	8001198 <Error_Handler+0x8>
	...

0800119c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <HAL_MspInit+0x58>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011aa:	4a12      	ldr	r2, [pc, #72]	; (80011f4 <HAL_MspInit+0x58>)
 80011ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b0:	6453      	str	r3, [r2, #68]	; 0x44
 80011b2:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <HAL_MspInit+0x58>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	603b      	str	r3, [r7, #0]
 80011c2:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <HAL_MspInit+0x58>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	4a0b      	ldr	r2, [pc, #44]	; (80011f4 <HAL_MspInit+0x58>)
 80011c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011cc:	6413      	str	r3, [r2, #64]	; 0x40
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <HAL_MspInit+0x58>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	2005      	movs	r0, #5
 80011e0:	f000 fc37 	bl	8001a52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80011e4:	2005      	movs	r0, #5
 80011e6:	f000 fc50 	bl	8001a8a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40023800 	.word	0x40023800

080011f8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b08a      	sub	sp, #40	; 0x28
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a34      	ldr	r2, [pc, #208]	; (80012e8 <HAL_DAC_MspInit+0xf0>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d161      	bne.n	80012de <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	4b33      	ldr	r3, [pc, #204]	; (80012ec <HAL_DAC_MspInit+0xf4>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	4a32      	ldr	r2, [pc, #200]	; (80012ec <HAL_DAC_MspInit+0xf4>)
 8001224:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001228:	6413      	str	r3, [r2, #64]	; 0x40
 800122a:	4b30      	ldr	r3, [pc, #192]	; (80012ec <HAL_DAC_MspInit+0xf4>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	4b2c      	ldr	r3, [pc, #176]	; (80012ec <HAL_DAC_MspInit+0xf4>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a2b      	ldr	r2, [pc, #172]	; (80012ec <HAL_DAC_MspInit+0xf4>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b29      	ldr	r3, [pc, #164]	; (80012ec <HAL_DAC_MspInit+0xf4>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001252:	2310      	movs	r3, #16
 8001254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001256:	2303      	movs	r3, #3
 8001258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125e:	f107 0314 	add.w	r3, r7, #20
 8001262:	4619      	mov	r1, r3
 8001264:	4822      	ldr	r0, [pc, #136]	; (80012f0 <HAL_DAC_MspInit+0xf8>)
 8001266:	f001 fa83 	bl	8002770 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800126a:	4b22      	ldr	r3, [pc, #136]	; (80012f4 <HAL_DAC_MspInit+0xfc>)
 800126c:	4a22      	ldr	r2, [pc, #136]	; (80012f8 <HAL_DAC_MspInit+0x100>)
 800126e:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001270:	4b20      	ldr	r3, [pc, #128]	; (80012f4 <HAL_DAC_MspInit+0xfc>)
 8001272:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001276:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001278:	4b1e      	ldr	r3, [pc, #120]	; (80012f4 <HAL_DAC_MspInit+0xfc>)
 800127a:	2240      	movs	r2, #64	; 0x40
 800127c:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800127e:	4b1d      	ldr	r3, [pc, #116]	; (80012f4 <HAL_DAC_MspInit+0xfc>)
 8001280:	2200      	movs	r2, #0
 8001282:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001284:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <HAL_DAC_MspInit+0xfc>)
 8001286:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800128a:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800128c:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <HAL_DAC_MspInit+0xfc>)
 800128e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001292:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001294:	4b17      	ldr	r3, [pc, #92]	; (80012f4 <HAL_DAC_MspInit+0xfc>)
 8001296:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800129a:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 800129c:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <HAL_DAC_MspInit+0xfc>)
 800129e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012a2:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_HIGH;
 80012a4:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <HAL_DAC_MspInit+0xfc>)
 80012a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80012aa:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012ac:	4b11      	ldr	r3, [pc, #68]	; (80012f4 <HAL_DAC_MspInit+0xfc>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80012b2:	4810      	ldr	r0, [pc, #64]	; (80012f4 <HAL_DAC_MspInit+0xfc>)
 80012b4:	f000 fe5a 	bl	8001f6c <HAL_DMA_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 80012be:	f7ff ff67 	bl	8001190 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a0b      	ldr	r2, [pc, #44]	; (80012f4 <HAL_DAC_MspInit+0xfc>)
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	4a0a      	ldr	r2, [pc, #40]	; (80012f4 <HAL_DAC_MspInit+0xfc>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80012ce:	2200      	movs	r2, #0
 80012d0:	2100      	movs	r1, #0
 80012d2:	2036      	movs	r0, #54	; 0x36
 80012d4:	f000 fbbd 	bl	8001a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012d8:	2036      	movs	r0, #54	; 0x36
 80012da:	f000 fbd6 	bl	8001a8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80012de:	bf00      	nop
 80012e0:	3728      	adds	r7, #40	; 0x28
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40007400 	.word	0x40007400
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40020000 	.word	0x40020000
 80012f4:	20000050 	.word	0x20000050
 80012f8:	40026088 	.word	0x40026088

080012fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800130c:	d115      	bne.n	800133a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <HAL_TIM_Base_MspInit+0x48>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	4a0b      	ldr	r2, [pc, #44]	; (8001344 <HAL_TIM_Base_MspInit+0x48>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6413      	str	r3, [r2, #64]	; 0x40
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <HAL_TIM_Base_MspInit+0x48>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2100      	movs	r1, #0
 800132e:	201c      	movs	r0, #28
 8001330:	f000 fb8f 	bl	8001a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001334:	201c      	movs	r0, #28
 8001336:	f000 fba8 	bl	8001a8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40023800 	.word	0x40023800

08001348 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b08a      	sub	sp, #40	; 0x28
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	f107 0314 	add.w	r3, r7, #20
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a1d      	ldr	r2, [pc, #116]	; (80013dc <HAL_UART_MspInit+0x94>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d133      	bne.n	80013d2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <HAL_UART_MspInit+0x98>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	4a1b      	ldr	r2, [pc, #108]	; (80013e0 <HAL_UART_MspInit+0x98>)
 8001374:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001378:	6413      	str	r3, [r2, #64]	; 0x40
 800137a:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <HAL_UART_MspInit+0x98>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	4b15      	ldr	r3, [pc, #84]	; (80013e0 <HAL_UART_MspInit+0x98>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a14      	ldr	r2, [pc, #80]	; (80013e0 <HAL_UART_MspInit+0x98>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <HAL_UART_MspInit+0x98>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013a2:	230c      	movs	r3, #12
 80013a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a6:	2302      	movs	r3, #2
 80013a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ae:	2303      	movs	r3, #3
 80013b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013b2:	2307      	movs	r3, #7
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	4619      	mov	r1, r3
 80013bc:	4809      	ldr	r0, [pc, #36]	; (80013e4 <HAL_UART_MspInit+0x9c>)
 80013be:	f001 f9d7 	bl	8002770 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2100      	movs	r1, #0
 80013c6:	2026      	movs	r0, #38	; 0x26
 80013c8:	f000 fb43 	bl	8001a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013cc:	2026      	movs	r0, #38	; 0x26
 80013ce:	f000 fb5c 	bl	8001a8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013d2:	bf00      	nop
 80013d4:	3728      	adds	r7, #40	; 0x28
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40004400 	.word	0x40004400
 80013e0:	40023800 	.word	0x40023800
 80013e4:	40020000 	.word	0x40020000

080013e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013ec:	e7fe      	b.n	80013ec <NMI_Handler+0x4>

080013ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f2:	e7fe      	b.n	80013f2 <HardFault_Handler+0x4>

080013f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <MemManage_Handler+0x4>

080013fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fe:	e7fe      	b.n	80013fe <BusFault_Handler+0x4>

08001400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <UsageFault_Handler+0x4>

08001406 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr

08001414 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001434:	f000 f9ee 	bl	8001814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}

0800143c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001450:	4802      	ldr	r0, [pc, #8]	; (800145c <DMA1_Stream5_IRQHandler+0x10>)
 8001452:	f000 ff23 	bl	800229c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000050 	.word	0x20000050

08001460 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8001464:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001468:	4803      	ldr	r0, [pc, #12]	; (8001478 <TIM2_IRQHandler+0x18>)
 800146a:	f001 fb36 	bl	8002ada <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800146e:	4803      	ldr	r0, [pc, #12]	; (800147c <TIM2_IRQHandler+0x1c>)
 8001470:	f002 f85e 	bl	8003530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40020c00 	.word	0x40020c00
 800147c:	200000b0 	.word	0x200000b0

08001480 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	//HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
	frequence = 10000;
 8001484:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <USART2_IRQHandler+0x34>)
 8001486:	f242 7210 	movw	r2, #10000	; 0x2710
 800148a:	601a      	str	r2, [r3, #0]
	//htim2.Init.Period = (84000000/N_SAMPLES) / frequence;
	htim2.Instance->ARR = (84000000/N_SAMPLES) / frequence;
 800148c:	4b09      	ldr	r3, [pc, #36]	; (80014b4 <USART2_IRQHandler+0x34>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <USART2_IRQHandler+0x38>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4909      	ldr	r1, [pc, #36]	; (80014bc <USART2_IRQHandler+0x3c>)
 8001496:	fbb1 f2f2 	udiv	r2, r1, r2
 800149a:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_UART_Transmit(&huart2, packette, sizeof(packette)-1, 10);
 800149c:	230a      	movs	r3, #10
 800149e:	220c      	movs	r2, #12
 80014a0:	4907      	ldr	r1, [pc, #28]	; (80014c0 <USART2_IRQHandler+0x40>)
 80014a2:	4808      	ldr	r0, [pc, #32]	; (80014c4 <USART2_IRQHandler+0x44>)
 80014a4:	f002 fc5d 	bl	8003d62 <HAL_UART_Transmit>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014a8:	4806      	ldr	r0, [pc, #24]	; (80014c4 <USART2_IRQHandler+0x44>)
 80014aa:	f002 fd1d 	bl	8003ee8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	20000010 	.word	0x20000010
 80014b8:	200000b0 	.word	0x200000b0
 80014bc:	000cd140 	.word	0x000cd140
 80014c0:	20000000 	.word	0x20000000
 80014c4:	200000f8 	.word	0x200000f8

080014c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80014cc:	4802      	ldr	r0, [pc, #8]	; (80014d8 <TIM6_DAC_IRQHandler+0x10>)
 80014ce:	f000 fbe7 	bl	8001ca0 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	2000003c 	.word	0x2000003c

080014dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <SystemInit+0x20>)
 80014e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014e6:	4a05      	ldr	r2, [pc, #20]	; (80014fc <SystemInit+0x20>)
 80014e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <init_waves>:
//

#include "../../Inc/init.h"
#include "../../Inc/waves.h"

void init_waves(void){
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
    calcsin();
 8001504:	f000 f808 	bl	8001518 <calcsin>
    calcsaw();
 8001508:	f000 f85e 	bl	80015c8 <calcsaw>
    calctri();
 800150c:	f000 f88a 	bl	8001624 <calctri>
    calcsquare();
 8001510:	f000 f8da 	bl	80016c8 <calcsquare>
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}

08001518 <calcsin>:
unsigned int tri_val[N_SAMPLES];
unsigned int square_val[N_SAMPLES];


void calcsin (void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
    for (int i=0; i<N_SAMPLES; i++)
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	e03a      	b.n	800159a <calcsin+0x82>
    {
        sine_val[i] = ((sin(i*2*PI/N_SAMPLES) + 1)*(4096/2));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	005b      	lsls	r3, r3, #1
 8001528:	4618      	mov	r0, r3
 800152a:	f7fe ff9f 	bl	800046c <__aeabi_i2d>
 800152e:	a324      	add	r3, pc, #144	; (adr r3, 80015c0 <calcsin+0xa8>)
 8001530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001534:	f7ff f804 	bl	8000540 <__aeabi_dmul>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4610      	mov	r0, r2
 800153e:	4619      	mov	r1, r3
 8001540:	f04f 0200 	mov.w	r2, #0
 8001544:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <calcsin+0x98>)
 8001546:	f7ff f925 	bl	8000794 <__aeabi_ddiv>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	ec43 2b17 	vmov	d7, r2, r3
 8001552:	eeb0 0a47 	vmov.f32	s0, s14
 8001556:	eef0 0a67 	vmov.f32	s1, s15
 800155a:	f003 fc61 	bl	8004e20 <sin>
 800155e:	ec51 0b10 	vmov	r0, r1, d0
 8001562:	f04f 0200 	mov.w	r2, #0
 8001566:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <calcsin+0x9c>)
 8001568:	f7fe fe34 	bl	80001d4 <__adddf3>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4610      	mov	r0, r2
 8001572:	4619      	mov	r1, r3
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	4b0f      	ldr	r3, [pc, #60]	; (80015b8 <calcsin+0xa0>)
 800157a:	f7fe ffe1 	bl	8000540 <__aeabi_dmul>
 800157e:	4602      	mov	r2, r0
 8001580:	460b      	mov	r3, r1
 8001582:	4610      	mov	r0, r2
 8001584:	4619      	mov	r1, r3
 8001586:	f7ff fa9d 	bl	8000ac4 <__aeabi_d2uiz>
 800158a:	4602      	mov	r2, r0
 800158c:	490b      	ldr	r1, [pc, #44]	; (80015bc <calcsin+0xa4>)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i=0; i<N_SAMPLES; i++)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3301      	adds	r3, #1
 8001598:	607b      	str	r3, [r7, #4]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b63      	cmp	r3, #99	; 0x63
 800159e:	ddc1      	ble.n	8001524 <calcsin+0xc>
    }
}
 80015a0:	bf00      	nop
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	f3af 8000 	nop.w
 80015b0:	40590000 	.word	0x40590000
 80015b4:	3ff00000 	.word	0x3ff00000
 80015b8:	40a00000 	.word	0x40a00000
 80015bc:	20000140 	.word	0x20000140
 80015c0:	4d12d84a 	.word	0x4d12d84a
 80015c4:	400921fb 	.word	0x400921fb

080015c8 <calcsaw>:

void calcsaw (void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
    for (int j=0; j<N_SAMPLES; j++)
 80015ce:	2300      	movs	r3, #0
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	e017      	b.n	8001604 <calcsaw+0x3c>
    {
        saw_val[j] = ((float)j/N_SAMPLES)*(4096);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	ee07 3a90 	vmov	s15, r3
 80015da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015de:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001618 <calcsaw+0x50>
 80015e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015e6:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 800161c <calcsaw+0x54>
 80015ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015f2:	ee17 1a90 	vmov	r1, s15
 80015f6:	4a0a      	ldr	r2, [pc, #40]	; (8001620 <calcsaw+0x58>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int j=0; j<N_SAMPLES; j++)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3301      	adds	r3, #1
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b63      	cmp	r3, #99	; 0x63
 8001608:	dde4      	ble.n	80015d4 <calcsaw+0xc>
    }
}
 800160a:	bf00      	nop
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	42c80000 	.word	0x42c80000
 800161c:	45800000 	.word	0x45800000
 8001620:	200002d0 	.word	0x200002d0

08001624 <calctri>:

void calctri (void)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
    for (int k=0; k<N_SAMPLES/2; k++)
 800162a:	2300      	movs	r3, #0
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	e017      	b.n	8001660 <calctri+0x3c>
    {
        tri_val[k] = ((float)k/(N_SAMPLES/2))*(4095);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	ee07 3a90 	vmov	s15, r3
 8001636:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800163a:	eddf 6a20 	vldr	s13, [pc, #128]	; 80016bc <calctri+0x98>
 800163e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001642:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80016c0 <calctri+0x9c>
 8001646:	ee67 7a87 	vmul.f32	s15, s15, s14
 800164a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800164e:	ee17 1a90 	vmov	r1, s15
 8001652:	4a1c      	ldr	r2, [pc, #112]	; (80016c4 <calctri+0xa0>)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int k=0; k<N_SAMPLES/2; k++)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	3301      	adds	r3, #1
 800165e:	607b      	str	r3, [r7, #4]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b31      	cmp	r3, #49	; 0x31
 8001664:	dde4      	ble.n	8001630 <calctri+0xc>
    }
    for (int k=N_SAMPLES/2; k<N_SAMPLES; k++)
 8001666:	2332      	movs	r3, #50	; 0x32
 8001668:	603b      	str	r3, [r7, #0]
 800166a:	e01c      	b.n	80016a6 <calctri+0x82>
    {
        tri_val[k] = (1-((float)(k-(N_SAMPLES/2)))/(N_SAMPLES/2))*(4095);
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	3b32      	subs	r3, #50	; 0x32
 8001670:	ee07 3a90 	vmov	s15, r3
 8001674:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001678:	eddf 6a10 	vldr	s13, [pc, #64]	; 80016bc <calctri+0x98>
 800167c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001680:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001684:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001688:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80016c0 <calctri+0x9c>
 800168c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001690:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001694:	ee17 1a90 	vmov	r1, s15
 8001698:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <calctri+0xa0>)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int k=N_SAMPLES/2; k<N_SAMPLES; k++)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	3301      	adds	r3, #1
 80016a4:	603b      	str	r3, [r7, #0]
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	2b63      	cmp	r3, #99	; 0x63
 80016aa:	dddf      	ble.n	800166c <calctri+0x48>
    }
}
 80016ac:	bf00      	nop
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	42480000 	.word	0x42480000
 80016c0:	457ff000 	.word	0x457ff000
 80016c4:	20000460 	.word	0x20000460

080016c8 <calcsquare>:

void calcsquare (void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
    for (int h=0; h<N_SAMPLES/2; h++)
 80016ce:	2300      	movs	r3, #0
 80016d0:	607b      	str	r3, [r7, #4]
 80016d2:	e008      	b.n	80016e6 <calcsquare+0x1e>
    {
        square_val[h] = 4095;
 80016d4:	4a10      	ldr	r2, [pc, #64]	; (8001718 <calcsquare+0x50>)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f640 71ff 	movw	r1, #4095	; 0xfff
 80016dc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int h=0; h<N_SAMPLES/2; h++)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3301      	adds	r3, #1
 80016e4:	607b      	str	r3, [r7, #4]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b31      	cmp	r3, #49	; 0x31
 80016ea:	ddf3      	ble.n	80016d4 <calcsquare+0xc>
    }
    for (int h=N_SAMPLES/2; h<N_SAMPLES; h++)
 80016ec:	2332      	movs	r3, #50	; 0x32
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	e007      	b.n	8001702 <calcsquare+0x3a>
    {
        square_val[h] = 0;
 80016f2:	4a09      	ldr	r2, [pc, #36]	; (8001718 <calcsquare+0x50>)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	2100      	movs	r1, #0
 80016f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int h=N_SAMPLES/2; h<N_SAMPLES; h++)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	3301      	adds	r3, #1
 8001700:	603b      	str	r3, [r7, #0]
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	2b63      	cmp	r3, #99	; 0x63
 8001706:	ddf4      	ble.n	80016f2 <calcsquare+0x2a>
    }
 8001708:	bf00      	nop
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	200005f0 	.word	0x200005f0

0800171c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800171c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001754 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001720:	480d      	ldr	r0, [pc, #52]	; (8001758 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001722:	490e      	ldr	r1, [pc, #56]	; (800175c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001724:	4a0e      	ldr	r2, [pc, #56]	; (8001760 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001728:	e002      	b.n	8001730 <LoopCopyDataInit>

0800172a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800172a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800172c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172e:	3304      	adds	r3, #4

08001730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001734:	d3f9      	bcc.n	800172a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001736:	4a0b      	ldr	r2, [pc, #44]	; (8001764 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001738:	4c0b      	ldr	r4, [pc, #44]	; (8001768 <LoopFillZerobss+0x26>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800173c:	e001      	b.n	8001742 <LoopFillZerobss>

0800173e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001740:	3204      	adds	r2, #4

08001742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001744:	d3fb      	bcc.n	800173e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001746:	f7ff fec9 	bl	80014dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800174a:	f003 fb3b 	bl	8004dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800174e:	f7ff fb5b 	bl	8000e08 <main>
  bx  lr    
 8001752:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001754:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001758:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800175c:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001760:	080060d8 	.word	0x080060d8
  ldr r2, =_sbss
 8001764:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001768:	20000784 	.word	0x20000784

0800176c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800176c:	e7fe      	b.n	800176c <ADC_IRQHandler>
	...

08001770 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001774:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <HAL_Init+0x40>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a0d      	ldr	r2, [pc, #52]	; (80017b0 <HAL_Init+0x40>)
 800177a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800177e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001780:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <HAL_Init+0x40>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <HAL_Init+0x40>)
 8001786:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800178a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <HAL_Init+0x40>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a07      	ldr	r2, [pc, #28]	; (80017b0 <HAL_Init+0x40>)
 8001792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001796:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001798:	2003      	movs	r0, #3
 800179a:	f000 f94f 	bl	8001a3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800179e:	200f      	movs	r0, #15
 80017a0:	f000 f808 	bl	80017b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017a4:	f7ff fcfa 	bl	800119c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40023c00 	.word	0x40023c00

080017b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <HAL_InitTick+0x54>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_InitTick+0x58>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	4619      	mov	r1, r3
 80017c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 f967 	bl	8001aa6 <HAL_SYSTICK_Config>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e00e      	b.n	8001800 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b0f      	cmp	r3, #15
 80017e6:	d80a      	bhi.n	80017fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e8:	2200      	movs	r2, #0
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	f04f 30ff 	mov.w	r0, #4294967295
 80017f0:	f000 f92f 	bl	8001a52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f4:	4a06      	ldr	r2, [pc, #24]	; (8001810 <HAL_InitTick+0x5c>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
 80017fc:	e000      	b.n	8001800 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
}
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000014 	.word	0x20000014
 800180c:	2000001c 	.word	0x2000001c
 8001810:	20000018 	.word	0x20000018

08001814 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <HAL_IncTick+0x20>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	461a      	mov	r2, r3
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_IncTick+0x24>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4413      	add	r3, r2
 8001824:	4a04      	ldr	r2, [pc, #16]	; (8001838 <HAL_IncTick+0x24>)
 8001826:	6013      	str	r3, [r2, #0]
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	2000001c 	.word	0x2000001c
 8001838:	20000780 	.word	0x20000780

0800183c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  return uwTick;
 8001840:	4b03      	ldr	r3, [pc, #12]	; (8001850 <HAL_GetTick+0x14>)
 8001842:	681b      	ldr	r3, [r3, #0]
}
 8001844:	4618      	mov	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	20000780 	.word	0x20000780

08001854 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800185c:	f7ff ffee 	bl	800183c <HAL_GetTick>
 8001860:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800186c:	d005      	beq.n	800187a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800186e:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <HAL_Delay+0x44>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4413      	add	r3, r2
 8001878:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800187a:	bf00      	nop
 800187c:	f7ff ffde 	bl	800183c <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	429a      	cmp	r2, r3
 800188a:	d8f7      	bhi.n	800187c <HAL_Delay+0x28>
  {
  }
}
 800188c:	bf00      	nop
 800188e:	bf00      	nop
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	2000001c 	.word	0x2000001c

0800189c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <__NVIC_SetPriorityGrouping+0x44>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018b8:	4013      	ands	r3, r2
 80018ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ce:	4a04      	ldr	r2, [pc, #16]	; (80018e0 <__NVIC_SetPriorityGrouping+0x44>)
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	60d3      	str	r3, [r2, #12]
}
 80018d4:	bf00      	nop
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e8:	4b04      	ldr	r3, [pc, #16]	; (80018fc <__NVIC_GetPriorityGrouping+0x18>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	0a1b      	lsrs	r3, r3, #8
 80018ee:	f003 0307 	and.w	r3, r3, #7
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	2b00      	cmp	r3, #0
 8001910:	db0b      	blt.n	800192a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	f003 021f 	and.w	r2, r3, #31
 8001918:	4907      	ldr	r1, [pc, #28]	; (8001938 <__NVIC_EnableIRQ+0x38>)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	095b      	lsrs	r3, r3, #5
 8001920:	2001      	movs	r0, #1
 8001922:	fa00 f202 	lsl.w	r2, r0, r2
 8001926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	e000e100 	.word	0xe000e100

0800193c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	6039      	str	r1, [r7, #0]
 8001946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194c:	2b00      	cmp	r3, #0
 800194e:	db0a      	blt.n	8001966 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	b2da      	uxtb	r2, r3
 8001954:	490c      	ldr	r1, [pc, #48]	; (8001988 <__NVIC_SetPriority+0x4c>)
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	0112      	lsls	r2, r2, #4
 800195c:	b2d2      	uxtb	r2, r2
 800195e:	440b      	add	r3, r1
 8001960:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001964:	e00a      	b.n	800197c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	b2da      	uxtb	r2, r3
 800196a:	4908      	ldr	r1, [pc, #32]	; (800198c <__NVIC_SetPriority+0x50>)
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	f003 030f 	and.w	r3, r3, #15
 8001972:	3b04      	subs	r3, #4
 8001974:	0112      	lsls	r2, r2, #4
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	440b      	add	r3, r1
 800197a:	761a      	strb	r2, [r3, #24]
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	e000e100 	.word	0xe000e100
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001990:	b480      	push	{r7}
 8001992:	b089      	sub	sp, #36	; 0x24
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f1c3 0307 	rsb	r3, r3, #7
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	bf28      	it	cs
 80019ae:	2304      	movcs	r3, #4
 80019b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	3304      	adds	r3, #4
 80019b6:	2b06      	cmp	r3, #6
 80019b8:	d902      	bls.n	80019c0 <NVIC_EncodePriority+0x30>
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	3b03      	subs	r3, #3
 80019be:	e000      	b.n	80019c2 <NVIC_EncodePriority+0x32>
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c4:	f04f 32ff 	mov.w	r2, #4294967295
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	43da      	mvns	r2, r3
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	401a      	ands	r2, r3
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d8:	f04f 31ff 	mov.w	r1, #4294967295
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	fa01 f303 	lsl.w	r3, r1, r3
 80019e2:	43d9      	mvns	r1, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e8:	4313      	orrs	r3, r2
         );
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3724      	adds	r7, #36	; 0x24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
	...

080019f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3b01      	subs	r3, #1
 8001a04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a08:	d301      	bcc.n	8001a0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e00f      	b.n	8001a2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a0e:	4a0a      	ldr	r2, [pc, #40]	; (8001a38 <SysTick_Config+0x40>)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a16:	210f      	movs	r1, #15
 8001a18:	f04f 30ff 	mov.w	r0, #4294967295
 8001a1c:	f7ff ff8e 	bl	800193c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a20:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <SysTick_Config+0x40>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a26:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <SysTick_Config+0x40>)
 8001a28:	2207      	movs	r2, #7
 8001a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	e000e010 	.word	0xe000e010

08001a3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff ff29 	bl	800189c <__NVIC_SetPriorityGrouping>
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b086      	sub	sp, #24
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	4603      	mov	r3, r0
 8001a5a:	60b9      	str	r1, [r7, #8]
 8001a5c:	607a      	str	r2, [r7, #4]
 8001a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a64:	f7ff ff3e 	bl	80018e4 <__NVIC_GetPriorityGrouping>
 8001a68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	68b9      	ldr	r1, [r7, #8]
 8001a6e:	6978      	ldr	r0, [r7, #20]
 8001a70:	f7ff ff8e 	bl	8001990 <NVIC_EncodePriority>
 8001a74:	4602      	mov	r2, r0
 8001a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff5d 	bl	800193c <__NVIC_SetPriority>
}
 8001a82:	bf00      	nop
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	4603      	mov	r3, r0
 8001a92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ff31 	bl	8001900 <__NVIC_EnableIRQ>
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff ffa2 	bl	80019f8 <SysTick_Config>
 8001ab4:	4603      	mov	r3, r0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d101      	bne.n	8001ad0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e014      	b.n	8001afa <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	791b      	ldrb	r3, [r3, #4]
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d105      	bne.n	8001ae6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff fb89 	bl	80011f8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2202      	movs	r2, #2
 8001aea:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
 8001b10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b12:	2300      	movs	r3, #0
 8001b14:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	795b      	ldrb	r3, [r3, #5]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d101      	bne.n	8001b26 <HAL_DAC_Start_DMA+0x22>
 8001b22:	2302      	movs	r3, #2
 8001b24:	e0ab      	b.n	8001c7e <HAL_DAC_Start_DMA+0x17a>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2202      	movs	r2, #2
 8001b30:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d12f      	bne.n	8001b98 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	4a52      	ldr	r2, [pc, #328]	; (8001c88 <HAL_DAC_Start_DMA+0x184>)
 8001b3e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	4a51      	ldr	r2, [pc, #324]	; (8001c8c <HAL_DAC_Start_DMA+0x188>)
 8001b46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	4a50      	ldr	r2, [pc, #320]	; (8001c90 <HAL_DAC_Start_DMA+0x18c>)
 8001b4e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001b5e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001b60:	6a3b      	ldr	r3, [r7, #32]
 8001b62:	2b08      	cmp	r3, #8
 8001b64:	d013      	beq.n	8001b8e <HAL_DAC_Start_DMA+0x8a>
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	2b08      	cmp	r3, #8
 8001b6a:	d845      	bhi.n	8001bf8 <HAL_DAC_Start_DMA+0xf4>
 8001b6c:	6a3b      	ldr	r3, [r7, #32]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_DAC_Start_DMA+0x76>
 8001b72:	6a3b      	ldr	r3, [r7, #32]
 8001b74:	2b04      	cmp	r3, #4
 8001b76:	d005      	beq.n	8001b84 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001b78:	e03e      	b.n	8001bf8 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	3308      	adds	r3, #8
 8001b80:	613b      	str	r3, [r7, #16]
        break;
 8001b82:	e03c      	b.n	8001bfe <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	330c      	adds	r3, #12
 8001b8a:	613b      	str	r3, [r7, #16]
        break;
 8001b8c:	e037      	b.n	8001bfe <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	3310      	adds	r3, #16
 8001b94:	613b      	str	r3, [r7, #16]
        break;
 8001b96:	e032      	b.n	8001bfe <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	4a3d      	ldr	r2, [pc, #244]	; (8001c94 <HAL_DAC_Start_DMA+0x190>)
 8001b9e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	4a3c      	ldr	r2, [pc, #240]	; (8001c98 <HAL_DAC_Start_DMA+0x194>)
 8001ba6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	4a3b      	ldr	r2, [pc, #236]	; (8001c9c <HAL_DAC_Start_DMA+0x198>)
 8001bae:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001bbe:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001bc0:	6a3b      	ldr	r3, [r7, #32]
 8001bc2:	2b08      	cmp	r3, #8
 8001bc4:	d013      	beq.n	8001bee <HAL_DAC_Start_DMA+0xea>
 8001bc6:	6a3b      	ldr	r3, [r7, #32]
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	d817      	bhi.n	8001bfc <HAL_DAC_Start_DMA+0xf8>
 8001bcc:	6a3b      	ldr	r3, [r7, #32]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <HAL_DAC_Start_DMA+0xd6>
 8001bd2:	6a3b      	ldr	r3, [r7, #32]
 8001bd4:	2b04      	cmp	r3, #4
 8001bd6:	d005      	beq.n	8001be4 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001bd8:	e010      	b.n	8001bfc <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	3314      	adds	r3, #20
 8001be0:	613b      	str	r3, [r7, #16]
        break;
 8001be2:	e00c      	b.n	8001bfe <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	3318      	adds	r3, #24
 8001bea:	613b      	str	r3, [r7, #16]
        break;
 8001bec:	e007      	b.n	8001bfe <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	331c      	adds	r3, #28
 8001bf4:	613b      	str	r3, [r7, #16]
        break;
 8001bf6:	e002      	b.n	8001bfe <HAL_DAC_Start_DMA+0xfa>
        break;
 8001bf8:	bf00      	nop
 8001bfa:	e000      	b.n	8001bfe <HAL_DAC_Start_DMA+0xfa>
        break;
 8001bfc:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d111      	bne.n	8001c28 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c12:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6898      	ldr	r0, [r3, #8]
 8001c18:	6879      	ldr	r1, [r7, #4]
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	f000 fa53 	bl	80020c8 <HAL_DMA_Start_IT>
 8001c22:	4603      	mov	r3, r0
 8001c24:	75fb      	strb	r3, [r7, #23]
 8001c26:	e010      	b.n	8001c4a <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001c36:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	68d8      	ldr	r0, [r3, #12]
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	f000 fa41 	bl	80020c8 <HAL_DMA_Start_IT>
 8001c46:	4603      	mov	r3, r0
 8001c48:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001c50:	7dfb      	ldrb	r3, [r7, #23]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d10c      	bne.n	8001c70 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6819      	ldr	r1, [r3, #0]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	f003 0310 	and.w	r3, r3, #16
 8001c62:	2201      	movs	r2, #1
 8001c64:	409a      	lsls	r2, r3
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	e005      	b.n	8001c7c <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	f043 0204 	orr.w	r2, r3, #4
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001c7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	08001e43 	.word	0x08001e43
 8001c8c:	08001e65 	.word	0x08001e65
 8001c90:	08001e81 	.word	0x08001e81
 8001c94:	08001eff 	.word	0x08001eff
 8001c98:	08001f21 	.word	0x08001f21
 8001c9c:	08001f3d 	.word	0x08001f3d

08001ca0 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cb6:	d120      	bne.n	8001cfa <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cc6:	d118      	bne.n	8001cfa <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2204      	movs	r2, #4
 8001ccc:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	f043 0201 	orr.w	r2, r3, #1
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ce2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cf2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f84b 	bl	8001d90 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d08:	d120      	bne.n	8001d4c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d18:	d118      	bne.n	8001d4c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2204      	movs	r2, #4
 8001d1e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	f043 0202 	orr.w	r2, r3, #2
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001d34:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001d44:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f8cf 	bl	8001eea <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8001d4c:	bf00      	nop
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b087      	sub	sp, #28
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	795b      	ldrb	r3, [r3, #5]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d101      	bne.n	8001dbc <HAL_DAC_ConfigChannel+0x18>
 8001db8:	2302      	movs	r3, #2
 8001dba:	e03c      	b.n	8001e36 <HAL_DAC_ConfigChannel+0x92>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f003 0310 	and.w	r3, r3, #16
 8001dd6:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	4013      	ands	r3, r2
 8001de4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f003 0310 	and.w	r3, r3, #16
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6819      	ldr	r1, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f003 0310 	and.w	r3, r3, #16
 8001e18:	22c0      	movs	r2, #192	; 0xc0
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43da      	mvns	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	400a      	ands	r2, r1
 8001e26:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	371c      	adds	r7, #28
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b084      	sub	sp, #16
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e4e:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001e50:	68f8      	ldr	r0, [r7, #12]
 8001e52:	f7ff ff7f 	bl	8001d54 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	711a      	strb	r2, [r3, #4]
}
 8001e5c:	bf00      	nop
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e70:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001e72:	68f8      	ldr	r0, [r7, #12]
 8001e74:	f7ff ff78 	bl	8001d68 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001e78:	bf00      	nop
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e8c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	f043 0204 	orr.w	r2, r3, #4
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f7ff ff6e 	bl	8001d7c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	711a      	strb	r2, [r3, #4]
}
 8001ea6:	bf00      	nop
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001eca:	bf00      	nop
 8001ecc:	370c      	adds	r7, #12
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b084      	sub	sp, #16
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f0a:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	f7ff ffce 	bl	8001eae <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2201      	movs	r2, #1
 8001f16:	711a      	strb	r2, [r3, #4]
}
 8001f18:	bf00      	nop
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f2c:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f7ff ffc7 	bl	8001ec2 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001f34:	bf00      	nop
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b084      	sub	sp, #16
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f48:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	f043 0204 	orr.w	r2, r3, #4
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	f7ff ffbd 	bl	8001ed6 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	711a      	strb	r2, [r3, #4]
}
 8001f62:	bf00      	nop
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f74:	2300      	movs	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f78:	f7ff fc60 	bl	800183c <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d101      	bne.n	8001f88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e099      	b.n	80020bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2202      	movs	r2, #2
 8001f8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 0201 	bic.w	r2, r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fa8:	e00f      	b.n	8001fca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001faa:	f7ff fc47 	bl	800183c <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b05      	cmp	r3, #5
 8001fb6:	d908      	bls.n	8001fca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2220      	movs	r2, #32
 8001fbc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2203      	movs	r2, #3
 8001fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e078      	b.n	80020bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d1e8      	bne.n	8001faa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	4b38      	ldr	r3, [pc, #224]	; (80020c4 <HAL_DMA_Init+0x158>)
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ff6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002002:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800200e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6a1b      	ldr	r3, [r3, #32]
 8002014:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002016:	697a      	ldr	r2, [r7, #20]
 8002018:	4313      	orrs	r3, r2
 800201a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002020:	2b04      	cmp	r3, #4
 8002022:	d107      	bne.n	8002034 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202c:	4313      	orrs	r3, r2
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	4313      	orrs	r3, r2
 8002032:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f023 0307 	bic.w	r3, r3, #7
 800204a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	4313      	orrs	r3, r2
 8002054:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	2b04      	cmp	r3, #4
 800205c:	d117      	bne.n	800208e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	4313      	orrs	r3, r2
 8002066:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206c:	2b00      	cmp	r3, #0
 800206e:	d00e      	beq.n	800208e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 fb01 	bl	8002678 <DMA_CheckFifoParam>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d008      	beq.n	800208e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2240      	movs	r2, #64	; 0x40
 8002080:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2201      	movs	r2, #1
 8002086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800208a:	2301      	movs	r3, #1
 800208c:	e016      	b.n	80020bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 fab8 	bl	800260c <DMA_CalcBaseAndBitshift>
 800209c:	4603      	mov	r3, r0
 800209e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a4:	223f      	movs	r2, #63	; 0x3f
 80020a6:	409a      	lsls	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020ba:	2300      	movs	r3, #0
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	f010803f 	.word	0xf010803f

080020c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
 80020d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020d6:	2300      	movs	r3, #0
 80020d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d101      	bne.n	80020ee <HAL_DMA_Start_IT+0x26>
 80020ea:	2302      	movs	r3, #2
 80020ec:	e040      	b.n	8002170 <HAL_DMA_Start_IT+0xa8>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d12f      	bne.n	8002162 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2202      	movs	r2, #2
 8002106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	68b9      	ldr	r1, [r7, #8]
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 fa4a 	bl	80025b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002120:	223f      	movs	r2, #63	; 0x3f
 8002122:	409a      	lsls	r2, r3
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 0216 	orr.w	r2, r2, #22
 8002136:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213c:	2b00      	cmp	r3, #0
 800213e:	d007      	beq.n	8002150 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f042 0208 	orr.w	r2, r2, #8
 800214e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 0201 	orr.w	r2, r2, #1
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	e005      	b.n	800216e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800216a:	2302      	movs	r3, #2
 800216c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800216e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002184:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002186:	f7ff fb59 	bl	800183c <HAL_GetTick>
 800218a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d008      	beq.n	80021aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2280      	movs	r2, #128	; 0x80
 800219c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e052      	b.n	8002250 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 0216 	bic.w	r2, r2, #22
 80021b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	695a      	ldr	r2, [r3, #20]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d103      	bne.n	80021da <HAL_DMA_Abort+0x62>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d007      	beq.n	80021ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0208 	bic.w	r2, r2, #8
 80021e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0201 	bic.w	r2, r2, #1
 80021f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021fa:	e013      	b.n	8002224 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021fc:	f7ff fb1e 	bl	800183c <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b05      	cmp	r3, #5
 8002208:	d90c      	bls.n	8002224 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2220      	movs	r2, #32
 800220e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2203      	movs	r2, #3
 8002214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e015      	b.n	8002250 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1e4      	bne.n	80021fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002236:	223f      	movs	r2, #63	; 0x3f
 8002238:	409a      	lsls	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d004      	beq.n	8002276 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2280      	movs	r2, #128	; 0x80
 8002270:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e00c      	b.n	8002290 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2205      	movs	r2, #5
 800227a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0201 	bic.w	r2, r2, #1
 800228c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022a8:	4b8e      	ldr	r3, [pc, #568]	; (80024e4 <HAL_DMA_IRQHandler+0x248>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a8e      	ldr	r2, [pc, #568]	; (80024e8 <HAL_DMA_IRQHandler+0x24c>)
 80022ae:	fba2 2303 	umull	r2, r3, r2, r3
 80022b2:	0a9b      	lsrs	r3, r3, #10
 80022b4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c6:	2208      	movs	r2, #8
 80022c8:	409a      	lsls	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	4013      	ands	r3, r2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d01a      	beq.n	8002308 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d013      	beq.n	8002308 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0204 	bic.w	r2, r2, #4
 80022ee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f4:	2208      	movs	r2, #8
 80022f6:	409a      	lsls	r2, r3
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002300:	f043 0201 	orr.w	r2, r3, #1
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230c:	2201      	movs	r2, #1
 800230e:	409a      	lsls	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	4013      	ands	r3, r2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d012      	beq.n	800233e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	695b      	ldr	r3, [r3, #20]
 800231e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00b      	beq.n	800233e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800232a:	2201      	movs	r2, #1
 800232c:	409a      	lsls	r2, r3
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002336:	f043 0202 	orr.w	r2, r3, #2
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002342:	2204      	movs	r2, #4
 8002344:	409a      	lsls	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	4013      	ands	r3, r2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d012      	beq.n	8002374 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00b      	beq.n	8002374 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002360:	2204      	movs	r2, #4
 8002362:	409a      	lsls	r2, r3
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800236c:	f043 0204 	orr.w	r2, r3, #4
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002378:	2210      	movs	r2, #16
 800237a:	409a      	lsls	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4013      	ands	r3, r2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d043      	beq.n	800240c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d03c      	beq.n	800240c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002396:	2210      	movs	r2, #16
 8002398:	409a      	lsls	r2, r3
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d018      	beq.n	80023de <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d108      	bne.n	80023cc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d024      	beq.n	800240c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	4798      	blx	r3
 80023ca:	e01f      	b.n	800240c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d01b      	beq.n	800240c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	4798      	blx	r3
 80023dc:	e016      	b.n	800240c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d107      	bne.n	80023fc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0208 	bic.w	r2, r2, #8
 80023fa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002410:	2220      	movs	r2, #32
 8002412:	409a      	lsls	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	4013      	ands	r3, r2
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 808f 	beq.w	800253c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0310 	and.w	r3, r3, #16
 8002428:	2b00      	cmp	r3, #0
 800242a:	f000 8087 	beq.w	800253c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002432:	2220      	movs	r2, #32
 8002434:	409a      	lsls	r2, r3
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b05      	cmp	r3, #5
 8002444:	d136      	bne.n	80024b4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 0216 	bic.w	r2, r2, #22
 8002454:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695a      	ldr	r2, [r3, #20]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002464:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	2b00      	cmp	r3, #0
 800246c:	d103      	bne.n	8002476 <HAL_DMA_IRQHandler+0x1da>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002472:	2b00      	cmp	r3, #0
 8002474:	d007      	beq.n	8002486 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0208 	bic.w	r2, r2, #8
 8002484:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248a:	223f      	movs	r2, #63	; 0x3f
 800248c:	409a      	lsls	r2, r3
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d07e      	beq.n	80025a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	4798      	blx	r3
        }
        return;
 80024b2:	e079      	b.n	80025a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d01d      	beq.n	80024fe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10d      	bne.n	80024ec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d031      	beq.n	800253c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	4798      	blx	r3
 80024e0:	e02c      	b.n	800253c <HAL_DMA_IRQHandler+0x2a0>
 80024e2:	bf00      	nop
 80024e4:	20000014 	.word	0x20000014
 80024e8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d023      	beq.n	800253c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	4798      	blx	r3
 80024fc:	e01e      	b.n	800253c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002508:	2b00      	cmp	r3, #0
 800250a:	d10f      	bne.n	800252c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0210 	bic.w	r2, r2, #16
 800251a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2201      	movs	r2, #1
 8002520:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002540:	2b00      	cmp	r3, #0
 8002542:	d032      	beq.n	80025aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	2b00      	cmp	r3, #0
 800254e:	d022      	beq.n	8002596 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2205      	movs	r2, #5
 8002554:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 0201 	bic.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	3301      	adds	r3, #1
 800256c:	60bb      	str	r3, [r7, #8]
 800256e:	697a      	ldr	r2, [r7, #20]
 8002570:	429a      	cmp	r2, r3
 8002572:	d307      	bcc.n	8002584 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f2      	bne.n	8002568 <HAL_DMA_IRQHandler+0x2cc>
 8002582:	e000      	b.n	8002586 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002584:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800259a:	2b00      	cmp	r3, #0
 800259c:	d005      	beq.n	80025aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	4798      	blx	r3
 80025a6:	e000      	b.n	80025aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80025a8:	bf00      	nop
    }
  }
}
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
 80025bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b40      	cmp	r3, #64	; 0x40
 80025dc:	d108      	bne.n	80025f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80025ee:	e007      	b.n	8002600 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68ba      	ldr	r2, [r7, #8]
 80025f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	60da      	str	r2, [r3, #12]
}
 8002600:	bf00      	nop
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	b2db      	uxtb	r3, r3
 800261a:	3b10      	subs	r3, #16
 800261c:	4a14      	ldr	r2, [pc, #80]	; (8002670 <DMA_CalcBaseAndBitshift+0x64>)
 800261e:	fba2 2303 	umull	r2, r3, r2, r3
 8002622:	091b      	lsrs	r3, r3, #4
 8002624:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002626:	4a13      	ldr	r2, [pc, #76]	; (8002674 <DMA_CalcBaseAndBitshift+0x68>)
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4413      	add	r3, r2
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	461a      	mov	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2b03      	cmp	r3, #3
 8002638:	d909      	bls.n	800264e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002642:	f023 0303 	bic.w	r3, r3, #3
 8002646:	1d1a      	adds	r2, r3, #4
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	659a      	str	r2, [r3, #88]	; 0x58
 800264c:	e007      	b.n	800265e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002656:	f023 0303 	bic.w	r3, r3, #3
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002662:	4618      	mov	r0, r3
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	aaaaaaab 	.word	0xaaaaaaab
 8002674:	08005ee8 	.word	0x08005ee8

08002678 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002680:	2300      	movs	r3, #0
 8002682:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002688:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d11f      	bne.n	80026d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	2b03      	cmp	r3, #3
 8002696:	d856      	bhi.n	8002746 <DMA_CheckFifoParam+0xce>
 8002698:	a201      	add	r2, pc, #4	; (adr r2, 80026a0 <DMA_CheckFifoParam+0x28>)
 800269a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269e:	bf00      	nop
 80026a0:	080026b1 	.word	0x080026b1
 80026a4:	080026c3 	.word	0x080026c3
 80026a8:	080026b1 	.word	0x080026b1
 80026ac:	08002747 	.word	0x08002747
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d046      	beq.n	800274a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026c0:	e043      	b.n	800274a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026ca:	d140      	bne.n	800274e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026d0:	e03d      	b.n	800274e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026da:	d121      	bne.n	8002720 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	2b03      	cmp	r3, #3
 80026e0:	d837      	bhi.n	8002752 <DMA_CheckFifoParam+0xda>
 80026e2:	a201      	add	r2, pc, #4	; (adr r2, 80026e8 <DMA_CheckFifoParam+0x70>)
 80026e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026e8:	080026f9 	.word	0x080026f9
 80026ec:	080026ff 	.word	0x080026ff
 80026f0:	080026f9 	.word	0x080026f9
 80026f4:	08002711 	.word	0x08002711
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	73fb      	strb	r3, [r7, #15]
      break;
 80026fc:	e030      	b.n	8002760 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002702:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d025      	beq.n	8002756 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800270e:	e022      	b.n	8002756 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002714:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002718:	d11f      	bne.n	800275a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800271e:	e01c      	b.n	800275a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2b02      	cmp	r3, #2
 8002724:	d903      	bls.n	800272e <DMA_CheckFifoParam+0xb6>
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	2b03      	cmp	r3, #3
 800272a:	d003      	beq.n	8002734 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800272c:	e018      	b.n	8002760 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	73fb      	strb	r3, [r7, #15]
      break;
 8002732:	e015      	b.n	8002760 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002738:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00e      	beq.n	800275e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	73fb      	strb	r3, [r7, #15]
      break;
 8002744:	e00b      	b.n	800275e <DMA_CheckFifoParam+0xe6>
      break;
 8002746:	bf00      	nop
 8002748:	e00a      	b.n	8002760 <DMA_CheckFifoParam+0xe8>
      break;
 800274a:	bf00      	nop
 800274c:	e008      	b.n	8002760 <DMA_CheckFifoParam+0xe8>
      break;
 800274e:	bf00      	nop
 8002750:	e006      	b.n	8002760 <DMA_CheckFifoParam+0xe8>
      break;
 8002752:	bf00      	nop
 8002754:	e004      	b.n	8002760 <DMA_CheckFifoParam+0xe8>
      break;
 8002756:	bf00      	nop
 8002758:	e002      	b.n	8002760 <DMA_CheckFifoParam+0xe8>
      break;   
 800275a:	bf00      	nop
 800275c:	e000      	b.n	8002760 <DMA_CheckFifoParam+0xe8>
      break;
 800275e:	bf00      	nop
    }
  } 
  
  return status; 
 8002760:	7bfb      	ldrb	r3, [r7, #15]
}
 8002762:	4618      	mov	r0, r3
 8002764:	3714      	adds	r7, #20
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
 800276e:	bf00      	nop

08002770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002770:	b480      	push	{r7}
 8002772:	b089      	sub	sp, #36	; 0x24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800277a:	2300      	movs	r3, #0
 800277c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800277e:	2300      	movs	r3, #0
 8002780:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002782:	2300      	movs	r3, #0
 8002784:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002786:	2300      	movs	r3, #0
 8002788:	61fb      	str	r3, [r7, #28]
 800278a:	e16b      	b.n	8002a64 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800278c:	2201      	movs	r2, #1
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	4013      	ands	r3, r2
 800279e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	f040 815a 	bne.w	8002a5e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d005      	beq.n	80027c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d130      	bne.n	8002824 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	2203      	movs	r2, #3
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	43db      	mvns	r3, r3
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	4013      	ands	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	68da      	ldr	r2, [r3, #12]
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027f8:	2201      	movs	r2, #1
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	091b      	lsrs	r3, r3, #4
 800280e:	f003 0201 	and.w	r2, r3, #1
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 0303 	and.w	r3, r3, #3
 800282c:	2b03      	cmp	r3, #3
 800282e:	d017      	beq.n	8002860 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	2203      	movs	r2, #3
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4013      	ands	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	689a      	ldr	r2, [r3, #8]
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	4313      	orrs	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f003 0303 	and.w	r3, r3, #3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d123      	bne.n	80028b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	08da      	lsrs	r2, r3, #3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	3208      	adds	r2, #8
 8002874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002878:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	220f      	movs	r2, #15
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	43db      	mvns	r3, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4013      	ands	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	691a      	ldr	r2, [r3, #16]
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	f003 0307 	and.w	r3, r3, #7
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	08da      	lsrs	r2, r3, #3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	3208      	adds	r2, #8
 80028ae:	69b9      	ldr	r1, [r7, #24]
 80028b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	005b      	lsls	r3, r3, #1
 80028be:	2203      	movs	r2, #3
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	43db      	mvns	r3, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4013      	ands	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 0203 	and.w	r2, r3, #3
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	005b      	lsls	r3, r3, #1
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4313      	orrs	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f000 80b4 	beq.w	8002a5e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	4b60      	ldr	r3, [pc, #384]	; (8002a7c <HAL_GPIO_Init+0x30c>)
 80028fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fe:	4a5f      	ldr	r2, [pc, #380]	; (8002a7c <HAL_GPIO_Init+0x30c>)
 8002900:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002904:	6453      	str	r3, [r2, #68]	; 0x44
 8002906:	4b5d      	ldr	r3, [pc, #372]	; (8002a7c <HAL_GPIO_Init+0x30c>)
 8002908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002912:	4a5b      	ldr	r2, [pc, #364]	; (8002a80 <HAL_GPIO_Init+0x310>)
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	089b      	lsrs	r3, r3, #2
 8002918:	3302      	adds	r3, #2
 800291a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800291e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	220f      	movs	r2, #15
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43db      	mvns	r3, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4013      	ands	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a52      	ldr	r2, [pc, #328]	; (8002a84 <HAL_GPIO_Init+0x314>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d02b      	beq.n	8002996 <HAL_GPIO_Init+0x226>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a51      	ldr	r2, [pc, #324]	; (8002a88 <HAL_GPIO_Init+0x318>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d025      	beq.n	8002992 <HAL_GPIO_Init+0x222>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a50      	ldr	r2, [pc, #320]	; (8002a8c <HAL_GPIO_Init+0x31c>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d01f      	beq.n	800298e <HAL_GPIO_Init+0x21e>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a4f      	ldr	r2, [pc, #316]	; (8002a90 <HAL_GPIO_Init+0x320>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d019      	beq.n	800298a <HAL_GPIO_Init+0x21a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a4e      	ldr	r2, [pc, #312]	; (8002a94 <HAL_GPIO_Init+0x324>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d013      	beq.n	8002986 <HAL_GPIO_Init+0x216>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a4d      	ldr	r2, [pc, #308]	; (8002a98 <HAL_GPIO_Init+0x328>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d00d      	beq.n	8002982 <HAL_GPIO_Init+0x212>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a4c      	ldr	r2, [pc, #304]	; (8002a9c <HAL_GPIO_Init+0x32c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d007      	beq.n	800297e <HAL_GPIO_Init+0x20e>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a4b      	ldr	r2, [pc, #300]	; (8002aa0 <HAL_GPIO_Init+0x330>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d101      	bne.n	800297a <HAL_GPIO_Init+0x20a>
 8002976:	2307      	movs	r3, #7
 8002978:	e00e      	b.n	8002998 <HAL_GPIO_Init+0x228>
 800297a:	2308      	movs	r3, #8
 800297c:	e00c      	b.n	8002998 <HAL_GPIO_Init+0x228>
 800297e:	2306      	movs	r3, #6
 8002980:	e00a      	b.n	8002998 <HAL_GPIO_Init+0x228>
 8002982:	2305      	movs	r3, #5
 8002984:	e008      	b.n	8002998 <HAL_GPIO_Init+0x228>
 8002986:	2304      	movs	r3, #4
 8002988:	e006      	b.n	8002998 <HAL_GPIO_Init+0x228>
 800298a:	2303      	movs	r3, #3
 800298c:	e004      	b.n	8002998 <HAL_GPIO_Init+0x228>
 800298e:	2302      	movs	r3, #2
 8002990:	e002      	b.n	8002998 <HAL_GPIO_Init+0x228>
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <HAL_GPIO_Init+0x228>
 8002996:	2300      	movs	r3, #0
 8002998:	69fa      	ldr	r2, [r7, #28]
 800299a:	f002 0203 	and.w	r2, r2, #3
 800299e:	0092      	lsls	r2, r2, #2
 80029a0:	4093      	lsls	r3, r2
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029a8:	4935      	ldr	r1, [pc, #212]	; (8002a80 <HAL_GPIO_Init+0x310>)
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	089b      	lsrs	r3, r3, #2
 80029ae:	3302      	adds	r3, #2
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029b6:	4b3b      	ldr	r3, [pc, #236]	; (8002aa4 <HAL_GPIO_Init+0x334>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	43db      	mvns	r3, r3
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	4013      	ands	r3, r2
 80029c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029da:	4a32      	ldr	r2, [pc, #200]	; (8002aa4 <HAL_GPIO_Init+0x334>)
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029e0:	4b30      	ldr	r3, [pc, #192]	; (8002aa4 <HAL_GPIO_Init+0x334>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	43db      	mvns	r3, r3
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	4013      	ands	r3, r2
 80029ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d003      	beq.n	8002a04 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a04:	4a27      	ldr	r2, [pc, #156]	; (8002aa4 <HAL_GPIO_Init+0x334>)
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a0a:	4b26      	ldr	r3, [pc, #152]	; (8002aa4 <HAL_GPIO_Init+0x334>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	43db      	mvns	r3, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4013      	ands	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a2e:	4a1d      	ldr	r2, [pc, #116]	; (8002aa4 <HAL_GPIO_Init+0x334>)
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a34:	4b1b      	ldr	r3, [pc, #108]	; (8002aa4 <HAL_GPIO_Init+0x334>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	4013      	ands	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d003      	beq.n	8002a58 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a58:	4a12      	ldr	r2, [pc, #72]	; (8002aa4 <HAL_GPIO_Init+0x334>)
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	3301      	adds	r3, #1
 8002a62:	61fb      	str	r3, [r7, #28]
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	2b0f      	cmp	r3, #15
 8002a68:	f67f ae90 	bls.w	800278c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a6c:	bf00      	nop
 8002a6e:	bf00      	nop
 8002a70:	3724      	adds	r7, #36	; 0x24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40013800 	.word	0x40013800
 8002a84:	40020000 	.word	0x40020000
 8002a88:	40020400 	.word	0x40020400
 8002a8c:	40020800 	.word	0x40020800
 8002a90:	40020c00 	.word	0x40020c00
 8002a94:	40021000 	.word	0x40021000
 8002a98:	40021400 	.word	0x40021400
 8002a9c:	40021800 	.word	0x40021800
 8002aa0:	40021c00 	.word	0x40021c00
 8002aa4:	40013c00 	.word	0x40013c00

08002aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	807b      	strh	r3, [r7, #2]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ab8:	787b      	ldrb	r3, [r7, #1]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002abe:	887a      	ldrh	r2, [r7, #2]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ac4:	e003      	b.n	8002ace <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ac6:	887b      	ldrh	r3, [r7, #2]
 8002ac8:	041a      	lsls	r2, r3, #16
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	619a      	str	r2, [r3, #24]
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b085      	sub	sp, #20
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002aec:	887a      	ldrh	r2, [r7, #2]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	4013      	ands	r3, r2
 8002af2:	041a      	lsls	r2, r3, #16
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	43d9      	mvns	r1, r3
 8002af8:	887b      	ldrh	r3, [r7, #2]
 8002afa:	400b      	ands	r3, r1
 8002afc:	431a      	orrs	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	619a      	str	r2, [r3, #24]
}
 8002b02:	bf00      	nop
 8002b04:	3714      	adds	r7, #20
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
	...

08002b10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e267      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d075      	beq.n	8002c1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b2e:	4b88      	ldr	r3, [pc, #544]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 030c 	and.w	r3, r3, #12
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d00c      	beq.n	8002b54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b3a:	4b85      	ldr	r3, [pc, #532]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b42:	2b08      	cmp	r3, #8
 8002b44:	d112      	bne.n	8002b6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b46:	4b82      	ldr	r3, [pc, #520]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b52:	d10b      	bne.n	8002b6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b54:	4b7e      	ldr	r3, [pc, #504]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d05b      	beq.n	8002c18 <HAL_RCC_OscConfig+0x108>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d157      	bne.n	8002c18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e242      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b74:	d106      	bne.n	8002b84 <HAL_RCC_OscConfig+0x74>
 8002b76:	4b76      	ldr	r3, [pc, #472]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a75      	ldr	r2, [pc, #468]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	e01d      	b.n	8002bc0 <HAL_RCC_OscConfig+0xb0>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b8c:	d10c      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x98>
 8002b8e:	4b70      	ldr	r3, [pc, #448]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a6f      	ldr	r2, [pc, #444]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002b94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b98:	6013      	str	r3, [r2, #0]
 8002b9a:	4b6d      	ldr	r3, [pc, #436]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a6c      	ldr	r2, [pc, #432]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba4:	6013      	str	r3, [r2, #0]
 8002ba6:	e00b      	b.n	8002bc0 <HAL_RCC_OscConfig+0xb0>
 8002ba8:	4b69      	ldr	r3, [pc, #420]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a68      	ldr	r2, [pc, #416]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002bae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bb2:	6013      	str	r3, [r2, #0]
 8002bb4:	4b66      	ldr	r3, [pc, #408]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a65      	ldr	r2, [pc, #404]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002bba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d013      	beq.n	8002bf0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc8:	f7fe fe38 	bl	800183c <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bd0:	f7fe fe34 	bl	800183c <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b64      	cmp	r3, #100	; 0x64
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e207      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be2:	4b5b      	ldr	r3, [pc, #364]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0f0      	beq.n	8002bd0 <HAL_RCC_OscConfig+0xc0>
 8002bee:	e014      	b.n	8002c1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf0:	f7fe fe24 	bl	800183c <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bf8:	f7fe fe20 	bl	800183c <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b64      	cmp	r3, #100	; 0x64
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e1f3      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c0a:	4b51      	ldr	r3, [pc, #324]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f0      	bne.n	8002bf8 <HAL_RCC_OscConfig+0xe8>
 8002c16:	e000      	b.n	8002c1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d063      	beq.n	8002cee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c26:	4b4a      	ldr	r3, [pc, #296]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 030c 	and.w	r3, r3, #12
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00b      	beq.n	8002c4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c32:	4b47      	ldr	r3, [pc, #284]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c3a:	2b08      	cmp	r3, #8
 8002c3c:	d11c      	bne.n	8002c78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c3e:	4b44      	ldr	r3, [pc, #272]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d116      	bne.n	8002c78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c4a:	4b41      	ldr	r3, [pc, #260]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d005      	beq.n	8002c62 <HAL_RCC_OscConfig+0x152>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d001      	beq.n	8002c62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e1c7      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c62:	4b3b      	ldr	r3, [pc, #236]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	4937      	ldr	r1, [pc, #220]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c76:	e03a      	b.n	8002cee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d020      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c80:	4b34      	ldr	r3, [pc, #208]	; (8002d54 <HAL_RCC_OscConfig+0x244>)
 8002c82:	2201      	movs	r2, #1
 8002c84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c86:	f7fe fdd9 	bl	800183c <HAL_GetTick>
 8002c8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c8c:	e008      	b.n	8002ca0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c8e:	f7fe fdd5 	bl	800183c <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e1a8      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca0:	4b2b      	ldr	r3, [pc, #172]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0f0      	beq.n	8002c8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cac:	4b28      	ldr	r3, [pc, #160]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	4925      	ldr	r1, [pc, #148]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	600b      	str	r3, [r1, #0]
 8002cc0:	e015      	b.n	8002cee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cc2:	4b24      	ldr	r3, [pc, #144]	; (8002d54 <HAL_RCC_OscConfig+0x244>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc8:	f7fe fdb8 	bl	800183c <HAL_GetTick>
 8002ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cce:	e008      	b.n	8002ce2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cd0:	f7fe fdb4 	bl	800183c <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b02      	cmp	r3, #2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e187      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ce2:	4b1b      	ldr	r3, [pc, #108]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f0      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d036      	beq.n	8002d68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d016      	beq.n	8002d30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d02:	4b15      	ldr	r3, [pc, #84]	; (8002d58 <HAL_RCC_OscConfig+0x248>)
 8002d04:	2201      	movs	r2, #1
 8002d06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d08:	f7fe fd98 	bl	800183c <HAL_GetTick>
 8002d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d10:	f7fe fd94 	bl	800183c <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e167      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d22:	4b0b      	ldr	r3, [pc, #44]	; (8002d50 <HAL_RCC_OscConfig+0x240>)
 8002d24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d0f0      	beq.n	8002d10 <HAL_RCC_OscConfig+0x200>
 8002d2e:	e01b      	b.n	8002d68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d30:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <HAL_RCC_OscConfig+0x248>)
 8002d32:	2200      	movs	r2, #0
 8002d34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d36:	f7fe fd81 	bl	800183c <HAL_GetTick>
 8002d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d3c:	e00e      	b.n	8002d5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d3e:	f7fe fd7d 	bl	800183c <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d907      	bls.n	8002d5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e150      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
 8002d50:	40023800 	.word	0x40023800
 8002d54:	42470000 	.word	0x42470000
 8002d58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d5c:	4b88      	ldr	r3, [pc, #544]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1ea      	bne.n	8002d3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 8097 	beq.w	8002ea4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d76:	2300      	movs	r3, #0
 8002d78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d7a:	4b81      	ldr	r3, [pc, #516]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10f      	bne.n	8002da6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d86:	2300      	movs	r3, #0
 8002d88:	60bb      	str	r3, [r7, #8]
 8002d8a:	4b7d      	ldr	r3, [pc, #500]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	4a7c      	ldr	r2, [pc, #496]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d94:	6413      	str	r3, [r2, #64]	; 0x40
 8002d96:	4b7a      	ldr	r3, [pc, #488]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9e:	60bb      	str	r3, [r7, #8]
 8002da0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002da2:	2301      	movs	r3, #1
 8002da4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da6:	4b77      	ldr	r3, [pc, #476]	; (8002f84 <HAL_RCC_OscConfig+0x474>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d118      	bne.n	8002de4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002db2:	4b74      	ldr	r3, [pc, #464]	; (8002f84 <HAL_RCC_OscConfig+0x474>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a73      	ldr	r2, [pc, #460]	; (8002f84 <HAL_RCC_OscConfig+0x474>)
 8002db8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dbe:	f7fe fd3d 	bl	800183c <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc6:	f7fe fd39 	bl	800183c <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e10c      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd8:	4b6a      	ldr	r3, [pc, #424]	; (8002f84 <HAL_RCC_OscConfig+0x474>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0f0      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d106      	bne.n	8002dfa <HAL_RCC_OscConfig+0x2ea>
 8002dec:	4b64      	ldr	r3, [pc, #400]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df0:	4a63      	ldr	r2, [pc, #396]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002df2:	f043 0301 	orr.w	r3, r3, #1
 8002df6:	6713      	str	r3, [r2, #112]	; 0x70
 8002df8:	e01c      	b.n	8002e34 <HAL_RCC_OscConfig+0x324>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2b05      	cmp	r3, #5
 8002e00:	d10c      	bne.n	8002e1c <HAL_RCC_OscConfig+0x30c>
 8002e02:	4b5f      	ldr	r3, [pc, #380]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e06:	4a5e      	ldr	r2, [pc, #376]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002e08:	f043 0304 	orr.w	r3, r3, #4
 8002e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e0e:	4b5c      	ldr	r3, [pc, #368]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e12:	4a5b      	ldr	r2, [pc, #364]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002e14:	f043 0301 	orr.w	r3, r3, #1
 8002e18:	6713      	str	r3, [r2, #112]	; 0x70
 8002e1a:	e00b      	b.n	8002e34 <HAL_RCC_OscConfig+0x324>
 8002e1c:	4b58      	ldr	r3, [pc, #352]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e20:	4a57      	ldr	r2, [pc, #348]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002e22:	f023 0301 	bic.w	r3, r3, #1
 8002e26:	6713      	str	r3, [r2, #112]	; 0x70
 8002e28:	4b55      	ldr	r3, [pc, #340]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2c:	4a54      	ldr	r2, [pc, #336]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002e2e:	f023 0304 	bic.w	r3, r3, #4
 8002e32:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d015      	beq.n	8002e68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e3c:	f7fe fcfe 	bl	800183c <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e42:	e00a      	b.n	8002e5a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e44:	f7fe fcfa 	bl	800183c <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e0cb      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e5a:	4b49      	ldr	r3, [pc, #292]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0ee      	beq.n	8002e44 <HAL_RCC_OscConfig+0x334>
 8002e66:	e014      	b.n	8002e92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e68:	f7fe fce8 	bl	800183c <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e6e:	e00a      	b.n	8002e86 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e70:	f7fe fce4 	bl	800183c <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e0b5      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e86:	4b3e      	ldr	r3, [pc, #248]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1ee      	bne.n	8002e70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e92:	7dfb      	ldrb	r3, [r7, #23]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d105      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e98:	4b39      	ldr	r3, [pc, #228]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	4a38      	ldr	r2, [pc, #224]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002e9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ea2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 80a1 	beq.w	8002ff0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002eae:	4b34      	ldr	r3, [pc, #208]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 030c 	and.w	r3, r3, #12
 8002eb6:	2b08      	cmp	r3, #8
 8002eb8:	d05c      	beq.n	8002f74 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d141      	bne.n	8002f46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec2:	4b31      	ldr	r3, [pc, #196]	; (8002f88 <HAL_RCC_OscConfig+0x478>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec8:	f7fe fcb8 	bl	800183c <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ed0:	f7fe fcb4 	bl	800183c <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e087      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ee2:	4b27      	ldr	r3, [pc, #156]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1f0      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69da      	ldr	r2, [r3, #28]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	019b      	lsls	r3, r3, #6
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f04:	085b      	lsrs	r3, r3, #1
 8002f06:	3b01      	subs	r3, #1
 8002f08:	041b      	lsls	r3, r3, #16
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f10:	061b      	lsls	r3, r3, #24
 8002f12:	491b      	ldr	r1, [pc, #108]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f18:	4b1b      	ldr	r3, [pc, #108]	; (8002f88 <HAL_RCC_OscConfig+0x478>)
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1e:	f7fe fc8d 	bl	800183c <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f26:	f7fe fc89 	bl	800183c <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e05c      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f38:	4b11      	ldr	r3, [pc, #68]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0f0      	beq.n	8002f26 <HAL_RCC_OscConfig+0x416>
 8002f44:	e054      	b.n	8002ff0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f46:	4b10      	ldr	r3, [pc, #64]	; (8002f88 <HAL_RCC_OscConfig+0x478>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4c:	f7fe fc76 	bl	800183c <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f54:	f7fe fc72 	bl	800183c <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e045      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f66:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <HAL_RCC_OscConfig+0x470>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f0      	bne.n	8002f54 <HAL_RCC_OscConfig+0x444>
 8002f72:	e03d      	b.n	8002ff0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d107      	bne.n	8002f8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e038      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
 8002f80:	40023800 	.word	0x40023800
 8002f84:	40007000 	.word	0x40007000
 8002f88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f8c:	4b1b      	ldr	r3, [pc, #108]	; (8002ffc <HAL_RCC_OscConfig+0x4ec>)
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	699b      	ldr	r3, [r3, #24]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d028      	beq.n	8002fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d121      	bne.n	8002fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d11a      	bne.n	8002fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d111      	bne.n	8002fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd2:	085b      	lsrs	r3, r3, #1
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d107      	bne.n	8002fec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d001      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e000      	b.n	8002ff2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ff0:	2300      	movs	r3, #0
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40023800 	.word	0x40023800

08003000 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d101      	bne.n	8003014 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0cc      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003014:	4b68      	ldr	r3, [pc, #416]	; (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0307 	and.w	r3, r3, #7
 800301c:	683a      	ldr	r2, [r7, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d90c      	bls.n	800303c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003022:	4b65      	ldr	r3, [pc, #404]	; (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003024:	683a      	ldr	r2, [r7, #0]
 8003026:	b2d2      	uxtb	r2, r2
 8003028:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800302a:	4b63      	ldr	r3, [pc, #396]	; (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0307 	and.w	r3, r3, #7
 8003032:	683a      	ldr	r2, [r7, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	d001      	beq.n	800303c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e0b8      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d020      	beq.n	800308a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0304 	and.w	r3, r3, #4
 8003050:	2b00      	cmp	r3, #0
 8003052:	d005      	beq.n	8003060 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003054:	4b59      	ldr	r3, [pc, #356]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	4a58      	ldr	r2, [pc, #352]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 800305a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800305e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0308 	and.w	r3, r3, #8
 8003068:	2b00      	cmp	r3, #0
 800306a:	d005      	beq.n	8003078 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800306c:	4b53      	ldr	r3, [pc, #332]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	4a52      	ldr	r2, [pc, #328]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 8003072:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003076:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003078:	4b50      	ldr	r3, [pc, #320]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	494d      	ldr	r1, [pc, #308]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	4313      	orrs	r3, r2
 8003088:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d044      	beq.n	8003120 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d107      	bne.n	80030ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309e:	4b47      	ldr	r3, [pc, #284]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d119      	bne.n	80030de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e07f      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b02      	cmp	r3, #2
 80030b4:	d003      	beq.n	80030be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ba:	2b03      	cmp	r3, #3
 80030bc:	d107      	bne.n	80030ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030be:	4b3f      	ldr	r3, [pc, #252]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d109      	bne.n	80030de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e06f      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ce:	4b3b      	ldr	r3, [pc, #236]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e067      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030de:	4b37      	ldr	r3, [pc, #220]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f023 0203 	bic.w	r2, r3, #3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	4934      	ldr	r1, [pc, #208]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030f0:	f7fe fba4 	bl	800183c <HAL_GetTick>
 80030f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f6:	e00a      	b.n	800310e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f8:	f7fe fba0 	bl	800183c <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	f241 3288 	movw	r2, #5000	; 0x1388
 8003106:	4293      	cmp	r3, r2
 8003108:	d901      	bls.n	800310e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e04f      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310e:	4b2b      	ldr	r3, [pc, #172]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 020c 	and.w	r2, r3, #12
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	429a      	cmp	r2, r3
 800311e:	d1eb      	bne.n	80030f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003120:	4b25      	ldr	r3, [pc, #148]	; (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	683a      	ldr	r2, [r7, #0]
 800312a:	429a      	cmp	r2, r3
 800312c:	d20c      	bcs.n	8003148 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312e:	4b22      	ldr	r3, [pc, #136]	; (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	b2d2      	uxtb	r2, r2
 8003134:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003136:	4b20      	ldr	r3, [pc, #128]	; (80031b8 <HAL_RCC_ClockConfig+0x1b8>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	429a      	cmp	r2, r3
 8003142:	d001      	beq.n	8003148 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e032      	b.n	80031ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0304 	and.w	r3, r3, #4
 8003150:	2b00      	cmp	r3, #0
 8003152:	d008      	beq.n	8003166 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003154:	4b19      	ldr	r3, [pc, #100]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	4916      	ldr	r1, [pc, #88]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 8003162:	4313      	orrs	r3, r2
 8003164:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	2b00      	cmp	r3, #0
 8003170:	d009      	beq.n	8003186 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003172:	4b12      	ldr	r3, [pc, #72]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	490e      	ldr	r1, [pc, #56]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 8003182:	4313      	orrs	r3, r2
 8003184:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003186:	f000 f821 	bl	80031cc <HAL_RCC_GetSysClockFreq>
 800318a:	4602      	mov	r2, r0
 800318c:	4b0b      	ldr	r3, [pc, #44]	; (80031bc <HAL_RCC_ClockConfig+0x1bc>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	091b      	lsrs	r3, r3, #4
 8003192:	f003 030f 	and.w	r3, r3, #15
 8003196:	490a      	ldr	r1, [pc, #40]	; (80031c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003198:	5ccb      	ldrb	r3, [r1, r3]
 800319a:	fa22 f303 	lsr.w	r3, r2, r3
 800319e:	4a09      	ldr	r2, [pc, #36]	; (80031c4 <HAL_RCC_ClockConfig+0x1c4>)
 80031a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031a2:	4b09      	ldr	r3, [pc, #36]	; (80031c8 <HAL_RCC_ClockConfig+0x1c8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fe fb04 	bl	80017b4 <HAL_InitTick>

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40023c00 	.word	0x40023c00
 80031bc:	40023800 	.word	0x40023800
 80031c0:	08005ed0 	.word	0x08005ed0
 80031c4:	20000014 	.word	0x20000014
 80031c8:	20000018 	.word	0x20000018

080031cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031d0:	b090      	sub	sp, #64	; 0x40
 80031d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	637b      	str	r3, [r7, #52]	; 0x34
 80031d8:	2300      	movs	r3, #0
 80031da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031dc:	2300      	movs	r3, #0
 80031de:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80031e0:	2300      	movs	r3, #0
 80031e2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031e4:	4b59      	ldr	r3, [pc, #356]	; (800334c <HAL_RCC_GetSysClockFreq+0x180>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f003 030c 	and.w	r3, r3, #12
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d00d      	beq.n	800320c <HAL_RCC_GetSysClockFreq+0x40>
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	f200 80a1 	bhi.w	8003338 <HAL_RCC_GetSysClockFreq+0x16c>
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d002      	beq.n	8003200 <HAL_RCC_GetSysClockFreq+0x34>
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d003      	beq.n	8003206 <HAL_RCC_GetSysClockFreq+0x3a>
 80031fe:	e09b      	b.n	8003338 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003200:	4b53      	ldr	r3, [pc, #332]	; (8003350 <HAL_RCC_GetSysClockFreq+0x184>)
 8003202:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003204:	e09b      	b.n	800333e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003206:	4b53      	ldr	r3, [pc, #332]	; (8003354 <HAL_RCC_GetSysClockFreq+0x188>)
 8003208:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800320a:	e098      	b.n	800333e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800320c:	4b4f      	ldr	r3, [pc, #316]	; (800334c <HAL_RCC_GetSysClockFreq+0x180>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003214:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003216:	4b4d      	ldr	r3, [pc, #308]	; (800334c <HAL_RCC_GetSysClockFreq+0x180>)
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d028      	beq.n	8003274 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003222:	4b4a      	ldr	r3, [pc, #296]	; (800334c <HAL_RCC_GetSysClockFreq+0x180>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	099b      	lsrs	r3, r3, #6
 8003228:	2200      	movs	r2, #0
 800322a:	623b      	str	r3, [r7, #32]
 800322c:	627a      	str	r2, [r7, #36]	; 0x24
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003234:	2100      	movs	r1, #0
 8003236:	4b47      	ldr	r3, [pc, #284]	; (8003354 <HAL_RCC_GetSysClockFreq+0x188>)
 8003238:	fb03 f201 	mul.w	r2, r3, r1
 800323c:	2300      	movs	r3, #0
 800323e:	fb00 f303 	mul.w	r3, r0, r3
 8003242:	4413      	add	r3, r2
 8003244:	4a43      	ldr	r2, [pc, #268]	; (8003354 <HAL_RCC_GetSysClockFreq+0x188>)
 8003246:	fba0 1202 	umull	r1, r2, r0, r2
 800324a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800324c:	460a      	mov	r2, r1
 800324e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003250:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003252:	4413      	add	r3, r2
 8003254:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003258:	2200      	movs	r2, #0
 800325a:	61bb      	str	r3, [r7, #24]
 800325c:	61fa      	str	r2, [r7, #28]
 800325e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003262:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003266:	f7fd fc4d 	bl	8000b04 <__aeabi_uldivmod>
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	4613      	mov	r3, r2
 8003270:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003272:	e053      	b.n	800331c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003274:	4b35      	ldr	r3, [pc, #212]	; (800334c <HAL_RCC_GetSysClockFreq+0x180>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	099b      	lsrs	r3, r3, #6
 800327a:	2200      	movs	r2, #0
 800327c:	613b      	str	r3, [r7, #16]
 800327e:	617a      	str	r2, [r7, #20]
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003286:	f04f 0b00 	mov.w	fp, #0
 800328a:	4652      	mov	r2, sl
 800328c:	465b      	mov	r3, fp
 800328e:	f04f 0000 	mov.w	r0, #0
 8003292:	f04f 0100 	mov.w	r1, #0
 8003296:	0159      	lsls	r1, r3, #5
 8003298:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800329c:	0150      	lsls	r0, r2, #5
 800329e:	4602      	mov	r2, r0
 80032a0:	460b      	mov	r3, r1
 80032a2:	ebb2 080a 	subs.w	r8, r2, sl
 80032a6:	eb63 090b 	sbc.w	r9, r3, fp
 80032aa:	f04f 0200 	mov.w	r2, #0
 80032ae:	f04f 0300 	mov.w	r3, #0
 80032b2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80032b6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80032ba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80032be:	ebb2 0408 	subs.w	r4, r2, r8
 80032c2:	eb63 0509 	sbc.w	r5, r3, r9
 80032c6:	f04f 0200 	mov.w	r2, #0
 80032ca:	f04f 0300 	mov.w	r3, #0
 80032ce:	00eb      	lsls	r3, r5, #3
 80032d0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032d4:	00e2      	lsls	r2, r4, #3
 80032d6:	4614      	mov	r4, r2
 80032d8:	461d      	mov	r5, r3
 80032da:	eb14 030a 	adds.w	r3, r4, sl
 80032de:	603b      	str	r3, [r7, #0]
 80032e0:	eb45 030b 	adc.w	r3, r5, fp
 80032e4:	607b      	str	r3, [r7, #4]
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032f2:	4629      	mov	r1, r5
 80032f4:	028b      	lsls	r3, r1, #10
 80032f6:	4621      	mov	r1, r4
 80032f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032fc:	4621      	mov	r1, r4
 80032fe:	028a      	lsls	r2, r1, #10
 8003300:	4610      	mov	r0, r2
 8003302:	4619      	mov	r1, r3
 8003304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003306:	2200      	movs	r2, #0
 8003308:	60bb      	str	r3, [r7, #8]
 800330a:	60fa      	str	r2, [r7, #12]
 800330c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003310:	f7fd fbf8 	bl	8000b04 <__aeabi_uldivmod>
 8003314:	4602      	mov	r2, r0
 8003316:	460b      	mov	r3, r1
 8003318:	4613      	mov	r3, r2
 800331a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800331c:	4b0b      	ldr	r3, [pc, #44]	; (800334c <HAL_RCC_GetSysClockFreq+0x180>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	0c1b      	lsrs	r3, r3, #16
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	3301      	adds	r3, #1
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800332c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800332e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003330:	fbb2 f3f3 	udiv	r3, r2, r3
 8003334:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003336:	e002      	b.n	800333e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003338:	4b05      	ldr	r3, [pc, #20]	; (8003350 <HAL_RCC_GetSysClockFreq+0x184>)
 800333a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800333c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800333e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003340:	4618      	mov	r0, r3
 8003342:	3740      	adds	r7, #64	; 0x40
 8003344:	46bd      	mov	sp, r7
 8003346:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800334a:	bf00      	nop
 800334c:	40023800 	.word	0x40023800
 8003350:	00f42400 	.word	0x00f42400
 8003354:	017d7840 	.word	0x017d7840

08003358 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800335c:	4b03      	ldr	r3, [pc, #12]	; (800336c <HAL_RCC_GetHCLKFreq+0x14>)
 800335e:	681b      	ldr	r3, [r3, #0]
}
 8003360:	4618      	mov	r0, r3
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	20000014 	.word	0x20000014

08003370 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003374:	f7ff fff0 	bl	8003358 <HAL_RCC_GetHCLKFreq>
 8003378:	4602      	mov	r2, r0
 800337a:	4b05      	ldr	r3, [pc, #20]	; (8003390 <HAL_RCC_GetPCLK1Freq+0x20>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	0a9b      	lsrs	r3, r3, #10
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	4903      	ldr	r1, [pc, #12]	; (8003394 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003386:	5ccb      	ldrb	r3, [r1, r3]
 8003388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800338c:	4618      	mov	r0, r3
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40023800 	.word	0x40023800
 8003394:	08005ee0 	.word	0x08005ee0

08003398 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800339c:	f7ff ffdc 	bl	8003358 <HAL_RCC_GetHCLKFreq>
 80033a0:	4602      	mov	r2, r0
 80033a2:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	0b5b      	lsrs	r3, r3, #13
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	4903      	ldr	r1, [pc, #12]	; (80033bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80033ae:	5ccb      	ldrb	r3, [r1, r3]
 80033b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	40023800 	.word	0x40023800
 80033bc:	08005ee0 	.word	0x08005ee0

080033c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d101      	bne.n	80033d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e041      	b.n	8003456 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d106      	bne.n	80033ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f7fd ff88 	bl	80012fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2202      	movs	r2, #2
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3304      	adds	r3, #4
 80033fc:	4619      	mov	r1, r3
 80033fe:	4610      	mov	r0, r2
 8003400:	f000 fa98 	bl	8003934 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
	...

08003460 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b01      	cmp	r3, #1
 8003472:	d001      	beq.n	8003478 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e046      	b.n	8003506 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a23      	ldr	r2, [pc, #140]	; (8003514 <HAL_TIM_Base_Start+0xb4>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d022      	beq.n	80034d0 <HAL_TIM_Base_Start+0x70>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003492:	d01d      	beq.n	80034d0 <HAL_TIM_Base_Start+0x70>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	4a1f      	ldr	r2, [pc, #124]	; (8003518 <HAL_TIM_Base_Start+0xb8>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d018      	beq.n	80034d0 <HAL_TIM_Base_Start+0x70>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a1e      	ldr	r2, [pc, #120]	; (800351c <HAL_TIM_Base_Start+0xbc>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d013      	beq.n	80034d0 <HAL_TIM_Base_Start+0x70>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a1c      	ldr	r2, [pc, #112]	; (8003520 <HAL_TIM_Base_Start+0xc0>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d00e      	beq.n	80034d0 <HAL_TIM_Base_Start+0x70>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a1b      	ldr	r2, [pc, #108]	; (8003524 <HAL_TIM_Base_Start+0xc4>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d009      	beq.n	80034d0 <HAL_TIM_Base_Start+0x70>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a19      	ldr	r2, [pc, #100]	; (8003528 <HAL_TIM_Base_Start+0xc8>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d004      	beq.n	80034d0 <HAL_TIM_Base_Start+0x70>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4a18      	ldr	r2, [pc, #96]	; (800352c <HAL_TIM_Base_Start+0xcc>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d111      	bne.n	80034f4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 0307 	and.w	r3, r3, #7
 80034da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2b06      	cmp	r3, #6
 80034e0:	d010      	beq.n	8003504 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f042 0201 	orr.w	r2, r2, #1
 80034f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034f2:	e007      	b.n	8003504 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0201 	orr.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
 8003512:	bf00      	nop
 8003514:	40010000 	.word	0x40010000
 8003518:	40000400 	.word	0x40000400
 800351c:	40000800 	.word	0x40000800
 8003520:	40000c00 	.word	0x40000c00
 8003524:	40010400 	.word	0x40010400
 8003528:	40014000 	.word	0x40014000
 800352c:	40001800 	.word	0x40001800

08003530 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b02      	cmp	r3, #2
 8003544:	d122      	bne.n	800358c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b02      	cmp	r3, #2
 8003552:	d11b      	bne.n	800358c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f06f 0202 	mvn.w	r2, #2
 800355c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f9bf 	bl	80038f6 <HAL_TIM_IC_CaptureCallback>
 8003578:	e005      	b.n	8003586 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f9b1 	bl	80038e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 f9c2 	bl	800390a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	f003 0304 	and.w	r3, r3, #4
 8003596:	2b04      	cmp	r3, #4
 8003598:	d122      	bne.n	80035e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b04      	cmp	r3, #4
 80035a6:	d11b      	bne.n	80035e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f06f 0204 	mvn.w	r2, #4
 80035b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2202      	movs	r2, #2
 80035b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f995 	bl	80038f6 <HAL_TIM_IC_CaptureCallback>
 80035cc:	e005      	b.n	80035da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f987 	bl	80038e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f998 	bl	800390a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f003 0308 	and.w	r3, r3, #8
 80035ea:	2b08      	cmp	r3, #8
 80035ec:	d122      	bne.n	8003634 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f003 0308 	and.w	r3, r3, #8
 80035f8:	2b08      	cmp	r3, #8
 80035fa:	d11b      	bne.n	8003634 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f06f 0208 	mvn.w	r2, #8
 8003604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2204      	movs	r2, #4
 800360a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	f003 0303 	and.w	r3, r3, #3
 8003616:	2b00      	cmp	r3, #0
 8003618:	d003      	beq.n	8003622 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f000 f96b 	bl	80038f6 <HAL_TIM_IC_CaptureCallback>
 8003620:	e005      	b.n	800362e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f95d 	bl	80038e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f000 f96e 	bl	800390a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	f003 0310 	and.w	r3, r3, #16
 800363e:	2b10      	cmp	r3, #16
 8003640:	d122      	bne.n	8003688 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	f003 0310 	and.w	r3, r3, #16
 800364c:	2b10      	cmp	r3, #16
 800364e:	d11b      	bne.n	8003688 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f06f 0210 	mvn.w	r2, #16
 8003658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2208      	movs	r2, #8
 800365e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f941 	bl	80038f6 <HAL_TIM_IC_CaptureCallback>
 8003674:	e005      	b.n	8003682 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f933 	bl	80038e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f944 	bl	800390a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	691b      	ldr	r3, [r3, #16]
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	2b01      	cmp	r3, #1
 8003694:	d10e      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d107      	bne.n	80036b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f06f 0201 	mvn.w	r2, #1
 80036ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f90d 	bl	80038ce <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036be:	2b80      	cmp	r3, #128	; 0x80
 80036c0:	d10e      	bne.n	80036e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036cc:	2b80      	cmp	r3, #128	; 0x80
 80036ce:	d107      	bne.n	80036e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 faea 	bl	8003cb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ea:	2b40      	cmp	r3, #64	; 0x40
 80036ec:	d10e      	bne.n	800370c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f8:	2b40      	cmp	r3, #64	; 0x40
 80036fa:	d107      	bne.n	800370c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 f909 	bl	800391e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	f003 0320 	and.w	r3, r3, #32
 8003716:	2b20      	cmp	r3, #32
 8003718:	d10e      	bne.n	8003738 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f003 0320 	and.w	r3, r3, #32
 8003724:	2b20      	cmp	r3, #32
 8003726:	d107      	bne.n	8003738 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f06f 0220 	mvn.w	r2, #32
 8003730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 fab4 	bl	8003ca0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003738:	bf00      	nop
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800374a:	2300      	movs	r3, #0
 800374c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003754:	2b01      	cmp	r3, #1
 8003756:	d101      	bne.n	800375c <HAL_TIM_ConfigClockSource+0x1c>
 8003758:	2302      	movs	r3, #2
 800375a:	e0b4      	b.n	80038c6 <HAL_TIM_ConfigClockSource+0x186>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2202      	movs	r2, #2
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800377a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003782:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003794:	d03e      	beq.n	8003814 <HAL_TIM_ConfigClockSource+0xd4>
 8003796:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800379a:	f200 8087 	bhi.w	80038ac <HAL_TIM_ConfigClockSource+0x16c>
 800379e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037a2:	f000 8086 	beq.w	80038b2 <HAL_TIM_ConfigClockSource+0x172>
 80037a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037aa:	d87f      	bhi.n	80038ac <HAL_TIM_ConfigClockSource+0x16c>
 80037ac:	2b70      	cmp	r3, #112	; 0x70
 80037ae:	d01a      	beq.n	80037e6 <HAL_TIM_ConfigClockSource+0xa6>
 80037b0:	2b70      	cmp	r3, #112	; 0x70
 80037b2:	d87b      	bhi.n	80038ac <HAL_TIM_ConfigClockSource+0x16c>
 80037b4:	2b60      	cmp	r3, #96	; 0x60
 80037b6:	d050      	beq.n	800385a <HAL_TIM_ConfigClockSource+0x11a>
 80037b8:	2b60      	cmp	r3, #96	; 0x60
 80037ba:	d877      	bhi.n	80038ac <HAL_TIM_ConfigClockSource+0x16c>
 80037bc:	2b50      	cmp	r3, #80	; 0x50
 80037be:	d03c      	beq.n	800383a <HAL_TIM_ConfigClockSource+0xfa>
 80037c0:	2b50      	cmp	r3, #80	; 0x50
 80037c2:	d873      	bhi.n	80038ac <HAL_TIM_ConfigClockSource+0x16c>
 80037c4:	2b40      	cmp	r3, #64	; 0x40
 80037c6:	d058      	beq.n	800387a <HAL_TIM_ConfigClockSource+0x13a>
 80037c8:	2b40      	cmp	r3, #64	; 0x40
 80037ca:	d86f      	bhi.n	80038ac <HAL_TIM_ConfigClockSource+0x16c>
 80037cc:	2b30      	cmp	r3, #48	; 0x30
 80037ce:	d064      	beq.n	800389a <HAL_TIM_ConfigClockSource+0x15a>
 80037d0:	2b30      	cmp	r3, #48	; 0x30
 80037d2:	d86b      	bhi.n	80038ac <HAL_TIM_ConfigClockSource+0x16c>
 80037d4:	2b20      	cmp	r3, #32
 80037d6:	d060      	beq.n	800389a <HAL_TIM_ConfigClockSource+0x15a>
 80037d8:	2b20      	cmp	r3, #32
 80037da:	d867      	bhi.n	80038ac <HAL_TIM_ConfigClockSource+0x16c>
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d05c      	beq.n	800389a <HAL_TIM_ConfigClockSource+0x15a>
 80037e0:	2b10      	cmp	r3, #16
 80037e2:	d05a      	beq.n	800389a <HAL_TIM_ConfigClockSource+0x15a>
 80037e4:	e062      	b.n	80038ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6818      	ldr	r0, [r3, #0]
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	6899      	ldr	r1, [r3, #8]
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685a      	ldr	r2, [r3, #4]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	f000 f9b7 	bl	8003b68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003808:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	609a      	str	r2, [r3, #8]
      break;
 8003812:	e04f      	b.n	80038b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6818      	ldr	r0, [r3, #0]
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	6899      	ldr	r1, [r3, #8]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	f000 f9a0 	bl	8003b68 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	689a      	ldr	r2, [r3, #8]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003836:	609a      	str	r2, [r3, #8]
      break;
 8003838:	e03c      	b.n	80038b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6818      	ldr	r0, [r3, #0]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	6859      	ldr	r1, [r3, #4]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	461a      	mov	r2, r3
 8003848:	f000 f914 	bl	8003a74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2150      	movs	r1, #80	; 0x50
 8003852:	4618      	mov	r0, r3
 8003854:	f000 f96d 	bl	8003b32 <TIM_ITRx_SetConfig>
      break;
 8003858:	e02c      	b.n	80038b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6818      	ldr	r0, [r3, #0]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	6859      	ldr	r1, [r3, #4]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	461a      	mov	r2, r3
 8003868:	f000 f933 	bl	8003ad2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2160      	movs	r1, #96	; 0x60
 8003872:	4618      	mov	r0, r3
 8003874:	f000 f95d 	bl	8003b32 <TIM_ITRx_SetConfig>
      break;
 8003878:	e01c      	b.n	80038b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6818      	ldr	r0, [r3, #0]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	6859      	ldr	r1, [r3, #4]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	461a      	mov	r2, r3
 8003888:	f000 f8f4 	bl	8003a74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2140      	movs	r1, #64	; 0x40
 8003892:	4618      	mov	r0, r3
 8003894:	f000 f94d 	bl	8003b32 <TIM_ITRx_SetConfig>
      break;
 8003898:	e00c      	b.n	80038b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4619      	mov	r1, r3
 80038a4:	4610      	mov	r0, r2
 80038a6:	f000 f944 	bl	8003b32 <TIM_ITRx_SetConfig>
      break;
 80038aa:	e003      	b.n	80038b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	73fb      	strb	r3, [r7, #15]
      break;
 80038b0:	e000      	b.n	80038b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80038b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b083      	sub	sp, #12
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80038d6:	bf00      	nop
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr

080038e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr

080038f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b083      	sub	sp, #12
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800390a:	b480      	push	{r7}
 800390c:	b083      	sub	sp, #12
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003912:	bf00      	nop
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr

0800391e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800391e:	b480      	push	{r7}
 8003920:	b083      	sub	sp, #12
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003926:	bf00      	nop
 8003928:	370c      	adds	r7, #12
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
	...

08003934 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003934:	b480      	push	{r7}
 8003936:	b085      	sub	sp, #20
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a40      	ldr	r2, [pc, #256]	; (8003a48 <TIM_Base_SetConfig+0x114>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d013      	beq.n	8003974 <TIM_Base_SetConfig+0x40>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003952:	d00f      	beq.n	8003974 <TIM_Base_SetConfig+0x40>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a3d      	ldr	r2, [pc, #244]	; (8003a4c <TIM_Base_SetConfig+0x118>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d00b      	beq.n	8003974 <TIM_Base_SetConfig+0x40>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a3c      	ldr	r2, [pc, #240]	; (8003a50 <TIM_Base_SetConfig+0x11c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d007      	beq.n	8003974 <TIM_Base_SetConfig+0x40>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a3b      	ldr	r2, [pc, #236]	; (8003a54 <TIM_Base_SetConfig+0x120>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d003      	beq.n	8003974 <TIM_Base_SetConfig+0x40>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a3a      	ldr	r2, [pc, #232]	; (8003a58 <TIM_Base_SetConfig+0x124>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d108      	bne.n	8003986 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800397a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	4313      	orrs	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a2f      	ldr	r2, [pc, #188]	; (8003a48 <TIM_Base_SetConfig+0x114>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d02b      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003994:	d027      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a2c      	ldr	r2, [pc, #176]	; (8003a4c <TIM_Base_SetConfig+0x118>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d023      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a2b      	ldr	r2, [pc, #172]	; (8003a50 <TIM_Base_SetConfig+0x11c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d01f      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a2a      	ldr	r2, [pc, #168]	; (8003a54 <TIM_Base_SetConfig+0x120>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d01b      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a29      	ldr	r2, [pc, #164]	; (8003a58 <TIM_Base_SetConfig+0x124>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d017      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a28      	ldr	r2, [pc, #160]	; (8003a5c <TIM_Base_SetConfig+0x128>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d013      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a27      	ldr	r2, [pc, #156]	; (8003a60 <TIM_Base_SetConfig+0x12c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d00f      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a26      	ldr	r2, [pc, #152]	; (8003a64 <TIM_Base_SetConfig+0x130>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d00b      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a25      	ldr	r2, [pc, #148]	; (8003a68 <TIM_Base_SetConfig+0x134>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d007      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a24      	ldr	r2, [pc, #144]	; (8003a6c <TIM_Base_SetConfig+0x138>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d003      	beq.n	80039e6 <TIM_Base_SetConfig+0xb2>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a23      	ldr	r2, [pc, #140]	; (8003a70 <TIM_Base_SetConfig+0x13c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d108      	bne.n	80039f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	695b      	ldr	r3, [r3, #20]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a0a      	ldr	r2, [pc, #40]	; (8003a48 <TIM_Base_SetConfig+0x114>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d003      	beq.n	8003a2c <TIM_Base_SetConfig+0xf8>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a0c      	ldr	r2, [pc, #48]	; (8003a58 <TIM_Base_SetConfig+0x124>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d103      	bne.n	8003a34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	691a      	ldr	r2, [r3, #16]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	615a      	str	r2, [r3, #20]
}
 8003a3a:	bf00      	nop
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	40010000 	.word	0x40010000
 8003a4c:	40000400 	.word	0x40000400
 8003a50:	40000800 	.word	0x40000800
 8003a54:	40000c00 	.word	0x40000c00
 8003a58:	40010400 	.word	0x40010400
 8003a5c:	40014000 	.word	0x40014000
 8003a60:	40014400 	.word	0x40014400
 8003a64:	40014800 	.word	0x40014800
 8003a68:	40001800 	.word	0x40001800
 8003a6c:	40001c00 	.word	0x40001c00
 8003a70:	40002000 	.word	0x40002000

08003a74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6a1b      	ldr	r3, [r3, #32]
 8003a8a:	f023 0201 	bic.w	r2, r3, #1
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	011b      	lsls	r3, r3, #4
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f023 030a 	bic.w	r3, r3, #10
 8003ab0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	621a      	str	r2, [r3, #32]
}
 8003ac6:	bf00      	nop
 8003ac8:	371c      	adds	r7, #28
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr

08003ad2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b087      	sub	sp, #28
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	60f8      	str	r0, [r7, #12]
 8003ada:	60b9      	str	r1, [r7, #8]
 8003adc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	f023 0210 	bic.w	r2, r3, #16
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003afc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	031b      	lsls	r3, r3, #12
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	621a      	str	r2, [r3, #32]
}
 8003b26:	bf00      	nop
 8003b28:	371c      	adds	r7, #28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr

08003b32 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b32:	b480      	push	{r7}
 8003b34:	b085      	sub	sp, #20
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
 8003b3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b48:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	f043 0307 	orr.w	r3, r3, #7
 8003b54:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	609a      	str	r2, [r3, #8]
}
 8003b5c:	bf00      	nop
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b087      	sub	sp, #28
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
 8003b74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	021a      	lsls	r2, r3, #8
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	609a      	str	r2, [r3, #8]
}
 8003b9c:	bf00      	nop
 8003b9e:	371c      	adds	r7, #28
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d101      	bne.n	8003bc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	e05a      	b.n	8003c76 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003be6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a21      	ldr	r2, [pc, #132]	; (8003c84 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d022      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c0c:	d01d      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a1d      	ldr	r2, [pc, #116]	; (8003c88 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d018      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a1b      	ldr	r2, [pc, #108]	; (8003c8c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d013      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a1a      	ldr	r2, [pc, #104]	; (8003c90 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d00e      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a18      	ldr	r2, [pc, #96]	; (8003c94 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d009      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a17      	ldr	r2, [pc, #92]	; (8003c98 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d004      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a15      	ldr	r2, [pc, #84]	; (8003c9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d10c      	bne.n	8003c64 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	40010000 	.word	0x40010000
 8003c88:	40000400 	.word	0x40000400
 8003c8c:	40000800 	.word	0x40000800
 8003c90:	40000c00 	.word	0x40000c00
 8003c94:	40010400 	.word	0x40010400
 8003c98:	40014000 	.word	0x40014000
 8003c9c:	40001800 	.word	0x40001800

08003ca0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e03f      	b.n	8003d5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d106      	bne.n	8003cf4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f7fd fb2a 	bl	8001348 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2224      	movs	r2, #36	; 0x24
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68da      	ldr	r2, [r3, #12]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 fde5 	bl	80048dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	691a      	ldr	r2, [r3, #16]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	695a      	ldr	r2, [r3, #20]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68da      	ldr	r2, [r3, #12]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2220      	movs	r2, #32
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2220      	movs	r2, #32
 8003d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b08a      	sub	sp, #40	; 0x28
 8003d66:	af02      	add	r7, sp, #8
 8003d68:	60f8      	str	r0, [r7, #12]
 8003d6a:	60b9      	str	r1, [r7, #8]
 8003d6c:	603b      	str	r3, [r7, #0]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d72:	2300      	movs	r3, #0
 8003d74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	2b20      	cmp	r3, #32
 8003d80:	d17c      	bne.n	8003e7c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d002      	beq.n	8003d8e <HAL_UART_Transmit+0x2c>
 8003d88:	88fb      	ldrh	r3, [r7, #6]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e075      	b.n	8003e7e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d101      	bne.n	8003da0 <HAL_UART_Transmit+0x3e>
 8003d9c:	2302      	movs	r3, #2
 8003d9e:	e06e      	b.n	8003e7e <HAL_UART_Transmit+0x11c>
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2200      	movs	r2, #0
 8003dac:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2221      	movs	r2, #33	; 0x21
 8003db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003db6:	f7fd fd41 	bl	800183c <HAL_GetTick>
 8003dba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	88fa      	ldrh	r2, [r7, #6]
 8003dc0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	88fa      	ldrh	r2, [r7, #6]
 8003dc6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd0:	d108      	bne.n	8003de4 <HAL_UART_Transmit+0x82>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d104      	bne.n	8003de4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	61bb      	str	r3, [r7, #24]
 8003de2:	e003      	b.n	8003dec <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003de8:	2300      	movs	r3, #0
 8003dea:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003df4:	e02a      	b.n	8003e4c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	2180      	movs	r1, #128	; 0x80
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 fb29 	bl	8004458 <UART_WaitOnFlagUntilTimeout>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e036      	b.n	8003e7e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10b      	bne.n	8003e2e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e24:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	3302      	adds	r3, #2
 8003e2a:	61bb      	str	r3, [r7, #24]
 8003e2c:	e007      	b.n	8003e3e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	781a      	ldrb	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	3b01      	subs	r3, #1
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1cf      	bne.n	8003df6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	2140      	movs	r1, #64	; 0x40
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f000 faf9 	bl	8004458 <UART_WaitOnFlagUntilTimeout>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e006      	b.n	8003e7e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	e000      	b.n	8003e7e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e7c:	2302      	movs	r3, #2
  }
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3720      	adds	r7, #32
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b084      	sub	sp, #16
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	60f8      	str	r0, [r7, #12]
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	4613      	mov	r3, r2
 8003e92:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b20      	cmp	r3, #32
 8003e9e:	d11d      	bne.n	8003edc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d002      	beq.n	8003eac <HAL_UART_Receive_IT+0x26>
 8003ea6:	88fb      	ldrh	r3, [r7, #6]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e016      	b.n	8003ede <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d101      	bne.n	8003ebe <HAL_UART_Receive_IT+0x38>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	e00f      	b.n	8003ede <HAL_UART_Receive_IT+0x58>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ecc:	88fb      	ldrh	r3, [r7, #6]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	68b9      	ldr	r1, [r7, #8]
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f000 fb2e 	bl	8004534 <UART_Start_Receive_IT>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	e000      	b.n	8003ede <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003edc:	2302      	movs	r3, #2
  }
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
	...

08003ee8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b0ba      	sub	sp, #232	; 0xe8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003f14:	2300      	movs	r3, #0
 8003f16:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f1e:	f003 030f 	and.w	r3, r3, #15
 8003f22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003f26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10f      	bne.n	8003f4e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f32:	f003 0320 	and.w	r3, r3, #32
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d009      	beq.n	8003f4e <HAL_UART_IRQHandler+0x66>
 8003f3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f3e:	f003 0320 	and.w	r3, r3, #32
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d003      	beq.n	8003f4e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 fc11 	bl	800476e <UART_Receive_IT>
      return;
 8003f4c:	e256      	b.n	80043fc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 80de 	beq.w	8004114 <HAL_UART_IRQHandler+0x22c>
 8003f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d106      	bne.n	8003f72 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f68:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 80d1 	beq.w	8004114 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00b      	beq.n	8003f96 <HAL_UART_IRQHandler+0xae>
 8003f7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d005      	beq.n	8003f96 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8e:	f043 0201 	orr.w	r2, r3, #1
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f9a:	f003 0304 	and.w	r3, r3, #4
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00b      	beq.n	8003fba <HAL_UART_IRQHandler+0xd2>
 8003fa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d005      	beq.n	8003fba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	f043 0202 	orr.w	r2, r3, #2
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00b      	beq.n	8003fde <HAL_UART_IRQHandler+0xf6>
 8003fc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d005      	beq.n	8003fde <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd6:	f043 0204 	orr.w	r2, r3, #4
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d011      	beq.n	800400e <HAL_UART_IRQHandler+0x126>
 8003fea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fee:	f003 0320 	and.w	r3, r3, #32
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d105      	bne.n	8004002 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ff6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d005      	beq.n	800400e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	f043 0208 	orr.w	r2, r3, #8
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 81ed 	beq.w	80043f2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800401c:	f003 0320 	and.w	r3, r3, #32
 8004020:	2b00      	cmp	r3, #0
 8004022:	d008      	beq.n	8004036 <HAL_UART_IRQHandler+0x14e>
 8004024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004028:	f003 0320 	and.w	r3, r3, #32
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f000 fb9c 	bl	800476e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004040:	2b40      	cmp	r3, #64	; 0x40
 8004042:	bf0c      	ite	eq
 8004044:	2301      	moveq	r3, #1
 8004046:	2300      	movne	r3, #0
 8004048:	b2db      	uxtb	r3, r3
 800404a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	f003 0308 	and.w	r3, r3, #8
 8004056:	2b00      	cmp	r3, #0
 8004058:	d103      	bne.n	8004062 <HAL_UART_IRQHandler+0x17a>
 800405a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800405e:	2b00      	cmp	r3, #0
 8004060:	d04f      	beq.n	8004102 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 faa4 	bl	80045b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004072:	2b40      	cmp	r3, #64	; 0x40
 8004074:	d141      	bne.n	80040fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	3314      	adds	r3, #20
 800407c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004080:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004084:	e853 3f00 	ldrex	r3, [r3]
 8004088:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800408c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004090:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004094:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	3314      	adds	r3, #20
 800409e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80040a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80040a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80040ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80040b2:	e841 2300 	strex	r3, r2, [r1]
 80040b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80040ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1d9      	bne.n	8004076 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d013      	beq.n	80040f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ce:	4a7d      	ldr	r2, [pc, #500]	; (80042c4 <HAL_UART_IRQHandler+0x3dc>)
 80040d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7fe f8be 	bl	8002258 <HAL_DMA_Abort_IT>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d016      	beq.n	8004110 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040ec:	4610      	mov	r0, r2
 80040ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f0:	e00e      	b.n	8004110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f99a 	bl	800442c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f8:	e00a      	b.n	8004110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f996 	bl	800442c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004100:	e006      	b.n	8004110 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f992 	bl	800442c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800410e:	e170      	b.n	80043f2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004110:	bf00      	nop
    return;
 8004112:	e16e      	b.n	80043f2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004118:	2b01      	cmp	r3, #1
 800411a:	f040 814a 	bne.w	80043b2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800411e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004122:	f003 0310 	and.w	r3, r3, #16
 8004126:	2b00      	cmp	r3, #0
 8004128:	f000 8143 	beq.w	80043b2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800412c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004130:	f003 0310 	and.w	r3, r3, #16
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 813c 	beq.w	80043b2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800413a:	2300      	movs	r3, #0
 800413c:	60bb      	str	r3, [r7, #8]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	60bb      	str	r3, [r7, #8]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	60bb      	str	r3, [r7, #8]
 800414e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800415a:	2b40      	cmp	r3, #64	; 0x40
 800415c:	f040 80b4 	bne.w	80042c8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800416c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004170:	2b00      	cmp	r3, #0
 8004172:	f000 8140 	beq.w	80043f6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800417a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800417e:	429a      	cmp	r2, r3
 8004180:	f080 8139 	bcs.w	80043f6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800418a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004196:	f000 8088 	beq.w	80042aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	330c      	adds	r3, #12
 80041a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041a8:	e853 3f00 	ldrex	r3, [r3]
 80041ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80041b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	330c      	adds	r3, #12
 80041c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80041c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80041d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80041d6:	e841 2300 	strex	r3, r2, [r1]
 80041da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80041de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1d9      	bne.n	800419a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	3314      	adds	r3, #20
 80041ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041f0:	e853 3f00 	ldrex	r3, [r3]
 80041f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80041f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041f8:	f023 0301 	bic.w	r3, r3, #1
 80041fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3314      	adds	r3, #20
 8004206:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800420a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800420e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004210:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004212:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004216:	e841 2300 	strex	r3, r2, [r1]
 800421a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800421c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1e1      	bne.n	80041e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	3314      	adds	r3, #20
 8004228:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800422c:	e853 3f00 	ldrex	r3, [r3]
 8004230:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004234:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004238:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	3314      	adds	r3, #20
 8004242:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004246:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004248:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800424c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800424e:	e841 2300 	strex	r3, r2, [r1]
 8004252:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004254:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1e3      	bne.n	8004222 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2220      	movs	r2, #32
 800425e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	330c      	adds	r3, #12
 800426e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004272:	e853 3f00 	ldrex	r3, [r3]
 8004276:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800427a:	f023 0310 	bic.w	r3, r3, #16
 800427e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	330c      	adds	r3, #12
 8004288:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800428c:	65ba      	str	r2, [r7, #88]	; 0x58
 800428e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004290:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004292:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004294:	e841 2300 	strex	r3, r2, [r1]
 8004298:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800429a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1e3      	bne.n	8004268 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a4:	4618      	mov	r0, r3
 80042a6:	f7fd ff67 	bl	8002178 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	4619      	mov	r1, r3
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 f8c0 	bl	8004440 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042c0:	e099      	b.n	80043f6 <HAL_UART_IRQHandler+0x50e>
 80042c2:	bf00      	nop
 80042c4:	08004677 	.word	0x08004677
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042dc:	b29b      	uxth	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 808b 	beq.w	80043fa <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80042e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 8086 	beq.w	80043fa <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	330c      	adds	r3, #12
 80042f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f8:	e853 3f00 	ldrex	r3, [r3]
 80042fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004300:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004304:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	330c      	adds	r3, #12
 800430e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004312:	647a      	str	r2, [r7, #68]	; 0x44
 8004314:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004316:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004318:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800431a:	e841 2300 	strex	r3, r2, [r1]
 800431e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1e3      	bne.n	80042ee <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	3314      	adds	r3, #20
 800432c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004330:	e853 3f00 	ldrex	r3, [r3]
 8004334:	623b      	str	r3, [r7, #32]
   return(result);
 8004336:	6a3b      	ldr	r3, [r7, #32]
 8004338:	f023 0301 	bic.w	r3, r3, #1
 800433c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	3314      	adds	r3, #20
 8004346:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800434a:	633a      	str	r2, [r7, #48]	; 0x30
 800434c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004352:	e841 2300 	strex	r3, r2, [r1]
 8004356:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1e3      	bne.n	8004326 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2220      	movs	r2, #32
 8004362:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	330c      	adds	r3, #12
 8004372:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	e853 3f00 	ldrex	r3, [r3]
 800437a:	60fb      	str	r3, [r7, #12]
   return(result);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f023 0310 	bic.w	r3, r3, #16
 8004382:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	330c      	adds	r3, #12
 800438c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004390:	61fa      	str	r2, [r7, #28]
 8004392:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004394:	69b9      	ldr	r1, [r7, #24]
 8004396:	69fa      	ldr	r2, [r7, #28]
 8004398:	e841 2300 	strex	r3, r2, [r1]
 800439c:	617b      	str	r3, [r7, #20]
   return(result);
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1e3      	bne.n	800436c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043a8:	4619      	mov	r1, r3
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 f848 	bl	8004440 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043b0:	e023      	b.n	80043fa <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d009      	beq.n	80043d2 <HAL_UART_IRQHandler+0x4ea>
 80043be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d003      	beq.n	80043d2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f000 f967 	bl	800469e <UART_Transmit_IT>
    return;
 80043d0:	e014      	b.n	80043fc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00e      	beq.n	80043fc <HAL_UART_IRQHandler+0x514>
 80043de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d008      	beq.n	80043fc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f000 f9a7 	bl	800473e <UART_EndTransmit_IT>
    return;
 80043f0:	e004      	b.n	80043fc <HAL_UART_IRQHandler+0x514>
    return;
 80043f2:	bf00      	nop
 80043f4:	e002      	b.n	80043fc <HAL_UART_IRQHandler+0x514>
      return;
 80043f6:	bf00      	nop
 80043f8:	e000      	b.n	80043fc <HAL_UART_IRQHandler+0x514>
      return;
 80043fa:	bf00      	nop
  }
}
 80043fc:	37e8      	adds	r7, #232	; 0xe8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop

08004404 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800442c:	b480      	push	{r7}
 800442e:	b083      	sub	sp, #12
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	460b      	mov	r3, r1
 800444a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b090      	sub	sp, #64	; 0x40
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	603b      	str	r3, [r7, #0]
 8004464:	4613      	mov	r3, r2
 8004466:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004468:	e050      	b.n	800450c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800446a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800446c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004470:	d04c      	beq.n	800450c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004472:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004474:	2b00      	cmp	r3, #0
 8004476:	d007      	beq.n	8004488 <UART_WaitOnFlagUntilTimeout+0x30>
 8004478:	f7fd f9e0 	bl	800183c <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004484:	429a      	cmp	r2, r3
 8004486:	d241      	bcs.n	800450c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	330c      	adds	r3, #12
 800448e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004492:	e853 3f00 	ldrex	r3, [r3]
 8004496:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800449e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	330c      	adds	r3, #12
 80044a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044a8:	637a      	str	r2, [r7, #52]	; 0x34
 80044aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044b0:	e841 2300 	strex	r3, r2, [r1]
 80044b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1e5      	bne.n	8004488 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	3314      	adds	r3, #20
 80044c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	e853 3f00 	ldrex	r3, [r3]
 80044ca:	613b      	str	r3, [r7, #16]
   return(result);
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	f023 0301 	bic.w	r3, r3, #1
 80044d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	3314      	adds	r3, #20
 80044da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044dc:	623a      	str	r2, [r7, #32]
 80044de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e0:	69f9      	ldr	r1, [r7, #28]
 80044e2:	6a3a      	ldr	r2, [r7, #32]
 80044e4:	e841 2300 	strex	r3, r2, [r1]
 80044e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1e5      	bne.n	80044bc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2220      	movs	r2, #32
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2220      	movs	r2, #32
 80044fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e00f      	b.n	800452c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	4013      	ands	r3, r2
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	429a      	cmp	r2, r3
 800451a:	bf0c      	ite	eq
 800451c:	2301      	moveq	r3, #1
 800451e:	2300      	movne	r3, #0
 8004520:	b2db      	uxtb	r3, r3
 8004522:	461a      	mov	r2, r3
 8004524:	79fb      	ldrb	r3, [r7, #7]
 8004526:	429a      	cmp	r2, r3
 8004528:	d09f      	beq.n	800446a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3740      	adds	r7, #64	; 0x40
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004534:	b480      	push	{r7}
 8004536:	b085      	sub	sp, #20
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	4613      	mov	r3, r2
 8004540:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	68ba      	ldr	r2, [r7, #8]
 8004546:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	88fa      	ldrh	r2, [r7, #6]
 800454c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	88fa      	ldrh	r2, [r7, #6]
 8004552:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2222      	movs	r2, #34	; 0x22
 800455e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d007      	beq.n	8004582 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68da      	ldr	r2, [r3, #12]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004580:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	695a      	ldr	r2, [r3, #20]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f042 0201 	orr.w	r2, r2, #1
 8004590:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	68da      	ldr	r2, [r3, #12]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f042 0220 	orr.w	r2, r2, #32
 80045a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b095      	sub	sp, #84	; 0x54
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	330c      	adds	r3, #12
 80045be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c2:	e853 3f00 	ldrex	r3, [r3]
 80045c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	330c      	adds	r3, #12
 80045d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045d8:	643a      	str	r2, [r7, #64]	; 0x40
 80045da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045e0:	e841 2300 	strex	r3, r2, [r1]
 80045e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1e5      	bne.n	80045b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	3314      	adds	r3, #20
 80045f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f4:	6a3b      	ldr	r3, [r7, #32]
 80045f6:	e853 3f00 	ldrex	r3, [r3]
 80045fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	f023 0301 	bic.w	r3, r3, #1
 8004602:	64bb      	str	r3, [r7, #72]	; 0x48
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	3314      	adds	r3, #20
 800460a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800460c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800460e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004610:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004612:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004614:	e841 2300 	strex	r3, r2, [r1]
 8004618:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1e5      	bne.n	80045ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004624:	2b01      	cmp	r3, #1
 8004626:	d119      	bne.n	800465c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	330c      	adds	r3, #12
 800462e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	e853 3f00 	ldrex	r3, [r3]
 8004636:	60bb      	str	r3, [r7, #8]
   return(result);
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	f023 0310 	bic.w	r3, r3, #16
 800463e:	647b      	str	r3, [r7, #68]	; 0x44
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	330c      	adds	r3, #12
 8004646:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004648:	61ba      	str	r2, [r7, #24]
 800464a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464c:	6979      	ldr	r1, [r7, #20]
 800464e:	69ba      	ldr	r2, [r7, #24]
 8004650:	e841 2300 	strex	r3, r2, [r1]
 8004654:	613b      	str	r3, [r7, #16]
   return(result);
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1e5      	bne.n	8004628 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2220      	movs	r2, #32
 8004660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	631a      	str	r2, [r3, #48]	; 0x30
}
 800466a:	bf00      	nop
 800466c:	3754      	adds	r7, #84	; 0x54
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b084      	sub	sp, #16
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004682:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f7ff fecb 	bl	800442c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004696:	bf00      	nop
 8004698:	3710      	adds	r7, #16
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800469e:	b480      	push	{r7}
 80046a0:	b085      	sub	sp, #20
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	2b21      	cmp	r3, #33	; 0x21
 80046b0:	d13e      	bne.n	8004730 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ba:	d114      	bne.n	80046e6 <UART_Transmit_IT+0x48>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d110      	bne.n	80046e6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	881b      	ldrh	r3, [r3, #0]
 80046ce:	461a      	mov	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046d8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	1c9a      	adds	r2, r3, #2
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	621a      	str	r2, [r3, #32]
 80046e4:	e008      	b.n	80046f8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	1c59      	adds	r1, r3, #1
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	6211      	str	r1, [r2, #32]
 80046f0:	781a      	ldrb	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	3b01      	subs	r3, #1
 8004700:	b29b      	uxth	r3, r3
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	4619      	mov	r1, r3
 8004706:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10f      	bne.n	800472c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68da      	ldr	r2, [r3, #12]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800471a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800472a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800472c:	2300      	movs	r3, #0
 800472e:	e000      	b.n	8004732 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004730:	2302      	movs	r3, #2
  }
}
 8004732:	4618      	mov	r0, r3
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800473e:	b580      	push	{r7, lr}
 8004740:	b082      	sub	sp, #8
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68da      	ldr	r2, [r3, #12]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004754:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2220      	movs	r2, #32
 800475a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7ff fe50 	bl	8004404 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3708      	adds	r7, #8
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b08c      	sub	sp, #48	; 0x30
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b22      	cmp	r3, #34	; 0x22
 8004780:	f040 80a6 	bne.w	80048d0 <UART_Receive_IT+0x162>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800478c:	d117      	bne.n	80047be <UART_Receive_IT+0x50>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d113      	bne.n	80047be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004796:	2300      	movs	r3, #0
 8004798:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b6:	1c9a      	adds	r2, r3, #2
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	629a      	str	r2, [r3, #40]	; 0x28
 80047bc:	e021      	b.n	8004802 <UART_Receive_IT+0x94>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80047c4:	2300      	movs	r3, #0
 80047c6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047d0:	d007      	beq.n	80047e2 <UART_Receive_IT+0x74>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10a      	bne.n	80047f0 <UART_Receive_IT+0x82>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d106      	bne.n	80047f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	b2da      	uxtb	r2, r3
 80047ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ec:	701a      	strb	r2, [r3, #0]
 80047ee:	e008      	b.n	8004802 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047fc:	b2da      	uxtb	r2, r3
 80047fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004800:	701a      	strb	r2, [r3, #0]
      }
      //huart->pRxBuffPtr += 1U;
    }

    if (--huart->RxXferCount == 0U)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004806:	b29b      	uxth	r3, r3
 8004808:	3b01      	subs	r3, #1
 800480a:	b29b      	uxth	r3, r3
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	4619      	mov	r1, r3
 8004810:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004812:	2b00      	cmp	r3, #0
 8004814:	d15a      	bne.n	80048cc <UART_Receive_IT+0x15e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68da      	ldr	r2, [r3, #12]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 0220 	bic.w	r2, r2, #32
 8004824:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68da      	ldr	r2, [r3, #12]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004834:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	695a      	ldr	r2, [r3, #20]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 0201 	bic.w	r2, r2, #1
 8004844:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2220      	movs	r2, #32
 800484a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004852:	2b01      	cmp	r3, #1
 8004854:	d135      	bne.n	80048c2 <UART_Receive_IT+0x154>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	330c      	adds	r3, #12
 8004862:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	e853 3f00 	ldrex	r3, [r3]
 800486a:	613b      	str	r3, [r7, #16]
   return(result);
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	f023 0310 	bic.w	r3, r3, #16
 8004872:	627b      	str	r3, [r7, #36]	; 0x24
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	330c      	adds	r3, #12
 800487a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800487c:	623a      	str	r2, [r7, #32]
 800487e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004880:	69f9      	ldr	r1, [r7, #28]
 8004882:	6a3a      	ldr	r2, [r7, #32]
 8004884:	e841 2300 	strex	r3, r2, [r1]
 8004888:	61bb      	str	r3, [r7, #24]
   return(result);
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1e5      	bne.n	800485c <UART_Receive_IT+0xee>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0310 	and.w	r3, r3, #16
 800489a:	2b10      	cmp	r3, #16
 800489c:	d10a      	bne.n	80048b4 <UART_Receive_IT+0x146>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800489e:	2300      	movs	r3, #0
 80048a0:	60fb      	str	r3, [r7, #12]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	60fb      	str	r3, [r7, #12]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	60fb      	str	r3, [r7, #12]
 80048b2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048b8:	4619      	mov	r1, r3
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f7ff fdc0 	bl	8004440 <HAL_UARTEx_RxEventCallback>
 80048c0:	e002      	b.n	80048c8 <UART_Receive_IT+0x15a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7ff fda8 	bl	8004418 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048c8:	2300      	movs	r3, #0
 80048ca:	e002      	b.n	80048d2 <UART_Receive_IT+0x164>
    }
    return HAL_OK;
 80048cc:	2300      	movs	r3, #0
 80048ce:	e000      	b.n	80048d2 <UART_Receive_IT+0x164>
  }
  else
  {
    return HAL_BUSY;
 80048d0:	2302      	movs	r3, #2
  }
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3730      	adds	r7, #48	; 0x30
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
	...

080048dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048e0:	b0c0      	sub	sp, #256	; 0x100
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80048f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048f8:	68d9      	ldr	r1, [r3, #12]
 80048fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	ea40 0301 	orr.w	r3, r0, r1
 8004904:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	431a      	orrs	r2, r3
 8004914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	431a      	orrs	r2, r3
 800491c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	4313      	orrs	r3, r2
 8004924:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004934:	f021 010c 	bic.w	r1, r1, #12
 8004938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004942:	430b      	orrs	r3, r1
 8004944:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004956:	6999      	ldr	r1, [r3, #24]
 8004958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	ea40 0301 	orr.w	r3, r0, r1
 8004962:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	4b8f      	ldr	r3, [pc, #572]	; (8004ba8 <UART_SetConfig+0x2cc>)
 800496c:	429a      	cmp	r2, r3
 800496e:	d005      	beq.n	800497c <UART_SetConfig+0xa0>
 8004970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	4b8d      	ldr	r3, [pc, #564]	; (8004bac <UART_SetConfig+0x2d0>)
 8004978:	429a      	cmp	r2, r3
 800497a:	d104      	bne.n	8004986 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800497c:	f7fe fd0c 	bl	8003398 <HAL_RCC_GetPCLK2Freq>
 8004980:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004984:	e003      	b.n	800498e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004986:	f7fe fcf3 	bl	8003370 <HAL_RCC_GetPCLK1Freq>
 800498a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800498e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004998:	f040 810c 	bne.w	8004bb4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800499c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049a0:	2200      	movs	r2, #0
 80049a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80049a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80049aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80049ae:	4622      	mov	r2, r4
 80049b0:	462b      	mov	r3, r5
 80049b2:	1891      	adds	r1, r2, r2
 80049b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80049b6:	415b      	adcs	r3, r3
 80049b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049be:	4621      	mov	r1, r4
 80049c0:	eb12 0801 	adds.w	r8, r2, r1
 80049c4:	4629      	mov	r1, r5
 80049c6:	eb43 0901 	adc.w	r9, r3, r1
 80049ca:	f04f 0200 	mov.w	r2, #0
 80049ce:	f04f 0300 	mov.w	r3, #0
 80049d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049de:	4690      	mov	r8, r2
 80049e0:	4699      	mov	r9, r3
 80049e2:	4623      	mov	r3, r4
 80049e4:	eb18 0303 	adds.w	r3, r8, r3
 80049e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80049ec:	462b      	mov	r3, r5
 80049ee:	eb49 0303 	adc.w	r3, r9, r3
 80049f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80049f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a02:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	18db      	adds	r3, r3, r3
 8004a0e:	653b      	str	r3, [r7, #80]	; 0x50
 8004a10:	4613      	mov	r3, r2
 8004a12:	eb42 0303 	adc.w	r3, r2, r3
 8004a16:	657b      	str	r3, [r7, #84]	; 0x54
 8004a18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a20:	f7fc f870 	bl	8000b04 <__aeabi_uldivmod>
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	4b61      	ldr	r3, [pc, #388]	; (8004bb0 <UART_SetConfig+0x2d4>)
 8004a2a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a2e:	095b      	lsrs	r3, r3, #5
 8004a30:	011c      	lsls	r4, r3, #4
 8004a32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a36:	2200      	movs	r2, #0
 8004a38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a3c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a44:	4642      	mov	r2, r8
 8004a46:	464b      	mov	r3, r9
 8004a48:	1891      	adds	r1, r2, r2
 8004a4a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a4c:	415b      	adcs	r3, r3
 8004a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a54:	4641      	mov	r1, r8
 8004a56:	eb12 0a01 	adds.w	sl, r2, r1
 8004a5a:	4649      	mov	r1, r9
 8004a5c:	eb43 0b01 	adc.w	fp, r3, r1
 8004a60:	f04f 0200 	mov.w	r2, #0
 8004a64:	f04f 0300 	mov.w	r3, #0
 8004a68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a74:	4692      	mov	sl, r2
 8004a76:	469b      	mov	fp, r3
 8004a78:	4643      	mov	r3, r8
 8004a7a:	eb1a 0303 	adds.w	r3, sl, r3
 8004a7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a82:	464b      	mov	r3, r9
 8004a84:	eb4b 0303 	adc.w	r3, fp, r3
 8004a88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a98:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	18db      	adds	r3, r3, r3
 8004aa4:	643b      	str	r3, [r7, #64]	; 0x40
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	eb42 0303 	adc.w	r3, r2, r3
 8004aac:	647b      	str	r3, [r7, #68]	; 0x44
 8004aae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ab2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004ab6:	f7fc f825 	bl	8000b04 <__aeabi_uldivmod>
 8004aba:	4602      	mov	r2, r0
 8004abc:	460b      	mov	r3, r1
 8004abe:	4611      	mov	r1, r2
 8004ac0:	4b3b      	ldr	r3, [pc, #236]	; (8004bb0 <UART_SetConfig+0x2d4>)
 8004ac2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ac6:	095b      	lsrs	r3, r3, #5
 8004ac8:	2264      	movs	r2, #100	; 0x64
 8004aca:	fb02 f303 	mul.w	r3, r2, r3
 8004ace:	1acb      	subs	r3, r1, r3
 8004ad0:	00db      	lsls	r3, r3, #3
 8004ad2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004ad6:	4b36      	ldr	r3, [pc, #216]	; (8004bb0 <UART_SetConfig+0x2d4>)
 8004ad8:	fba3 2302 	umull	r2, r3, r3, r2
 8004adc:	095b      	lsrs	r3, r3, #5
 8004ade:	005b      	lsls	r3, r3, #1
 8004ae0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ae4:	441c      	add	r4, r3
 8004ae6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004aea:	2200      	movs	r2, #0
 8004aec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004af0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004af4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004af8:	4642      	mov	r2, r8
 8004afa:	464b      	mov	r3, r9
 8004afc:	1891      	adds	r1, r2, r2
 8004afe:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b00:	415b      	adcs	r3, r3
 8004b02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b08:	4641      	mov	r1, r8
 8004b0a:	1851      	adds	r1, r2, r1
 8004b0c:	6339      	str	r1, [r7, #48]	; 0x30
 8004b0e:	4649      	mov	r1, r9
 8004b10:	414b      	adcs	r3, r1
 8004b12:	637b      	str	r3, [r7, #52]	; 0x34
 8004b14:	f04f 0200 	mov.w	r2, #0
 8004b18:	f04f 0300 	mov.w	r3, #0
 8004b1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b20:	4659      	mov	r1, fp
 8004b22:	00cb      	lsls	r3, r1, #3
 8004b24:	4651      	mov	r1, sl
 8004b26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b2a:	4651      	mov	r1, sl
 8004b2c:	00ca      	lsls	r2, r1, #3
 8004b2e:	4610      	mov	r0, r2
 8004b30:	4619      	mov	r1, r3
 8004b32:	4603      	mov	r3, r0
 8004b34:	4642      	mov	r2, r8
 8004b36:	189b      	adds	r3, r3, r2
 8004b38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b3c:	464b      	mov	r3, r9
 8004b3e:	460a      	mov	r2, r1
 8004b40:	eb42 0303 	adc.w	r3, r2, r3
 8004b44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b54:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	18db      	adds	r3, r3, r3
 8004b60:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b62:	4613      	mov	r3, r2
 8004b64:	eb42 0303 	adc.w	r3, r2, r3
 8004b68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b72:	f7fb ffc7 	bl	8000b04 <__aeabi_uldivmod>
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4b0d      	ldr	r3, [pc, #52]	; (8004bb0 <UART_SetConfig+0x2d4>)
 8004b7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b80:	095b      	lsrs	r3, r3, #5
 8004b82:	2164      	movs	r1, #100	; 0x64
 8004b84:	fb01 f303 	mul.w	r3, r1, r3
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	00db      	lsls	r3, r3, #3
 8004b8c:	3332      	adds	r3, #50	; 0x32
 8004b8e:	4a08      	ldr	r2, [pc, #32]	; (8004bb0 <UART_SetConfig+0x2d4>)
 8004b90:	fba2 2303 	umull	r2, r3, r2, r3
 8004b94:	095b      	lsrs	r3, r3, #5
 8004b96:	f003 0207 	and.w	r2, r3, #7
 8004b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4422      	add	r2, r4
 8004ba2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ba4:	e105      	b.n	8004db2 <UART_SetConfig+0x4d6>
 8004ba6:	bf00      	nop
 8004ba8:	40011000 	.word	0x40011000
 8004bac:	40011400 	.word	0x40011400
 8004bb0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004bbe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004bc2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004bc6:	4642      	mov	r2, r8
 8004bc8:	464b      	mov	r3, r9
 8004bca:	1891      	adds	r1, r2, r2
 8004bcc:	6239      	str	r1, [r7, #32]
 8004bce:	415b      	adcs	r3, r3
 8004bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8004bd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bd6:	4641      	mov	r1, r8
 8004bd8:	1854      	adds	r4, r2, r1
 8004bda:	4649      	mov	r1, r9
 8004bdc:	eb43 0501 	adc.w	r5, r3, r1
 8004be0:	f04f 0200 	mov.w	r2, #0
 8004be4:	f04f 0300 	mov.w	r3, #0
 8004be8:	00eb      	lsls	r3, r5, #3
 8004bea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bee:	00e2      	lsls	r2, r4, #3
 8004bf0:	4614      	mov	r4, r2
 8004bf2:	461d      	mov	r5, r3
 8004bf4:	4643      	mov	r3, r8
 8004bf6:	18e3      	adds	r3, r4, r3
 8004bf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004bfc:	464b      	mov	r3, r9
 8004bfe:	eb45 0303 	adc.w	r3, r5, r3
 8004c02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c16:	f04f 0200 	mov.w	r2, #0
 8004c1a:	f04f 0300 	mov.w	r3, #0
 8004c1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c22:	4629      	mov	r1, r5
 8004c24:	008b      	lsls	r3, r1, #2
 8004c26:	4621      	mov	r1, r4
 8004c28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c2c:	4621      	mov	r1, r4
 8004c2e:	008a      	lsls	r2, r1, #2
 8004c30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c34:	f7fb ff66 	bl	8000b04 <__aeabi_uldivmod>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	4b60      	ldr	r3, [pc, #384]	; (8004dc0 <UART_SetConfig+0x4e4>)
 8004c3e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c42:	095b      	lsrs	r3, r3, #5
 8004c44:	011c      	lsls	r4, r3, #4
 8004c46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c58:	4642      	mov	r2, r8
 8004c5a:	464b      	mov	r3, r9
 8004c5c:	1891      	adds	r1, r2, r2
 8004c5e:	61b9      	str	r1, [r7, #24]
 8004c60:	415b      	adcs	r3, r3
 8004c62:	61fb      	str	r3, [r7, #28]
 8004c64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c68:	4641      	mov	r1, r8
 8004c6a:	1851      	adds	r1, r2, r1
 8004c6c:	6139      	str	r1, [r7, #16]
 8004c6e:	4649      	mov	r1, r9
 8004c70:	414b      	adcs	r3, r1
 8004c72:	617b      	str	r3, [r7, #20]
 8004c74:	f04f 0200 	mov.w	r2, #0
 8004c78:	f04f 0300 	mov.w	r3, #0
 8004c7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c80:	4659      	mov	r1, fp
 8004c82:	00cb      	lsls	r3, r1, #3
 8004c84:	4651      	mov	r1, sl
 8004c86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c8a:	4651      	mov	r1, sl
 8004c8c:	00ca      	lsls	r2, r1, #3
 8004c8e:	4610      	mov	r0, r2
 8004c90:	4619      	mov	r1, r3
 8004c92:	4603      	mov	r3, r0
 8004c94:	4642      	mov	r2, r8
 8004c96:	189b      	adds	r3, r3, r2
 8004c98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c9c:	464b      	mov	r3, r9
 8004c9e:	460a      	mov	r2, r1
 8004ca0:	eb42 0303 	adc.w	r3, r2, r3
 8004ca4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cb2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004cb4:	f04f 0200 	mov.w	r2, #0
 8004cb8:	f04f 0300 	mov.w	r3, #0
 8004cbc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004cc0:	4649      	mov	r1, r9
 8004cc2:	008b      	lsls	r3, r1, #2
 8004cc4:	4641      	mov	r1, r8
 8004cc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cca:	4641      	mov	r1, r8
 8004ccc:	008a      	lsls	r2, r1, #2
 8004cce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004cd2:	f7fb ff17 	bl	8000b04 <__aeabi_uldivmod>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	460b      	mov	r3, r1
 8004cda:	4b39      	ldr	r3, [pc, #228]	; (8004dc0 <UART_SetConfig+0x4e4>)
 8004cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ce0:	095b      	lsrs	r3, r3, #5
 8004ce2:	2164      	movs	r1, #100	; 0x64
 8004ce4:	fb01 f303 	mul.w	r3, r1, r3
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	011b      	lsls	r3, r3, #4
 8004cec:	3332      	adds	r3, #50	; 0x32
 8004cee:	4a34      	ldr	r2, [pc, #208]	; (8004dc0 <UART_SetConfig+0x4e4>)
 8004cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf4:	095b      	lsrs	r3, r3, #5
 8004cf6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004cfa:	441c      	add	r4, r3
 8004cfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d00:	2200      	movs	r2, #0
 8004d02:	673b      	str	r3, [r7, #112]	; 0x70
 8004d04:	677a      	str	r2, [r7, #116]	; 0x74
 8004d06:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d0a:	4642      	mov	r2, r8
 8004d0c:	464b      	mov	r3, r9
 8004d0e:	1891      	adds	r1, r2, r2
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	415b      	adcs	r3, r3
 8004d14:	60fb      	str	r3, [r7, #12]
 8004d16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d1a:	4641      	mov	r1, r8
 8004d1c:	1851      	adds	r1, r2, r1
 8004d1e:	6039      	str	r1, [r7, #0]
 8004d20:	4649      	mov	r1, r9
 8004d22:	414b      	adcs	r3, r1
 8004d24:	607b      	str	r3, [r7, #4]
 8004d26:	f04f 0200 	mov.w	r2, #0
 8004d2a:	f04f 0300 	mov.w	r3, #0
 8004d2e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d32:	4659      	mov	r1, fp
 8004d34:	00cb      	lsls	r3, r1, #3
 8004d36:	4651      	mov	r1, sl
 8004d38:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d3c:	4651      	mov	r1, sl
 8004d3e:	00ca      	lsls	r2, r1, #3
 8004d40:	4610      	mov	r0, r2
 8004d42:	4619      	mov	r1, r3
 8004d44:	4603      	mov	r3, r0
 8004d46:	4642      	mov	r2, r8
 8004d48:	189b      	adds	r3, r3, r2
 8004d4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d4c:	464b      	mov	r3, r9
 8004d4e:	460a      	mov	r2, r1
 8004d50:	eb42 0303 	adc.w	r3, r2, r3
 8004d54:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	663b      	str	r3, [r7, #96]	; 0x60
 8004d60:	667a      	str	r2, [r7, #100]	; 0x64
 8004d62:	f04f 0200 	mov.w	r2, #0
 8004d66:	f04f 0300 	mov.w	r3, #0
 8004d6a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d6e:	4649      	mov	r1, r9
 8004d70:	008b      	lsls	r3, r1, #2
 8004d72:	4641      	mov	r1, r8
 8004d74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d78:	4641      	mov	r1, r8
 8004d7a:	008a      	lsls	r2, r1, #2
 8004d7c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004d80:	f7fb fec0 	bl	8000b04 <__aeabi_uldivmod>
 8004d84:	4602      	mov	r2, r0
 8004d86:	460b      	mov	r3, r1
 8004d88:	4b0d      	ldr	r3, [pc, #52]	; (8004dc0 <UART_SetConfig+0x4e4>)
 8004d8a:	fba3 1302 	umull	r1, r3, r3, r2
 8004d8e:	095b      	lsrs	r3, r3, #5
 8004d90:	2164      	movs	r1, #100	; 0x64
 8004d92:	fb01 f303 	mul.w	r3, r1, r3
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	011b      	lsls	r3, r3, #4
 8004d9a:	3332      	adds	r3, #50	; 0x32
 8004d9c:	4a08      	ldr	r2, [pc, #32]	; (8004dc0 <UART_SetConfig+0x4e4>)
 8004d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004da2:	095b      	lsrs	r3, r3, #5
 8004da4:	f003 020f 	and.w	r2, r3, #15
 8004da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4422      	add	r2, r4
 8004db0:	609a      	str	r2, [r3, #8]
}
 8004db2:	bf00      	nop
 8004db4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004db8:	46bd      	mov	sp, r7
 8004dba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004dbe:	bf00      	nop
 8004dc0:	51eb851f 	.word	0x51eb851f

08004dc4 <__libc_init_array>:
 8004dc4:	b570      	push	{r4, r5, r6, lr}
 8004dc6:	4d0d      	ldr	r5, [pc, #52]	; (8004dfc <__libc_init_array+0x38>)
 8004dc8:	4c0d      	ldr	r4, [pc, #52]	; (8004e00 <__libc_init_array+0x3c>)
 8004dca:	1b64      	subs	r4, r4, r5
 8004dcc:	10a4      	asrs	r4, r4, #2
 8004dce:	2600      	movs	r6, #0
 8004dd0:	42a6      	cmp	r6, r4
 8004dd2:	d109      	bne.n	8004de8 <__libc_init_array+0x24>
 8004dd4:	4d0b      	ldr	r5, [pc, #44]	; (8004e04 <__libc_init_array+0x40>)
 8004dd6:	4c0c      	ldr	r4, [pc, #48]	; (8004e08 <__libc_init_array+0x44>)
 8004dd8:	f001 f86c 	bl	8005eb4 <_init>
 8004ddc:	1b64      	subs	r4, r4, r5
 8004dde:	10a4      	asrs	r4, r4, #2
 8004de0:	2600      	movs	r6, #0
 8004de2:	42a6      	cmp	r6, r4
 8004de4:	d105      	bne.n	8004df2 <__libc_init_array+0x2e>
 8004de6:	bd70      	pop	{r4, r5, r6, pc}
 8004de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dec:	4798      	blx	r3
 8004dee:	3601      	adds	r6, #1
 8004df0:	e7ee      	b.n	8004dd0 <__libc_init_array+0xc>
 8004df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004df6:	4798      	blx	r3
 8004df8:	3601      	adds	r6, #1
 8004dfa:	e7f2      	b.n	8004de2 <__libc_init_array+0x1e>
 8004dfc:	080060d0 	.word	0x080060d0
 8004e00:	080060d0 	.word	0x080060d0
 8004e04:	080060d0 	.word	0x080060d0
 8004e08:	080060d4 	.word	0x080060d4

08004e0c <memset>:
 8004e0c:	4402      	add	r2, r0
 8004e0e:	4603      	mov	r3, r0
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d100      	bne.n	8004e16 <memset+0xa>
 8004e14:	4770      	bx	lr
 8004e16:	f803 1b01 	strb.w	r1, [r3], #1
 8004e1a:	e7f9      	b.n	8004e10 <memset+0x4>
 8004e1c:	0000      	movs	r0, r0
	...

08004e20 <sin>:
 8004e20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004e22:	ec53 2b10 	vmov	r2, r3, d0
 8004e26:	4828      	ldr	r0, [pc, #160]	; (8004ec8 <sin+0xa8>)
 8004e28:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004e2c:	4281      	cmp	r1, r0
 8004e2e:	dc07      	bgt.n	8004e40 <sin+0x20>
 8004e30:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8004ec0 <sin+0xa0>
 8004e34:	2000      	movs	r0, #0
 8004e36:	b005      	add	sp, #20
 8004e38:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e3c:	f000 be6c 	b.w	8005b18 <__kernel_sin>
 8004e40:	4822      	ldr	r0, [pc, #136]	; (8004ecc <sin+0xac>)
 8004e42:	4281      	cmp	r1, r0
 8004e44:	dd09      	ble.n	8004e5a <sin+0x3a>
 8004e46:	ee10 0a10 	vmov	r0, s0
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	f7fb f9c0 	bl	80001d0 <__aeabi_dsub>
 8004e50:	ec41 0b10 	vmov	d0, r0, r1
 8004e54:	b005      	add	sp, #20
 8004e56:	f85d fb04 	ldr.w	pc, [sp], #4
 8004e5a:	4668      	mov	r0, sp
 8004e5c:	f000 f838 	bl	8004ed0 <__ieee754_rem_pio2>
 8004e60:	f000 0003 	and.w	r0, r0, #3
 8004e64:	2801      	cmp	r0, #1
 8004e66:	d00c      	beq.n	8004e82 <sin+0x62>
 8004e68:	2802      	cmp	r0, #2
 8004e6a:	d011      	beq.n	8004e90 <sin+0x70>
 8004e6c:	b9f0      	cbnz	r0, 8004eac <sin+0x8c>
 8004e6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004e72:	ed9d 0b00 	vldr	d0, [sp]
 8004e76:	2001      	movs	r0, #1
 8004e78:	f000 fe4e 	bl	8005b18 <__kernel_sin>
 8004e7c:	ec51 0b10 	vmov	r0, r1, d0
 8004e80:	e7e6      	b.n	8004e50 <sin+0x30>
 8004e82:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004e86:	ed9d 0b00 	vldr	d0, [sp]
 8004e8a:	f000 fa2d 	bl	80052e8 <__kernel_cos>
 8004e8e:	e7f5      	b.n	8004e7c <sin+0x5c>
 8004e90:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004e94:	ed9d 0b00 	vldr	d0, [sp]
 8004e98:	2001      	movs	r0, #1
 8004e9a:	f000 fe3d 	bl	8005b18 <__kernel_sin>
 8004e9e:	ec53 2b10 	vmov	r2, r3, d0
 8004ea2:	ee10 0a10 	vmov	r0, s0
 8004ea6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004eaa:	e7d1      	b.n	8004e50 <sin+0x30>
 8004eac:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004eb0:	ed9d 0b00 	vldr	d0, [sp]
 8004eb4:	f000 fa18 	bl	80052e8 <__kernel_cos>
 8004eb8:	e7f1      	b.n	8004e9e <sin+0x7e>
 8004eba:	bf00      	nop
 8004ebc:	f3af 8000 	nop.w
	...
 8004ec8:	3fe921fb 	.word	0x3fe921fb
 8004ecc:	7fefffff 	.word	0x7fefffff

08004ed0 <__ieee754_rem_pio2>:
 8004ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ed4:	ed2d 8b02 	vpush	{d8}
 8004ed8:	ec55 4b10 	vmov	r4, r5, d0
 8004edc:	4bca      	ldr	r3, [pc, #808]	; (8005208 <__ieee754_rem_pio2+0x338>)
 8004ede:	b08b      	sub	sp, #44	; 0x2c
 8004ee0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8004ee4:	4598      	cmp	r8, r3
 8004ee6:	4682      	mov	sl, r0
 8004ee8:	9502      	str	r5, [sp, #8]
 8004eea:	dc08      	bgt.n	8004efe <__ieee754_rem_pio2+0x2e>
 8004eec:	2200      	movs	r2, #0
 8004eee:	2300      	movs	r3, #0
 8004ef0:	ed80 0b00 	vstr	d0, [r0]
 8004ef4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004ef8:	f04f 0b00 	mov.w	fp, #0
 8004efc:	e028      	b.n	8004f50 <__ieee754_rem_pio2+0x80>
 8004efe:	4bc3      	ldr	r3, [pc, #780]	; (800520c <__ieee754_rem_pio2+0x33c>)
 8004f00:	4598      	cmp	r8, r3
 8004f02:	dc78      	bgt.n	8004ff6 <__ieee754_rem_pio2+0x126>
 8004f04:	9b02      	ldr	r3, [sp, #8]
 8004f06:	4ec2      	ldr	r6, [pc, #776]	; (8005210 <__ieee754_rem_pio2+0x340>)
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	ee10 0a10 	vmov	r0, s0
 8004f0e:	a3b0      	add	r3, pc, #704	; (adr r3, 80051d0 <__ieee754_rem_pio2+0x300>)
 8004f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f14:	4629      	mov	r1, r5
 8004f16:	dd39      	ble.n	8004f8c <__ieee754_rem_pio2+0xbc>
 8004f18:	f7fb f95a 	bl	80001d0 <__aeabi_dsub>
 8004f1c:	45b0      	cmp	r8, r6
 8004f1e:	4604      	mov	r4, r0
 8004f20:	460d      	mov	r5, r1
 8004f22:	d01b      	beq.n	8004f5c <__ieee754_rem_pio2+0x8c>
 8004f24:	a3ac      	add	r3, pc, #688	; (adr r3, 80051d8 <__ieee754_rem_pio2+0x308>)
 8004f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2a:	f7fb f951 	bl	80001d0 <__aeabi_dsub>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	460b      	mov	r3, r1
 8004f32:	e9ca 2300 	strd	r2, r3, [sl]
 8004f36:	4620      	mov	r0, r4
 8004f38:	4629      	mov	r1, r5
 8004f3a:	f7fb f949 	bl	80001d0 <__aeabi_dsub>
 8004f3e:	a3a6      	add	r3, pc, #664	; (adr r3, 80051d8 <__ieee754_rem_pio2+0x308>)
 8004f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f44:	f7fb f944 	bl	80001d0 <__aeabi_dsub>
 8004f48:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004f4c:	f04f 0b01 	mov.w	fp, #1
 8004f50:	4658      	mov	r0, fp
 8004f52:	b00b      	add	sp, #44	; 0x2c
 8004f54:	ecbd 8b02 	vpop	{d8}
 8004f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f5c:	a3a0      	add	r3, pc, #640	; (adr r3, 80051e0 <__ieee754_rem_pio2+0x310>)
 8004f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f62:	f7fb f935 	bl	80001d0 <__aeabi_dsub>
 8004f66:	a3a0      	add	r3, pc, #640	; (adr r3, 80051e8 <__ieee754_rem_pio2+0x318>)
 8004f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6c:	4604      	mov	r4, r0
 8004f6e:	460d      	mov	r5, r1
 8004f70:	f7fb f92e 	bl	80001d0 <__aeabi_dsub>
 8004f74:	4602      	mov	r2, r0
 8004f76:	460b      	mov	r3, r1
 8004f78:	e9ca 2300 	strd	r2, r3, [sl]
 8004f7c:	4620      	mov	r0, r4
 8004f7e:	4629      	mov	r1, r5
 8004f80:	f7fb f926 	bl	80001d0 <__aeabi_dsub>
 8004f84:	a398      	add	r3, pc, #608	; (adr r3, 80051e8 <__ieee754_rem_pio2+0x318>)
 8004f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8a:	e7db      	b.n	8004f44 <__ieee754_rem_pio2+0x74>
 8004f8c:	f7fb f922 	bl	80001d4 <__adddf3>
 8004f90:	45b0      	cmp	r8, r6
 8004f92:	4604      	mov	r4, r0
 8004f94:	460d      	mov	r5, r1
 8004f96:	d016      	beq.n	8004fc6 <__ieee754_rem_pio2+0xf6>
 8004f98:	a38f      	add	r3, pc, #572	; (adr r3, 80051d8 <__ieee754_rem_pio2+0x308>)
 8004f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f9e:	f7fb f919 	bl	80001d4 <__adddf3>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	e9ca 2300 	strd	r2, r3, [sl]
 8004faa:	4620      	mov	r0, r4
 8004fac:	4629      	mov	r1, r5
 8004fae:	f7fb f90f 	bl	80001d0 <__aeabi_dsub>
 8004fb2:	a389      	add	r3, pc, #548	; (adr r3, 80051d8 <__ieee754_rem_pio2+0x308>)
 8004fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb8:	f7fb f90c 	bl	80001d4 <__adddf3>
 8004fbc:	f04f 3bff 	mov.w	fp, #4294967295
 8004fc0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004fc4:	e7c4      	b.n	8004f50 <__ieee754_rem_pio2+0x80>
 8004fc6:	a386      	add	r3, pc, #536	; (adr r3, 80051e0 <__ieee754_rem_pio2+0x310>)
 8004fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fcc:	f7fb f902 	bl	80001d4 <__adddf3>
 8004fd0:	a385      	add	r3, pc, #532	; (adr r3, 80051e8 <__ieee754_rem_pio2+0x318>)
 8004fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd6:	4604      	mov	r4, r0
 8004fd8:	460d      	mov	r5, r1
 8004fda:	f7fb f8fb 	bl	80001d4 <__adddf3>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	e9ca 2300 	strd	r2, r3, [sl]
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	4629      	mov	r1, r5
 8004fea:	f7fb f8f1 	bl	80001d0 <__aeabi_dsub>
 8004fee:	a37e      	add	r3, pc, #504	; (adr r3, 80051e8 <__ieee754_rem_pio2+0x318>)
 8004ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff4:	e7e0      	b.n	8004fb8 <__ieee754_rem_pio2+0xe8>
 8004ff6:	4b87      	ldr	r3, [pc, #540]	; (8005214 <__ieee754_rem_pio2+0x344>)
 8004ff8:	4598      	cmp	r8, r3
 8004ffa:	f300 80d9 	bgt.w	80051b0 <__ieee754_rem_pio2+0x2e0>
 8004ffe:	f000 fe49 	bl	8005c94 <fabs>
 8005002:	ec55 4b10 	vmov	r4, r5, d0
 8005006:	ee10 0a10 	vmov	r0, s0
 800500a:	a379      	add	r3, pc, #484	; (adr r3, 80051f0 <__ieee754_rem_pio2+0x320>)
 800500c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005010:	4629      	mov	r1, r5
 8005012:	f7fb fa95 	bl	8000540 <__aeabi_dmul>
 8005016:	4b80      	ldr	r3, [pc, #512]	; (8005218 <__ieee754_rem_pio2+0x348>)
 8005018:	2200      	movs	r2, #0
 800501a:	f7fb f8db 	bl	80001d4 <__adddf3>
 800501e:	f7fb fd29 	bl	8000a74 <__aeabi_d2iz>
 8005022:	4683      	mov	fp, r0
 8005024:	f7fb fa22 	bl	800046c <__aeabi_i2d>
 8005028:	4602      	mov	r2, r0
 800502a:	460b      	mov	r3, r1
 800502c:	ec43 2b18 	vmov	d8, r2, r3
 8005030:	a367      	add	r3, pc, #412	; (adr r3, 80051d0 <__ieee754_rem_pio2+0x300>)
 8005032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005036:	f7fb fa83 	bl	8000540 <__aeabi_dmul>
 800503a:	4602      	mov	r2, r0
 800503c:	460b      	mov	r3, r1
 800503e:	4620      	mov	r0, r4
 8005040:	4629      	mov	r1, r5
 8005042:	f7fb f8c5 	bl	80001d0 <__aeabi_dsub>
 8005046:	a364      	add	r3, pc, #400	; (adr r3, 80051d8 <__ieee754_rem_pio2+0x308>)
 8005048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800504c:	4606      	mov	r6, r0
 800504e:	460f      	mov	r7, r1
 8005050:	ec51 0b18 	vmov	r0, r1, d8
 8005054:	f7fb fa74 	bl	8000540 <__aeabi_dmul>
 8005058:	f1bb 0f1f 	cmp.w	fp, #31
 800505c:	4604      	mov	r4, r0
 800505e:	460d      	mov	r5, r1
 8005060:	dc0d      	bgt.n	800507e <__ieee754_rem_pio2+0x1ae>
 8005062:	4b6e      	ldr	r3, [pc, #440]	; (800521c <__ieee754_rem_pio2+0x34c>)
 8005064:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800506c:	4543      	cmp	r3, r8
 800506e:	d006      	beq.n	800507e <__ieee754_rem_pio2+0x1ae>
 8005070:	4622      	mov	r2, r4
 8005072:	462b      	mov	r3, r5
 8005074:	4630      	mov	r0, r6
 8005076:	4639      	mov	r1, r7
 8005078:	f7fb f8aa 	bl	80001d0 <__aeabi_dsub>
 800507c:	e00f      	b.n	800509e <__ieee754_rem_pio2+0x1ce>
 800507e:	462b      	mov	r3, r5
 8005080:	4622      	mov	r2, r4
 8005082:	4630      	mov	r0, r6
 8005084:	4639      	mov	r1, r7
 8005086:	f7fb f8a3 	bl	80001d0 <__aeabi_dsub>
 800508a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800508e:	9303      	str	r3, [sp, #12]
 8005090:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005094:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8005098:	f1b8 0f10 	cmp.w	r8, #16
 800509c:	dc02      	bgt.n	80050a4 <__ieee754_rem_pio2+0x1d4>
 800509e:	e9ca 0100 	strd	r0, r1, [sl]
 80050a2:	e039      	b.n	8005118 <__ieee754_rem_pio2+0x248>
 80050a4:	a34e      	add	r3, pc, #312	; (adr r3, 80051e0 <__ieee754_rem_pio2+0x310>)
 80050a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050aa:	ec51 0b18 	vmov	r0, r1, d8
 80050ae:	f7fb fa47 	bl	8000540 <__aeabi_dmul>
 80050b2:	4604      	mov	r4, r0
 80050b4:	460d      	mov	r5, r1
 80050b6:	4602      	mov	r2, r0
 80050b8:	460b      	mov	r3, r1
 80050ba:	4630      	mov	r0, r6
 80050bc:	4639      	mov	r1, r7
 80050be:	f7fb f887 	bl	80001d0 <__aeabi_dsub>
 80050c2:	4602      	mov	r2, r0
 80050c4:	460b      	mov	r3, r1
 80050c6:	4680      	mov	r8, r0
 80050c8:	4689      	mov	r9, r1
 80050ca:	4630      	mov	r0, r6
 80050cc:	4639      	mov	r1, r7
 80050ce:	f7fb f87f 	bl	80001d0 <__aeabi_dsub>
 80050d2:	4622      	mov	r2, r4
 80050d4:	462b      	mov	r3, r5
 80050d6:	f7fb f87b 	bl	80001d0 <__aeabi_dsub>
 80050da:	a343      	add	r3, pc, #268	; (adr r3, 80051e8 <__ieee754_rem_pio2+0x318>)
 80050dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e0:	4604      	mov	r4, r0
 80050e2:	460d      	mov	r5, r1
 80050e4:	ec51 0b18 	vmov	r0, r1, d8
 80050e8:	f7fb fa2a 	bl	8000540 <__aeabi_dmul>
 80050ec:	4622      	mov	r2, r4
 80050ee:	462b      	mov	r3, r5
 80050f0:	f7fb f86e 	bl	80001d0 <__aeabi_dsub>
 80050f4:	4602      	mov	r2, r0
 80050f6:	460b      	mov	r3, r1
 80050f8:	4604      	mov	r4, r0
 80050fa:	460d      	mov	r5, r1
 80050fc:	4640      	mov	r0, r8
 80050fe:	4649      	mov	r1, r9
 8005100:	f7fb f866 	bl	80001d0 <__aeabi_dsub>
 8005104:	9a03      	ldr	r2, [sp, #12]
 8005106:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	2b31      	cmp	r3, #49	; 0x31
 800510e:	dc24      	bgt.n	800515a <__ieee754_rem_pio2+0x28a>
 8005110:	e9ca 0100 	strd	r0, r1, [sl]
 8005114:	4646      	mov	r6, r8
 8005116:	464f      	mov	r7, r9
 8005118:	e9da 8900 	ldrd	r8, r9, [sl]
 800511c:	4630      	mov	r0, r6
 800511e:	4642      	mov	r2, r8
 8005120:	464b      	mov	r3, r9
 8005122:	4639      	mov	r1, r7
 8005124:	f7fb f854 	bl	80001d0 <__aeabi_dsub>
 8005128:	462b      	mov	r3, r5
 800512a:	4622      	mov	r2, r4
 800512c:	f7fb f850 	bl	80001d0 <__aeabi_dsub>
 8005130:	9b02      	ldr	r3, [sp, #8]
 8005132:	2b00      	cmp	r3, #0
 8005134:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005138:	f6bf af0a 	bge.w	8004f50 <__ieee754_rem_pio2+0x80>
 800513c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005140:	f8ca 3004 	str.w	r3, [sl, #4]
 8005144:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005148:	f8ca 8000 	str.w	r8, [sl]
 800514c:	f8ca 0008 	str.w	r0, [sl, #8]
 8005150:	f8ca 300c 	str.w	r3, [sl, #12]
 8005154:	f1cb 0b00 	rsb	fp, fp, #0
 8005158:	e6fa      	b.n	8004f50 <__ieee754_rem_pio2+0x80>
 800515a:	a327      	add	r3, pc, #156	; (adr r3, 80051f8 <__ieee754_rem_pio2+0x328>)
 800515c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005160:	ec51 0b18 	vmov	r0, r1, d8
 8005164:	f7fb f9ec 	bl	8000540 <__aeabi_dmul>
 8005168:	4604      	mov	r4, r0
 800516a:	460d      	mov	r5, r1
 800516c:	4602      	mov	r2, r0
 800516e:	460b      	mov	r3, r1
 8005170:	4640      	mov	r0, r8
 8005172:	4649      	mov	r1, r9
 8005174:	f7fb f82c 	bl	80001d0 <__aeabi_dsub>
 8005178:	4602      	mov	r2, r0
 800517a:	460b      	mov	r3, r1
 800517c:	4606      	mov	r6, r0
 800517e:	460f      	mov	r7, r1
 8005180:	4640      	mov	r0, r8
 8005182:	4649      	mov	r1, r9
 8005184:	f7fb f824 	bl	80001d0 <__aeabi_dsub>
 8005188:	4622      	mov	r2, r4
 800518a:	462b      	mov	r3, r5
 800518c:	f7fb f820 	bl	80001d0 <__aeabi_dsub>
 8005190:	a31b      	add	r3, pc, #108	; (adr r3, 8005200 <__ieee754_rem_pio2+0x330>)
 8005192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005196:	4604      	mov	r4, r0
 8005198:	460d      	mov	r5, r1
 800519a:	ec51 0b18 	vmov	r0, r1, d8
 800519e:	f7fb f9cf 	bl	8000540 <__aeabi_dmul>
 80051a2:	4622      	mov	r2, r4
 80051a4:	462b      	mov	r3, r5
 80051a6:	f7fb f813 	bl	80001d0 <__aeabi_dsub>
 80051aa:	4604      	mov	r4, r0
 80051ac:	460d      	mov	r5, r1
 80051ae:	e75f      	b.n	8005070 <__ieee754_rem_pio2+0x1a0>
 80051b0:	4b1b      	ldr	r3, [pc, #108]	; (8005220 <__ieee754_rem_pio2+0x350>)
 80051b2:	4598      	cmp	r8, r3
 80051b4:	dd36      	ble.n	8005224 <__ieee754_rem_pio2+0x354>
 80051b6:	ee10 2a10 	vmov	r2, s0
 80051ba:	462b      	mov	r3, r5
 80051bc:	4620      	mov	r0, r4
 80051be:	4629      	mov	r1, r5
 80051c0:	f7fb f806 	bl	80001d0 <__aeabi_dsub>
 80051c4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80051c8:	e9ca 0100 	strd	r0, r1, [sl]
 80051cc:	e694      	b.n	8004ef8 <__ieee754_rem_pio2+0x28>
 80051ce:	bf00      	nop
 80051d0:	54400000 	.word	0x54400000
 80051d4:	3ff921fb 	.word	0x3ff921fb
 80051d8:	1a626331 	.word	0x1a626331
 80051dc:	3dd0b461 	.word	0x3dd0b461
 80051e0:	1a600000 	.word	0x1a600000
 80051e4:	3dd0b461 	.word	0x3dd0b461
 80051e8:	2e037073 	.word	0x2e037073
 80051ec:	3ba3198a 	.word	0x3ba3198a
 80051f0:	6dc9c883 	.word	0x6dc9c883
 80051f4:	3fe45f30 	.word	0x3fe45f30
 80051f8:	2e000000 	.word	0x2e000000
 80051fc:	3ba3198a 	.word	0x3ba3198a
 8005200:	252049c1 	.word	0x252049c1
 8005204:	397b839a 	.word	0x397b839a
 8005208:	3fe921fb 	.word	0x3fe921fb
 800520c:	4002d97b 	.word	0x4002d97b
 8005210:	3ff921fb 	.word	0x3ff921fb
 8005214:	413921fb 	.word	0x413921fb
 8005218:	3fe00000 	.word	0x3fe00000
 800521c:	08005ef0 	.word	0x08005ef0
 8005220:	7fefffff 	.word	0x7fefffff
 8005224:	ea4f 5428 	mov.w	r4, r8, asr #20
 8005228:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800522c:	ee10 0a10 	vmov	r0, s0
 8005230:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8005234:	ee10 6a10 	vmov	r6, s0
 8005238:	460f      	mov	r7, r1
 800523a:	f7fb fc1b 	bl	8000a74 <__aeabi_d2iz>
 800523e:	f7fb f915 	bl	800046c <__aeabi_i2d>
 8005242:	4602      	mov	r2, r0
 8005244:	460b      	mov	r3, r1
 8005246:	4630      	mov	r0, r6
 8005248:	4639      	mov	r1, r7
 800524a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800524e:	f7fa ffbf 	bl	80001d0 <__aeabi_dsub>
 8005252:	4b23      	ldr	r3, [pc, #140]	; (80052e0 <__ieee754_rem_pio2+0x410>)
 8005254:	2200      	movs	r2, #0
 8005256:	f7fb f973 	bl	8000540 <__aeabi_dmul>
 800525a:	460f      	mov	r7, r1
 800525c:	4606      	mov	r6, r0
 800525e:	f7fb fc09 	bl	8000a74 <__aeabi_d2iz>
 8005262:	f7fb f903 	bl	800046c <__aeabi_i2d>
 8005266:	4602      	mov	r2, r0
 8005268:	460b      	mov	r3, r1
 800526a:	4630      	mov	r0, r6
 800526c:	4639      	mov	r1, r7
 800526e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005272:	f7fa ffad 	bl	80001d0 <__aeabi_dsub>
 8005276:	4b1a      	ldr	r3, [pc, #104]	; (80052e0 <__ieee754_rem_pio2+0x410>)
 8005278:	2200      	movs	r2, #0
 800527a:	f7fb f961 	bl	8000540 <__aeabi_dmul>
 800527e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005282:	ad04      	add	r5, sp, #16
 8005284:	f04f 0803 	mov.w	r8, #3
 8005288:	46a9      	mov	r9, r5
 800528a:	2600      	movs	r6, #0
 800528c:	2700      	movs	r7, #0
 800528e:	4632      	mov	r2, r6
 8005290:	463b      	mov	r3, r7
 8005292:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8005296:	46c3      	mov	fp, r8
 8005298:	3d08      	subs	r5, #8
 800529a:	f108 38ff 	add.w	r8, r8, #4294967295
 800529e:	f7fb fbb7 	bl	8000a10 <__aeabi_dcmpeq>
 80052a2:	2800      	cmp	r0, #0
 80052a4:	d1f3      	bne.n	800528e <__ieee754_rem_pio2+0x3be>
 80052a6:	4b0f      	ldr	r3, [pc, #60]	; (80052e4 <__ieee754_rem_pio2+0x414>)
 80052a8:	9301      	str	r3, [sp, #4]
 80052aa:	2302      	movs	r3, #2
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	4622      	mov	r2, r4
 80052b0:	465b      	mov	r3, fp
 80052b2:	4651      	mov	r1, sl
 80052b4:	4648      	mov	r0, r9
 80052b6:	f000 f8df 	bl	8005478 <__kernel_rem_pio2>
 80052ba:	9b02      	ldr	r3, [sp, #8]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	4683      	mov	fp, r0
 80052c0:	f6bf ae46 	bge.w	8004f50 <__ieee754_rem_pio2+0x80>
 80052c4:	e9da 2100 	ldrd	r2, r1, [sl]
 80052c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80052cc:	e9ca 2300 	strd	r2, r3, [sl]
 80052d0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80052d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80052d8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80052dc:	e73a      	b.n	8005154 <__ieee754_rem_pio2+0x284>
 80052de:	bf00      	nop
 80052e0:	41700000 	.word	0x41700000
 80052e4:	08005f70 	.word	0x08005f70

080052e8 <__kernel_cos>:
 80052e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ec:	ec57 6b10 	vmov	r6, r7, d0
 80052f0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80052f4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80052f8:	ed8d 1b00 	vstr	d1, [sp]
 80052fc:	da07      	bge.n	800530e <__kernel_cos+0x26>
 80052fe:	ee10 0a10 	vmov	r0, s0
 8005302:	4639      	mov	r1, r7
 8005304:	f7fb fbb6 	bl	8000a74 <__aeabi_d2iz>
 8005308:	2800      	cmp	r0, #0
 800530a:	f000 8088 	beq.w	800541e <__kernel_cos+0x136>
 800530e:	4632      	mov	r2, r6
 8005310:	463b      	mov	r3, r7
 8005312:	4630      	mov	r0, r6
 8005314:	4639      	mov	r1, r7
 8005316:	f7fb f913 	bl	8000540 <__aeabi_dmul>
 800531a:	4b51      	ldr	r3, [pc, #324]	; (8005460 <__kernel_cos+0x178>)
 800531c:	2200      	movs	r2, #0
 800531e:	4604      	mov	r4, r0
 8005320:	460d      	mov	r5, r1
 8005322:	f7fb f90d 	bl	8000540 <__aeabi_dmul>
 8005326:	a340      	add	r3, pc, #256	; (adr r3, 8005428 <__kernel_cos+0x140>)
 8005328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532c:	4682      	mov	sl, r0
 800532e:	468b      	mov	fp, r1
 8005330:	4620      	mov	r0, r4
 8005332:	4629      	mov	r1, r5
 8005334:	f7fb f904 	bl	8000540 <__aeabi_dmul>
 8005338:	a33d      	add	r3, pc, #244	; (adr r3, 8005430 <__kernel_cos+0x148>)
 800533a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533e:	f7fa ff49 	bl	80001d4 <__adddf3>
 8005342:	4622      	mov	r2, r4
 8005344:	462b      	mov	r3, r5
 8005346:	f7fb f8fb 	bl	8000540 <__aeabi_dmul>
 800534a:	a33b      	add	r3, pc, #236	; (adr r3, 8005438 <__kernel_cos+0x150>)
 800534c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005350:	f7fa ff3e 	bl	80001d0 <__aeabi_dsub>
 8005354:	4622      	mov	r2, r4
 8005356:	462b      	mov	r3, r5
 8005358:	f7fb f8f2 	bl	8000540 <__aeabi_dmul>
 800535c:	a338      	add	r3, pc, #224	; (adr r3, 8005440 <__kernel_cos+0x158>)
 800535e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005362:	f7fa ff37 	bl	80001d4 <__adddf3>
 8005366:	4622      	mov	r2, r4
 8005368:	462b      	mov	r3, r5
 800536a:	f7fb f8e9 	bl	8000540 <__aeabi_dmul>
 800536e:	a336      	add	r3, pc, #216	; (adr r3, 8005448 <__kernel_cos+0x160>)
 8005370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005374:	f7fa ff2c 	bl	80001d0 <__aeabi_dsub>
 8005378:	4622      	mov	r2, r4
 800537a:	462b      	mov	r3, r5
 800537c:	f7fb f8e0 	bl	8000540 <__aeabi_dmul>
 8005380:	a333      	add	r3, pc, #204	; (adr r3, 8005450 <__kernel_cos+0x168>)
 8005382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005386:	f7fa ff25 	bl	80001d4 <__adddf3>
 800538a:	4622      	mov	r2, r4
 800538c:	462b      	mov	r3, r5
 800538e:	f7fb f8d7 	bl	8000540 <__aeabi_dmul>
 8005392:	4622      	mov	r2, r4
 8005394:	462b      	mov	r3, r5
 8005396:	f7fb f8d3 	bl	8000540 <__aeabi_dmul>
 800539a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800539e:	4604      	mov	r4, r0
 80053a0:	460d      	mov	r5, r1
 80053a2:	4630      	mov	r0, r6
 80053a4:	4639      	mov	r1, r7
 80053a6:	f7fb f8cb 	bl	8000540 <__aeabi_dmul>
 80053aa:	460b      	mov	r3, r1
 80053ac:	4602      	mov	r2, r0
 80053ae:	4629      	mov	r1, r5
 80053b0:	4620      	mov	r0, r4
 80053b2:	f7fa ff0d 	bl	80001d0 <__aeabi_dsub>
 80053b6:	4b2b      	ldr	r3, [pc, #172]	; (8005464 <__kernel_cos+0x17c>)
 80053b8:	4598      	cmp	r8, r3
 80053ba:	4606      	mov	r6, r0
 80053bc:	460f      	mov	r7, r1
 80053be:	dc10      	bgt.n	80053e2 <__kernel_cos+0xfa>
 80053c0:	4602      	mov	r2, r0
 80053c2:	460b      	mov	r3, r1
 80053c4:	4650      	mov	r0, sl
 80053c6:	4659      	mov	r1, fp
 80053c8:	f7fa ff02 	bl	80001d0 <__aeabi_dsub>
 80053cc:	460b      	mov	r3, r1
 80053ce:	4926      	ldr	r1, [pc, #152]	; (8005468 <__kernel_cos+0x180>)
 80053d0:	4602      	mov	r2, r0
 80053d2:	2000      	movs	r0, #0
 80053d4:	f7fa fefc 	bl	80001d0 <__aeabi_dsub>
 80053d8:	ec41 0b10 	vmov	d0, r0, r1
 80053dc:	b003      	add	sp, #12
 80053de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053e2:	4b22      	ldr	r3, [pc, #136]	; (800546c <__kernel_cos+0x184>)
 80053e4:	4920      	ldr	r1, [pc, #128]	; (8005468 <__kernel_cos+0x180>)
 80053e6:	4598      	cmp	r8, r3
 80053e8:	bfcc      	ite	gt
 80053ea:	4d21      	ldrgt	r5, [pc, #132]	; (8005470 <__kernel_cos+0x188>)
 80053ec:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80053f0:	2400      	movs	r4, #0
 80053f2:	4622      	mov	r2, r4
 80053f4:	462b      	mov	r3, r5
 80053f6:	2000      	movs	r0, #0
 80053f8:	f7fa feea 	bl	80001d0 <__aeabi_dsub>
 80053fc:	4622      	mov	r2, r4
 80053fe:	4680      	mov	r8, r0
 8005400:	4689      	mov	r9, r1
 8005402:	462b      	mov	r3, r5
 8005404:	4650      	mov	r0, sl
 8005406:	4659      	mov	r1, fp
 8005408:	f7fa fee2 	bl	80001d0 <__aeabi_dsub>
 800540c:	4632      	mov	r2, r6
 800540e:	463b      	mov	r3, r7
 8005410:	f7fa fede 	bl	80001d0 <__aeabi_dsub>
 8005414:	4602      	mov	r2, r0
 8005416:	460b      	mov	r3, r1
 8005418:	4640      	mov	r0, r8
 800541a:	4649      	mov	r1, r9
 800541c:	e7da      	b.n	80053d4 <__kernel_cos+0xec>
 800541e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8005458 <__kernel_cos+0x170>
 8005422:	e7db      	b.n	80053dc <__kernel_cos+0xf4>
 8005424:	f3af 8000 	nop.w
 8005428:	be8838d4 	.word	0xbe8838d4
 800542c:	bda8fae9 	.word	0xbda8fae9
 8005430:	bdb4b1c4 	.word	0xbdb4b1c4
 8005434:	3e21ee9e 	.word	0x3e21ee9e
 8005438:	809c52ad 	.word	0x809c52ad
 800543c:	3e927e4f 	.word	0x3e927e4f
 8005440:	19cb1590 	.word	0x19cb1590
 8005444:	3efa01a0 	.word	0x3efa01a0
 8005448:	16c15177 	.word	0x16c15177
 800544c:	3f56c16c 	.word	0x3f56c16c
 8005450:	5555554c 	.word	0x5555554c
 8005454:	3fa55555 	.word	0x3fa55555
 8005458:	00000000 	.word	0x00000000
 800545c:	3ff00000 	.word	0x3ff00000
 8005460:	3fe00000 	.word	0x3fe00000
 8005464:	3fd33332 	.word	0x3fd33332
 8005468:	3ff00000 	.word	0x3ff00000
 800546c:	3fe90000 	.word	0x3fe90000
 8005470:	3fd20000 	.word	0x3fd20000
 8005474:	00000000 	.word	0x00000000

08005478 <__kernel_rem_pio2>:
 8005478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800547c:	ed2d 8b02 	vpush	{d8}
 8005480:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8005484:	f112 0f14 	cmn.w	r2, #20
 8005488:	9308      	str	r3, [sp, #32]
 800548a:	9101      	str	r1, [sp, #4]
 800548c:	4bc4      	ldr	r3, [pc, #784]	; (80057a0 <__kernel_rem_pio2+0x328>)
 800548e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8005490:	900b      	str	r0, [sp, #44]	; 0x2c
 8005492:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005496:	9302      	str	r3, [sp, #8]
 8005498:	9b08      	ldr	r3, [sp, #32]
 800549a:	f103 33ff 	add.w	r3, r3, #4294967295
 800549e:	bfa8      	it	ge
 80054a0:	1ed4      	subge	r4, r2, #3
 80054a2:	9306      	str	r3, [sp, #24]
 80054a4:	bfb2      	itee	lt
 80054a6:	2400      	movlt	r4, #0
 80054a8:	2318      	movge	r3, #24
 80054aa:	fb94 f4f3 	sdivge	r4, r4, r3
 80054ae:	f06f 0317 	mvn.w	r3, #23
 80054b2:	fb04 3303 	mla	r3, r4, r3, r3
 80054b6:	eb03 0a02 	add.w	sl, r3, r2
 80054ba:	9b02      	ldr	r3, [sp, #8]
 80054bc:	9a06      	ldr	r2, [sp, #24]
 80054be:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8005790 <__kernel_rem_pio2+0x318>
 80054c2:	eb03 0802 	add.w	r8, r3, r2
 80054c6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80054c8:	1aa7      	subs	r7, r4, r2
 80054ca:	ae22      	add	r6, sp, #136	; 0x88
 80054cc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80054d0:	2500      	movs	r5, #0
 80054d2:	4545      	cmp	r5, r8
 80054d4:	dd13      	ble.n	80054fe <__kernel_rem_pio2+0x86>
 80054d6:	9b08      	ldr	r3, [sp, #32]
 80054d8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8005790 <__kernel_rem_pio2+0x318>
 80054dc:	aa22      	add	r2, sp, #136	; 0x88
 80054de:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80054e2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80054e6:	f04f 0800 	mov.w	r8, #0
 80054ea:	9b02      	ldr	r3, [sp, #8]
 80054ec:	4598      	cmp	r8, r3
 80054ee:	dc2f      	bgt.n	8005550 <__kernel_rem_pio2+0xd8>
 80054f0:	ed8d 8b04 	vstr	d8, [sp, #16]
 80054f4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80054f8:	462f      	mov	r7, r5
 80054fa:	2600      	movs	r6, #0
 80054fc:	e01b      	b.n	8005536 <__kernel_rem_pio2+0xbe>
 80054fe:	42ef      	cmn	r7, r5
 8005500:	d407      	bmi.n	8005512 <__kernel_rem_pio2+0x9a>
 8005502:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005506:	f7fa ffb1 	bl	800046c <__aeabi_i2d>
 800550a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800550e:	3501      	adds	r5, #1
 8005510:	e7df      	b.n	80054d2 <__kernel_rem_pio2+0x5a>
 8005512:	ec51 0b18 	vmov	r0, r1, d8
 8005516:	e7f8      	b.n	800550a <__kernel_rem_pio2+0x92>
 8005518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800551c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005520:	f7fb f80e 	bl	8000540 <__aeabi_dmul>
 8005524:	4602      	mov	r2, r0
 8005526:	460b      	mov	r3, r1
 8005528:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800552c:	f7fa fe52 	bl	80001d4 <__adddf3>
 8005530:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005534:	3601      	adds	r6, #1
 8005536:	9b06      	ldr	r3, [sp, #24]
 8005538:	429e      	cmp	r6, r3
 800553a:	f1a7 0708 	sub.w	r7, r7, #8
 800553e:	ddeb      	ble.n	8005518 <__kernel_rem_pio2+0xa0>
 8005540:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005544:	f108 0801 	add.w	r8, r8, #1
 8005548:	ecab 7b02 	vstmia	fp!, {d7}
 800554c:	3508      	adds	r5, #8
 800554e:	e7cc      	b.n	80054ea <__kernel_rem_pio2+0x72>
 8005550:	9b02      	ldr	r3, [sp, #8]
 8005552:	aa0e      	add	r2, sp, #56	; 0x38
 8005554:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005558:	930d      	str	r3, [sp, #52]	; 0x34
 800555a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800555c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005560:	9c02      	ldr	r4, [sp, #8]
 8005562:	930c      	str	r3, [sp, #48]	; 0x30
 8005564:	00e3      	lsls	r3, r4, #3
 8005566:	930a      	str	r3, [sp, #40]	; 0x28
 8005568:	ab9a      	add	r3, sp, #616	; 0x268
 800556a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800556e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8005572:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8005576:	ab72      	add	r3, sp, #456	; 0x1c8
 8005578:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800557c:	46c3      	mov	fp, r8
 800557e:	46a1      	mov	r9, r4
 8005580:	f1b9 0f00 	cmp.w	r9, #0
 8005584:	f1a5 0508 	sub.w	r5, r5, #8
 8005588:	dc77      	bgt.n	800567a <__kernel_rem_pio2+0x202>
 800558a:	ec47 6b10 	vmov	d0, r6, r7
 800558e:	4650      	mov	r0, sl
 8005590:	f000 fc0a 	bl	8005da8 <scalbn>
 8005594:	ec57 6b10 	vmov	r6, r7, d0
 8005598:	2200      	movs	r2, #0
 800559a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800559e:	ee10 0a10 	vmov	r0, s0
 80055a2:	4639      	mov	r1, r7
 80055a4:	f7fa ffcc 	bl	8000540 <__aeabi_dmul>
 80055a8:	ec41 0b10 	vmov	d0, r0, r1
 80055ac:	f000 fb7c 	bl	8005ca8 <floor>
 80055b0:	4b7c      	ldr	r3, [pc, #496]	; (80057a4 <__kernel_rem_pio2+0x32c>)
 80055b2:	ec51 0b10 	vmov	r0, r1, d0
 80055b6:	2200      	movs	r2, #0
 80055b8:	f7fa ffc2 	bl	8000540 <__aeabi_dmul>
 80055bc:	4602      	mov	r2, r0
 80055be:	460b      	mov	r3, r1
 80055c0:	4630      	mov	r0, r6
 80055c2:	4639      	mov	r1, r7
 80055c4:	f7fa fe04 	bl	80001d0 <__aeabi_dsub>
 80055c8:	460f      	mov	r7, r1
 80055ca:	4606      	mov	r6, r0
 80055cc:	f7fb fa52 	bl	8000a74 <__aeabi_d2iz>
 80055d0:	9004      	str	r0, [sp, #16]
 80055d2:	f7fa ff4b 	bl	800046c <__aeabi_i2d>
 80055d6:	4602      	mov	r2, r0
 80055d8:	460b      	mov	r3, r1
 80055da:	4630      	mov	r0, r6
 80055dc:	4639      	mov	r1, r7
 80055de:	f7fa fdf7 	bl	80001d0 <__aeabi_dsub>
 80055e2:	f1ba 0f00 	cmp.w	sl, #0
 80055e6:	4606      	mov	r6, r0
 80055e8:	460f      	mov	r7, r1
 80055ea:	dd6d      	ble.n	80056c8 <__kernel_rem_pio2+0x250>
 80055ec:	1e62      	subs	r2, r4, #1
 80055ee:	ab0e      	add	r3, sp, #56	; 0x38
 80055f0:	9d04      	ldr	r5, [sp, #16]
 80055f2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80055f6:	f1ca 0118 	rsb	r1, sl, #24
 80055fa:	fa40 f301 	asr.w	r3, r0, r1
 80055fe:	441d      	add	r5, r3
 8005600:	408b      	lsls	r3, r1
 8005602:	1ac0      	subs	r0, r0, r3
 8005604:	ab0e      	add	r3, sp, #56	; 0x38
 8005606:	9504      	str	r5, [sp, #16]
 8005608:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800560c:	f1ca 0317 	rsb	r3, sl, #23
 8005610:	fa40 fb03 	asr.w	fp, r0, r3
 8005614:	f1bb 0f00 	cmp.w	fp, #0
 8005618:	dd65      	ble.n	80056e6 <__kernel_rem_pio2+0x26e>
 800561a:	9b04      	ldr	r3, [sp, #16]
 800561c:	2200      	movs	r2, #0
 800561e:	3301      	adds	r3, #1
 8005620:	9304      	str	r3, [sp, #16]
 8005622:	4615      	mov	r5, r2
 8005624:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005628:	4294      	cmp	r4, r2
 800562a:	f300 809c 	bgt.w	8005766 <__kernel_rem_pio2+0x2ee>
 800562e:	f1ba 0f00 	cmp.w	sl, #0
 8005632:	dd07      	ble.n	8005644 <__kernel_rem_pio2+0x1cc>
 8005634:	f1ba 0f01 	cmp.w	sl, #1
 8005638:	f000 80c0 	beq.w	80057bc <__kernel_rem_pio2+0x344>
 800563c:	f1ba 0f02 	cmp.w	sl, #2
 8005640:	f000 80c6 	beq.w	80057d0 <__kernel_rem_pio2+0x358>
 8005644:	f1bb 0f02 	cmp.w	fp, #2
 8005648:	d14d      	bne.n	80056e6 <__kernel_rem_pio2+0x26e>
 800564a:	4632      	mov	r2, r6
 800564c:	463b      	mov	r3, r7
 800564e:	4956      	ldr	r1, [pc, #344]	; (80057a8 <__kernel_rem_pio2+0x330>)
 8005650:	2000      	movs	r0, #0
 8005652:	f7fa fdbd 	bl	80001d0 <__aeabi_dsub>
 8005656:	4606      	mov	r6, r0
 8005658:	460f      	mov	r7, r1
 800565a:	2d00      	cmp	r5, #0
 800565c:	d043      	beq.n	80056e6 <__kernel_rem_pio2+0x26e>
 800565e:	4650      	mov	r0, sl
 8005660:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8005798 <__kernel_rem_pio2+0x320>
 8005664:	f000 fba0 	bl	8005da8 <scalbn>
 8005668:	4630      	mov	r0, r6
 800566a:	4639      	mov	r1, r7
 800566c:	ec53 2b10 	vmov	r2, r3, d0
 8005670:	f7fa fdae 	bl	80001d0 <__aeabi_dsub>
 8005674:	4606      	mov	r6, r0
 8005676:	460f      	mov	r7, r1
 8005678:	e035      	b.n	80056e6 <__kernel_rem_pio2+0x26e>
 800567a:	4b4c      	ldr	r3, [pc, #304]	; (80057ac <__kernel_rem_pio2+0x334>)
 800567c:	2200      	movs	r2, #0
 800567e:	4630      	mov	r0, r6
 8005680:	4639      	mov	r1, r7
 8005682:	f7fa ff5d 	bl	8000540 <__aeabi_dmul>
 8005686:	f7fb f9f5 	bl	8000a74 <__aeabi_d2iz>
 800568a:	f7fa feef 	bl	800046c <__aeabi_i2d>
 800568e:	4602      	mov	r2, r0
 8005690:	460b      	mov	r3, r1
 8005692:	ec43 2b18 	vmov	d8, r2, r3
 8005696:	4b46      	ldr	r3, [pc, #280]	; (80057b0 <__kernel_rem_pio2+0x338>)
 8005698:	2200      	movs	r2, #0
 800569a:	f7fa ff51 	bl	8000540 <__aeabi_dmul>
 800569e:	4602      	mov	r2, r0
 80056a0:	460b      	mov	r3, r1
 80056a2:	4630      	mov	r0, r6
 80056a4:	4639      	mov	r1, r7
 80056a6:	f7fa fd93 	bl	80001d0 <__aeabi_dsub>
 80056aa:	f7fb f9e3 	bl	8000a74 <__aeabi_d2iz>
 80056ae:	e9d5 2300 	ldrd	r2, r3, [r5]
 80056b2:	f84b 0b04 	str.w	r0, [fp], #4
 80056b6:	ec51 0b18 	vmov	r0, r1, d8
 80056ba:	f7fa fd8b 	bl	80001d4 <__adddf3>
 80056be:	f109 39ff 	add.w	r9, r9, #4294967295
 80056c2:	4606      	mov	r6, r0
 80056c4:	460f      	mov	r7, r1
 80056c6:	e75b      	b.n	8005580 <__kernel_rem_pio2+0x108>
 80056c8:	d106      	bne.n	80056d8 <__kernel_rem_pio2+0x260>
 80056ca:	1e63      	subs	r3, r4, #1
 80056cc:	aa0e      	add	r2, sp, #56	; 0x38
 80056ce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80056d2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80056d6:	e79d      	b.n	8005614 <__kernel_rem_pio2+0x19c>
 80056d8:	4b36      	ldr	r3, [pc, #216]	; (80057b4 <__kernel_rem_pio2+0x33c>)
 80056da:	2200      	movs	r2, #0
 80056dc:	f7fb f9b6 	bl	8000a4c <__aeabi_dcmpge>
 80056e0:	2800      	cmp	r0, #0
 80056e2:	d13d      	bne.n	8005760 <__kernel_rem_pio2+0x2e8>
 80056e4:	4683      	mov	fp, r0
 80056e6:	2200      	movs	r2, #0
 80056e8:	2300      	movs	r3, #0
 80056ea:	4630      	mov	r0, r6
 80056ec:	4639      	mov	r1, r7
 80056ee:	f7fb f98f 	bl	8000a10 <__aeabi_dcmpeq>
 80056f2:	2800      	cmp	r0, #0
 80056f4:	f000 80c0 	beq.w	8005878 <__kernel_rem_pio2+0x400>
 80056f8:	1e65      	subs	r5, r4, #1
 80056fa:	462b      	mov	r3, r5
 80056fc:	2200      	movs	r2, #0
 80056fe:	9902      	ldr	r1, [sp, #8]
 8005700:	428b      	cmp	r3, r1
 8005702:	da6c      	bge.n	80057de <__kernel_rem_pio2+0x366>
 8005704:	2a00      	cmp	r2, #0
 8005706:	f000 8089 	beq.w	800581c <__kernel_rem_pio2+0x3a4>
 800570a:	ab0e      	add	r3, sp, #56	; 0x38
 800570c:	f1aa 0a18 	sub.w	sl, sl, #24
 8005710:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 80ad 	beq.w	8005874 <__kernel_rem_pio2+0x3fc>
 800571a:	4650      	mov	r0, sl
 800571c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8005798 <__kernel_rem_pio2+0x320>
 8005720:	f000 fb42 	bl	8005da8 <scalbn>
 8005724:	ab9a      	add	r3, sp, #616	; 0x268
 8005726:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800572a:	ec57 6b10 	vmov	r6, r7, d0
 800572e:	00ec      	lsls	r4, r5, #3
 8005730:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8005734:	46aa      	mov	sl, r5
 8005736:	f1ba 0f00 	cmp.w	sl, #0
 800573a:	f280 80d6 	bge.w	80058ea <__kernel_rem_pio2+0x472>
 800573e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8005790 <__kernel_rem_pio2+0x318>
 8005742:	462e      	mov	r6, r5
 8005744:	2e00      	cmp	r6, #0
 8005746:	f2c0 8104 	blt.w	8005952 <__kernel_rem_pio2+0x4da>
 800574a:	ab72      	add	r3, sp, #456	; 0x1c8
 800574c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8005750:	f8df a064 	ldr.w	sl, [pc, #100]	; 80057b8 <__kernel_rem_pio2+0x340>
 8005754:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8005758:	f04f 0800 	mov.w	r8, #0
 800575c:	1baf      	subs	r7, r5, r6
 800575e:	e0ea      	b.n	8005936 <__kernel_rem_pio2+0x4be>
 8005760:	f04f 0b02 	mov.w	fp, #2
 8005764:	e759      	b.n	800561a <__kernel_rem_pio2+0x1a2>
 8005766:	f8d8 3000 	ldr.w	r3, [r8]
 800576a:	b955      	cbnz	r5, 8005782 <__kernel_rem_pio2+0x30a>
 800576c:	b123      	cbz	r3, 8005778 <__kernel_rem_pio2+0x300>
 800576e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005772:	f8c8 3000 	str.w	r3, [r8]
 8005776:	2301      	movs	r3, #1
 8005778:	3201      	adds	r2, #1
 800577a:	f108 0804 	add.w	r8, r8, #4
 800577e:	461d      	mov	r5, r3
 8005780:	e752      	b.n	8005628 <__kernel_rem_pio2+0x1b0>
 8005782:	1acb      	subs	r3, r1, r3
 8005784:	f8c8 3000 	str.w	r3, [r8]
 8005788:	462b      	mov	r3, r5
 800578a:	e7f5      	b.n	8005778 <__kernel_rem_pio2+0x300>
 800578c:	f3af 8000 	nop.w
	...
 800579c:	3ff00000 	.word	0x3ff00000
 80057a0:	080060b8 	.word	0x080060b8
 80057a4:	40200000 	.word	0x40200000
 80057a8:	3ff00000 	.word	0x3ff00000
 80057ac:	3e700000 	.word	0x3e700000
 80057b0:	41700000 	.word	0x41700000
 80057b4:	3fe00000 	.word	0x3fe00000
 80057b8:	08006078 	.word	0x08006078
 80057bc:	1e62      	subs	r2, r4, #1
 80057be:	ab0e      	add	r3, sp, #56	; 0x38
 80057c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057c4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80057c8:	a90e      	add	r1, sp, #56	; 0x38
 80057ca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80057ce:	e739      	b.n	8005644 <__kernel_rem_pio2+0x1cc>
 80057d0:	1e62      	subs	r2, r4, #1
 80057d2:	ab0e      	add	r3, sp, #56	; 0x38
 80057d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057d8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80057dc:	e7f4      	b.n	80057c8 <__kernel_rem_pio2+0x350>
 80057de:	a90e      	add	r1, sp, #56	; 0x38
 80057e0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80057e4:	3b01      	subs	r3, #1
 80057e6:	430a      	orrs	r2, r1
 80057e8:	e789      	b.n	80056fe <__kernel_rem_pio2+0x286>
 80057ea:	3301      	adds	r3, #1
 80057ec:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80057f0:	2900      	cmp	r1, #0
 80057f2:	d0fa      	beq.n	80057ea <__kernel_rem_pio2+0x372>
 80057f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057f6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80057fa:	446a      	add	r2, sp
 80057fc:	3a98      	subs	r2, #152	; 0x98
 80057fe:	920a      	str	r2, [sp, #40]	; 0x28
 8005800:	9a08      	ldr	r2, [sp, #32]
 8005802:	18e3      	adds	r3, r4, r3
 8005804:	18a5      	adds	r5, r4, r2
 8005806:	aa22      	add	r2, sp, #136	; 0x88
 8005808:	f104 0801 	add.w	r8, r4, #1
 800580c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8005810:	9304      	str	r3, [sp, #16]
 8005812:	9b04      	ldr	r3, [sp, #16]
 8005814:	4543      	cmp	r3, r8
 8005816:	da04      	bge.n	8005822 <__kernel_rem_pio2+0x3aa>
 8005818:	461c      	mov	r4, r3
 800581a:	e6a3      	b.n	8005564 <__kernel_rem_pio2+0xec>
 800581c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800581e:	2301      	movs	r3, #1
 8005820:	e7e4      	b.n	80057ec <__kernel_rem_pio2+0x374>
 8005822:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005824:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005828:	f7fa fe20 	bl	800046c <__aeabi_i2d>
 800582c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8005830:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005832:	46ab      	mov	fp, r5
 8005834:	461c      	mov	r4, r3
 8005836:	f04f 0900 	mov.w	r9, #0
 800583a:	2600      	movs	r6, #0
 800583c:	2700      	movs	r7, #0
 800583e:	9b06      	ldr	r3, [sp, #24]
 8005840:	4599      	cmp	r9, r3
 8005842:	dd06      	ble.n	8005852 <__kernel_rem_pio2+0x3da>
 8005844:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005846:	e8e3 6702 	strd	r6, r7, [r3], #8
 800584a:	f108 0801 	add.w	r8, r8, #1
 800584e:	930a      	str	r3, [sp, #40]	; 0x28
 8005850:	e7df      	b.n	8005812 <__kernel_rem_pio2+0x39a>
 8005852:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005856:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800585a:	f7fa fe71 	bl	8000540 <__aeabi_dmul>
 800585e:	4602      	mov	r2, r0
 8005860:	460b      	mov	r3, r1
 8005862:	4630      	mov	r0, r6
 8005864:	4639      	mov	r1, r7
 8005866:	f7fa fcb5 	bl	80001d4 <__adddf3>
 800586a:	f109 0901 	add.w	r9, r9, #1
 800586e:	4606      	mov	r6, r0
 8005870:	460f      	mov	r7, r1
 8005872:	e7e4      	b.n	800583e <__kernel_rem_pio2+0x3c6>
 8005874:	3d01      	subs	r5, #1
 8005876:	e748      	b.n	800570a <__kernel_rem_pio2+0x292>
 8005878:	ec47 6b10 	vmov	d0, r6, r7
 800587c:	f1ca 0000 	rsb	r0, sl, #0
 8005880:	f000 fa92 	bl	8005da8 <scalbn>
 8005884:	ec57 6b10 	vmov	r6, r7, d0
 8005888:	4ba0      	ldr	r3, [pc, #640]	; (8005b0c <__kernel_rem_pio2+0x694>)
 800588a:	ee10 0a10 	vmov	r0, s0
 800588e:	2200      	movs	r2, #0
 8005890:	4639      	mov	r1, r7
 8005892:	f7fb f8db 	bl	8000a4c <__aeabi_dcmpge>
 8005896:	b1f8      	cbz	r0, 80058d8 <__kernel_rem_pio2+0x460>
 8005898:	4b9d      	ldr	r3, [pc, #628]	; (8005b10 <__kernel_rem_pio2+0x698>)
 800589a:	2200      	movs	r2, #0
 800589c:	4630      	mov	r0, r6
 800589e:	4639      	mov	r1, r7
 80058a0:	f7fa fe4e 	bl	8000540 <__aeabi_dmul>
 80058a4:	f7fb f8e6 	bl	8000a74 <__aeabi_d2iz>
 80058a8:	4680      	mov	r8, r0
 80058aa:	f7fa fddf 	bl	800046c <__aeabi_i2d>
 80058ae:	4b97      	ldr	r3, [pc, #604]	; (8005b0c <__kernel_rem_pio2+0x694>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	f7fa fe45 	bl	8000540 <__aeabi_dmul>
 80058b6:	460b      	mov	r3, r1
 80058b8:	4602      	mov	r2, r0
 80058ba:	4639      	mov	r1, r7
 80058bc:	4630      	mov	r0, r6
 80058be:	f7fa fc87 	bl	80001d0 <__aeabi_dsub>
 80058c2:	f7fb f8d7 	bl	8000a74 <__aeabi_d2iz>
 80058c6:	1c65      	adds	r5, r4, #1
 80058c8:	ab0e      	add	r3, sp, #56	; 0x38
 80058ca:	f10a 0a18 	add.w	sl, sl, #24
 80058ce:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80058d2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80058d6:	e720      	b.n	800571a <__kernel_rem_pio2+0x2a2>
 80058d8:	4630      	mov	r0, r6
 80058da:	4639      	mov	r1, r7
 80058dc:	f7fb f8ca 	bl	8000a74 <__aeabi_d2iz>
 80058e0:	ab0e      	add	r3, sp, #56	; 0x38
 80058e2:	4625      	mov	r5, r4
 80058e4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80058e8:	e717      	b.n	800571a <__kernel_rem_pio2+0x2a2>
 80058ea:	ab0e      	add	r3, sp, #56	; 0x38
 80058ec:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 80058f0:	f7fa fdbc 	bl	800046c <__aeabi_i2d>
 80058f4:	4632      	mov	r2, r6
 80058f6:	463b      	mov	r3, r7
 80058f8:	f7fa fe22 	bl	8000540 <__aeabi_dmul>
 80058fc:	4b84      	ldr	r3, [pc, #528]	; (8005b10 <__kernel_rem_pio2+0x698>)
 80058fe:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8005902:	2200      	movs	r2, #0
 8005904:	4630      	mov	r0, r6
 8005906:	4639      	mov	r1, r7
 8005908:	f7fa fe1a 	bl	8000540 <__aeabi_dmul>
 800590c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005910:	4606      	mov	r6, r0
 8005912:	460f      	mov	r7, r1
 8005914:	e70f      	b.n	8005736 <__kernel_rem_pio2+0x2be>
 8005916:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800591a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800591e:	f7fa fe0f 	bl	8000540 <__aeabi_dmul>
 8005922:	4602      	mov	r2, r0
 8005924:	460b      	mov	r3, r1
 8005926:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800592a:	f7fa fc53 	bl	80001d4 <__adddf3>
 800592e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005932:	f108 0801 	add.w	r8, r8, #1
 8005936:	9b02      	ldr	r3, [sp, #8]
 8005938:	4598      	cmp	r8, r3
 800593a:	dc01      	bgt.n	8005940 <__kernel_rem_pio2+0x4c8>
 800593c:	45b8      	cmp	r8, r7
 800593e:	ddea      	ble.n	8005916 <__kernel_rem_pio2+0x49e>
 8005940:	ed9d 7b06 	vldr	d7, [sp, #24]
 8005944:	ab4a      	add	r3, sp, #296	; 0x128
 8005946:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800594a:	ed87 7b00 	vstr	d7, [r7]
 800594e:	3e01      	subs	r6, #1
 8005950:	e6f8      	b.n	8005744 <__kernel_rem_pio2+0x2cc>
 8005952:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005954:	2b02      	cmp	r3, #2
 8005956:	dc0b      	bgt.n	8005970 <__kernel_rem_pio2+0x4f8>
 8005958:	2b00      	cmp	r3, #0
 800595a:	dc35      	bgt.n	80059c8 <__kernel_rem_pio2+0x550>
 800595c:	d059      	beq.n	8005a12 <__kernel_rem_pio2+0x59a>
 800595e:	9b04      	ldr	r3, [sp, #16]
 8005960:	f003 0007 	and.w	r0, r3, #7
 8005964:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005968:	ecbd 8b02 	vpop	{d8}
 800596c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005970:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005972:	2b03      	cmp	r3, #3
 8005974:	d1f3      	bne.n	800595e <__kernel_rem_pio2+0x4e6>
 8005976:	ab4a      	add	r3, sp, #296	; 0x128
 8005978:	4423      	add	r3, r4
 800597a:	9306      	str	r3, [sp, #24]
 800597c:	461c      	mov	r4, r3
 800597e:	469a      	mov	sl, r3
 8005980:	9502      	str	r5, [sp, #8]
 8005982:	9b02      	ldr	r3, [sp, #8]
 8005984:	2b00      	cmp	r3, #0
 8005986:	f1aa 0a08 	sub.w	sl, sl, #8
 800598a:	dc6b      	bgt.n	8005a64 <__kernel_rem_pio2+0x5ec>
 800598c:	46aa      	mov	sl, r5
 800598e:	f1ba 0f01 	cmp.w	sl, #1
 8005992:	f1a4 0408 	sub.w	r4, r4, #8
 8005996:	f300 8085 	bgt.w	8005aa4 <__kernel_rem_pio2+0x62c>
 800599a:	9c06      	ldr	r4, [sp, #24]
 800599c:	2000      	movs	r0, #0
 800599e:	3408      	adds	r4, #8
 80059a0:	2100      	movs	r1, #0
 80059a2:	2d01      	cmp	r5, #1
 80059a4:	f300 809d 	bgt.w	8005ae2 <__kernel_rem_pio2+0x66a>
 80059a8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80059ac:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 80059b0:	f1bb 0f00 	cmp.w	fp, #0
 80059b4:	f040 809b 	bne.w	8005aee <__kernel_rem_pio2+0x676>
 80059b8:	9b01      	ldr	r3, [sp, #4]
 80059ba:	e9c3 5600 	strd	r5, r6, [r3]
 80059be:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80059c2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80059c6:	e7ca      	b.n	800595e <__kernel_rem_pio2+0x4e6>
 80059c8:	3408      	adds	r4, #8
 80059ca:	ab4a      	add	r3, sp, #296	; 0x128
 80059cc:	441c      	add	r4, r3
 80059ce:	462e      	mov	r6, r5
 80059d0:	2000      	movs	r0, #0
 80059d2:	2100      	movs	r1, #0
 80059d4:	2e00      	cmp	r6, #0
 80059d6:	da36      	bge.n	8005a46 <__kernel_rem_pio2+0x5ce>
 80059d8:	f1bb 0f00 	cmp.w	fp, #0
 80059dc:	d039      	beq.n	8005a52 <__kernel_rem_pio2+0x5da>
 80059de:	4602      	mov	r2, r0
 80059e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80059e4:	9c01      	ldr	r4, [sp, #4]
 80059e6:	e9c4 2300 	strd	r2, r3, [r4]
 80059ea:	4602      	mov	r2, r0
 80059ec:	460b      	mov	r3, r1
 80059ee:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80059f2:	f7fa fbed 	bl	80001d0 <__aeabi_dsub>
 80059f6:	ae4c      	add	r6, sp, #304	; 0x130
 80059f8:	2401      	movs	r4, #1
 80059fa:	42a5      	cmp	r5, r4
 80059fc:	da2c      	bge.n	8005a58 <__kernel_rem_pio2+0x5e0>
 80059fe:	f1bb 0f00 	cmp.w	fp, #0
 8005a02:	d002      	beq.n	8005a0a <__kernel_rem_pio2+0x592>
 8005a04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005a08:	4619      	mov	r1, r3
 8005a0a:	9b01      	ldr	r3, [sp, #4]
 8005a0c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005a10:	e7a5      	b.n	800595e <__kernel_rem_pio2+0x4e6>
 8005a12:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8005a16:	eb0d 0403 	add.w	r4, sp, r3
 8005a1a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005a1e:	2000      	movs	r0, #0
 8005a20:	2100      	movs	r1, #0
 8005a22:	2d00      	cmp	r5, #0
 8005a24:	da09      	bge.n	8005a3a <__kernel_rem_pio2+0x5c2>
 8005a26:	f1bb 0f00 	cmp.w	fp, #0
 8005a2a:	d002      	beq.n	8005a32 <__kernel_rem_pio2+0x5ba>
 8005a2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005a30:	4619      	mov	r1, r3
 8005a32:	9b01      	ldr	r3, [sp, #4]
 8005a34:	e9c3 0100 	strd	r0, r1, [r3]
 8005a38:	e791      	b.n	800595e <__kernel_rem_pio2+0x4e6>
 8005a3a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005a3e:	f7fa fbc9 	bl	80001d4 <__adddf3>
 8005a42:	3d01      	subs	r5, #1
 8005a44:	e7ed      	b.n	8005a22 <__kernel_rem_pio2+0x5aa>
 8005a46:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005a4a:	f7fa fbc3 	bl	80001d4 <__adddf3>
 8005a4e:	3e01      	subs	r6, #1
 8005a50:	e7c0      	b.n	80059d4 <__kernel_rem_pio2+0x55c>
 8005a52:	4602      	mov	r2, r0
 8005a54:	460b      	mov	r3, r1
 8005a56:	e7c5      	b.n	80059e4 <__kernel_rem_pio2+0x56c>
 8005a58:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8005a5c:	f7fa fbba 	bl	80001d4 <__adddf3>
 8005a60:	3401      	adds	r4, #1
 8005a62:	e7ca      	b.n	80059fa <__kernel_rem_pio2+0x582>
 8005a64:	e9da 8900 	ldrd	r8, r9, [sl]
 8005a68:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8005a6c:	9b02      	ldr	r3, [sp, #8]
 8005a6e:	3b01      	subs	r3, #1
 8005a70:	9302      	str	r3, [sp, #8]
 8005a72:	4632      	mov	r2, r6
 8005a74:	463b      	mov	r3, r7
 8005a76:	4640      	mov	r0, r8
 8005a78:	4649      	mov	r1, r9
 8005a7a:	f7fa fbab 	bl	80001d4 <__adddf3>
 8005a7e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005a82:	4602      	mov	r2, r0
 8005a84:	460b      	mov	r3, r1
 8005a86:	4640      	mov	r0, r8
 8005a88:	4649      	mov	r1, r9
 8005a8a:	f7fa fba1 	bl	80001d0 <__aeabi_dsub>
 8005a8e:	4632      	mov	r2, r6
 8005a90:	463b      	mov	r3, r7
 8005a92:	f7fa fb9f 	bl	80001d4 <__adddf3>
 8005a96:	ed9d 7b08 	vldr	d7, [sp, #32]
 8005a9a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005a9e:	ed8a 7b00 	vstr	d7, [sl]
 8005aa2:	e76e      	b.n	8005982 <__kernel_rem_pio2+0x50a>
 8005aa4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005aa8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8005aac:	4640      	mov	r0, r8
 8005aae:	4632      	mov	r2, r6
 8005ab0:	463b      	mov	r3, r7
 8005ab2:	4649      	mov	r1, r9
 8005ab4:	f7fa fb8e 	bl	80001d4 <__adddf3>
 8005ab8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005abc:	4602      	mov	r2, r0
 8005abe:	460b      	mov	r3, r1
 8005ac0:	4640      	mov	r0, r8
 8005ac2:	4649      	mov	r1, r9
 8005ac4:	f7fa fb84 	bl	80001d0 <__aeabi_dsub>
 8005ac8:	4632      	mov	r2, r6
 8005aca:	463b      	mov	r3, r7
 8005acc:	f7fa fb82 	bl	80001d4 <__adddf3>
 8005ad0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005ad4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005ad8:	ed84 7b00 	vstr	d7, [r4]
 8005adc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ae0:	e755      	b.n	800598e <__kernel_rem_pio2+0x516>
 8005ae2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005ae6:	f7fa fb75 	bl	80001d4 <__adddf3>
 8005aea:	3d01      	subs	r5, #1
 8005aec:	e759      	b.n	80059a2 <__kernel_rem_pio2+0x52a>
 8005aee:	9b01      	ldr	r3, [sp, #4]
 8005af0:	9a01      	ldr	r2, [sp, #4]
 8005af2:	601d      	str	r5, [r3, #0]
 8005af4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8005af8:	605c      	str	r4, [r3, #4]
 8005afa:	609f      	str	r7, [r3, #8]
 8005afc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8005b00:	60d3      	str	r3, [r2, #12]
 8005b02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b06:	6110      	str	r0, [r2, #16]
 8005b08:	6153      	str	r3, [r2, #20]
 8005b0a:	e728      	b.n	800595e <__kernel_rem_pio2+0x4e6>
 8005b0c:	41700000 	.word	0x41700000
 8005b10:	3e700000 	.word	0x3e700000
 8005b14:	00000000 	.word	0x00000000

08005b18 <__kernel_sin>:
 8005b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b1c:	ed2d 8b04 	vpush	{d8-d9}
 8005b20:	eeb0 8a41 	vmov.f32	s16, s2
 8005b24:	eef0 8a61 	vmov.f32	s17, s3
 8005b28:	ec55 4b10 	vmov	r4, r5, d0
 8005b2c:	b083      	sub	sp, #12
 8005b2e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005b32:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005b36:	9001      	str	r0, [sp, #4]
 8005b38:	da06      	bge.n	8005b48 <__kernel_sin+0x30>
 8005b3a:	ee10 0a10 	vmov	r0, s0
 8005b3e:	4629      	mov	r1, r5
 8005b40:	f7fa ff98 	bl	8000a74 <__aeabi_d2iz>
 8005b44:	2800      	cmp	r0, #0
 8005b46:	d051      	beq.n	8005bec <__kernel_sin+0xd4>
 8005b48:	4622      	mov	r2, r4
 8005b4a:	462b      	mov	r3, r5
 8005b4c:	4620      	mov	r0, r4
 8005b4e:	4629      	mov	r1, r5
 8005b50:	f7fa fcf6 	bl	8000540 <__aeabi_dmul>
 8005b54:	4682      	mov	sl, r0
 8005b56:	468b      	mov	fp, r1
 8005b58:	4602      	mov	r2, r0
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	4620      	mov	r0, r4
 8005b5e:	4629      	mov	r1, r5
 8005b60:	f7fa fcee 	bl	8000540 <__aeabi_dmul>
 8005b64:	a341      	add	r3, pc, #260	; (adr r3, 8005c6c <__kernel_sin+0x154>)
 8005b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6a:	4680      	mov	r8, r0
 8005b6c:	4689      	mov	r9, r1
 8005b6e:	4650      	mov	r0, sl
 8005b70:	4659      	mov	r1, fp
 8005b72:	f7fa fce5 	bl	8000540 <__aeabi_dmul>
 8005b76:	a33f      	add	r3, pc, #252	; (adr r3, 8005c74 <__kernel_sin+0x15c>)
 8005b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7c:	f7fa fb28 	bl	80001d0 <__aeabi_dsub>
 8005b80:	4652      	mov	r2, sl
 8005b82:	465b      	mov	r3, fp
 8005b84:	f7fa fcdc 	bl	8000540 <__aeabi_dmul>
 8005b88:	a33c      	add	r3, pc, #240	; (adr r3, 8005c7c <__kernel_sin+0x164>)
 8005b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8e:	f7fa fb21 	bl	80001d4 <__adddf3>
 8005b92:	4652      	mov	r2, sl
 8005b94:	465b      	mov	r3, fp
 8005b96:	f7fa fcd3 	bl	8000540 <__aeabi_dmul>
 8005b9a:	a33a      	add	r3, pc, #232	; (adr r3, 8005c84 <__kernel_sin+0x16c>)
 8005b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba0:	f7fa fb16 	bl	80001d0 <__aeabi_dsub>
 8005ba4:	4652      	mov	r2, sl
 8005ba6:	465b      	mov	r3, fp
 8005ba8:	f7fa fcca 	bl	8000540 <__aeabi_dmul>
 8005bac:	a337      	add	r3, pc, #220	; (adr r3, 8005c8c <__kernel_sin+0x174>)
 8005bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb2:	f7fa fb0f 	bl	80001d4 <__adddf3>
 8005bb6:	9b01      	ldr	r3, [sp, #4]
 8005bb8:	4606      	mov	r6, r0
 8005bba:	460f      	mov	r7, r1
 8005bbc:	b9eb      	cbnz	r3, 8005bfa <__kernel_sin+0xe2>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	4650      	mov	r0, sl
 8005bc4:	4659      	mov	r1, fp
 8005bc6:	f7fa fcbb 	bl	8000540 <__aeabi_dmul>
 8005bca:	a325      	add	r3, pc, #148	; (adr r3, 8005c60 <__kernel_sin+0x148>)
 8005bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd0:	f7fa fafe 	bl	80001d0 <__aeabi_dsub>
 8005bd4:	4642      	mov	r2, r8
 8005bd6:	464b      	mov	r3, r9
 8005bd8:	f7fa fcb2 	bl	8000540 <__aeabi_dmul>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	460b      	mov	r3, r1
 8005be0:	4620      	mov	r0, r4
 8005be2:	4629      	mov	r1, r5
 8005be4:	f7fa faf6 	bl	80001d4 <__adddf3>
 8005be8:	4604      	mov	r4, r0
 8005bea:	460d      	mov	r5, r1
 8005bec:	ec45 4b10 	vmov	d0, r4, r5
 8005bf0:	b003      	add	sp, #12
 8005bf2:	ecbd 8b04 	vpop	{d8-d9}
 8005bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bfa:	4b1b      	ldr	r3, [pc, #108]	; (8005c68 <__kernel_sin+0x150>)
 8005bfc:	ec51 0b18 	vmov	r0, r1, d8
 8005c00:	2200      	movs	r2, #0
 8005c02:	f7fa fc9d 	bl	8000540 <__aeabi_dmul>
 8005c06:	4632      	mov	r2, r6
 8005c08:	ec41 0b19 	vmov	d9, r0, r1
 8005c0c:	463b      	mov	r3, r7
 8005c0e:	4640      	mov	r0, r8
 8005c10:	4649      	mov	r1, r9
 8005c12:	f7fa fc95 	bl	8000540 <__aeabi_dmul>
 8005c16:	4602      	mov	r2, r0
 8005c18:	460b      	mov	r3, r1
 8005c1a:	ec51 0b19 	vmov	r0, r1, d9
 8005c1e:	f7fa fad7 	bl	80001d0 <__aeabi_dsub>
 8005c22:	4652      	mov	r2, sl
 8005c24:	465b      	mov	r3, fp
 8005c26:	f7fa fc8b 	bl	8000540 <__aeabi_dmul>
 8005c2a:	ec53 2b18 	vmov	r2, r3, d8
 8005c2e:	f7fa facf 	bl	80001d0 <__aeabi_dsub>
 8005c32:	a30b      	add	r3, pc, #44	; (adr r3, 8005c60 <__kernel_sin+0x148>)
 8005c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c38:	4606      	mov	r6, r0
 8005c3a:	460f      	mov	r7, r1
 8005c3c:	4640      	mov	r0, r8
 8005c3e:	4649      	mov	r1, r9
 8005c40:	f7fa fc7e 	bl	8000540 <__aeabi_dmul>
 8005c44:	4602      	mov	r2, r0
 8005c46:	460b      	mov	r3, r1
 8005c48:	4630      	mov	r0, r6
 8005c4a:	4639      	mov	r1, r7
 8005c4c:	f7fa fac2 	bl	80001d4 <__adddf3>
 8005c50:	4602      	mov	r2, r0
 8005c52:	460b      	mov	r3, r1
 8005c54:	4620      	mov	r0, r4
 8005c56:	4629      	mov	r1, r5
 8005c58:	f7fa faba 	bl	80001d0 <__aeabi_dsub>
 8005c5c:	e7c4      	b.n	8005be8 <__kernel_sin+0xd0>
 8005c5e:	bf00      	nop
 8005c60:	55555549 	.word	0x55555549
 8005c64:	3fc55555 	.word	0x3fc55555
 8005c68:	3fe00000 	.word	0x3fe00000
 8005c6c:	5acfd57c 	.word	0x5acfd57c
 8005c70:	3de5d93a 	.word	0x3de5d93a
 8005c74:	8a2b9ceb 	.word	0x8a2b9ceb
 8005c78:	3e5ae5e6 	.word	0x3e5ae5e6
 8005c7c:	57b1fe7d 	.word	0x57b1fe7d
 8005c80:	3ec71de3 	.word	0x3ec71de3
 8005c84:	19c161d5 	.word	0x19c161d5
 8005c88:	3f2a01a0 	.word	0x3f2a01a0
 8005c8c:	1110f8a6 	.word	0x1110f8a6
 8005c90:	3f811111 	.word	0x3f811111

08005c94 <fabs>:
 8005c94:	ec51 0b10 	vmov	r0, r1, d0
 8005c98:	ee10 2a10 	vmov	r2, s0
 8005c9c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005ca0:	ec43 2b10 	vmov	d0, r2, r3
 8005ca4:	4770      	bx	lr
	...

08005ca8 <floor>:
 8005ca8:	ec51 0b10 	vmov	r0, r1, d0
 8005cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cb0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005cb4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005cb8:	2e13      	cmp	r6, #19
 8005cba:	ee10 5a10 	vmov	r5, s0
 8005cbe:	ee10 8a10 	vmov	r8, s0
 8005cc2:	460c      	mov	r4, r1
 8005cc4:	dc32      	bgt.n	8005d2c <floor+0x84>
 8005cc6:	2e00      	cmp	r6, #0
 8005cc8:	da14      	bge.n	8005cf4 <floor+0x4c>
 8005cca:	a333      	add	r3, pc, #204	; (adr r3, 8005d98 <floor+0xf0>)
 8005ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd0:	f7fa fa80 	bl	80001d4 <__adddf3>
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	f7fa fec2 	bl	8000a60 <__aeabi_dcmpgt>
 8005cdc:	b138      	cbz	r0, 8005cee <floor+0x46>
 8005cde:	2c00      	cmp	r4, #0
 8005ce0:	da57      	bge.n	8005d92 <floor+0xea>
 8005ce2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005ce6:	431d      	orrs	r5, r3
 8005ce8:	d001      	beq.n	8005cee <floor+0x46>
 8005cea:	4c2d      	ldr	r4, [pc, #180]	; (8005da0 <floor+0xf8>)
 8005cec:	2500      	movs	r5, #0
 8005cee:	4621      	mov	r1, r4
 8005cf0:	4628      	mov	r0, r5
 8005cf2:	e025      	b.n	8005d40 <floor+0x98>
 8005cf4:	4f2b      	ldr	r7, [pc, #172]	; (8005da4 <floor+0xfc>)
 8005cf6:	4137      	asrs	r7, r6
 8005cf8:	ea01 0307 	and.w	r3, r1, r7
 8005cfc:	4303      	orrs	r3, r0
 8005cfe:	d01f      	beq.n	8005d40 <floor+0x98>
 8005d00:	a325      	add	r3, pc, #148	; (adr r3, 8005d98 <floor+0xf0>)
 8005d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d06:	f7fa fa65 	bl	80001d4 <__adddf3>
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	f7fa fea7 	bl	8000a60 <__aeabi_dcmpgt>
 8005d12:	2800      	cmp	r0, #0
 8005d14:	d0eb      	beq.n	8005cee <floor+0x46>
 8005d16:	2c00      	cmp	r4, #0
 8005d18:	bfbe      	ittt	lt
 8005d1a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005d1e:	fa43 f606 	asrlt.w	r6, r3, r6
 8005d22:	19a4      	addlt	r4, r4, r6
 8005d24:	ea24 0407 	bic.w	r4, r4, r7
 8005d28:	2500      	movs	r5, #0
 8005d2a:	e7e0      	b.n	8005cee <floor+0x46>
 8005d2c:	2e33      	cmp	r6, #51	; 0x33
 8005d2e:	dd0b      	ble.n	8005d48 <floor+0xa0>
 8005d30:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005d34:	d104      	bne.n	8005d40 <floor+0x98>
 8005d36:	ee10 2a10 	vmov	r2, s0
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	f7fa fa4a 	bl	80001d4 <__adddf3>
 8005d40:	ec41 0b10 	vmov	d0, r0, r1
 8005d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d48:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005d4c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d50:	fa23 f707 	lsr.w	r7, r3, r7
 8005d54:	4207      	tst	r7, r0
 8005d56:	d0f3      	beq.n	8005d40 <floor+0x98>
 8005d58:	a30f      	add	r3, pc, #60	; (adr r3, 8005d98 <floor+0xf0>)
 8005d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5e:	f7fa fa39 	bl	80001d4 <__adddf3>
 8005d62:	2200      	movs	r2, #0
 8005d64:	2300      	movs	r3, #0
 8005d66:	f7fa fe7b 	bl	8000a60 <__aeabi_dcmpgt>
 8005d6a:	2800      	cmp	r0, #0
 8005d6c:	d0bf      	beq.n	8005cee <floor+0x46>
 8005d6e:	2c00      	cmp	r4, #0
 8005d70:	da02      	bge.n	8005d78 <floor+0xd0>
 8005d72:	2e14      	cmp	r6, #20
 8005d74:	d103      	bne.n	8005d7e <floor+0xd6>
 8005d76:	3401      	adds	r4, #1
 8005d78:	ea25 0507 	bic.w	r5, r5, r7
 8005d7c:	e7b7      	b.n	8005cee <floor+0x46>
 8005d7e:	2301      	movs	r3, #1
 8005d80:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005d84:	fa03 f606 	lsl.w	r6, r3, r6
 8005d88:	4435      	add	r5, r6
 8005d8a:	4545      	cmp	r5, r8
 8005d8c:	bf38      	it	cc
 8005d8e:	18e4      	addcc	r4, r4, r3
 8005d90:	e7f2      	b.n	8005d78 <floor+0xd0>
 8005d92:	2500      	movs	r5, #0
 8005d94:	462c      	mov	r4, r5
 8005d96:	e7aa      	b.n	8005cee <floor+0x46>
 8005d98:	8800759c 	.word	0x8800759c
 8005d9c:	7e37e43c 	.word	0x7e37e43c
 8005da0:	bff00000 	.word	0xbff00000
 8005da4:	000fffff 	.word	0x000fffff

08005da8 <scalbn>:
 8005da8:	b570      	push	{r4, r5, r6, lr}
 8005daa:	ec55 4b10 	vmov	r4, r5, d0
 8005dae:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005db2:	4606      	mov	r6, r0
 8005db4:	462b      	mov	r3, r5
 8005db6:	b99a      	cbnz	r2, 8005de0 <scalbn+0x38>
 8005db8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005dbc:	4323      	orrs	r3, r4
 8005dbe:	d036      	beq.n	8005e2e <scalbn+0x86>
 8005dc0:	4b39      	ldr	r3, [pc, #228]	; (8005ea8 <scalbn+0x100>)
 8005dc2:	4629      	mov	r1, r5
 8005dc4:	ee10 0a10 	vmov	r0, s0
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f7fa fbb9 	bl	8000540 <__aeabi_dmul>
 8005dce:	4b37      	ldr	r3, [pc, #220]	; (8005eac <scalbn+0x104>)
 8005dd0:	429e      	cmp	r6, r3
 8005dd2:	4604      	mov	r4, r0
 8005dd4:	460d      	mov	r5, r1
 8005dd6:	da10      	bge.n	8005dfa <scalbn+0x52>
 8005dd8:	a32b      	add	r3, pc, #172	; (adr r3, 8005e88 <scalbn+0xe0>)
 8005dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dde:	e03a      	b.n	8005e56 <scalbn+0xae>
 8005de0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005de4:	428a      	cmp	r2, r1
 8005de6:	d10c      	bne.n	8005e02 <scalbn+0x5a>
 8005de8:	ee10 2a10 	vmov	r2, s0
 8005dec:	4620      	mov	r0, r4
 8005dee:	4629      	mov	r1, r5
 8005df0:	f7fa f9f0 	bl	80001d4 <__adddf3>
 8005df4:	4604      	mov	r4, r0
 8005df6:	460d      	mov	r5, r1
 8005df8:	e019      	b.n	8005e2e <scalbn+0x86>
 8005dfa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005dfe:	460b      	mov	r3, r1
 8005e00:	3a36      	subs	r2, #54	; 0x36
 8005e02:	4432      	add	r2, r6
 8005e04:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005e08:	428a      	cmp	r2, r1
 8005e0a:	dd08      	ble.n	8005e1e <scalbn+0x76>
 8005e0c:	2d00      	cmp	r5, #0
 8005e0e:	a120      	add	r1, pc, #128	; (adr r1, 8005e90 <scalbn+0xe8>)
 8005e10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e14:	da1c      	bge.n	8005e50 <scalbn+0xa8>
 8005e16:	a120      	add	r1, pc, #128	; (adr r1, 8005e98 <scalbn+0xf0>)
 8005e18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e1c:	e018      	b.n	8005e50 <scalbn+0xa8>
 8005e1e:	2a00      	cmp	r2, #0
 8005e20:	dd08      	ble.n	8005e34 <scalbn+0x8c>
 8005e22:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005e26:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005e2a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005e2e:	ec45 4b10 	vmov	d0, r4, r5
 8005e32:	bd70      	pop	{r4, r5, r6, pc}
 8005e34:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005e38:	da19      	bge.n	8005e6e <scalbn+0xc6>
 8005e3a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005e3e:	429e      	cmp	r6, r3
 8005e40:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005e44:	dd0a      	ble.n	8005e5c <scalbn+0xb4>
 8005e46:	a112      	add	r1, pc, #72	; (adr r1, 8005e90 <scalbn+0xe8>)
 8005e48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1e2      	bne.n	8005e16 <scalbn+0x6e>
 8005e50:	a30f      	add	r3, pc, #60	; (adr r3, 8005e90 <scalbn+0xe8>)
 8005e52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e56:	f7fa fb73 	bl	8000540 <__aeabi_dmul>
 8005e5a:	e7cb      	b.n	8005df4 <scalbn+0x4c>
 8005e5c:	a10a      	add	r1, pc, #40	; (adr r1, 8005e88 <scalbn+0xe0>)
 8005e5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d0b8      	beq.n	8005dd8 <scalbn+0x30>
 8005e66:	a10e      	add	r1, pc, #56	; (adr r1, 8005ea0 <scalbn+0xf8>)
 8005e68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e6c:	e7b4      	b.n	8005dd8 <scalbn+0x30>
 8005e6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005e72:	3236      	adds	r2, #54	; 0x36
 8005e74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005e78:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	4b0c      	ldr	r3, [pc, #48]	; (8005eb0 <scalbn+0x108>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	e7e8      	b.n	8005e56 <scalbn+0xae>
 8005e84:	f3af 8000 	nop.w
 8005e88:	c2f8f359 	.word	0xc2f8f359
 8005e8c:	01a56e1f 	.word	0x01a56e1f
 8005e90:	8800759c 	.word	0x8800759c
 8005e94:	7e37e43c 	.word	0x7e37e43c
 8005e98:	8800759c 	.word	0x8800759c
 8005e9c:	fe37e43c 	.word	0xfe37e43c
 8005ea0:	c2f8f359 	.word	0xc2f8f359
 8005ea4:	81a56e1f 	.word	0x81a56e1f
 8005ea8:	43500000 	.word	0x43500000
 8005eac:	ffff3cb0 	.word	0xffff3cb0
 8005eb0:	3c900000 	.word	0x3c900000

08005eb4 <_init>:
 8005eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eb6:	bf00      	nop
 8005eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005eba:	bc08      	pop	{r3}
 8005ebc:	469e      	mov	lr, r3
 8005ebe:	4770      	bx	lr

08005ec0 <_fini>:
 8005ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ec2:	bf00      	nop
 8005ec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ec6:	bc08      	pop	{r3}
 8005ec8:	469e      	mov	lr, r3
 8005eca:	4770      	bx	lr
